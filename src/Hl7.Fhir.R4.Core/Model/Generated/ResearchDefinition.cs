// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A research context or question
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ResearchDefinition","http://hl7.org/fhir/StructureDefinition/ResearchDefinition", IsResource=true)]
  public partial class ResearchDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ResearchDefinition"; } }

    /// <summary>
    /// Canonical identifier for this research definition, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this research definition, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the research definition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the research definition
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the research definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this research definition (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this research definition (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this research definition (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this research definition (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Title for use in informal contexts
    /// </summary>
    [FhirElement("shortTitle", Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ShortTitleElement
    {
      get { return _ShortTitleElement; }
      set { _ShortTitleElement = value; OnPropertyChanged("ShortTitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ShortTitleElement;

    /// <summary>
    /// Title for use in informal contexts
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ShortTitle
    {
      get { return ShortTitleElement != null ? ShortTitleElement.Value : null; }
      set
      {
        if (value == null)
          ShortTitleElement = null;
        else
          ShortTitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("ShortTitle");
      }
    }

    /// <summary>
    /// Subordinate title of the ResearchDefinition
    /// </summary>
    [FhirElement("subtitle", Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString SubtitleElement
    {
      get { return _SubtitleElement; }
      set { _SubtitleElement = value; OnPropertyChanged("SubtitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _SubtitleElement;

    /// <summary>
    /// Subordinate title of the ResearchDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Subtitle
    {
      get { return SubtitleElement != null ? SubtitleElement.Value : null; }
      set
      {
        if (value == null)
          SubtitleElement = null;
        else
          SubtitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Subtitle");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=160, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=170, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// E.g. Patient, Practitioner, RelatedPerson, Organization, Location, Device
    /// </summary>
    [FhirElement("subject", Order=180, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Group")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.DataType _Subject;

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=190, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=200, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the research definition
    /// </summary>
    [FhirElement("description", InSummary=true, Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// Used for footnotes or explanatory notes
    /// </summary>
    [FhirElement("comment", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirString> CommentElement
    {
      get { if(_CommentElement==null) _CommentElement = new List<Hl7.Fhir.Model.FhirString>(); return _CommentElement; }
      set { _CommentElement = value; OnPropertyChanged("CommentElement"); }
    }

    private List<Hl7.Fhir.Model.FhirString> _CommentElement;

    /// <summary>
    /// Used for footnotes or explanatory notes
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Comment
    {
      get { return CommentElement != null ? CommentElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          CommentElement = null;
        else
          CommentElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
        OnPropertyChanged("Comment");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for research definition (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this research definition is defined
    /// </summary>
    [FhirElement("purpose", Order=260, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Purpose
    {
      get { return _Purpose; }
      set { _Purpose = value; OnPropertyChanged("Purpose"); }
    }

    private Hl7.Fhir.Model.Markdown _Purpose;

    /// <summary>
    /// Describes the clinical usage of the ResearchDefinition
    /// </summary>
    [FhirElement("usage", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString UsageElement
    {
      get { return _UsageElement; }
      set { _UsageElement = value; OnPropertyChanged("UsageElement"); }
    }

    private Hl7.Fhir.Model.FhirString _UsageElement;

    /// <summary>
    /// Describes the clinical usage of the ResearchDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Usage
    {
      get { return UsageElement != null ? UsageElement.Value : null; }
      set
      {
        if (value == null)
          UsageElement = null;
        else
          UsageElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Usage");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Copyright
    {
      get { return _Copyright; }
      set { _Copyright = value; OnPropertyChanged("Copyright"); }
    }

    private Hl7.Fhir.Model.Markdown _Copyright;

    /// <summary>
    /// When the research definition was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When the research definition was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// When the research definition was last reviewed
    /// </summary>
    [FhirElement("lastReviewDate", Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// When the research definition was last reviewed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// When the research definition is expected to be used
    /// </summary>
    [FhirElement("effectivePeriod", InSummary=true, Order=310)]
    [DataMember]
    public Hl7.Fhir.Model.Period EffectivePeriod
    {
      get { return _EffectivePeriod; }
      set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
    }

    private Hl7.Fhir.Model.Period _EffectivePeriod;

    /// <summary>
    /// The category of the ResearchDefinition, such as Education, Treatment, Assessment, etc.
    /// </summary>
    [FhirElement("topic", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Topic
    {
      get { if(_Topic==null) _Topic = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Topic; }
      set { _Topic = value; OnPropertyChanged("Topic"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Topic;

    /// <summary>
    /// Who authored the content
    /// </summary>
    [FhirElement("author", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ContactDetail>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Author;

    /// <summary>
    /// Who edited the content
    /// </summary>
    [FhirElement("editor", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Editor
    {
      get { if(_Editor==null) _Editor = new List<Hl7.Fhir.Model.ContactDetail>(); return _Editor; }
      set { _Editor = value; OnPropertyChanged("Editor"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Editor;

    /// <summary>
    /// Who reviewed the content
    /// </summary>
    [FhirElement("reviewer", Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Reviewer
    {
      get { if(_Reviewer==null) _Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(); return _Reviewer; }
      set { _Reviewer = value; OnPropertyChanged("Reviewer"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Reviewer;

    /// <summary>
    /// Who endorsed the content
    /// </summary>
    [FhirElement("endorser", Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Endorser
    {
      get { if(_Endorser==null) _Endorser = new List<Hl7.Fhir.Model.ContactDetail>(); return _Endorser; }
      set { _Endorser = value; OnPropertyChanged("Endorser"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Endorser;

    /// <summary>
    /// Additional documentation, citations, etc.
    /// </summary>
    [FhirElement("relatedArtifact", Order=370)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Logic used by the ResearchDefinition
    /// </summary>
    [FhirElement("library", Order=380)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> LibraryElement
    {
      get { if(_LibraryElement==null) _LibraryElement = new List<Hl7.Fhir.Model.Canonical>(); return _LibraryElement; }
      set { _LibraryElement = value; OnPropertyChanged("LibraryElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _LibraryElement;

    /// <summary>
    /// Logic used by the ResearchDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Library
    {
      get { return LibraryElement != null ? LibraryElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          LibraryElement = null;
        else
          LibraryElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("Library");
      }
    }

    /// <summary>
    /// What population?
    /// </summary>
    [FhirElement("population", InSummary=true, Order=390)]
    [CLSCompliant(false)]
    [References("ResearchElementDefinition")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Population
    {
      get { return _Population; }
      set { _Population = value; OnPropertyChanged("Population"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Population;

    /// <summary>
    /// What exposure?
    /// </summary>
    [FhirElement("exposure", InSummary=true, Order=400)]
    [CLSCompliant(false)]
    [References("ResearchElementDefinition")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Exposure
    {
      get { return _Exposure; }
      set { _Exposure = value; OnPropertyChanged("Exposure"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Exposure;

    /// <summary>
    /// What alternative exposure state?
    /// </summary>
    [FhirElement("exposureAlternative", InSummary=true, Order=410)]
    [CLSCompliant(false)]
    [References("ResearchElementDefinition")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ExposureAlternative
    {
      get { return _ExposureAlternative; }
      set { _ExposureAlternative = value; OnPropertyChanged("ExposureAlternative"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ExposureAlternative;

    /// <summary>
    /// What outcome?
    /// </summary>
    [FhirElement("outcome", InSummary=true, Order=420)]
    [CLSCompliant(false)]
    [References("ResearchElementDefinition")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Outcome
    {
      get { return _Outcome; }
      set { _Outcome = value; OnPropertyChanged("Outcome"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Outcome;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ResearchDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(ShortTitleElement != null) dest.ShortTitleElement = (Hl7.Fhir.Model.FhirString)ShortTitleElement.DeepCopy();
      if(SubtitleElement != null) dest.SubtitleElement = (Hl7.Fhir.Model.FhirString)SubtitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.DataType)Subject.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(CommentElement != null) dest.CommentElement = new List<Hl7.Fhir.Model.FhirString>(CommentElement.DeepCopy());
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(Purpose != null) dest.Purpose = (Hl7.Fhir.Model.Markdown)Purpose.DeepCopy();
      if(UsageElement != null) dest.UsageElement = (Hl7.Fhir.Model.FhirString)UsageElement.DeepCopy();
      if(Copyright != null) dest.Copyright = (Hl7.Fhir.Model.Markdown)Copyright.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
      if(Topic != null) dest.Topic = new List<Hl7.Fhir.Model.CodeableConcept>(Topic.DeepCopy());
      if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ContactDetail>(Author.DeepCopy());
      if(Editor != null) dest.Editor = new List<Hl7.Fhir.Model.ContactDetail>(Editor.DeepCopy());
      if(Reviewer != null) dest.Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(Reviewer.DeepCopy());
      if(Endorser != null) dest.Endorser = new List<Hl7.Fhir.Model.ContactDetail>(Endorser.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(LibraryElement != null) dest.LibraryElement = new List<Hl7.Fhir.Model.Canonical>(LibraryElement.DeepCopy());
      if(Population != null) dest.Population = (Hl7.Fhir.Model.ResourceReference)Population.DeepCopy();
      if(Exposure != null) dest.Exposure = (Hl7.Fhir.Model.ResourceReference)Exposure.DeepCopy();
      if(ExposureAlternative != null) dest.ExposureAlternative = (Hl7.Fhir.Model.ResourceReference)ExposureAlternative.DeepCopy();
      if(Outcome != null) dest.Outcome = (Hl7.Fhir.Model.ResourceReference)Outcome.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ResearchDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ResearchDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(ShortTitleElement, otherT.ShortTitleElement)) return false;
      if( !DeepComparable.Matches(SubtitleElement, otherT.SubtitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(CommentElement, otherT.CommentElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.Matches(UsageElement, otherT.UsageElement)) return false;
      if( !DeepComparable.Matches(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.Matches(Topic, otherT.Topic)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Editor, otherT.Editor)) return false;
      if( !DeepComparable.Matches(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.Matches(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(LibraryElement, otherT.LibraryElement)) return false;
      if( !DeepComparable.Matches(Population, otherT.Population)) return false;
      if( !DeepComparable.Matches(Exposure, otherT.Exposure)) return false;
      if( !DeepComparable.Matches(ExposureAlternative, otherT.ExposureAlternative)) return false;
      if( !DeepComparable.Matches(Outcome, otherT.Outcome)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ResearchDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(ShortTitleElement, otherT.ShortTitleElement)) return false;
      if( !DeepComparable.IsExactly(SubtitleElement, otherT.SubtitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(CommentElement, otherT.CommentElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.IsExactly(UsageElement, otherT.UsageElement)) return false;
      if( !DeepComparable.IsExactly(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.IsExactly(Topic, otherT.Topic)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Editor, otherT.Editor)) return false;
      if( !DeepComparable.IsExactly(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.IsExactly(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(LibraryElement, otherT.LibraryElement)) return false;
      if( !DeepComparable.IsExactly(Population, otherT.Population)) return false;
      if( !DeepComparable.IsExactly(Exposure, otherT.Exposure)) return false;
      if( !DeepComparable.IsExactly(ExposureAlternative, otherT.ExposureAlternative)) return false;
      if( !DeepComparable.IsExactly(Outcome, otherT.Outcome)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (ShortTitleElement != null) yield return ShortTitleElement;
        if (SubtitleElement != null) yield return SubtitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (Subject != null) yield return Subject;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (Description != null) yield return Description;
        foreach (var elem in CommentElement) { if (elem != null) yield return elem; }
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (Purpose != null) yield return Purpose;
        if (UsageElement != null) yield return UsageElement;
        if (Copyright != null) yield return Copyright;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (EffectivePeriod != null) yield return EffectivePeriod;
        foreach (var elem in Topic) { if (elem != null) yield return elem; }
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        foreach (var elem in Editor) { if (elem != null) yield return elem; }
        foreach (var elem in Reviewer) { if (elem != null) yield return elem; }
        foreach (var elem in Endorser) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        foreach (var elem in LibraryElement) { if (elem != null) yield return elem; }
        if (Population != null) yield return Population;
        if (Exposure != null) yield return Exposure;
        if (ExposureAlternative != null) yield return ExposureAlternative;
        if (Outcome != null) yield return Outcome;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (ShortTitleElement != null) yield return new ElementValue("shortTitle", ShortTitleElement);
        if (SubtitleElement != null) yield return new ElementValue("subtitle", SubtitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in CommentElement) { if (elem != null) yield return new ElementValue("comment", elem); }
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (Purpose != null) yield return new ElementValue("purpose", Purpose);
        if (UsageElement != null) yield return new ElementValue("usage", UsageElement);
        if (Copyright != null) yield return new ElementValue("copyright", Copyright);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
        foreach (var elem in Topic) { if (elem != null) yield return new ElementValue("topic", elem); }
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        foreach (var elem in Editor) { if (elem != null) yield return new ElementValue("editor", elem); }
        foreach (var elem in Reviewer) { if (elem != null) yield return new ElementValue("reviewer", elem); }
        foreach (var elem in Endorser) { if (elem != null) yield return new ElementValue("endorser", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        foreach (var elem in LibraryElement) { if (elem != null) yield return new ElementValue("library", elem); }
        if (Population != null) yield return new ElementValue("population", Population);
        if (Exposure != null) yield return new ElementValue("exposure", Exposure);
        if (ExposureAlternative != null) yield return new ElementValue("exposureAlternative", ExposureAlternative);
        if (Outcome != null) yield return new ElementValue("outcome", Outcome);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "shortTitle":
          value = ShortTitleElement;
          return ShortTitleElement is not null;
        case "subtitle":
          value = SubtitleElement;
          return SubtitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = Description;
          return Description is not null;
        case "comment":
          value = CommentElement;
          return CommentElement?.Any() == true;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = Purpose;
          return Purpose is not null;
        case "usage":
          value = UsageElement;
          return UsageElement is not null;
        case "copyright":
          value = Copyright;
          return Copyright is not null;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "effectivePeriod":
          value = EffectivePeriod;
          return EffectivePeriod is not null;
        case "topic":
          value = Topic;
          return Topic?.Any() == true;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "editor":
          value = Editor;
          return Editor?.Any() == true;
        case "reviewer":
          value = Reviewer;
          return Reviewer?.Any() == true;
        case "endorser":
          value = Endorser;
          return Endorser?.Any() == true;
        case "relatedArtifact":
          value = RelatedArtifact;
          return RelatedArtifact?.Any() == true;
        case "library":
          value = LibraryElement;
          return LibraryElement?.Any() == true;
        case "population":
          value = Population;
          return Population is not null;
        case "exposure":
          value = Exposure;
          return Exposure is not null;
        case "exposureAlternative":
          value = ExposureAlternative;
          return ExposureAlternative is not null;
        case "outcome":
          value = Outcome;
          return Outcome is not null;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (ShortTitleElement is not null) yield return new KeyValuePair<string,object>("shortTitle",ShortTitleElement);
      if (SubtitleElement is not null) yield return new KeyValuePair<string,object>("subtitle",SubtitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (CommentElement?.Any() == true) yield return new KeyValuePair<string,object>("comment",CommentElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (Purpose is not null) yield return new KeyValuePair<string,object>("purpose",Purpose);
      if (UsageElement is not null) yield return new KeyValuePair<string,object>("usage",UsageElement);
      if (Copyright is not null) yield return new KeyValuePair<string,object>("copyright",Copyright);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (EffectivePeriod is not null) yield return new KeyValuePair<string,object>("effectivePeriod",EffectivePeriod);
      if (Topic?.Any() == true) yield return new KeyValuePair<string,object>("topic",Topic);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (Editor?.Any() == true) yield return new KeyValuePair<string,object>("editor",Editor);
      if (Reviewer?.Any() == true) yield return new KeyValuePair<string,object>("reviewer",Reviewer);
      if (Endorser?.Any() == true) yield return new KeyValuePair<string,object>("endorser",Endorser);
      if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
      if (LibraryElement?.Any() == true) yield return new KeyValuePair<string,object>("library",LibraryElement);
      if (Population is not null) yield return new KeyValuePair<string,object>("population",Population);
      if (Exposure is not null) yield return new KeyValuePair<string,object>("exposure",Exposure);
      if (ExposureAlternative is not null) yield return new KeyValuePair<string,object>("exposureAlternative",ExposureAlternative);
      if (Outcome is not null) yield return new KeyValuePair<string,object>("outcome",Outcome);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Adds metadata-supported comments, classifiers or ratings related to a Resource
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ArtifactAssessment","http://hl7.org/fhir/StructureDefinition/ArtifactAssessment", IsResource=true)]
  public partial class ArtifactAssessment : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ArtifactAssessment"; } }

    /// <summary>
    /// Possible values for the workflow status of the comment or assessment, typically used to coordinate workflow around the process of accepting and rejecting changes and comments on the artifact.
    /// (url: http://hl7.org/fhir/ValueSet/artifactassessment-workflow-status)
    /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
    /// </summary>
    [FhirEnumeration("ArtifactAssessmentWorkflowStatus")]
    public enum ArtifactAssessmentWorkflowStatus
    {
      /// <summary>
      /// The comment has been submitted, but the responsible party has not yet been determined, or the responsible party has not yet determined the next steps to be taken.
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("submitted", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Submitted")]
      Submitted,
      /// <summary>
      /// The comment has been triaged, meaning the responsible party has been determined and next steps have been identified to address the comment.
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("triaged", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Triaged")]
      Triaged,
      /// <summary>
      /// The comment is waiting for input from a specific party before next steps can be taken.
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("waiting-for-input", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Waiting for Input")]
      WaitingForInput,
      /// <summary>
      /// The comment has been resolved and no changes resulted from the resolution
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("resolved-no-change", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Resolved - No Change")]
      ResolvedNoChange,
      /// <summary>
      /// The comment has been resolved and changes are required to address the comment
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("resolved-change-required", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Resolved - Change Required")]
      ResolvedChangeRequired,
      /// <summary>
      /// The comment is acceptable, but resolution of the comment and application of any associated changes have been deferred
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("deferred", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Deferred")]
      Deferred,
      /// <summary>
      /// The comment is a duplicate of another comment already received
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("duplicate", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Duplicate")]
      Duplicate,
      /// <summary>
      /// The comment is resolved and any necessary changes have been applied
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("applied", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Applied")]
      Applied,
      /// <summary>
      /// The necessary changes to the artifact have been published in a new version of the artifact
      /// (system: http://hl7.org/fhir/artifactassessment-workflow-status)
      /// </summary>
      [EnumLiteral("published", "http://hl7.org/fhir/artifactassessment-workflow-status"), Description("Published")]
      Published,
    }

    /// <summary>
    /// Possible values for the disposition of a comment or change request, typically used for comments and change requests, to indicate the disposition of the responsible party towards the changes suggested by the comment or change request.
    /// (url: http://hl7.org/fhir/ValueSet/artifactassessment-disposition)
    /// (system: http://hl7.org/fhir/artifactassessment-disposition)
    /// </summary>
    [FhirEnumeration("ArtifactAssessmentDisposition")]
    public enum ArtifactAssessmentDisposition
    {
      /// <summary>
      /// The comment is unresolved
      /// (system: http://hl7.org/fhir/artifactassessment-disposition)
      /// </summary>
      [EnumLiteral("unresolved", "http://hl7.org/fhir/artifactassessment-disposition"), Description("Unresolved")]
      Unresolved,
      /// <summary>
      /// The comment is not persuasive (rejected in full)
      /// (system: http://hl7.org/fhir/artifactassessment-disposition)
      /// </summary>
      [EnumLiteral("not-persuasive", "http://hl7.org/fhir/artifactassessment-disposition"), Description("Not Persuasive")]
      NotPersuasive,
      /// <summary>
      /// The comment is persuasive (accepted in full)
      /// (system: http://hl7.org/fhir/artifactassessment-disposition)
      /// </summary>
      [EnumLiteral("persuasive", "http://hl7.org/fhir/artifactassessment-disposition"), Description("Persuasive")]
      Persuasive,
      /// <summary>
      /// The comment is persuasive with modification (partially accepted)
      /// (system: http://hl7.org/fhir/artifactassessment-disposition)
      /// </summary>
      [EnumLiteral("persuasive-with-modification", "http://hl7.org/fhir/artifactassessment-disposition"), Description("Persuasive with Modification")]
      PersuasiveWithModification,
      /// <summary>
      /// The comment is not persuasive with modification (partially rejected)
      /// (system: http://hl7.org/fhir/artifactassessment-disposition)
      /// </summary>
      [EnumLiteral("not-persuasive-with-modification", "http://hl7.org/fhir/artifactassessment-disposition"), Description("Not Persuasive with Modification")]
      NotPersuasiveWithModification,
    }

    /// <summary>
    /// The type of information contained in a component of an artifact assessment.
    /// (url: http://hl7.org/fhir/ValueSet/artifactassessment-information-type)
    /// (system: http://hl7.org/fhir/artifactassessment-information-type)
    /// </summary>
    [FhirEnumeration("ArtifactAssessmentInformationType")]
    public enum ArtifactAssessmentInformationType
    {
      /// <summary>
      /// A comment on the artifact
      /// (system: http://hl7.org/fhir/artifactassessment-information-type)
      /// </summary>
      [EnumLiteral("comment", "http://hl7.org/fhir/artifactassessment-information-type"), Description("Comment")]
      Comment,
      /// <summary>
      /// A classifier of the artifact
      /// (system: http://hl7.org/fhir/artifactassessment-information-type)
      /// </summary>
      [EnumLiteral("classifier", "http://hl7.org/fhir/artifactassessment-information-type"), Description("Classifier")]
      Classifier,
      /// <summary>
      /// A rating of the artifact
      /// (system: http://hl7.org/fhir/artifactassessment-information-type)
      /// </summary>
      [EnumLiteral("rating", "http://hl7.org/fhir/artifactassessment-information-type"), Description("Rating")]
      Rating,
      /// <summary>
      /// A container for multiple components
      /// (system: http://hl7.org/fhir/artifactassessment-information-type)
      /// </summary>
      [EnumLiteral("container", "http://hl7.org/fhir/artifactassessment-information-type"), Description("Container")]
      Container,
      /// <summary>
      /// A response to a comment
      /// (system: http://hl7.org/fhir/artifactassessment-information-type)
      /// </summary>
      [EnumLiteral("response", "http://hl7.org/fhir/artifactassessment-information-type"), Description("Response")]
      Response,
      /// <summary>
      /// A change request for the artifact
      /// (system: http://hl7.org/fhir/artifactassessment-information-type)
      /// </summary>
      [EnumLiteral("change-request", "http://hl7.org/fhir/artifactassessment-information-type"), Description("Change Request")]
      ChangeRequest,
    }

    /// <summary>
    /// Comment, classifier, or rating content
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ArtifactAssessment#Content", IsNestedType=true)]
    public partial class ContentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ArtifactAssessment#Content"; } }

      /// <summary>
      /// comment | classifier | rating | container | response | change-request
      /// </summary>
      [FhirElement("informationType", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentInformationType> InformationTypeElement
      {
        get { return _InformationTypeElement; }
        set { _InformationTypeElement = value; OnPropertyChanged("InformationTypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentInformationType> _InformationTypeElement;

      /// <summary>
      /// comment | classifier | rating | container | response | change-request
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentInformationType? InformationType
      {
        get { return InformationTypeElement != null ? InformationTypeElement.Value : null; }
        set
        {
          if (value == null)
            InformationTypeElement = null;
          else
            InformationTypeElement = new Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentInformationType>(value);
          OnPropertyChanged("InformationType");
        }
      }

      /// <summary>
      /// Brief summary of the content
      /// </summary>
      [FhirElement("summary", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown Summary
      {
        get { return _Summary; }
        set { _Summary = value; OnPropertyChanged("Summary"); }
      }

      private Hl7.Fhir.Model.Markdown _Summary;

      /// <summary>
      /// What type of content
      /// </summary>
      [FhirElement("type", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Rating, classifier, or assessment
      /// </summary>
      [FhirElement("classifier", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Classifier
      {
        get { if(_Classifier==null) _Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Classifier; }
        set { _Classifier = value; OnPropertyChanged("Classifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Classifier;

      /// <summary>
      /// Who authored the content
      /// </summary>
      [FhirElement("author", Order=80)]
      [CLSCompliant(false)]
      [References("Patient","Practitioner","PractitionerRole","Organization","Device")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Author
      {
        get { return _Author; }
        set { _Author = value; OnPropertyChanged("Author"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Author;

      /// <summary>
      /// What the comment is directed to
      /// </summary>
      [FhirElement("path", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirUri> PathElement
      {
        get { if(_PathElement==null) _PathElement = new List<Hl7.Fhir.Model.FhirUri>(); return _PathElement; }
        set { _PathElement = value; OnPropertyChanged("PathElement"); }
      }

      private List<Hl7.Fhir.Model.FhirUri> _PathElement;

      /// <summary>
      /// What the comment is directed to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> Path
      {
        get { return PathElement != null ? PathElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            PathElement = null;
          else
            PathElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
          OnPropertyChanged("Path");
        }
      }

      /// <summary>
      /// Additional information
      /// </summary>
      [FhirElement("relatedArtifact", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
      {
        get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
        set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
      }

      private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

      /// <summary>
      /// Acceptable to publicly share the resource content
      /// </summary>
      [FhirElement("freeToShare", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean FreeToShareElement
      {
        get { return _FreeToShareElement; }
        set { _FreeToShareElement = value; OnPropertyChanged("FreeToShareElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _FreeToShareElement;

      /// <summary>
      /// Acceptable to publicly share the resource content
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? FreeToShare
      {
        get { return FreeToShareElement != null ? FreeToShareElement.Value : null; }
        set
        {
          if (value == null)
            FreeToShareElement = null;
          else
            FreeToShareElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("FreeToShare");
        }
      }

      /// <summary>
      /// Contained content
      /// </summary>
      [FhirElement("component", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent> Component
      {
        get { if(_Component==null) _Component = new List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent>(); return _Component; }
        set { _Component = value; OnPropertyChanged("Component"); }
      }

      private List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent> _Component;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(InformationTypeElement != null) dest.InformationTypeElement = (Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentInformationType>)InformationTypeElement.DeepCopy();
        if(Summary != null) dest.Summary = (Hl7.Fhir.Model.Markdown)Summary.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Classifier != null) dest.Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(Classifier.DeepCopy());
        if(Author != null) dest.Author = (Hl7.Fhir.Model.ResourceReference)Author.DeepCopy();
        if(PathElement != null) dest.PathElement = new List<Hl7.Fhir.Model.FhirUri>(PathElement.DeepCopy());
        if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
        if(FreeToShareElement != null) dest.FreeToShareElement = (Hl7.Fhir.Model.FhirBoolean)FreeToShareElement.DeepCopy();
        if(Component != null) dest.Component = new List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent>(Component.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(InformationTypeElement, otherT.InformationTypeElement)) return false;
        if( !DeepComparable.Matches(Summary, otherT.Summary)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Classifier, otherT.Classifier)) return false;
        if( !DeepComparable.Matches(Author, otherT.Author)) return false;
        if( !DeepComparable.Matches(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
        if( !DeepComparable.Matches(FreeToShareElement, otherT.FreeToShareElement)) return false;
        if( !DeepComparable.Matches(Component, otherT.Component)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(InformationTypeElement, otherT.InformationTypeElement)) return false;
        if( !DeepComparable.IsExactly(Summary, otherT.Summary)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Classifier, otherT.Classifier)) return false;
        if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
        if( !DeepComparable.IsExactly(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
        if( !DeepComparable.IsExactly(FreeToShareElement, otherT.FreeToShareElement)) return false;
        if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (InformationTypeElement != null) yield return InformationTypeElement;
          if (Summary != null) yield return Summary;
          if (Type != null) yield return Type;
          foreach (var elem in Classifier) { if (elem != null) yield return elem; }
          if (Author != null) yield return Author;
          foreach (var elem in PathElement) { if (elem != null) yield return elem; }
          foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
          if (FreeToShareElement != null) yield return FreeToShareElement;
          foreach (var elem in Component) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (InformationTypeElement != null) yield return new ElementValue("informationType", InformationTypeElement);
          if (Summary != null) yield return new ElementValue("summary", Summary);
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Classifier) { if (elem != null) yield return new ElementValue("classifier", elem); }
          if (Author != null) yield return new ElementValue("author", Author);
          foreach (var elem in PathElement) { if (elem != null) yield return new ElementValue("path", elem); }
          foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
          if (FreeToShareElement != null) yield return new ElementValue("freeToShare", FreeToShareElement);
          foreach (var elem in Component) { if (elem != null) yield return new ElementValue("component", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "informationType":
            value = InformationTypeElement;
            return InformationTypeElement is not null;
          case "summary":
            value = Summary;
            return Summary is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "classifier":
            value = Classifier;
            return Classifier?.Any() == true;
          case "author":
            value = Author;
            return Author is not null;
          case "path":
            value = PathElement;
            return PathElement?.Any() == true;
          case "relatedArtifact":
            value = RelatedArtifact;
            return RelatedArtifact?.Any() == true;
          case "freeToShare":
            value = FreeToShareElement;
            return FreeToShareElement is not null;
          case "component":
            value = Component;
            return Component?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (InformationTypeElement is not null) yield return new KeyValuePair<string,object>("informationType",InformationTypeElement);
        if (Summary is not null) yield return new KeyValuePair<string,object>("summary",Summary);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Classifier?.Any() == true) yield return new KeyValuePair<string,object>("classifier",Classifier);
        if (Author is not null) yield return new KeyValuePair<string,object>("author",Author);
        if (PathElement?.Any() == true) yield return new KeyValuePair<string,object>("path",PathElement);
        if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
        if (FreeToShareElement is not null) yield return new KeyValuePair<string,object>("freeToShare",FreeToShareElement);
        if (Component?.Any() == true) yield return new KeyValuePair<string,object>("component",Component);
      }

    }

    /// <summary>
    /// Additional identifier for the artifact assessment
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// How to cite the comment or rating
    /// </summary>
    [FhirElement("citeAs", Order=100, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Citation")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.Markdown))]
    [DataMember]
    public Hl7.Fhir.Model.DataType CiteAs
    {
      get { return _CiteAs; }
      set { _CiteAs = value; OnPropertyChanged("CiteAs"); }
    }

    private Hl7.Fhir.Model.DataType _CiteAs;

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=110, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Copyright
    {
      get { return _Copyright; }
      set { _Copyright = value; OnPropertyChanged("Copyright"); }
    }

    private Hl7.Fhir.Model.Markdown _Copyright;

    /// <summary>
    /// When the artifact assessment was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When the artifact assessment was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// When the artifact assessment was last reviewed
    /// </summary>
    [FhirElement("lastReviewDate", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// When the artifact assessment was last reviewed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// The artifact assessed, commented upon or rated
    /// </summary>
    [FhirElement("artifact", InSummary=true, Order=150, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Resource")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.Canonical),typeof(Hl7.Fhir.Model.FhirUri))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.DataType Artifact
    {
      get { return _Artifact; }
      set { _Artifact = value; OnPropertyChanged("Artifact"); }
    }

    private Hl7.Fhir.Model.DataType _Artifact;

    /// <summary>
    /// Comment, classifier, or rating content
    /// </summary>
    [FhirElement("content", Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent> Content
    {
      get { if(_Content==null) _Content = new List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent>(); return _Content; }
      set { _Content = value; OnPropertyChanged("Content"); }
    }

    private List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent> _Content;

    /// <summary>
    /// submitted | triaged | waiting-for-input | resolved-no-change | resolved-change-required | deferred | duplicate | applied | published
    /// </summary>
    [FhirElement("workflowStatus", InSummary=true, Order=170)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentWorkflowStatus> WorkflowStatusElement
    {
      get { return _WorkflowStatusElement; }
      set { _WorkflowStatusElement = value; OnPropertyChanged("WorkflowStatusElement"); }
    }

    private Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentWorkflowStatus> _WorkflowStatusElement;

    /// <summary>
    /// submitted | triaged | waiting-for-input | resolved-no-change | resolved-change-required | deferred | duplicate | applied | published
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentWorkflowStatus? WorkflowStatus
    {
      get { return WorkflowStatusElement != null ? WorkflowStatusElement.Value : null; }
      set
      {
        if (value == null)
          WorkflowStatusElement = null;
        else
          WorkflowStatusElement = new Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentWorkflowStatus>(value);
        OnPropertyChanged("WorkflowStatus");
      }
    }

    /// <summary>
    /// unresolved | not-persuasive | persuasive | persuasive-with-modification | not-persuasive-with-modification
    /// </summary>
    [FhirElement("disposition", InSummary=true, Order=180)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentDisposition> DispositionElement
    {
      get { return _DispositionElement; }
      set { _DispositionElement = value; OnPropertyChanged("DispositionElement"); }
    }

    private Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentDisposition> _DispositionElement;

    /// <summary>
    /// unresolved | not-persuasive | persuasive | persuasive-with-modification | not-persuasive-with-modification
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentDisposition? Disposition
    {
      get { return DispositionElement != null ? DispositionElement.Value : null; }
      set
      {
        if (value == null)
          DispositionElement = null;
        else
          DispositionElement = new Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentDisposition>(value);
        OnPropertyChanged("Disposition");
      }
    }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ArtifactAssessment;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(CiteAs != null) dest.CiteAs = (Hl7.Fhir.Model.DataType)CiteAs.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(Copyright != null) dest.Copyright = (Hl7.Fhir.Model.Markdown)Copyright.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(Artifact != null) dest.Artifact = (Hl7.Fhir.Model.DataType)Artifact.DeepCopy();
      if(Content != null) dest.Content = new List<Hl7.Fhir.Model.ArtifactAssessment.ContentComponent>(Content.DeepCopy());
      if(WorkflowStatusElement != null) dest.WorkflowStatusElement = (Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentWorkflowStatus>)WorkflowStatusElement.DeepCopy();
      if(DispositionElement != null) dest.DispositionElement = (Code<Hl7.Fhir.Model.ArtifactAssessment.ArtifactAssessmentDisposition>)DispositionElement.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ArtifactAssessment());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ArtifactAssessment;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(CiteAs, otherT.CiteAs)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(Artifact, otherT.Artifact)) return false;
      if( !DeepComparable.Matches(Content, otherT.Content)) return false;
      if( !DeepComparable.Matches(WorkflowStatusElement, otherT.WorkflowStatusElement)) return false;
      if( !DeepComparable.Matches(DispositionElement, otherT.DispositionElement)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ArtifactAssessment;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(CiteAs, otherT.CiteAs)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(Artifact, otherT.Artifact)) return false;
      if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;
      if( !DeepComparable.IsExactly(WorkflowStatusElement, otherT.WorkflowStatusElement)) return false;
      if( !DeepComparable.IsExactly(DispositionElement, otherT.DispositionElement)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (CiteAs != null) yield return CiteAs;
        if (DateElement != null) yield return DateElement;
        if (Copyright != null) yield return Copyright;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (Artifact != null) yield return Artifact;
        foreach (var elem in Content) { if (elem != null) yield return elem; }
        if (WorkflowStatusElement != null) yield return WorkflowStatusElement;
        if (DispositionElement != null) yield return DispositionElement;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (CiteAs != null) yield return new ElementValue("citeAs", CiteAs);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (Copyright != null) yield return new ElementValue("copyright", Copyright);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (Artifact != null) yield return new ElementValue("artifact", Artifact);
        foreach (var elem in Content) { if (elem != null) yield return new ElementValue("content", elem); }
        if (WorkflowStatusElement != null) yield return new ElementValue("workflowStatus", WorkflowStatusElement);
        if (DispositionElement != null) yield return new ElementValue("disposition", DispositionElement);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "citeAs":
          value = CiteAs;
          return CiteAs is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "copyright":
          value = Copyright;
          return Copyright is not null;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "artifact":
          value = Artifact;
          return Artifact is not null;
        case "content":
          value = Content;
          return Content?.Any() == true;
        case "workflowStatus":
          value = WorkflowStatusElement;
          return WorkflowStatusElement is not null;
        case "disposition":
          value = DispositionElement;
          return DispositionElement is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (CiteAs is not null) yield return new KeyValuePair<string,object>("citeAs",CiteAs);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Copyright is not null) yield return new KeyValuePair<string,object>("copyright",Copyright);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (Artifact is not null) yield return new KeyValuePair<string,object>("artifact",Artifact);
      if (Content?.Any() == true) yield return new KeyValuePair<string,object>("content",Content);
      if (WorkflowStatusElement is not null) yield return new KeyValuePair<string,object>("workflowStatus",WorkflowStatusElement);
      if (DispositionElement is not null) yield return new KeyValuePair<string,object>("disposition",DispositionElement);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// The definition of a specific topic for triggering events within the Subscriptions framework
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("SubscriptionTopic","http://hl7.org/fhir/StructureDefinition/SubscriptionTopic", IsResource=true)]
  public partial class SubscriptionTopic : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "SubscriptionTopic"; } }

    /// <summary>
    /// FHIR RESTful interaction codes used for SubscriptionTopic trigger.
    /// (url: http://hl7.org/fhir/ValueSet/interaction-trigger)
    /// (system: http://hl7.org/fhir/restful-interaction)
    /// </summary>
    [FhirEnumeration("InteractionTrigger", "http://hl7.org/fhir/ValueSet/interaction-trigger", "http://hl7.org/fhir/restful-interaction")]
    public enum InteractionTrigger
    {
      /// <summary>
      /// Create a new resource with a server assigned id.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("create"), Description("create")]
      Create,
      /// <summary>
      /// Update an existing resource by its id (or create it if it is new).
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("update"), Description("update")]
      Update,
      /// <summary>
      /// Delete a resource.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("delete"), Description("delete")]
      Delete,
    }

    /// <summary>
    /// Behavior a server can exhibit when a criteria state does not exist (e.g., state prior to a create or after a delete).
    /// (url: http://hl7.org/fhir/ValueSet/subscriptiontopic-cr-behavior)
    /// (system: http://hl7.org/fhir/subscriptiontopic-cr-behavior)
    /// </summary>
    [FhirEnumeration("CriteriaNotExistsBehavior", "http://hl7.org/fhir/ValueSet/subscriptiontopic-cr-behavior", "http://hl7.org/fhir/subscriptiontopic-cr-behavior")]
    public enum CriteriaNotExistsBehavior
    {
      /// <summary>
      /// The requested conditional statement will pass if a matching state does not exist (e.g., previous state during create).
      /// (system: http://hl7.org/fhir/subscriptiontopic-cr-behavior)
      /// </summary>
      [EnumLiteral("test-passes"), Description("Test passes")]
      TestPasses,
      /// <summary>
      /// The requested conditional statement will fail if a matching state does not exist (e.g., previous state during create).
      /// (system: http://hl7.org/fhir/subscriptiontopic-cr-behavior)
      /// </summary>
      [EnumLiteral("test-fails"), Description("Test fails")]
      TestFails,
    }

    /// <summary>
    /// Definition of a resource-based trigger for the subscription topic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubscriptionTopic#ResourceTrigger", IsNestedType=true)]
    [BackboneType("SubscriptionTopic.resourceTrigger")]
    public partial class ResourceTriggerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubscriptionTopic#ResourceTrigger"; } }

      /// <summary>
      /// Text representation of the resource trigger
      /// </summary>
      [FhirElement("description", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Text representation of the resource trigger
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Data Type or Resource (reference to definition) for this trigger definition
      /// </summary>
      [FhirElement("resource", InSummary=true, Order=50)]
      [Binding("FHIRTypes")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri ResourceElement
      {
        get { return _ResourceElement; }
        set { _ResourceElement = value; OnPropertyChanged("ResourceElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _ResourceElement;

      /// <summary>
      /// Data Type or Resource (reference to definition) for this trigger definition
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Resource
      {
        get { return ResourceElement != null ? ResourceElement.Value : null; }
        set
        {
          if (value == null)
            ResourceElement = null;
          else
            ResourceElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Resource");
        }
      }

      /// <summary>
      /// create | update | delete
      /// </summary>
      [FhirElement("supportedInteraction", InSummary=true, Order=60)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("MethodCode")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Code<Hl7.Fhir.Model.SubscriptionTopic.InteractionTrigger>> SupportedInteractionElement
      {
        get { if(_SupportedInteractionElement==null) _SupportedInteractionElement = new List<Code<Hl7.Fhir.Model.SubscriptionTopic.InteractionTrigger>>(); return _SupportedInteractionElement; }
        set { _SupportedInteractionElement = value; OnPropertyChanged("SupportedInteractionElement"); }
      }

      private List<Code<Hl7.Fhir.Model.SubscriptionTopic.InteractionTrigger>> _SupportedInteractionElement;

      /// <summary>
      /// create | update | delete
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<Hl7.Fhir.Model.SubscriptionTopic.InteractionTrigger?> SupportedInteraction
      {
        get { return SupportedInteractionElement != null ? SupportedInteractionElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            SupportedInteractionElement = null;
          else
            SupportedInteractionElement = new List<Code<Hl7.Fhir.Model.SubscriptionTopic.InteractionTrigger>>(value.Select(elem=>new Code<Hl7.Fhir.Model.SubscriptionTopic.InteractionTrigger>(elem)));
          OnPropertyChanged("SupportedInteraction");
        }
      }

      /// <summary>
      /// Query based trigger rule
      /// </summary>
      [FhirElement("queryCriteria", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.SubscriptionTopic.QueryCriteriaComponent QueryCriteria
      {
        get { return _QueryCriteria; }
        set { _QueryCriteria = value; OnPropertyChanged("QueryCriteria"); }
      }

      private Hl7.Fhir.Model.SubscriptionTopic.QueryCriteriaComponent _QueryCriteria;

      /// <summary>
      /// FHIRPath based trigger rule
      /// </summary>
      [FhirElement("fhirPathCriteria", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString FhirPathCriteriaElement
      {
        get { return _FhirPathCriteriaElement; }
        set { _FhirPathCriteriaElement = value; OnPropertyChanged("FhirPathCriteriaElement"); }
      }

      private Hl7.Fhir.Model.FhirString _FhirPathCriteriaElement;

      /// <summary>
      /// FHIRPath based trigger rule
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string FhirPathCriteria
      {
        get { return FhirPathCriteriaElement != null ? FhirPathCriteriaElement.Value : null; }
        set
        {
          if (value == null)
            FhirPathCriteriaElement = null;
          else
            FhirPathCriteriaElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("FhirPathCriteria");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ResourceTriggerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(ResourceElement != null) dest.ResourceElement = (Hl7.Fhir.Model.FhirUri)ResourceElement.DeepCopy();
        if(SupportedInteractionElement != null) dest.SupportedInteractionElement = new List<Code<Hl7.Fhir.Model.SubscriptionTopic.InteractionTrigger>>(SupportedInteractionElement.DeepCopy());
        if(QueryCriteria != null) dest.QueryCriteria = (Hl7.Fhir.Model.SubscriptionTopic.QueryCriteriaComponent)QueryCriteria.DeepCopy();
        if(FhirPathCriteriaElement != null) dest.FhirPathCriteriaElement = (Hl7.Fhir.Model.FhirString)FhirPathCriteriaElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ResourceTriggerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ResourceTriggerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.Matches(SupportedInteractionElement, otherT.SupportedInteractionElement)) return false;
        if( !DeepComparable.Matches(QueryCriteria, otherT.QueryCriteria)) return false;
        if( !DeepComparable.Matches(FhirPathCriteriaElement, otherT.FhirPathCriteriaElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ResourceTriggerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.IsExactly(SupportedInteractionElement, otherT.SupportedInteractionElement)) return false;
        if( !DeepComparable.IsExactly(QueryCriteria, otherT.QueryCriteria)) return false;
        if( !DeepComparable.IsExactly(FhirPathCriteriaElement, otherT.FhirPathCriteriaElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (ResourceElement != null) yield return ResourceElement;
          foreach (var elem in SupportedInteractionElement) { if (elem != null) yield return elem; }
          if (QueryCriteria != null) yield return QueryCriteria;
          if (FhirPathCriteriaElement != null) yield return FhirPathCriteriaElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (ResourceElement != null) yield return new ElementValue("resource", ResourceElement);
          foreach (var elem in SupportedInteractionElement) { if (elem != null) yield return new ElementValue("supportedInteraction", elem); }
          if (QueryCriteria != null) yield return new ElementValue("queryCriteria", QueryCriteria);
          if (FhirPathCriteriaElement != null) yield return new ElementValue("fhirPathCriteria", FhirPathCriteriaElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "resource":
            value = ResourceElement;
            return ResourceElement is not null;
          case "supportedInteraction":
            value = SupportedInteractionElement;
            return SupportedInteractionElement?.Any() == true;
          case "queryCriteria":
            value = QueryCriteria;
            return QueryCriteria is not null;
          case "fhirPathCriteria":
            value = FhirPathCriteriaElement;
            return FhirPathCriteriaElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (ResourceElement is not null) yield return new KeyValuePair<string,object>("resource",ResourceElement);
        if (SupportedInteractionElement?.Any() == true) yield return new KeyValuePair<string,object>("supportedInteraction",SupportedInteractionElement);
        if (QueryCriteria is not null) yield return new KeyValuePair<string,object>("queryCriteria",QueryCriteria);
        if (FhirPathCriteriaElement is not null) yield return new KeyValuePair<string,object>("fhirPathCriteria",FhirPathCriteriaElement);
      }

    }

    /// <summary>
    /// Query based trigger rule
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubscriptionTopic#QueryCriteria", IsNestedType=true)]
    [BackboneType("SubscriptionTopic.resourceTrigger.queryCriteria")]
    public partial class QueryCriteriaComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubscriptionTopic#QueryCriteria"; } }

      /// <summary>
      /// Rule applied to previous resource state
      /// </summary>
      [FhirElement("previous", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PreviousElement
      {
        get { return _PreviousElement; }
        set { _PreviousElement = value; OnPropertyChanged("PreviousElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PreviousElement;

      /// <summary>
      /// Rule applied to previous resource state
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Previous
      {
        get { return PreviousElement != null ? PreviousElement.Value : null; }
        set
        {
          if (value == null)
            PreviousElement = null;
          else
            PreviousElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Previous");
        }
      }

      /// <summary>
      /// test-passes | test-fails
      /// </summary>
      [FhirElement("resultForCreate", InSummary=true, Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("CriteriaNotExistsBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior> ResultForCreateElement
      {
        get { return _ResultForCreateElement; }
        set { _ResultForCreateElement = value; OnPropertyChanged("ResultForCreateElement"); }
      }

      private Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior> _ResultForCreateElement;

      /// <summary>
      /// test-passes | test-fails
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior? ResultForCreate
      {
        get { return ResultForCreateElement != null ? ResultForCreateElement.Value : null; }
        set
        {
          if (value == null)
            ResultForCreateElement = null;
          else
            ResultForCreateElement = new Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior>(value);
          OnPropertyChanged("ResultForCreate");
        }
      }

      /// <summary>
      /// Rule applied to current resource state
      /// </summary>
      [FhirElement("current", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CurrentElement
      {
        get { return _CurrentElement; }
        set { _CurrentElement = value; OnPropertyChanged("CurrentElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CurrentElement;

      /// <summary>
      /// Rule applied to current resource state
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Current
      {
        get { return CurrentElement != null ? CurrentElement.Value : null; }
        set
        {
          if (value == null)
            CurrentElement = null;
          else
            CurrentElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Current");
        }
      }

      /// <summary>
      /// test-passes | test-fails
      /// </summary>
      [FhirElement("resultForDelete", InSummary=true, Order=70)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("CriteriaNotExistsBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior> ResultForDeleteElement
      {
        get { return _ResultForDeleteElement; }
        set { _ResultForDeleteElement = value; OnPropertyChanged("ResultForDeleteElement"); }
      }

      private Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior> _ResultForDeleteElement;

      /// <summary>
      /// test-passes | test-fails
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior? ResultForDelete
      {
        get { return ResultForDeleteElement != null ? ResultForDeleteElement.Value : null; }
        set
        {
          if (value == null)
            ResultForDeleteElement = null;
          else
            ResultForDeleteElement = new Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior>(value);
          OnPropertyChanged("ResultForDelete");
        }
      }

      /// <summary>
      /// Both must be true flag
      /// </summary>
      [FhirElement("requireBoth", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean RequireBothElement
      {
        get { return _RequireBothElement; }
        set { _RequireBothElement = value; OnPropertyChanged("RequireBothElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _RequireBothElement;

      /// <summary>
      /// Both must be true flag
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? RequireBoth
      {
        get { return RequireBothElement != null ? RequireBothElement.Value : null; }
        set
        {
          if (value == null)
            RequireBothElement = null;
          else
            RequireBothElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("RequireBoth");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as QueryCriteriaComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PreviousElement != null) dest.PreviousElement = (Hl7.Fhir.Model.FhirString)PreviousElement.DeepCopy();
        if(ResultForCreateElement != null) dest.ResultForCreateElement = (Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior>)ResultForCreateElement.DeepCopy();
        if(CurrentElement != null) dest.CurrentElement = (Hl7.Fhir.Model.FhirString)CurrentElement.DeepCopy();
        if(ResultForDeleteElement != null) dest.ResultForDeleteElement = (Code<Hl7.Fhir.Model.SubscriptionTopic.CriteriaNotExistsBehavior>)ResultForDeleteElement.DeepCopy();
        if(RequireBothElement != null) dest.RequireBothElement = (Hl7.Fhir.Model.FhirBoolean)RequireBothElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new QueryCriteriaComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as QueryCriteriaComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PreviousElement, otherT.PreviousElement)) return false;
        if( !DeepComparable.Matches(ResultForCreateElement, otherT.ResultForCreateElement)) return false;
        if( !DeepComparable.Matches(CurrentElement, otherT.CurrentElement)) return false;
        if( !DeepComparable.Matches(ResultForDeleteElement, otherT.ResultForDeleteElement)) return false;
        if( !DeepComparable.Matches(RequireBothElement, otherT.RequireBothElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as QueryCriteriaComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PreviousElement, otherT.PreviousElement)) return false;
        if( !DeepComparable.IsExactly(ResultForCreateElement, otherT.ResultForCreateElement)) return false;
        if( !DeepComparable.IsExactly(CurrentElement, otherT.CurrentElement)) return false;
        if( !DeepComparable.IsExactly(ResultForDeleteElement, otherT.ResultForDeleteElement)) return false;
        if( !DeepComparable.IsExactly(RequireBothElement, otherT.RequireBothElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PreviousElement != null) yield return PreviousElement;
          if (ResultForCreateElement != null) yield return ResultForCreateElement;
          if (CurrentElement != null) yield return CurrentElement;
          if (ResultForDeleteElement != null) yield return ResultForDeleteElement;
          if (RequireBothElement != null) yield return RequireBothElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PreviousElement != null) yield return new ElementValue("previous", PreviousElement);
          if (ResultForCreateElement != null) yield return new ElementValue("resultForCreate", ResultForCreateElement);
          if (CurrentElement != null) yield return new ElementValue("current", CurrentElement);
          if (ResultForDeleteElement != null) yield return new ElementValue("resultForDelete", ResultForDeleteElement);
          if (RequireBothElement != null) yield return new ElementValue("requireBoth", RequireBothElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "previous":
            value = PreviousElement;
            return PreviousElement is not null;
          case "resultForCreate":
            value = ResultForCreateElement;
            return ResultForCreateElement is not null;
          case "current":
            value = CurrentElement;
            return CurrentElement is not null;
          case "resultForDelete":
            value = ResultForDeleteElement;
            return ResultForDeleteElement is not null;
          case "requireBoth":
            value = RequireBothElement;
            return RequireBothElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (PreviousElement is not null) yield return new KeyValuePair<string,object>("previous",PreviousElement);
        if (ResultForCreateElement is not null) yield return new KeyValuePair<string,object>("resultForCreate",ResultForCreateElement);
        if (CurrentElement is not null) yield return new KeyValuePair<string,object>("current",CurrentElement);
        if (ResultForDeleteElement is not null) yield return new KeyValuePair<string,object>("resultForDelete",ResultForDeleteElement);
        if (RequireBothElement is not null) yield return new KeyValuePair<string,object>("requireBoth",RequireBothElement);
      }

    }

    /// <summary>
    /// Event definitions the SubscriptionTopic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubscriptionTopic#EventTrigger", IsNestedType=true)]
    [BackboneType("SubscriptionTopic.eventTrigger")]
    public partial class EventTriggerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubscriptionTopic#EventTrigger"; } }

      /// <summary>
      /// Text representation of the event trigger
      /// </summary>
      [FhirElement("description", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Text representation of the event trigger
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Event which can trigger a notification from the SubscriptionTopic
      /// </summary>
      [FhirElement("event", InSummary=true, Order=50)]
      [Binding("SubscriptionTopicEventTrigger")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Event
      {
        get { return _Event; }
        set { _Event = value; OnPropertyChanged("Event"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Event;

      /// <summary>
      /// Data Type or Resource (reference to definition) for this trigger definition
      /// </summary>
      [FhirElement("resource", InSummary=true, Order=60)]
      [Binding("FHIRTypes")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri ResourceElement
      {
        get { return _ResourceElement; }
        set { _ResourceElement = value; OnPropertyChanged("ResourceElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _ResourceElement;

      /// <summary>
      /// Data Type or Resource (reference to definition) for this trigger definition
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Resource
      {
        get { return ResourceElement != null ? ResourceElement.Value : null; }
        set
        {
          if (value == null)
            ResourceElement = null;
          else
            ResourceElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Resource");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EventTriggerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Event != null) dest.Event = (Hl7.Fhir.Model.CodeableConcept)Event.DeepCopy();
        if(ResourceElement != null) dest.ResourceElement = (Hl7.Fhir.Model.FhirUri)ResourceElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EventTriggerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EventTriggerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Event, otherT.Event)) return false;
        if( !DeepComparable.Matches(ResourceElement, otherT.ResourceElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EventTriggerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Event, otherT.Event)) return false;
        if( !DeepComparable.IsExactly(ResourceElement, otherT.ResourceElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (Event != null) yield return Event;
          if (ResourceElement != null) yield return ResourceElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (Event != null) yield return new ElementValue("event", Event);
          if (ResourceElement != null) yield return new ElementValue("resource", ResourceElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "event":
            value = Event;
            return Event is not null;
          case "resource":
            value = ResourceElement;
            return ResourceElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Event is not null) yield return new KeyValuePair<string,object>("event",Event);
        if (ResourceElement is not null) yield return new KeyValuePair<string,object>("resource",ResourceElement);
      }

    }

    /// <summary>
    /// Properties by which a Subscription can filter notifications from the SubscriptionTopic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubscriptionTopic#CanFilterBy", IsNestedType=true)]
    [BackboneType("SubscriptionTopic.canFilterBy")]
    public partial class CanFilterByComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubscriptionTopic#CanFilterBy"; } }

      /// <summary>
      /// Description of this filter parameter
      /// </summary>
      [FhirElement("description", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Description of this filter parameter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// URL of the triggering Resource that this filter applies to
      /// </summary>
      [FhirElement("resource", InSummary=true, Order=50)]
      [Binding("FHIRTypes")]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri ResourceElement
      {
        get { return _ResourceElement; }
        set { _ResourceElement = value; OnPropertyChanged("ResourceElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _ResourceElement;

      /// <summary>
      /// URL of the triggering Resource that this filter applies to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Resource
      {
        get { return ResourceElement != null ? ResourceElement.Value : null; }
        set
        {
          if (value == null)
            ResourceElement = null;
          else
            ResourceElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Resource");
        }
      }

      /// <summary>
      /// Human-readable and computation-friendly name for a filter parameter usable by subscriptions on this topic, via Subscription.filterBy.filterParameter
      /// </summary>
      [FhirElement("filterParameter", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString FilterParameterElement
      {
        get { return _FilterParameterElement; }
        set { _FilterParameterElement = value; OnPropertyChanged("FilterParameterElement"); }
      }

      private Hl7.Fhir.Model.FhirString _FilterParameterElement;

      /// <summary>
      /// Human-readable and computation-friendly name for a filter parameter usable by subscriptions on this topic, via Subscription.filterBy.filterParameter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string FilterParameter
      {
        get { return FilterParameterElement != null ? FilterParameterElement.Value : null; }
        set
        {
          if (value == null)
            FilterParameterElement = null;
          else
            FilterParameterElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("FilterParameter");
        }
      }

      /// <summary>
      /// Canonical URL for a filterParameter definition
      /// </summary>
      [FhirElement("filterDefinition", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri FilterDefinitionElement
      {
        get { return _FilterDefinitionElement; }
        set { _FilterDefinitionElement = value; OnPropertyChanged("FilterDefinitionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _FilterDefinitionElement;

      /// <summary>
      /// Canonical URL for a filterParameter definition
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string FilterDefinition
      {
        get { return FilterDefinitionElement != null ? FilterDefinitionElement.Value : null; }
        set
        {
          if (value == null)
            FilterDefinitionElement = null;
          else
            FilterDefinitionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("FilterDefinition");
        }
      }

      /// <summary>
      /// eq | ne | gt | lt | ge | le | sa | eb | ap
      /// </summary>
      [FhirElement("comparator", Order=80)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("SearchComparator")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Code<Hl7.Fhir.Model.SearchComparator>> ComparatorElement
      {
        get { if(_ComparatorElement==null) _ComparatorElement = new List<Code<Hl7.Fhir.Model.SearchComparator>>(); return _ComparatorElement; }
        set { _ComparatorElement = value; OnPropertyChanged("ComparatorElement"); }
      }

      private List<Code<Hl7.Fhir.Model.SearchComparator>> _ComparatorElement;

      /// <summary>
      /// eq | ne | gt | lt | ge | le | sa | eb | ap
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<Hl7.Fhir.Model.SearchComparator?> Comparator
      {
        get { return ComparatorElement != null ? ComparatorElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ComparatorElement = null;
          else
            ComparatorElement = new List<Code<Hl7.Fhir.Model.SearchComparator>>(value.Select(elem=>new Code<Hl7.Fhir.Model.SearchComparator>(elem)));
          OnPropertyChanged("Comparator");
        }
      }

      /// <summary>
      /// missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
      /// </summary>
      [FhirElement("modifier", Order=90)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("SearchModifierCode")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Code<Hl7.Fhir.Model.SearchModifierCode>> ModifierElement
      {
        get { if(_ModifierElement==null) _ModifierElement = new List<Code<Hl7.Fhir.Model.SearchModifierCode>>(); return _ModifierElement; }
        set { _ModifierElement = value; OnPropertyChanged("ModifierElement"); }
      }

      private List<Code<Hl7.Fhir.Model.SearchModifierCode>> _ModifierElement;

      /// <summary>
      /// missing | exact | contains | not | text | in | not-in | below | above | type | identifier | of-type | code-text | text-advanced | iterate
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<Hl7.Fhir.Model.SearchModifierCode?> Modifier
      {
        get { return ModifierElement != null ? ModifierElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ModifierElement = null;
          else
            ModifierElement = new List<Code<Hl7.Fhir.Model.SearchModifierCode>>(value.Select(elem=>new Code<Hl7.Fhir.Model.SearchModifierCode>(elem)));
          OnPropertyChanged("Modifier");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CanFilterByComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(ResourceElement != null) dest.ResourceElement = (Hl7.Fhir.Model.FhirUri)ResourceElement.DeepCopy();
        if(FilterParameterElement != null) dest.FilterParameterElement = (Hl7.Fhir.Model.FhirString)FilterParameterElement.DeepCopy();
        if(FilterDefinitionElement != null) dest.FilterDefinitionElement = (Hl7.Fhir.Model.FhirUri)FilterDefinitionElement.DeepCopy();
        if(ComparatorElement != null) dest.ComparatorElement = new List<Code<Hl7.Fhir.Model.SearchComparator>>(ComparatorElement.DeepCopy());
        if(ModifierElement != null) dest.ModifierElement = new List<Code<Hl7.Fhir.Model.SearchModifierCode>>(ModifierElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CanFilterByComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CanFilterByComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.Matches(FilterParameterElement, otherT.FilterParameterElement)) return false;
        if( !DeepComparable.Matches(FilterDefinitionElement, otherT.FilterDefinitionElement)) return false;
        if( !DeepComparable.Matches(ComparatorElement, otherT.ComparatorElement)) return false;
        if( !DeepComparable.Matches(ModifierElement, otherT.ModifierElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CanFilterByComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.IsExactly(FilterParameterElement, otherT.FilterParameterElement)) return false;
        if( !DeepComparable.IsExactly(FilterDefinitionElement, otherT.FilterDefinitionElement)) return false;
        if( !DeepComparable.IsExactly(ComparatorElement, otherT.ComparatorElement)) return false;
        if( !DeepComparable.IsExactly(ModifierElement, otherT.ModifierElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (ResourceElement != null) yield return ResourceElement;
          if (FilterParameterElement != null) yield return FilterParameterElement;
          if (FilterDefinitionElement != null) yield return FilterDefinitionElement;
          foreach (var elem in ComparatorElement) { if (elem != null) yield return elem; }
          foreach (var elem in ModifierElement) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (ResourceElement != null) yield return new ElementValue("resource", ResourceElement);
          if (FilterParameterElement != null) yield return new ElementValue("filterParameter", FilterParameterElement);
          if (FilterDefinitionElement != null) yield return new ElementValue("filterDefinition", FilterDefinitionElement);
          foreach (var elem in ComparatorElement) { if (elem != null) yield return new ElementValue("comparator", elem); }
          foreach (var elem in ModifierElement) { if (elem != null) yield return new ElementValue("modifier", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "resource":
            value = ResourceElement;
            return ResourceElement is not null;
          case "filterParameter":
            value = FilterParameterElement;
            return FilterParameterElement is not null;
          case "filterDefinition":
            value = FilterDefinitionElement;
            return FilterDefinitionElement is not null;
          case "comparator":
            value = ComparatorElement;
            return ComparatorElement?.Any() == true;
          case "modifier":
            value = ModifierElement;
            return ModifierElement?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (ResourceElement is not null) yield return new KeyValuePair<string,object>("resource",ResourceElement);
        if (FilterParameterElement is not null) yield return new KeyValuePair<string,object>("filterParameter",FilterParameterElement);
        if (FilterDefinitionElement is not null) yield return new KeyValuePair<string,object>("filterDefinition",FilterDefinitionElement);
        if (ComparatorElement?.Any() == true) yield return new KeyValuePair<string,object>("comparator",ComparatorElement);
        if (ModifierElement?.Any() == true) yield return new KeyValuePair<string,object>("modifier",ModifierElement);
      }

    }

    /// <summary>
    /// Properties for describing the shape of notifications generated by this topic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubscriptionTopic#NotificationShape", IsNestedType=true)]
    [BackboneType("SubscriptionTopic.notificationShape")]
    public partial class NotificationShapeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubscriptionTopic#NotificationShape"; } }

      /// <summary>
      /// URL of the Resource that is the focus (main) resource in a notification shape
      /// </summary>
      [FhirElement("resource", InSummary=true, Order=40)]
      [Binding("FHIRTypes")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri ResourceElement
      {
        get { return _ResourceElement; }
        set { _ResourceElement = value; OnPropertyChanged("ResourceElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _ResourceElement;

      /// <summary>
      /// URL of the Resource that is the focus (main) resource in a notification shape
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Resource
      {
        get { return ResourceElement != null ? ResourceElement.Value : null; }
        set
        {
          if (value == null)
            ResourceElement = null;
          else
            ResourceElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Resource");
        }
      }

      /// <summary>
      /// Include directives, rooted in the resource for this shape
      /// </summary>
      [FhirElement("include", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirString> IncludeElement
      {
        get { if(_IncludeElement==null) _IncludeElement = new List<Hl7.Fhir.Model.FhirString>(); return _IncludeElement; }
        set { _IncludeElement = value; OnPropertyChanged("IncludeElement"); }
      }

      private List<Hl7.Fhir.Model.FhirString> _IncludeElement;

      /// <summary>
      /// Include directives, rooted in the resource for this shape
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> Include
      {
        get { return IncludeElement != null ? IncludeElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            IncludeElement = null;
          else
            IncludeElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
          OnPropertyChanged("Include");
        }
      }

      /// <summary>
      /// Reverse include directives, rooted in the resource for this shape
      /// </summary>
      [FhirElement("revInclude", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirString> RevIncludeElement
      {
        get { if(_RevIncludeElement==null) _RevIncludeElement = new List<Hl7.Fhir.Model.FhirString>(); return _RevIncludeElement; }
        set { _RevIncludeElement = value; OnPropertyChanged("RevIncludeElement"); }
      }

      private List<Hl7.Fhir.Model.FhirString> _RevIncludeElement;

      /// <summary>
      /// Reverse include directives, rooted in the resource for this shape
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> RevInclude
      {
        get { return RevIncludeElement != null ? RevIncludeElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            RevIncludeElement = null;
          else
            RevIncludeElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
          OnPropertyChanged("RevInclude");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NotificationShapeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ResourceElement != null) dest.ResourceElement = (Hl7.Fhir.Model.FhirUri)ResourceElement.DeepCopy();
        if(IncludeElement != null) dest.IncludeElement = new List<Hl7.Fhir.Model.FhirString>(IncludeElement.DeepCopy());
        if(RevIncludeElement != null) dest.RevIncludeElement = new List<Hl7.Fhir.Model.FhirString>(RevIncludeElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NotificationShapeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NotificationShapeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.Matches(IncludeElement, otherT.IncludeElement)) return false;
        if( !DeepComparable.Matches(RevIncludeElement, otherT.RevIncludeElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NotificationShapeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.IsExactly(IncludeElement, otherT.IncludeElement)) return false;
        if( !DeepComparable.IsExactly(RevIncludeElement, otherT.RevIncludeElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ResourceElement != null) yield return ResourceElement;
          foreach (var elem in IncludeElement) { if (elem != null) yield return elem; }
          foreach (var elem in RevIncludeElement) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ResourceElement != null) yield return new ElementValue("resource", ResourceElement);
          foreach (var elem in IncludeElement) { if (elem != null) yield return new ElementValue("include", elem); }
          foreach (var elem in RevIncludeElement) { if (elem != null) yield return new ElementValue("revInclude", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "resource":
            value = ResourceElement;
            return ResourceElement is not null;
          case "include":
            value = IncludeElement;
            return IncludeElement?.Any() == true;
          case "revInclude":
            value = RevIncludeElement;
            return RevIncludeElement?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ResourceElement is not null) yield return new KeyValuePair<string,object>("resource",ResourceElement);
        if (IncludeElement?.Any() == true) yield return new KeyValuePair<string,object>("include",IncludeElement);
        if (RevIncludeElement?.Any() == true) yield return new KeyValuePair<string,object>("revInclude",RevIncludeElement);
      }

    }

    /// <summary>
    /// Canonical identifier for this subscription topic, represented as an absolute URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this subscription topic, represented as an absolute URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Business identifier for subscription topic
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the subscription topic
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the subscription topic
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// How to compare versions
    /// </summary>
    [FhirElement("versionAlgorithm", InSummary=true, Order=120, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Coding))]
    [DataMember]
    public Hl7.Fhir.Model.DataType VersionAlgorithm
    {
      get { return _VersionAlgorithm; }
      set { _VersionAlgorithm = value; OnPropertyChanged("VersionAlgorithm"); }
    }

    private Hl7.Fhir.Model.DataType _VersionAlgorithm;

    /// <summary>
    /// Name for this subscription topic (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this subscription topic (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this subscription topic (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this subscription topic (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Based on FHIR protocol or definition
    /// </summary>
    [FhirElement("derivedFrom", InSummary=true, Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> DerivedFromElement
    {
      get { if(_DerivedFromElement==null) _DerivedFromElement = new List<Hl7.Fhir.Model.Canonical>(); return _DerivedFromElement; }
      set { _DerivedFromElement = value; OnPropertyChanged("DerivedFromElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _DerivedFromElement;

    /// <summary>
    /// Based on FHIR protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> DerivedFrom
    {
      get { return DerivedFromElement != null ? DerivedFromElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          DerivedFromElement = null;
        else
          DerivedFromElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("DerivedFrom");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=160, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=170, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date status first applied
    /// </summary>
    [FhirElement("date", InSummary=true, Order=180, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date status first applied
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// The name of the individual or organization that published the SubscriptionTopic
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=190, FiveWs="FiveWs.author")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// The name of the individual or organization that published the SubscriptionTopic
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the SubscriptionTopic
    /// </summary>
    [FhirElement("description", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the SubscriptionTopic
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Content intends to support these contexts
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction of the SubscriptionTopic (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=230)]
    [Binding("Jurisdiction")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this SubscriptionTopic is defined
    /// </summary>
    [FhirElement("purpose", Order=240, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this SubscriptionTopic is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    [FhirElement("copyrightLabel", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightLabelElement
    {
      get { return _CopyrightLabelElement; }
      set { _CopyrightLabelElement = value; OnPropertyChanged("CopyrightLabelElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightLabelElement;

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CopyrightLabel
    {
      get { return CopyrightLabelElement != null ? CopyrightLabelElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightLabelElement = null;
        else
          CopyrightLabelElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CopyrightLabel");
      }
    }

    /// <summary>
    /// When SubscriptionTopic is/was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When SubscriptionTopic is/was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// Date the Subscription Topic was last reviewed by the publisher
    /// </summary>
    [FhirElement("lastReviewDate", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// Date the Subscription Topic was last reviewed by the publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// The effective date range for the SubscriptionTopic
    /// </summary>
    [FhirElement("effectivePeriod", InSummary=true, Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.Period EffectivePeriod
    {
      get { return _EffectivePeriod; }
      set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
    }

    private Hl7.Fhir.Model.Period _EffectivePeriod;

    /// <summary>
    /// Definition of a resource-based trigger for the subscription topic
    /// </summary>
    [FhirElement("resourceTrigger", InSummary=true, Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubscriptionTopic.ResourceTriggerComponent> ResourceTrigger
    {
      get { if(_ResourceTrigger==null) _ResourceTrigger = new List<Hl7.Fhir.Model.SubscriptionTopic.ResourceTriggerComponent>(); return _ResourceTrigger; }
      set { _ResourceTrigger = value; OnPropertyChanged("ResourceTrigger"); }
    }

    private List<Hl7.Fhir.Model.SubscriptionTopic.ResourceTriggerComponent> _ResourceTrigger;

    /// <summary>
    /// Event definitions the SubscriptionTopic
    /// </summary>
    [FhirElement("eventTrigger", InSummary=true, Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubscriptionTopic.EventTriggerComponent> EventTrigger
    {
      get { if(_EventTrigger==null) _EventTrigger = new List<Hl7.Fhir.Model.SubscriptionTopic.EventTriggerComponent>(); return _EventTrigger; }
      set { _EventTrigger = value; OnPropertyChanged("EventTrigger"); }
    }

    private List<Hl7.Fhir.Model.SubscriptionTopic.EventTriggerComponent> _EventTrigger;

    /// <summary>
    /// Properties by which a Subscription can filter notifications from the SubscriptionTopic
    /// </summary>
    [FhirElement("canFilterBy", InSummary=true, Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubscriptionTopic.CanFilterByComponent> CanFilterBy
    {
      get { if(_CanFilterBy==null) _CanFilterBy = new List<Hl7.Fhir.Model.SubscriptionTopic.CanFilterByComponent>(); return _CanFilterBy; }
      set { _CanFilterBy = value; OnPropertyChanged("CanFilterBy"); }
    }

    private List<Hl7.Fhir.Model.SubscriptionTopic.CanFilterByComponent> _CanFilterBy;

    /// <summary>
    /// Properties for describing the shape of notifications generated by this topic
    /// </summary>
    [FhirElement("notificationShape", InSummary=true, Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubscriptionTopic.NotificationShapeComponent> NotificationShape
    {
      get { if(_NotificationShape==null) _NotificationShape = new List<Hl7.Fhir.Model.SubscriptionTopic.NotificationShapeComponent>(); return _NotificationShape; }
      set { _NotificationShape = value; OnPropertyChanged("NotificationShape"); }
    }

    private List<Hl7.Fhir.Model.SubscriptionTopic.NotificationShapeComponent> _NotificationShape;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as SubscriptionTopic;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(VersionAlgorithm != null) dest.VersionAlgorithm = (Hl7.Fhir.Model.DataType)VersionAlgorithm.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(DerivedFromElement != null) dest.DerivedFromElement = new List<Hl7.Fhir.Model.Canonical>(DerivedFromElement.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(CopyrightLabelElement != null) dest.CopyrightLabelElement = (Hl7.Fhir.Model.FhirString)CopyrightLabelElement.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
      if(ResourceTrigger != null) dest.ResourceTrigger = new List<Hl7.Fhir.Model.SubscriptionTopic.ResourceTriggerComponent>(ResourceTrigger.DeepCopy());
      if(EventTrigger != null) dest.EventTrigger = new List<Hl7.Fhir.Model.SubscriptionTopic.EventTriggerComponent>(EventTrigger.DeepCopy());
      if(CanFilterBy != null) dest.CanFilterBy = new List<Hl7.Fhir.Model.SubscriptionTopic.CanFilterByComponent>(CanFilterBy.DeepCopy());
      if(NotificationShape != null) dest.NotificationShape = new List<Hl7.Fhir.Model.SubscriptionTopic.NotificationShapeComponent>(NotificationShape.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new SubscriptionTopic());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as SubscriptionTopic;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(DerivedFromElement, otherT.DerivedFromElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.Matches(ResourceTrigger, otherT.ResourceTrigger)) return false;
      if( !DeepComparable.Matches(EventTrigger, otherT.EventTrigger)) return false;
      if( !DeepComparable.Matches(CanFilterBy, otherT.CanFilterBy)) return false;
      if( !DeepComparable.Matches(NotificationShape, otherT.NotificationShape)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as SubscriptionTopic;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(DerivedFromElement, otherT.DerivedFromElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.IsExactly(ResourceTrigger, otherT.ResourceTrigger)) return false;
      if( !DeepComparable.IsExactly(EventTrigger, otherT.EventTrigger)) return false;
      if( !DeepComparable.IsExactly(CanFilterBy, otherT.CanFilterBy)) return false;
      if( !DeepComparable.IsExactly(NotificationShape, otherT.NotificationShape)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (VersionAlgorithm != null) yield return VersionAlgorithm;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        foreach (var elem in DerivedFromElement) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (CopyrightLabelElement != null) yield return CopyrightLabelElement;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (EffectivePeriod != null) yield return EffectivePeriod;
        foreach (var elem in ResourceTrigger) { if (elem != null) yield return elem; }
        foreach (var elem in EventTrigger) { if (elem != null) yield return elem; }
        foreach (var elem in CanFilterBy) { if (elem != null) yield return elem; }
        foreach (var elem in NotificationShape) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (VersionAlgorithm != null) yield return new ElementValue("versionAlgorithm", VersionAlgorithm);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        foreach (var elem in DerivedFromElement) { if (elem != null) yield return new ElementValue("derivedFrom", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (CopyrightLabelElement != null) yield return new ElementValue("copyrightLabel", CopyrightLabelElement);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
        foreach (var elem in ResourceTrigger) { if (elem != null) yield return new ElementValue("resourceTrigger", elem); }
        foreach (var elem in EventTrigger) { if (elem != null) yield return new ElementValue("eventTrigger", elem); }
        foreach (var elem in CanFilterBy) { if (elem != null) yield return new ElementValue("canFilterBy", elem); }
        foreach (var elem in NotificationShape) { if (elem != null) yield return new ElementValue("notificationShape", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "versionAlgorithm":
          value = VersionAlgorithm;
          return VersionAlgorithm is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "derivedFrom":
          value = DerivedFromElement;
          return DerivedFromElement?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "copyrightLabel":
          value = CopyrightLabelElement;
          return CopyrightLabelElement is not null;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "effectivePeriod":
          value = EffectivePeriod;
          return EffectivePeriod is not null;
        case "resourceTrigger":
          value = ResourceTrigger;
          return ResourceTrigger?.Any() == true;
        case "eventTrigger":
          value = EventTrigger;
          return EventTrigger?.Any() == true;
        case "canFilterBy":
          value = CanFilterBy;
          return CanFilterBy?.Any() == true;
        case "notificationShape":
          value = NotificationShape;
          return NotificationShape?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (VersionAlgorithm is not null) yield return new KeyValuePair<string,object>("versionAlgorithm",VersionAlgorithm);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (DerivedFromElement?.Any() == true) yield return new KeyValuePair<string,object>("derivedFrom",DerivedFromElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (CopyrightLabelElement is not null) yield return new KeyValuePair<string,object>("copyrightLabel",CopyrightLabelElement);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (EffectivePeriod is not null) yield return new KeyValuePair<string,object>("effectivePeriod",EffectivePeriod);
      if (ResourceTrigger?.Any() == true) yield return new KeyValuePair<string,object>("resourceTrigger",ResourceTrigger);
      if (EventTrigger?.Any() == true) yield return new KeyValuePair<string,object>("eventTrigger",EventTrigger);
      if (CanFilterBy?.Any() == true) yield return new KeyValuePair<string,object>("canFilterBy",CanFilterBy);
      if (NotificationShape?.Any() == true) yield return new KeyValuePair<string,object>("notificationShape",NotificationShape);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Ordering of medication for patient or group
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MedicationRequest","http://hl7.org/fhir/StructureDefinition/MedicationRequest", IsResource=true)]
  public partial class MedicationRequest : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MedicationRequest"; } }

    /// <summary>
    /// MedicationRequest Status Codes
    /// (url: http://hl7.org/fhir/ValueSet/medicationrequest-status)
    /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
    /// </summary>
    [FhirEnumeration("medicationrequestStatus")]
    public enum MedicationrequestStatus
    {
      /// <summary>
      /// The request is 'actionable', but not all actions that are implied by it have occurred yet.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("active", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Active")]
      Active,
      /// <summary>
      /// Actions implied by the request are to be temporarily halted. The request might or might not be resumed. May also be called 'suspended'.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("on-hold", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("On Hold")]
      OnHold,
      /// <summary>
      /// The request is no longer active and the subject should no longer be taking the medication.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("ended", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Ended")]
      Ended,
      /// <summary>
      /// Actions implied by the request are to be permanently halted, before all of the administrations occurred. This should not be used if the original order was entered in error
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("stopped", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Stopped")]
      Stopped,
      /// <summary>
      /// All actions that are implied by the request have occurred.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("completed", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// The request has been withdrawn before any administrations have occurred
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("cancelled", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// The request was recorded against the wrong patient or for some reason should not have been recorded (e.g. wrong medication, wrong dose, etc). Some of the actions that are implied by the medication request may have occurred. For example, the medication may have been dispensed and the patient may have taken some of the medication.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// The request is not yet 'actionable', e.g. it is a work in progress, requires sign-off, verification or needs to be run through decision support process.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("draft", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Draft")]
      Draft,
      /// <summary>
      /// The authoring/source system does not know which of the status values currently applies for this request. Note: This concept is not to be used for 'other' - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-status)
      /// </summary>
      [EnumLiteral("unknown", "http://hl7.org/fhir/CodeSystem/medicationrequest-status"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// MedicationRequest Intent Codes
    /// (url: http://hl7.org/fhir/ValueSet/medicationrequest-intent)
    /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
    /// </summary>
    [FhirEnumeration("medicationRequestIntent")]
    public enum MedicationRequestIntent
    {
      /// <summary>
      /// The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("proposal", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Proposal")]
      Proposal,
      /// <summary>
      /// The request represents an intention to ensure something occurs without providing an authorization for others to act.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("plan", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Plan")]
      Plan,
      /// <summary>
      /// The request represents a request/demand and authorization for action
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("order", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Order")]
      Order,
      /// <summary>
      /// The request represents the original authorization for the medication request.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("original-order", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Original Order")]
      OriginalOrder,
      /// <summary>
      /// The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization..
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("reflex-order", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Reflex Order")]
      ReflexOrder,
      /// <summary>
      /// The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("filler-order", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Filler Order")]
      FillerOrder,
      /// <summary>
      /// The request represents an instance for the particular order, for example a medication administration record.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("instance-order", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Instance Order")]
      InstanceOrder,
      /// <summary>
      /// The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or  other constraints among a set of requests.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationrequest-intent)
      /// </summary>
      [EnumLiteral("option", "http://hl7.org/fhir/CodeSystem/medicationrequest-intent"), Description("Option")]
      Option,
    }

    /// <summary>
    /// How the medication should be taken
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationRequest#Dose", IsNestedType=true)]
    public partial class DoseComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationRequest#Dose"; } }

      /// <summary>
      /// Full representation of the dosage instructions
      /// </summary>
      [FhirElement("renderedDosageInstruction", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RenderedDosageInstructionElement
      {
        get { return _RenderedDosageInstructionElement; }
        set { _RenderedDosageInstructionElement = value; OnPropertyChanged("RenderedDosageInstructionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RenderedDosageInstructionElement;

      /// <summary>
      /// Full representation of the dosage instructions
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RenderedDosageInstruction
      {
        get { return RenderedDosageInstructionElement != null ? RenderedDosageInstructionElement.Value : null; }
        set
        {
          if (value == null)
            RenderedDosageInstructionElement = null;
          else
            RenderedDosageInstructionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("RenderedDosageInstruction");
        }
      }

      /// <summary>
      /// Period over which the medication is to be taken
      /// </summary>
      [FhirElement("effectiveDosePeriod", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime EffectiveDosePeriodElement
      {
        get { return _EffectiveDosePeriodElement; }
        set { _EffectiveDosePeriodElement = value; OnPropertyChanged("EffectiveDosePeriodElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _EffectiveDosePeriodElement;

      /// <summary>
      /// Period over which the medication is to be taken
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string EffectiveDosePeriod
      {
        get { return EffectiveDosePeriodElement != null ? EffectiveDosePeriodElement.Value : null; }
        set
        {
          if (value == null)
            EffectiveDosePeriodElement = null;
          else
            EffectiveDosePeriodElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("EffectiveDosePeriod");
        }
      }

      /// <summary>
      /// Specific instructions for how the medication should be taken
      /// </summary>
      [FhirElement("dosageInstruction", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Dosage> DosageInstruction
      {
        get { if(_DosageInstruction==null) _DosageInstruction = new List<Hl7.Fhir.Model.Dosage>(); return _DosageInstruction; }
        set { _DosageInstruction = value; OnPropertyChanged("DosageInstruction"); }
      }

      private List<Hl7.Fhir.Model.Dosage> _DosageInstruction;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DoseComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RenderedDosageInstructionElement != null) dest.RenderedDosageInstructionElement = (Hl7.Fhir.Model.FhirString)RenderedDosageInstructionElement.DeepCopy();
        if(EffectiveDosePeriodElement != null) dest.EffectiveDosePeriodElement = (Hl7.Fhir.Model.FhirDateTime)EffectiveDosePeriodElement.DeepCopy();
        if(DosageInstruction != null) dest.DosageInstruction = new List<Hl7.Fhir.Model.Dosage>(DosageInstruction.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DoseComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DoseComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RenderedDosageInstructionElement, otherT.RenderedDosageInstructionElement)) return false;
        if( !DeepComparable.Matches(EffectiveDosePeriodElement, otherT.EffectiveDosePeriodElement)) return false;
        if( !DeepComparable.Matches(DosageInstruction, otherT.DosageInstruction)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DoseComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RenderedDosageInstructionElement, otherT.RenderedDosageInstructionElement)) return false;
        if( !DeepComparable.IsExactly(EffectiveDosePeriodElement, otherT.EffectiveDosePeriodElement)) return false;
        if( !DeepComparable.IsExactly(DosageInstruction, otherT.DosageInstruction)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RenderedDosageInstructionElement != null) yield return RenderedDosageInstructionElement;
          if (EffectiveDosePeriodElement != null) yield return EffectiveDosePeriodElement;
          foreach (var elem in DosageInstruction) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RenderedDosageInstructionElement != null) yield return new ElementValue("renderedDosageInstruction", RenderedDosageInstructionElement);
          if (EffectiveDosePeriodElement != null) yield return new ElementValue("effectiveDosePeriod", EffectiveDosePeriodElement);
          foreach (var elem in DosageInstruction) { if (elem != null) yield return new ElementValue("dosageInstruction", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "renderedDosageInstruction":
            value = RenderedDosageInstructionElement;
            return RenderedDosageInstructionElement is not null;
          case "effectiveDosePeriod":
            value = EffectiveDosePeriodElement;
            return EffectiveDosePeriodElement is not null;
          case "dosageInstruction":
            value = DosageInstruction;
            return DosageInstruction?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RenderedDosageInstructionElement is not null) yield return new KeyValuePair<string,object>("renderedDosageInstruction",RenderedDosageInstructionElement);
        if (EffectiveDosePeriodElement is not null) yield return new KeyValuePair<string,object>("effectiveDosePeriod",EffectiveDosePeriodElement);
        if (DosageInstruction?.Any() == true) yield return new KeyValuePair<string,object>("dosageInstruction",DosageInstruction);
      }

    }

    /// <summary>
    /// Medication supply authorization
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationRequest#DispenseRequest", IsNestedType=true)]
    public partial class DispenseRequestComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationRequest#DispenseRequest"; } }

      /// <summary>
      /// First fill details
      /// </summary>
      [FhirElement("initialFill", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.MedicationRequest.InitialFillComponent InitialFill
      {
        get { return _InitialFill; }
        set { _InitialFill = value; OnPropertyChanged("InitialFill"); }
      }

      private Hl7.Fhir.Model.MedicationRequest.InitialFillComponent _InitialFill;

      /// <summary>
      /// Minimum period of time between dispenses
      /// </summary>
      [FhirElement("dispenseInterval", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Duration DispenseInterval
      {
        get { return _DispenseInterval; }
        set { _DispenseInterval = value; OnPropertyChanged("DispenseInterval"); }
      }

      private Hl7.Fhir.Model.Duration _DispenseInterval;

      /// <summary>
      /// Time period supply is authorized for
      /// </summary>
      [FhirElement("validityPeriod", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Period ValidityPeriod
      {
        get { return _ValidityPeriod; }
        set { _ValidityPeriod = value; OnPropertyChanged("ValidityPeriod"); }
      }

      private Hl7.Fhir.Model.Period _ValidityPeriod;

      /// <summary>
      /// Number of refills authorized
      /// </summary>
      [FhirElement("numberOfRepeatsAllowed", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt NumberOfRepeatsAllowedElement
      {
        get { return _NumberOfRepeatsAllowedElement; }
        set { _NumberOfRepeatsAllowedElement = value; OnPropertyChanged("NumberOfRepeatsAllowedElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _NumberOfRepeatsAllowedElement;

      /// <summary>
      /// Number of refills authorized
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberOfRepeatsAllowed
      {
        get { return NumberOfRepeatsAllowedElement != null ? NumberOfRepeatsAllowedElement.Value : null; }
        set
        {
          if (value == null)
            NumberOfRepeatsAllowedElement = null;
          else
            NumberOfRepeatsAllowedElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("NumberOfRepeatsAllowed");
        }
      }

      /// <summary>
      /// Amount of medication to supply per dispense
      /// </summary>
      [FhirElement("quantity", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Number of days supply per dispense
      /// </summary>
      [FhirElement("expectedSupplyDuration", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Duration ExpectedSupplyDuration
      {
        get { return _ExpectedSupplyDuration; }
        set { _ExpectedSupplyDuration = value; OnPropertyChanged("ExpectedSupplyDuration"); }
      }

      private Hl7.Fhir.Model.Duration _ExpectedSupplyDuration;

      /// <summary>
      /// Intended performer of dispense
      /// </summary>
      [FhirElement("dispenser", Order=100, FiveWs="FiveWs.who")]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Dispenser
      {
        get { return _Dispenser; }
        set { _Dispenser = value; OnPropertyChanged("Dispenser"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Dispenser;

      /// <summary>
      /// Additional information for the dispenser
      /// </summary>
      [FhirElement("dispenserInstruction", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> DispenserInstruction
      {
        get { if(_DispenserInstruction==null) _DispenserInstruction = new List<Hl7.Fhir.Model.Annotation>(); return _DispenserInstruction; }
        set { _DispenserInstruction = value; OnPropertyChanged("DispenserInstruction"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _DispenserInstruction;

      /// <summary>
      /// Type of adherence packaging to use for the dispense
      /// </summary>
      [FhirElement("doseAdministrationAid", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept DoseAdministrationAid
      {
        get { return _DoseAdministrationAid; }
        set { _DoseAdministrationAid = value; OnPropertyChanged("DoseAdministrationAid"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _DoseAdministrationAid;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DispenseRequestComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(InitialFill != null) dest.InitialFill = (Hl7.Fhir.Model.MedicationRequest.InitialFillComponent)InitialFill.DeepCopy();
        if(DispenseInterval != null) dest.DispenseInterval = (Hl7.Fhir.Model.Duration)DispenseInterval.DeepCopy();
        if(ValidityPeriod != null) dest.ValidityPeriod = (Hl7.Fhir.Model.Period)ValidityPeriod.DeepCopy();
        if(NumberOfRepeatsAllowedElement != null) dest.NumberOfRepeatsAllowedElement = (Hl7.Fhir.Model.UnsignedInt)NumberOfRepeatsAllowedElement.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(ExpectedSupplyDuration != null) dest.ExpectedSupplyDuration = (Hl7.Fhir.Model.Duration)ExpectedSupplyDuration.DeepCopy();
        if(Dispenser != null) dest.Dispenser = (Hl7.Fhir.Model.ResourceReference)Dispenser.DeepCopy();
        if(DispenserInstruction != null) dest.DispenserInstruction = new List<Hl7.Fhir.Model.Annotation>(DispenserInstruction.DeepCopy());
        if(DoseAdministrationAid != null) dest.DoseAdministrationAid = (Hl7.Fhir.Model.CodeableConcept)DoseAdministrationAid.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DispenseRequestComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DispenseRequestComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(InitialFill, otherT.InitialFill)) return false;
        if( !DeepComparable.Matches(DispenseInterval, otherT.DispenseInterval)) return false;
        if( !DeepComparable.Matches(ValidityPeriod, otherT.ValidityPeriod)) return false;
        if( !DeepComparable.Matches(NumberOfRepeatsAllowedElement, otherT.NumberOfRepeatsAllowedElement)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(ExpectedSupplyDuration, otherT.ExpectedSupplyDuration)) return false;
        if( !DeepComparable.Matches(Dispenser, otherT.Dispenser)) return false;
        if( !DeepComparable.Matches(DispenserInstruction, otherT.DispenserInstruction)) return false;
        if( !DeepComparable.Matches(DoseAdministrationAid, otherT.DoseAdministrationAid)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DispenseRequestComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(InitialFill, otherT.InitialFill)) return false;
        if( !DeepComparable.IsExactly(DispenseInterval, otherT.DispenseInterval)) return false;
        if( !DeepComparable.IsExactly(ValidityPeriod, otherT.ValidityPeriod)) return false;
        if( !DeepComparable.IsExactly(NumberOfRepeatsAllowedElement, otherT.NumberOfRepeatsAllowedElement)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(ExpectedSupplyDuration, otherT.ExpectedSupplyDuration)) return false;
        if( !DeepComparable.IsExactly(Dispenser, otherT.Dispenser)) return false;
        if( !DeepComparable.IsExactly(DispenserInstruction, otherT.DispenserInstruction)) return false;
        if( !DeepComparable.IsExactly(DoseAdministrationAid, otherT.DoseAdministrationAid)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (InitialFill != null) yield return InitialFill;
          if (DispenseInterval != null) yield return DispenseInterval;
          if (ValidityPeriod != null) yield return ValidityPeriod;
          if (NumberOfRepeatsAllowedElement != null) yield return NumberOfRepeatsAllowedElement;
          if (Quantity != null) yield return Quantity;
          if (ExpectedSupplyDuration != null) yield return ExpectedSupplyDuration;
          if (Dispenser != null) yield return Dispenser;
          foreach (var elem in DispenserInstruction) { if (elem != null) yield return elem; }
          if (DoseAdministrationAid != null) yield return DoseAdministrationAid;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (InitialFill != null) yield return new ElementValue("initialFill", InitialFill);
          if (DispenseInterval != null) yield return new ElementValue("dispenseInterval", DispenseInterval);
          if (ValidityPeriod != null) yield return new ElementValue("validityPeriod", ValidityPeriod);
          if (NumberOfRepeatsAllowedElement != null) yield return new ElementValue("numberOfRepeatsAllowed", NumberOfRepeatsAllowedElement);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (ExpectedSupplyDuration != null) yield return new ElementValue("expectedSupplyDuration", ExpectedSupplyDuration);
          if (Dispenser != null) yield return new ElementValue("dispenser", Dispenser);
          foreach (var elem in DispenserInstruction) { if (elem != null) yield return new ElementValue("dispenserInstruction", elem); }
          if (DoseAdministrationAid != null) yield return new ElementValue("doseAdministrationAid", DoseAdministrationAid);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "initialFill":
            value = InitialFill;
            return InitialFill is not null;
          case "dispenseInterval":
            value = DispenseInterval;
            return DispenseInterval is not null;
          case "validityPeriod":
            value = ValidityPeriod;
            return ValidityPeriod is not null;
          case "numberOfRepeatsAllowed":
            value = NumberOfRepeatsAllowedElement;
            return NumberOfRepeatsAllowedElement is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "expectedSupplyDuration":
            value = ExpectedSupplyDuration;
            return ExpectedSupplyDuration is not null;
          case "dispenser":
            value = Dispenser;
            return Dispenser is not null;
          case "dispenserInstruction":
            value = DispenserInstruction;
            return DispenserInstruction?.Any() == true;
          case "doseAdministrationAid":
            value = DoseAdministrationAid;
            return DoseAdministrationAid is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (InitialFill is not null) yield return new KeyValuePair<string,object>("initialFill",InitialFill);
        if (DispenseInterval is not null) yield return new KeyValuePair<string,object>("dispenseInterval",DispenseInterval);
        if (ValidityPeriod is not null) yield return new KeyValuePair<string,object>("validityPeriod",ValidityPeriod);
        if (NumberOfRepeatsAllowedElement is not null) yield return new KeyValuePair<string,object>("numberOfRepeatsAllowed",NumberOfRepeatsAllowedElement);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (ExpectedSupplyDuration is not null) yield return new KeyValuePair<string,object>("expectedSupplyDuration",ExpectedSupplyDuration);
        if (Dispenser is not null) yield return new KeyValuePair<string,object>("dispenser",Dispenser);
        if (DispenserInstruction?.Any() == true) yield return new KeyValuePair<string,object>("dispenserInstruction",DispenserInstruction);
        if (DoseAdministrationAid is not null) yield return new KeyValuePair<string,object>("doseAdministrationAid",DoseAdministrationAid);
      }

    }

    /// <summary>
    /// First fill details
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationRequest#InitialFill", IsNestedType=true)]
    public partial class InitialFillComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationRequest#InitialFill"; } }

      /// <summary>
      /// First fill quantity
      /// </summary>
      [FhirElement("quantity", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// First fill duration
      /// </summary>
      [FhirElement("duration", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Duration Duration
      {
        get { return _Duration; }
        set { _Duration = value; OnPropertyChanged("Duration"); }
      }

      private Hl7.Fhir.Model.Duration _Duration;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InitialFillComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(Duration != null) dest.Duration = (Hl7.Fhir.Model.Duration)Duration.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InitialFillComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InitialFillComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(Duration, otherT.Duration)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InitialFillComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(Duration, otherT.Duration)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Quantity != null) yield return Quantity;
          if (Duration != null) yield return Duration;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (Duration != null) yield return new ElementValue("duration", Duration);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "duration":
            value = Duration;
            return Duration is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (Duration is not null) yield return new KeyValuePair<string,object>("duration",Duration);
      }

    }

    /// <summary>
    /// Any restrictions on medication substitution
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationRequest#Substitution", IsNestedType=true)]
    public partial class SubstitutionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationRequest#Substitution"; } }

      /// <summary>
      /// Whether substitution is allowed or not
      /// </summary>
      [FhirElement("allowed", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.CodeableConcept))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Allowed
      {
        get { return _Allowed; }
        set { _Allowed = value; OnPropertyChanged("Allowed"); }
      }

      private Hl7.Fhir.Model.DataType _Allowed;

      /// <summary>
      /// Why should (not) substitution be made
      /// </summary>
      [FhirElement("reason", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Reason
      {
        get { return _Reason; }
        set { _Reason = value; OnPropertyChanged("Reason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Reason;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SubstitutionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Allowed != null) dest.Allowed = (Hl7.Fhir.Model.DataType)Allowed.DeepCopy();
        if(Reason != null) dest.Reason = (Hl7.Fhir.Model.CodeableConcept)Reason.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SubstitutionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SubstitutionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Allowed, otherT.Allowed)) return false;
        if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SubstitutionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Allowed, otherT.Allowed)) return false;
        if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Allowed != null) yield return Allowed;
          if (Reason != null) yield return Reason;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Allowed != null) yield return new ElementValue("allowed", Allowed);
          if (Reason != null) yield return new ElementValue("reason", Reason);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "allowed":
            value = Allowed;
            return Allowed is not null;
          case "reason":
            value = Reason;
            return Reason is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Allowed is not null) yield return new KeyValuePair<string,object>("allowed",Allowed);
        if (Reason is not null) yield return new KeyValuePair<string,object>("reason",Reason);
      }

    }

    /// <summary>
    /// External ids for this request
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [FhirElement("instantiatesCanonical", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> InstantiatesCanonicalElement
    {
      get { if(_InstantiatesCanonicalElement==null) _InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesCanonicalElement; }
      set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _InstantiatesCanonicalElement;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesCanonical
    {
      get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesCanonicalElement = null;
        else
          InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("InstantiatesCanonical");
      }
    }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [FhirElement("instantiatesUri", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirUri> InstantiatesUriElement
    {
      get { if(_InstantiatesUriElement==null) _InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _InstantiatesUriElement; }
      set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
    }

    private List<Hl7.Fhir.Model.FhirUri> _InstantiatesUriElement;

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesUri
    {
      get { return InstantiatesUriElement != null ? InstantiatesUriElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesUriElement = null;
        else
          InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
        OnPropertyChanged("InstantiatesUri");
      }
    }

    /// <summary>
    /// What request fulfills
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("CarePlan","MedicationRequest","ServiceRequest","ImmunizationRecommendation")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// An order/prescription that is being replaced
    /// </summary>
    [FhirElement("priorPrescription", Order=130)]
    [CLSCompliant(false)]
    [References("MedicationRequest")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference PriorPrescription
    {
      get { return _PriorPrescription; }
      set { _PriorPrescription = value; OnPropertyChanged("PriorPrescription"); }
    }

    private Hl7.Fhir.Model.ResourceReference _PriorPrescription;

    /// <summary>
    /// Composite request this is part of
    /// </summary>
    [FhirElement("groupIdentifier", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier GroupIdentifier
    {
      get { return _GroupIdentifier; }
      set { _GroupIdentifier = value; OnPropertyChanged("GroupIdentifier"); }
    }

    private Hl7.Fhir.Model.Identifier _GroupIdentifier;

    /// <summary>
    /// active | on-hold | ended | stopped | completed | cancelled | entered-in-error | draft | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationRequest.MedicationrequestStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationRequest.MedicationrequestStatus> _StatusElement;

    /// <summary>
    /// active | on-hold | ended | stopped | completed | cancelled | entered-in-error | draft | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationRequest.MedicationrequestStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.MedicationRequest.MedicationrequestStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Reason for current status
    /// </summary>
    [FhirElement("statusReason", Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept StatusReason
    {
      get { return _StatusReason; }
      set { _StatusReason = value; OnPropertyChanged("StatusReason"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _StatusReason;

    /// <summary>
    /// When the status was changed
    /// </summary>
    [FhirElement("statusChanged", Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime StatusChangedElement
    {
      get { return _StatusChangedElement; }
      set { _StatusChangedElement = value; OnPropertyChanged("StatusChangedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _StatusChangedElement;

    /// <summary>
    /// When the status was changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string StatusChanged
    {
      get { return StatusChangedElement != null ? StatusChangedElement.Value : null; }
      set
      {
        if (value == null)
          StatusChangedElement = null;
        else
          StatusChangedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("StatusChanged");
      }
    }

    /// <summary>
    /// proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [FhirElement("intent", InSummary=true, IsModifier=true, Order=180, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent> _IntentElement;

    /// <summary>
    /// proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// Grouping or category of medication request
    /// </summary>
    [FhirElement("category", Order=190, FiveWs="FiveWs.class")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [FhirElement("priority", InSummary=true, Order=200, FiveWs="FiveWs.grade")]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestPriority> PriorityElement
    {
      get { return _PriorityElement; }
      set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestPriority> _PriorityElement;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestPriority? Priority
    {
      get { return PriorityElement != null ? PriorityElement.Value : null; }
      set
      {
        if (value == null)
          PriorityElement = null;
        else
          PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(value);
        OnPropertyChanged("Priority");
      }
    }

    /// <summary>
    /// True if patient is to stop taking or not to start taking the medication
    /// </summary>
    [FhirElement("doNotPerform", InSummary=true, IsModifier=true, Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean DoNotPerformElement
    {
      get { return _DoNotPerformElement; }
      set { _DoNotPerformElement = value; OnPropertyChanged("DoNotPerformElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _DoNotPerformElement;

    /// <summary>
    /// True if patient is to stop taking or not to start taking the medication
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? DoNotPerform
    {
      get { return DoNotPerformElement != null ? DoNotPerformElement.Value : null; }
      set
      {
        if (value == null)
          DoNotPerformElement = null;
        else
          DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("DoNotPerform");
      }
    }

    /// <summary>
    /// Medication to be taken
    /// </summary>
    [FhirElement("medication", InSummary=true, Order=220, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference Medication
    {
      get { return _Medication; }
      set { _Medication = value; OnPropertyChanged("Medication"); }
    }

    private Hl7.Fhir.Model.CodeableReference _Medication;

    /// <summary>
    /// Who or group medication request is for
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=230, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// The person or organization who provided the information about this request, if the source is someone other than the requestor
    /// </summary>
    [FhirElement("informationSource", Order=240)]
    [CLSCompliant(false)]
    [References("Patient","Practitioner","PractitionerRole","RelatedPerson","Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference InformationSource
    {
      get { return _InformationSource; }
      set { _InformationSource = value; OnPropertyChanged("InformationSource"); }
    }

    private Hl7.Fhir.Model.ResourceReference _InformationSource;

    /// <summary>
    /// Encounter created as part of encounter/admission/stay
    /// </summary>
    [FhirElement("encounter", Order=250, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Information to support fulfilling of the medication
    /// </summary>
    [FhirElement("supportingInformation", Order=260, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// When request was initially authored
    /// </summary>
    [FhirElement("authoredOn", InSummary=true, Order=270, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime AuthoredOnElement
    {
      get { return _AuthoredOnElement; }
      set { _AuthoredOnElement = value; OnPropertyChanged("AuthoredOnElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _AuthoredOnElement;

    /// <summary>
    /// When request was initially authored
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string AuthoredOn
    {
      get { return AuthoredOnElement != null ? AuthoredOnElement.Value : null; }
      set
      {
        if (value == null)
          AuthoredOnElement = null;
        else
          AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("AuthoredOn");
      }
    }

    /// <summary>
    /// Who/What requested the Request
    /// </summary>
    [FhirElement("requester", InSummary=true, Order=280, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization","Patient","RelatedPerson","Device")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Requester
    {
      get { return _Requester; }
      set { _Requester = value; OnPropertyChanged("Requester"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Requester;

    /// <summary>
    /// Reported rather than primary record
    /// </summary>
    [FhirElement("reported", InSummary=true, Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ReportedElement
    {
      get { return _ReportedElement; }
      set { _ReportedElement = value; OnPropertyChanged("ReportedElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ReportedElement;

    /// <summary>
    /// Reported rather than primary record
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Reported
    {
      get { return ReportedElement != null ? ReportedElement.Value : null; }
      set
      {
        if (value == null)
          ReportedElement = null;
        else
          ReportedElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Reported");
      }
    }

    /// <summary>
    /// Desired kind of performer of the medication administration
    /// </summary>
    [FhirElement("performerType", InSummary=true, Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept PerformerType
    {
      get { return _PerformerType; }
      set { _PerformerType = value; OnPropertyChanged("PerformerType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _PerformerType;

    /// <summary>
    /// Intended performer of administration
    /// </summary>
    [FhirElement("performer", Order=310, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization","Patient","Device","RelatedPerson","CareTeam","HealthcareService")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Performer
    {
      get { return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Performer;

    /// <summary>
    /// Person who entered the request
    /// </summary>
    [FhirElement("recorder", Order=320, FiveWs="FiveWs.who")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Recorder
    {
      get { return _Recorder; }
      set { _Recorder = value; OnPropertyChanged("Recorder"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Recorder;

    /// <summary>
    /// Reason or indication for ordering or not ordering the medication
    /// </summary>
    [FhirElement("reason", Order=330, FiveWs="FiveWs.why[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Reason
    {
      get { if(_Reason==null) _Reason = new List<Hl7.Fhir.Model.CodeableReference>(); return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Reason;

    /// <summary>
    /// Overall pattern of medication administration
    /// </summary>
    [FhirElement("courseOfTherapyType", Order=340)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept CourseOfTherapyType
    {
      get { return _CourseOfTherapyType; }
      set { _CourseOfTherapyType = value; OnPropertyChanged("CourseOfTherapyType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _CourseOfTherapyType;

    /// <summary>
    /// Associated insurance coverage
    /// </summary>
    [FhirElement("insurance", Order=350)]
    [CLSCompliant(false)]
    [References("Coverage","ClaimResponse")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Insurance
    {
      get { if(_Insurance==null) _Insurance = new List<Hl7.Fhir.Model.ResourceReference>(); return _Insurance; }
      set { _Insurance = value; OnPropertyChanged("Insurance"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Insurance;

    /// <summary>
    /// Information about the prescription
    /// </summary>
    [FhirElement("note", Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// How the medication should be taken
    /// </summary>
    [FhirElement("dose", Order=370)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationRequest.DoseComponent Dose
    {
      get { return _Dose; }
      set { _Dose = value; OnPropertyChanged("Dose"); }
    }

    private Hl7.Fhir.Model.MedicationRequest.DoseComponent _Dose;

    /// <summary>
    /// Medication supply authorization
    /// </summary>
    [FhirElement("dispenseRequest", Order=380)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent DispenseRequest
    {
      get { return _DispenseRequest; }
      set { _DispenseRequest = value; OnPropertyChanged("DispenseRequest"); }
    }

    private Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent _DispenseRequest;

    /// <summary>
    /// Any restrictions on medication substitution
    /// </summary>
    [FhirElement("substitution", Order=390)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent Substitution
    {
      get { return _Substitution; }
      set { _Substitution = value; OnPropertyChanged("Substitution"); }
    }

    private Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent _Substitution;

    /// <summary>
    /// Clinical Issue with action
    /// </summary>
    [FhirElement("detectedIssue", Order=400)]
    [CLSCompliant(false)]
    [References("DetectedIssue")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> DetectedIssue
    {
      get { if(_DetectedIssue==null) _DetectedIssue = new List<Hl7.Fhir.Model.ResourceReference>(); return _DetectedIssue; }
      set { _DetectedIssue = value; OnPropertyChanged("DetectedIssue"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _DetectedIssue;

    /// <summary>
    /// A list of events of interest in the lifecycle
    /// </summary>
    [FhirElement("eventHistory", Order=410)]
    [CLSCompliant(false)]
    [References("Provenance")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> EventHistory
    {
      get { if(_EventHistory==null) _EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(); return _EventHistory; }
      set { _EventHistory = value; OnPropertyChanged("EventHistory"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _EventHistory;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MedicationRequest;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesCanonicalElement.DeepCopy());
      if(InstantiatesUriElement != null) dest.InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(InstantiatesUriElement.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(PriorPrescription != null) dest.PriorPrescription = (Hl7.Fhir.Model.ResourceReference)PriorPrescription.DeepCopy();
      if(GroupIdentifier != null) dest.GroupIdentifier = (Hl7.Fhir.Model.Identifier)GroupIdentifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.MedicationRequest.MedicationrequestStatus>)StatusElement.DeepCopy();
      if(StatusReason != null) dest.StatusReason = (Hl7.Fhir.Model.CodeableConcept)StatusReason.DeepCopy();
      if(StatusChangedElement != null) dest.StatusChangedElement = (Hl7.Fhir.Model.FhirDateTime)StatusChangedElement.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent>)IntentElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.RequestPriority>)PriorityElement.DeepCopy();
      if(DoNotPerformElement != null) dest.DoNotPerformElement = (Hl7.Fhir.Model.FhirBoolean)DoNotPerformElement.DeepCopy();
      if(Medication != null) dest.Medication = (Hl7.Fhir.Model.CodeableReference)Medication.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(InformationSource != null) dest.InformationSource = (Hl7.Fhir.Model.ResourceReference)InformationSource.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(AuthoredOnElement != null) dest.AuthoredOnElement = (Hl7.Fhir.Model.FhirDateTime)AuthoredOnElement.DeepCopy();
      if(Requester != null) dest.Requester = (Hl7.Fhir.Model.ResourceReference)Requester.DeepCopy();
      if(ReportedElement != null) dest.ReportedElement = (Hl7.Fhir.Model.FhirBoolean)ReportedElement.DeepCopy();
      if(PerformerType != null) dest.PerformerType = (Hl7.Fhir.Model.CodeableConcept)PerformerType.DeepCopy();
      if(Performer != null) dest.Performer = (Hl7.Fhir.Model.ResourceReference)Performer.DeepCopy();
      if(Recorder != null) dest.Recorder = (Hl7.Fhir.Model.ResourceReference)Recorder.DeepCopy();
      if(Reason != null) dest.Reason = new List<Hl7.Fhir.Model.CodeableReference>(Reason.DeepCopy());
      if(CourseOfTherapyType != null) dest.CourseOfTherapyType = (Hl7.Fhir.Model.CodeableConcept)CourseOfTherapyType.DeepCopy();
      if(Insurance != null) dest.Insurance = new List<Hl7.Fhir.Model.ResourceReference>(Insurance.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Dose != null) dest.Dose = (Hl7.Fhir.Model.MedicationRequest.DoseComponent)Dose.DeepCopy();
      if(DispenseRequest != null) dest.DispenseRequest = (Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent)DispenseRequest.DeepCopy();
      if(Substitution != null) dest.Substitution = (Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent)Substitution.DeepCopy();
      if(DetectedIssue != null) dest.DetectedIssue = new List<Hl7.Fhir.Model.ResourceReference>(DetectedIssue.DeepCopy());
      if(EventHistory != null) dest.EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(EventHistory.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MedicationRequest());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MedicationRequest;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(PriorPrescription, otherT.PriorPrescription)) return false;
      if( !DeepComparable.Matches(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.Matches(StatusChangedElement, otherT.StatusChangedElement)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.Matches(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
      if( !DeepComparable.Matches(Medication, otherT.Medication)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.Matches(Requester, otherT.Requester)) return false;
      if( !DeepComparable.Matches(ReportedElement, otherT.ReportedElement)) return false;
      if( !DeepComparable.Matches(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(Recorder, otherT.Recorder)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(CourseOfTherapyType, otherT.CourseOfTherapyType)) return false;
      if( !DeepComparable.Matches(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Dose, otherT.Dose)) return false;
      if( !DeepComparable.Matches(DispenseRequest, otherT.DispenseRequest)) return false;
      if( !DeepComparable.Matches(Substitution, otherT.Substitution)) return false;
      if( !DeepComparable.Matches(DetectedIssue, otherT.DetectedIssue)) return false;
      if( !DeepComparable.Matches(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MedicationRequest;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(PriorPrescription, otherT.PriorPrescription)) return false;
      if( !DeepComparable.IsExactly(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.IsExactly(StatusChangedElement, otherT.StatusChangedElement)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.IsExactly(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
      if( !DeepComparable.IsExactly(Medication, otherT.Medication)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.IsExactly(Requester, otherT.Requester)) return false;
      if( !DeepComparable.IsExactly(ReportedElement, otherT.ReportedElement)) return false;
      if( !DeepComparable.IsExactly(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(Recorder, otherT.Recorder)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(CourseOfTherapyType, otherT.CourseOfTherapyType)) return false;
      if( !DeepComparable.IsExactly(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Dose, otherT.Dose)) return false;
      if( !DeepComparable.IsExactly(DispenseRequest, otherT.DispenseRequest)) return false;
      if( !DeepComparable.IsExactly(Substitution, otherT.Substitution)) return false;
      if( !DeepComparable.IsExactly(DetectedIssue, otherT.DetectedIssue)) return false;
      if( !DeepComparable.IsExactly(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (PriorPrescription != null) yield return PriorPrescription;
        if (GroupIdentifier != null) yield return GroupIdentifier;
        if (StatusElement != null) yield return StatusElement;
        if (StatusReason != null) yield return StatusReason;
        if (StatusChangedElement != null) yield return StatusChangedElement;
        if (IntentElement != null) yield return IntentElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (PriorityElement != null) yield return PriorityElement;
        if (DoNotPerformElement != null) yield return DoNotPerformElement;
        if (Medication != null) yield return Medication;
        if (Subject != null) yield return Subject;
        if (InformationSource != null) yield return InformationSource;
        if (Encounter != null) yield return Encounter;
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        if (AuthoredOnElement != null) yield return AuthoredOnElement;
        if (Requester != null) yield return Requester;
        if (ReportedElement != null) yield return ReportedElement;
        if (PerformerType != null) yield return PerformerType;
        if (Performer != null) yield return Performer;
        if (Recorder != null) yield return Recorder;
        foreach (var elem in Reason) { if (elem != null) yield return elem; }
        if (CourseOfTherapyType != null) yield return CourseOfTherapyType;
        foreach (var elem in Insurance) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (Dose != null) yield return Dose;
        if (DispenseRequest != null) yield return DispenseRequest;
        if (Substitution != null) yield return Substitution;
        foreach (var elem in DetectedIssue) { if (elem != null) yield return elem; }
        foreach (var elem in EventHistory) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return new ElementValue("instantiatesCanonical", elem); }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return new ElementValue("instantiatesUri", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (PriorPrescription != null) yield return new ElementValue("priorPrescription", PriorPrescription);
        if (GroupIdentifier != null) yield return new ElementValue("groupIdentifier", GroupIdentifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (StatusReason != null) yield return new ElementValue("statusReason", StatusReason);
        if (StatusChangedElement != null) yield return new ElementValue("statusChanged", StatusChangedElement);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        if (DoNotPerformElement != null) yield return new ElementValue("doNotPerform", DoNotPerformElement);
        if (Medication != null) yield return new ElementValue("medication", Medication);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (InformationSource != null) yield return new ElementValue("informationSource", InformationSource);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        if (AuthoredOnElement != null) yield return new ElementValue("authoredOn", AuthoredOnElement);
        if (Requester != null) yield return new ElementValue("requester", Requester);
        if (ReportedElement != null) yield return new ElementValue("reported", ReportedElement);
        if (PerformerType != null) yield return new ElementValue("performerType", PerformerType);
        if (Performer != null) yield return new ElementValue("performer", Performer);
        if (Recorder != null) yield return new ElementValue("recorder", Recorder);
        foreach (var elem in Reason) { if (elem != null) yield return new ElementValue("reason", elem); }
        if (CourseOfTherapyType != null) yield return new ElementValue("courseOfTherapyType", CourseOfTherapyType);
        foreach (var elem in Insurance) { if (elem != null) yield return new ElementValue("insurance", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (Dose != null) yield return new ElementValue("dose", Dose);
        if (DispenseRequest != null) yield return new ElementValue("dispenseRequest", DispenseRequest);
        if (Substitution != null) yield return new ElementValue("substitution", Substitution);
        foreach (var elem in DetectedIssue) { if (elem != null) yield return new ElementValue("detectedIssue", elem); }
        foreach (var elem in EventHistory) { if (elem != null) yield return new ElementValue("eventHistory", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "instantiatesCanonical":
          value = InstantiatesCanonicalElement;
          return InstantiatesCanonicalElement?.Any() == true;
        case "instantiatesUri":
          value = InstantiatesUriElement;
          return InstantiatesUriElement?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "priorPrescription":
          value = PriorPrescription;
          return PriorPrescription is not null;
        case "groupIdentifier":
          value = GroupIdentifier;
          return GroupIdentifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "statusReason":
          value = StatusReason;
          return StatusReason is not null;
        case "statusChanged":
          value = StatusChangedElement;
          return StatusChangedElement is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "priority":
          value = PriorityElement;
          return PriorityElement is not null;
        case "doNotPerform":
          value = DoNotPerformElement;
          return DoNotPerformElement is not null;
        case "medication":
          value = Medication;
          return Medication is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "informationSource":
          value = InformationSource;
          return InformationSource is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "supportingInformation":
          value = SupportingInformation;
          return SupportingInformation?.Any() == true;
        case "authoredOn":
          value = AuthoredOnElement;
          return AuthoredOnElement is not null;
        case "requester":
          value = Requester;
          return Requester is not null;
        case "reported":
          value = ReportedElement;
          return ReportedElement is not null;
        case "performerType":
          value = PerformerType;
          return PerformerType is not null;
        case "performer":
          value = Performer;
          return Performer is not null;
        case "recorder":
          value = Recorder;
          return Recorder is not null;
        case "reason":
          value = Reason;
          return Reason?.Any() == true;
        case "courseOfTherapyType":
          value = CourseOfTherapyType;
          return CourseOfTherapyType is not null;
        case "insurance":
          value = Insurance;
          return Insurance?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "dose":
          value = Dose;
          return Dose is not null;
        case "dispenseRequest":
          value = DispenseRequest;
          return DispenseRequest is not null;
        case "substitution":
          value = Substitution;
          return Substitution is not null;
        case "detectedIssue":
          value = DetectedIssue;
          return DetectedIssue?.Any() == true;
        case "eventHistory":
          value = EventHistory;
          return EventHistory?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (InstantiatesCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
      if (InstantiatesUriElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (PriorPrescription is not null) yield return new KeyValuePair<string,object>("priorPrescription",PriorPrescription);
      if (GroupIdentifier is not null) yield return new KeyValuePair<string,object>("groupIdentifier",GroupIdentifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (StatusReason is not null) yield return new KeyValuePair<string,object>("statusReason",StatusReason);
      if (StatusChangedElement is not null) yield return new KeyValuePair<string,object>("statusChanged",StatusChangedElement);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      if (DoNotPerformElement is not null) yield return new KeyValuePair<string,object>("doNotPerform",DoNotPerformElement);
      if (Medication is not null) yield return new KeyValuePair<string,object>("medication",Medication);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (InformationSource is not null) yield return new KeyValuePair<string,object>("informationSource",InformationSource);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (SupportingInformation?.Any() == true) yield return new KeyValuePair<string,object>("supportingInformation",SupportingInformation);
      if (AuthoredOnElement is not null) yield return new KeyValuePair<string,object>("authoredOn",AuthoredOnElement);
      if (Requester is not null) yield return new KeyValuePair<string,object>("requester",Requester);
      if (ReportedElement is not null) yield return new KeyValuePair<string,object>("reported",ReportedElement);
      if (PerformerType is not null) yield return new KeyValuePair<string,object>("performerType",PerformerType);
      if (Performer is not null) yield return new KeyValuePair<string,object>("performer",Performer);
      if (Recorder is not null) yield return new KeyValuePair<string,object>("recorder",Recorder);
      if (Reason?.Any() == true) yield return new KeyValuePair<string,object>("reason",Reason);
      if (CourseOfTherapyType is not null) yield return new KeyValuePair<string,object>("courseOfTherapyType",CourseOfTherapyType);
      if (Insurance?.Any() == true) yield return new KeyValuePair<string,object>("insurance",Insurance);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Dose is not null) yield return new KeyValuePair<string,object>("dose",Dose);
      if (DispenseRequest is not null) yield return new KeyValuePair<string,object>("dispenseRequest",DispenseRequest);
      if (Substitution is not null) yield return new KeyValuePair<string,object>("substitution",Substitution);
      if (DetectedIssue?.Any() == true) yield return new KeyValuePair<string,object>("detectedIssue",DetectedIssue);
      if (EventHistory?.Any() == true) yield return new KeyValuePair<string,object>("eventHistory",EventHistory);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Immunization event information
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Immunization","http://hl7.org/fhir/StructureDefinition/Immunization", IsResource=true)]
  public partial class Immunization : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Immunization"; } }

    /// <summary>
    /// The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the current status of the administered dose of vaccine.
    /// (url: http://hl7.org/fhir/ValueSet/immunization-status)
    /// (system: http://hl7.org/fhir/event-status)
    /// </summary>
    [FhirEnumeration("ImmunizationStatusCodes", "http://hl7.org/fhir/ValueSet/immunization-status")]
    public enum ImmunizationStatusCodes
    {
      /// <summary>
      /// The event has now concluded.
      /// (system: http://hl7.org/fhir/event-status)
      /// </summary>
      [EnumLiteral("completed", "http://hl7.org/fhir/event-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// This electronic record should never have existed, though it is possible that real-world decisions were based on it.  (If real-world activity has occurred, the status should be "stopped" rather than "entered-in-error".).
      /// (system: http://hl7.org/fhir/event-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/event-status"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// The event was terminated prior to any activity beyond preparation.  I.e. The 'main' activity has not yet begun.  The boundary between preparatory and the 'main' activity is context-specific.
      /// (system: http://hl7.org/fhir/event-status)
      /// </summary>
      [EnumLiteral("not-done", "http://hl7.org/fhir/event-status"), Description("Not Done")]
      NotDone,
    }

    /// <summary>
    /// Who performed event
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Immunization#Performer", IsNestedType=true)]
    [BackboneType("Immunization.performer")]
    public partial class PerformerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Immunization#Performer"; } }

      /// <summary>
      /// What type of performance was done
      /// </summary>
      [FhirElement("function", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Function
      {
        get { return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Function;

      /// <summary>
      /// Individual or organization who was performing
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=50, FiveWs="FiveWs.actor")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","Patient","RelatedPerson")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PerformerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Function != null) dest.Function = (Hl7.Fhir.Model.CodeableConcept)Function.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PerformerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Function != null) yield return Function;
          if (Actor != null) yield return Actor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Function != null) yield return new ElementValue("function", Function);
          if (Actor != null) yield return new ElementValue("actor", Actor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "function":
            value = Function;
            return Function is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Function is not null) yield return new KeyValuePair<string,object>("function",Function);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
      }

    }

    /// <summary>
    /// Patient eligibility for a specific vaccination program
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Immunization#ProgramEligibility", IsNestedType=true)]
    [BackboneType("Immunization.programEligibility")]
    public partial class ProgramEligibilityComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Immunization#ProgramEligibility"; } }

      /// <summary>
      /// The program that eligibility is declared for
      /// </summary>
      [FhirElement("program", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Program
      {
        get { return _Program; }
        set { _Program = value; OnPropertyChanged("Program"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Program;

      /// <summary>
      /// The patient's eligibility status for the program
      /// </summary>
      [FhirElement("programStatus", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProgramStatus
      {
        get { return _ProgramStatus; }
        set { _ProgramStatus = value; OnPropertyChanged("ProgramStatus"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProgramStatus;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProgramEligibilityComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Program != null) dest.Program = (Hl7.Fhir.Model.CodeableConcept)Program.DeepCopy();
        if(ProgramStatus != null) dest.ProgramStatus = (Hl7.Fhir.Model.CodeableConcept)ProgramStatus.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProgramEligibilityComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProgramEligibilityComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Program, otherT.Program)) return false;
        if( !DeepComparable.Matches(ProgramStatus, otherT.ProgramStatus)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProgramEligibilityComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Program, otherT.Program)) return false;
        if( !DeepComparable.IsExactly(ProgramStatus, otherT.ProgramStatus)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Program != null) yield return Program;
          if (ProgramStatus != null) yield return ProgramStatus;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Program != null) yield return new ElementValue("program", Program);
          if (ProgramStatus != null) yield return new ElementValue("programStatus", ProgramStatus);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "program":
            value = Program;
            return Program is not null;
          case "programStatus":
            value = ProgramStatus;
            return ProgramStatus is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Program is not null) yield return new KeyValuePair<string,object>("program",Program);
        if (ProgramStatus is not null) yield return new KeyValuePair<string,object>("programStatus",ProgramStatus);
      }

    }

    /// <summary>
    /// Details of a reaction that follows immunization
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Immunization#Reaction", IsNestedType=true)]
    [BackboneType("Immunization.reaction")]
    public partial class ReactionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Immunization#Reaction"; } }

      /// <summary>
      /// When reaction started
      /// </summary>
      [FhirElement("date", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _DateElement;

      /// <summary>
      /// When reaction started
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// Additional information on reaction
      /// </summary>
      [FhirElement("manifestation", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Manifestation
      {
        get { return _Manifestation; }
        set { _Manifestation = value; OnPropertyChanged("Manifestation"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Manifestation;

      /// <summary>
      /// Indicates self-reported reaction
      /// </summary>
      [FhirElement("reported", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ReportedElement
      {
        get { return _ReportedElement; }
        set { _ReportedElement = value; OnPropertyChanged("ReportedElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ReportedElement;

      /// <summary>
      /// Indicates self-reported reaction
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Reported
      {
        get { return ReportedElement != null ? ReportedElement.Value : null; }
        set
        {
          if (value == null)
            ReportedElement = null;
          else
            ReportedElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Reported");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ReactionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
        if(Manifestation != null) dest.Manifestation = (Hl7.Fhir.Model.CodeableReference)Manifestation.DeepCopy();
        if(ReportedElement != null) dest.ReportedElement = (Hl7.Fhir.Model.FhirBoolean)ReportedElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ReactionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ReactionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(Manifestation, otherT.Manifestation)) return false;
        if( !DeepComparable.Matches(ReportedElement, otherT.ReportedElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ReactionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(Manifestation, otherT.Manifestation)) return false;
        if( !DeepComparable.IsExactly(ReportedElement, otherT.ReportedElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DateElement != null) yield return DateElement;
          if (Manifestation != null) yield return Manifestation;
          if (ReportedElement != null) yield return ReportedElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (Manifestation != null) yield return new ElementValue("manifestation", Manifestation);
          if (ReportedElement != null) yield return new ElementValue("reported", ReportedElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "date":
            value = DateElement;
            return DateElement is not null;
          case "manifestation":
            value = Manifestation;
            return Manifestation is not null;
          case "reported":
            value = ReportedElement;
            return ReportedElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
        if (Manifestation is not null) yield return new KeyValuePair<string,object>("manifestation",Manifestation);
        if (ReportedElement is not null) yield return new KeyValuePair<string,object>("reported",ReportedElement);
      }

    }

    /// <summary>
    /// Protocol followed by the provider
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Immunization#ProtocolApplied", IsNestedType=true)]
    [BackboneType("Immunization.protocolApplied")]
    public partial class ProtocolAppliedComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Immunization#ProtocolApplied"; } }

      /// <summary>
      /// Name of vaccine series
      /// </summary>
      [FhirElement("series", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString SeriesElement
      {
        get { return _SeriesElement; }
        set { _SeriesElement = value; OnPropertyChanged("SeriesElement"); }
      }

      private Hl7.Fhir.Model.FhirString _SeriesElement;

      /// <summary>
      /// Name of vaccine series
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Series
      {
        get { return SeriesElement != null ? SeriesElement.Value : null; }
        set
        {
          if (value == null)
            SeriesElement = null;
          else
            SeriesElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Series");
        }
      }

      /// <summary>
      /// Who is responsible for publishing the recommendations
      /// </summary>
      [FhirElement("authority", Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Authority
      {
        get { return _Authority; }
        set { _Authority = value; OnPropertyChanged("Authority"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Authority;

      /// <summary>
      /// Vaccine preventatable disease being targeted
      /// </summary>
      [FhirElement("targetDisease", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> TargetDisease
      {
        get { if(_TargetDisease==null) _TargetDisease = new List<Hl7.Fhir.Model.CodeableConcept>(); return _TargetDisease; }
        set { _TargetDisease = value; OnPropertyChanged("TargetDisease"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _TargetDisease;

      /// <summary>
      /// Dose number within series
      /// </summary>
      [FhirElement("doseNumber", Order=70)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DoseNumberElement
      {
        get { return _DoseNumberElement; }
        set { _DoseNumberElement = value; OnPropertyChanged("DoseNumberElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DoseNumberElement;

      /// <summary>
      /// Dose number within series
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DoseNumber
      {
        get { return DoseNumberElement != null ? DoseNumberElement.Value : null; }
        set
        {
          if (value == null)
            DoseNumberElement = null;
          else
            DoseNumberElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("DoseNumber");
        }
      }

      /// <summary>
      /// Recommended number of doses for immunity
      /// </summary>
      [FhirElement("seriesDoses", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString SeriesDosesElement
      {
        get { return _SeriesDosesElement; }
        set { _SeriesDosesElement = value; OnPropertyChanged("SeriesDosesElement"); }
      }

      private Hl7.Fhir.Model.FhirString _SeriesDosesElement;

      /// <summary>
      /// Recommended number of doses for immunity
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SeriesDoses
      {
        get { return SeriesDosesElement != null ? SeriesDosesElement.Value : null; }
        set
        {
          if (value == null)
            SeriesDosesElement = null;
          else
            SeriesDosesElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("SeriesDoses");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProtocolAppliedComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SeriesElement != null) dest.SeriesElement = (Hl7.Fhir.Model.FhirString)SeriesElement.DeepCopy();
        if(Authority != null) dest.Authority = (Hl7.Fhir.Model.ResourceReference)Authority.DeepCopy();
        if(TargetDisease != null) dest.TargetDisease = new List<Hl7.Fhir.Model.CodeableConcept>(TargetDisease.DeepCopy());
        if(DoseNumberElement != null) dest.DoseNumberElement = (Hl7.Fhir.Model.FhirString)DoseNumberElement.DeepCopy();
        if(SeriesDosesElement != null) dest.SeriesDosesElement = (Hl7.Fhir.Model.FhirString)SeriesDosesElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProtocolAppliedComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProtocolAppliedComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SeriesElement, otherT.SeriesElement)) return false;
        if( !DeepComparable.Matches(Authority, otherT.Authority)) return false;
        if( !DeepComparable.Matches(TargetDisease, otherT.TargetDisease)) return false;
        if( !DeepComparable.Matches(DoseNumberElement, otherT.DoseNumberElement)) return false;
        if( !DeepComparable.Matches(SeriesDosesElement, otherT.SeriesDosesElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProtocolAppliedComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SeriesElement, otherT.SeriesElement)) return false;
        if( !DeepComparable.IsExactly(Authority, otherT.Authority)) return false;
        if( !DeepComparable.IsExactly(TargetDisease, otherT.TargetDisease)) return false;
        if( !DeepComparable.IsExactly(DoseNumberElement, otherT.DoseNumberElement)) return false;
        if( !DeepComparable.IsExactly(SeriesDosesElement, otherT.SeriesDosesElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SeriesElement != null) yield return SeriesElement;
          if (Authority != null) yield return Authority;
          foreach (var elem in TargetDisease) { if (elem != null) yield return elem; }
          if (DoseNumberElement != null) yield return DoseNumberElement;
          if (SeriesDosesElement != null) yield return SeriesDosesElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SeriesElement != null) yield return new ElementValue("series", SeriesElement);
          if (Authority != null) yield return new ElementValue("authority", Authority);
          foreach (var elem in TargetDisease) { if (elem != null) yield return new ElementValue("targetDisease", elem); }
          if (DoseNumberElement != null) yield return new ElementValue("doseNumber", DoseNumberElement);
          if (SeriesDosesElement != null) yield return new ElementValue("seriesDoses", SeriesDosesElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "series":
            value = SeriesElement;
            return SeriesElement is not null;
          case "authority":
            value = Authority;
            return Authority is not null;
          case "targetDisease":
            value = TargetDisease;
            return TargetDisease?.Any() == true;
          case "doseNumber":
            value = DoseNumberElement;
            return DoseNumberElement is not null;
          case "seriesDoses":
            value = SeriesDosesElement;
            return SeriesDosesElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SeriesElement is not null) yield return new KeyValuePair<string,object>("series",SeriesElement);
        if (Authority is not null) yield return new KeyValuePair<string,object>("authority",Authority);
        if (TargetDisease?.Any() == true) yield return new KeyValuePair<string,object>("targetDisease",TargetDisease);
        if (DoseNumberElement is not null) yield return new KeyValuePair<string,object>("doseNumber",DoseNumberElement);
        if (SeriesDosesElement is not null) yield return new KeyValuePair<string,object>("seriesDoses",SeriesDosesElement);
      }

    }

    /// <summary>
    /// Business identifier
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Authority that the immunization event is based on
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=100)]
    [CLSCompliant(false)]
    [References("CarePlan","MedicationRequest","ServiceRequest","ImmunizationRecommendation")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// completed | entered-in-error | not-done
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=110, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ImmunizationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes> _StatusElement;

    /// <summary>
    /// completed | entered-in-error | not-done
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Reason for current status
    /// </summary>
    [FhirElement("statusReason", Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept StatusReason
    {
      get { return _StatusReason; }
      set { _StatusReason = value; OnPropertyChanged("StatusReason"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _StatusReason;

    /// <summary>
    /// Vaccine administered
    /// </summary>
    [FhirElement("vaccineCode", InSummary=true, Order=130, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept VaccineCode
    {
      get { return _VaccineCode; }
      set { _VaccineCode = value; OnPropertyChanged("VaccineCode"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _VaccineCode;

    /// <summary>
    /// Product that was administered
    /// </summary>
    [FhirElement("administeredProduct", Order=140, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference AdministeredProduct
    {
      get { return _AdministeredProduct; }
      set { _AdministeredProduct = value; OnPropertyChanged("AdministeredProduct"); }
    }

    private Hl7.Fhir.Model.CodeableReference _AdministeredProduct;

    /// <summary>
    /// Vaccine manufacturer
    /// </summary>
    [FhirElement("manufacturer", Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference Manufacturer
    {
      get { return _Manufacturer; }
      set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
    }

    private Hl7.Fhir.Model.CodeableReference _Manufacturer;

    /// <summary>
    /// Vaccine lot number
    /// </summary>
    [FhirElement("lotNumber", Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString LotNumberElement
    {
      get { return _LotNumberElement; }
      set { _LotNumberElement = value; OnPropertyChanged("LotNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _LotNumberElement;

    /// <summary>
    /// Vaccine lot number
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LotNumber
    {
      get { return LotNumberElement != null ? LotNumberElement.Value : null; }
      set
      {
        if (value == null)
          LotNumberElement = null;
        else
          LotNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("LotNumber");
      }
    }

    /// <summary>
    /// Vaccine expiration date
    /// </summary>
    [FhirElement("expirationDate", Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.Date ExpirationDateElement
    {
      get { return _ExpirationDateElement; }
      set { _ExpirationDateElement = value; OnPropertyChanged("ExpirationDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ExpirationDateElement;

    /// <summary>
    /// Vaccine expiration date
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ExpirationDate
    {
      get { return ExpirationDateElement != null ? ExpirationDateElement.Value : null; }
      set
      {
        if (value == null)
          ExpirationDateElement = null;
        else
          ExpirationDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ExpirationDate");
      }
    }

    /// <summary>
    /// Who was immunized
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=180, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// Encounter immunization was part of
    /// </summary>
    [FhirElement("encounter", Order=190, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Additional information in support of the immunization
    /// </summary>
    [FhirElement("supportingInformation", Order=200, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// Vaccine administration date
    /// </summary>
    [FhirElement("occurrence", InSummary=true, Order=210, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.FhirString))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.DataType Occurrence
    {
      get { return _Occurrence; }
      set { _Occurrence = value; OnPropertyChanged("Occurrence"); }
    }

    private Hl7.Fhir.Model.DataType _Occurrence;

    /// <summary>
    /// Indicates context the data was captured in
    /// </summary>
    [FhirElement("primarySource", InSummary=true, Order=220, FiveWs="FiveWs.source")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean PrimarySourceElement
    {
      get { return _PrimarySourceElement; }
      set { _PrimarySourceElement = value; OnPropertyChanged("PrimarySourceElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _PrimarySourceElement;

    /// <summary>
    /// Indicates context the data was captured in
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? PrimarySource
    {
      get { return PrimarySourceElement != null ? PrimarySourceElement.Value : null; }
      set
      {
        if (value == null)
          PrimarySourceElement = null;
        else
          PrimarySourceElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("PrimarySource");
      }
    }

    /// <summary>
    /// Indicates the source of a  reported record
    /// </summary>
    [FhirElement("informationSource", Order=230, FiveWs="FiveWs.source")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference InformationSource
    {
      get { return _InformationSource; }
      set { _InformationSource = value; OnPropertyChanged("InformationSource"); }
    }

    private Hl7.Fhir.Model.CodeableReference _InformationSource;

    /// <summary>
    /// Where immunization occurred
    /// </summary>
    [FhirElement("location", Order=240, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// Body site vaccine  was administered
    /// </summary>
    [FhirElement("site", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Site
    {
      get { return _Site; }
      set { _Site = value; OnPropertyChanged("Site"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Site;

    /// <summary>
    /// How vaccine entered body
    /// </summary>
    [FhirElement("route", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Route
    {
      get { return _Route; }
      set { _Route = value; OnPropertyChanged("Route"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Route;

    /// <summary>
    /// Amount of vaccine administered
    /// </summary>
    [FhirElement("doseQuantity", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Quantity DoseQuantity
    {
      get { return _DoseQuantity; }
      set { _DoseQuantity = value; OnPropertyChanged("DoseQuantity"); }
    }

    private Hl7.Fhir.Model.Quantity _DoseQuantity;

    /// <summary>
    /// Who performed event
    /// </summary>
    [FhirElement("performer", InSummary=true, Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Immunization.PerformerComponent> Performer
    {
      get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.Immunization.PerformerComponent>(); return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private List<Hl7.Fhir.Model.Immunization.PerformerComponent> _Performer;

    /// <summary>
    /// Additional immunization notes
    /// </summary>
    [FhirElement("note", InSummary=true, Order=290)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Why immunization occurred
    /// </summary>
    [FhirElement("reason", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Reason
    {
      get { if(_Reason==null) _Reason = new List<Hl7.Fhir.Model.CodeableReference>(); return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Reason;

    /// <summary>
    /// Dose potency
    /// </summary>
    [FhirElement("isSubpotent", InSummary=true, IsModifier=true, Order=310)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean IsSubpotentElement
    {
      get { return _IsSubpotentElement; }
      set { _IsSubpotentElement = value; OnPropertyChanged("IsSubpotentElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _IsSubpotentElement;

    /// <summary>
    /// Dose potency
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? IsSubpotent
    {
      get { return IsSubpotentElement != null ? IsSubpotentElement.Value : null; }
      set
      {
        if (value == null)
          IsSubpotentElement = null;
        else
          IsSubpotentElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("IsSubpotent");
      }
    }

    /// <summary>
    /// Reason for being subpotent
    /// </summary>
    [FhirElement("subpotentReason", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> SubpotentReason
    {
      get { if(_SubpotentReason==null) _SubpotentReason = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SubpotentReason; }
      set { _SubpotentReason = value; OnPropertyChanged("SubpotentReason"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _SubpotentReason;

    /// <summary>
    /// Patient eligibility for a specific vaccination program
    /// </summary>
    [FhirElement("programEligibility", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Immunization.ProgramEligibilityComponent> ProgramEligibility
    {
      get { if(_ProgramEligibility==null) _ProgramEligibility = new List<Hl7.Fhir.Model.Immunization.ProgramEligibilityComponent>(); return _ProgramEligibility; }
      set { _ProgramEligibility = value; OnPropertyChanged("ProgramEligibility"); }
    }

    private List<Hl7.Fhir.Model.Immunization.ProgramEligibilityComponent> _ProgramEligibility;

    /// <summary>
    /// Funding source for the vaccine
    /// </summary>
    [FhirElement("fundingSource", Order=340)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept FundingSource
    {
      get { return _FundingSource; }
      set { _FundingSource = value; OnPropertyChanged("FundingSource"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _FundingSource;

    /// <summary>
    /// Details of a reaction that follows immunization
    /// </summary>
    [FhirElement("reaction", Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Immunization.ReactionComponent> Reaction
    {
      get { if(_Reaction==null) _Reaction = new List<Hl7.Fhir.Model.Immunization.ReactionComponent>(); return _Reaction; }
      set { _Reaction = value; OnPropertyChanged("Reaction"); }
    }

    private List<Hl7.Fhir.Model.Immunization.ReactionComponent> _Reaction;

    /// <summary>
    /// Protocol followed by the provider
    /// </summary>
    [FhirElement("protocolApplied", Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent> ProtocolApplied
    {
      get { if(_ProtocolApplied==null) _ProtocolApplied = new List<Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent>(); return _ProtocolApplied; }
      set { _ProtocolApplied = value; OnPropertyChanged("ProtocolApplied"); }
    }

    private List<Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent> _ProtocolApplied;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Immunization;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Immunization.ImmunizationStatusCodes>)StatusElement.DeepCopy();
      if(StatusReason != null) dest.StatusReason = (Hl7.Fhir.Model.CodeableConcept)StatusReason.DeepCopy();
      if(VaccineCode != null) dest.VaccineCode = (Hl7.Fhir.Model.CodeableConcept)VaccineCode.DeepCopy();
      if(AdministeredProduct != null) dest.AdministeredProduct = (Hl7.Fhir.Model.CodeableReference)AdministeredProduct.DeepCopy();
      if(Manufacturer != null) dest.Manufacturer = (Hl7.Fhir.Model.CodeableReference)Manufacturer.DeepCopy();
      if(LotNumberElement != null) dest.LotNumberElement = (Hl7.Fhir.Model.FhirString)LotNumberElement.DeepCopy();
      if(ExpirationDateElement != null) dest.ExpirationDateElement = (Hl7.Fhir.Model.Date)ExpirationDateElement.DeepCopy();
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(Occurrence != null) dest.Occurrence = (Hl7.Fhir.Model.DataType)Occurrence.DeepCopy();
      if(PrimarySourceElement != null) dest.PrimarySourceElement = (Hl7.Fhir.Model.FhirBoolean)PrimarySourceElement.DeepCopy();
      if(InformationSource != null) dest.InformationSource = (Hl7.Fhir.Model.CodeableReference)InformationSource.DeepCopy();
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Site != null) dest.Site = (Hl7.Fhir.Model.CodeableConcept)Site.DeepCopy();
      if(Route != null) dest.Route = (Hl7.Fhir.Model.CodeableConcept)Route.DeepCopy();
      if(DoseQuantity != null) dest.DoseQuantity = (Hl7.Fhir.Model.Quantity)DoseQuantity.DeepCopy();
      if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.Immunization.PerformerComponent>(Performer.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Reason != null) dest.Reason = new List<Hl7.Fhir.Model.CodeableReference>(Reason.DeepCopy());
      if(IsSubpotentElement != null) dest.IsSubpotentElement = (Hl7.Fhir.Model.FhirBoolean)IsSubpotentElement.DeepCopy();
      if(SubpotentReason != null) dest.SubpotentReason = new List<Hl7.Fhir.Model.CodeableConcept>(SubpotentReason.DeepCopy());
      if(ProgramEligibility != null) dest.ProgramEligibility = new List<Hl7.Fhir.Model.Immunization.ProgramEligibilityComponent>(ProgramEligibility.DeepCopy());
      if(FundingSource != null) dest.FundingSource = (Hl7.Fhir.Model.CodeableConcept)FundingSource.DeepCopy();
      if(Reaction != null) dest.Reaction = new List<Hl7.Fhir.Model.Immunization.ReactionComponent>(Reaction.DeepCopy());
      if(ProtocolApplied != null) dest.ProtocolApplied = new List<Hl7.Fhir.Model.Immunization.ProtocolAppliedComponent>(ProtocolApplied.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Immunization());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Immunization;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.Matches(VaccineCode, otherT.VaccineCode)) return false;
      if( !DeepComparable.Matches(AdministeredProduct, otherT.AdministeredProduct)) return false;
      if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.Matches(LotNumberElement, otherT.LotNumberElement)) return false;
      if( !DeepComparable.Matches(ExpirationDateElement, otherT.ExpirationDateElement)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(Occurrence, otherT.Occurrence)) return false;
      if( !DeepComparable.Matches(PrimarySourceElement, otherT.PrimarySourceElement)) return false;
      if( !DeepComparable.Matches(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Site, otherT.Site)) return false;
      if( !DeepComparable.Matches(Route, otherT.Route)) return false;
      if( !DeepComparable.Matches(DoseQuantity, otherT.DoseQuantity)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(IsSubpotentElement, otherT.IsSubpotentElement)) return false;
      if( !DeepComparable.Matches(SubpotentReason, otherT.SubpotentReason)) return false;
      if( !DeepComparable.Matches(ProgramEligibility, otherT.ProgramEligibility)) return false;
      if( !DeepComparable.Matches(FundingSource, otherT.FundingSource)) return false;
      if( !DeepComparable.Matches(Reaction, otherT.Reaction)) return false;
      if( !DeepComparable.Matches(ProtocolApplied, otherT.ProtocolApplied)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Immunization;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.IsExactly(VaccineCode, otherT.VaccineCode)) return false;
      if( !DeepComparable.IsExactly(AdministeredProduct, otherT.AdministeredProduct)) return false;
      if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.IsExactly(LotNumberElement, otherT.LotNumberElement)) return false;
      if( !DeepComparable.IsExactly(ExpirationDateElement, otherT.ExpirationDateElement)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(Occurrence, otherT.Occurrence)) return false;
      if( !DeepComparable.IsExactly(PrimarySourceElement, otherT.PrimarySourceElement)) return false;
      if( !DeepComparable.IsExactly(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
      if( !DeepComparable.IsExactly(Route, otherT.Route)) return false;
      if( !DeepComparable.IsExactly(DoseQuantity, otherT.DoseQuantity)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(IsSubpotentElement, otherT.IsSubpotentElement)) return false;
      if( !DeepComparable.IsExactly(SubpotentReason, otherT.SubpotentReason)) return false;
      if( !DeepComparable.IsExactly(ProgramEligibility, otherT.ProgramEligibility)) return false;
      if( !DeepComparable.IsExactly(FundingSource, otherT.FundingSource)) return false;
      if( !DeepComparable.IsExactly(Reaction, otherT.Reaction)) return false;
      if( !DeepComparable.IsExactly(ProtocolApplied, otherT.ProtocolApplied)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (StatusReason != null) yield return StatusReason;
        if (VaccineCode != null) yield return VaccineCode;
        if (AdministeredProduct != null) yield return AdministeredProduct;
        if (Manufacturer != null) yield return Manufacturer;
        if (LotNumberElement != null) yield return LotNumberElement;
        if (ExpirationDateElement != null) yield return ExpirationDateElement;
        if (Patient != null) yield return Patient;
        if (Encounter != null) yield return Encounter;
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        if (Occurrence != null) yield return Occurrence;
        if (PrimarySourceElement != null) yield return PrimarySourceElement;
        if (InformationSource != null) yield return InformationSource;
        if (Location != null) yield return Location;
        if (Site != null) yield return Site;
        if (Route != null) yield return Route;
        if (DoseQuantity != null) yield return DoseQuantity;
        foreach (var elem in Performer) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Reason) { if (elem != null) yield return elem; }
        if (IsSubpotentElement != null) yield return IsSubpotentElement;
        foreach (var elem in SubpotentReason) { if (elem != null) yield return elem; }
        foreach (var elem in ProgramEligibility) { if (elem != null) yield return elem; }
        if (FundingSource != null) yield return FundingSource;
        foreach (var elem in Reaction) { if (elem != null) yield return elem; }
        foreach (var elem in ProtocolApplied) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (StatusReason != null) yield return new ElementValue("statusReason", StatusReason);
        if (VaccineCode != null) yield return new ElementValue("vaccineCode", VaccineCode);
        if (AdministeredProduct != null) yield return new ElementValue("administeredProduct", AdministeredProduct);
        if (Manufacturer != null) yield return new ElementValue("manufacturer", Manufacturer);
        if (LotNumberElement != null) yield return new ElementValue("lotNumber", LotNumberElement);
        if (ExpirationDateElement != null) yield return new ElementValue("expirationDate", ExpirationDateElement);
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        if (Occurrence != null) yield return new ElementValue("occurrence", Occurrence);
        if (PrimarySourceElement != null) yield return new ElementValue("primarySource", PrimarySourceElement);
        if (InformationSource != null) yield return new ElementValue("informationSource", InformationSource);
        if (Location != null) yield return new ElementValue("location", Location);
        if (Site != null) yield return new ElementValue("site", Site);
        if (Route != null) yield return new ElementValue("route", Route);
        if (DoseQuantity != null) yield return new ElementValue("doseQuantity", DoseQuantity);
        foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Reason) { if (elem != null) yield return new ElementValue("reason", elem); }
        if (IsSubpotentElement != null) yield return new ElementValue("isSubpotent", IsSubpotentElement);
        foreach (var elem in SubpotentReason) { if (elem != null) yield return new ElementValue("subpotentReason", elem); }
        foreach (var elem in ProgramEligibility) { if (elem != null) yield return new ElementValue("programEligibility", elem); }
        if (FundingSource != null) yield return new ElementValue("fundingSource", FundingSource);
        foreach (var elem in Reaction) { if (elem != null) yield return new ElementValue("reaction", elem); }
        foreach (var elem in ProtocolApplied) { if (elem != null) yield return new ElementValue("protocolApplied", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "statusReason":
          value = StatusReason;
          return StatusReason is not null;
        case "vaccineCode":
          value = VaccineCode;
          return VaccineCode is not null;
        case "administeredProduct":
          value = AdministeredProduct;
          return AdministeredProduct is not null;
        case "manufacturer":
          value = Manufacturer;
          return Manufacturer is not null;
        case "lotNumber":
          value = LotNumberElement;
          return LotNumberElement is not null;
        case "expirationDate":
          value = ExpirationDateElement;
          return ExpirationDateElement is not null;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "supportingInformation":
          value = SupportingInformation;
          return SupportingInformation?.Any() == true;
        case "occurrence":
          value = Occurrence;
          return Occurrence is not null;
        case "primarySource":
          value = PrimarySourceElement;
          return PrimarySourceElement is not null;
        case "informationSource":
          value = InformationSource;
          return InformationSource is not null;
        case "location":
          value = Location;
          return Location is not null;
        case "site":
          value = Site;
          return Site is not null;
        case "route":
          value = Route;
          return Route is not null;
        case "doseQuantity":
          value = DoseQuantity;
          return DoseQuantity is not null;
        case "performer":
          value = Performer;
          return Performer?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "reason":
          value = Reason;
          return Reason?.Any() == true;
        case "isSubpotent":
          value = IsSubpotentElement;
          return IsSubpotentElement is not null;
        case "subpotentReason":
          value = SubpotentReason;
          return SubpotentReason?.Any() == true;
        case "programEligibility":
          value = ProgramEligibility;
          return ProgramEligibility?.Any() == true;
        case "fundingSource":
          value = FundingSource;
          return FundingSource is not null;
        case "reaction":
          value = Reaction;
          return Reaction?.Any() == true;
        case "protocolApplied":
          value = ProtocolApplied;
          return ProtocolApplied?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (StatusReason is not null) yield return new KeyValuePair<string,object>("statusReason",StatusReason);
      if (VaccineCode is not null) yield return new KeyValuePair<string,object>("vaccineCode",VaccineCode);
      if (AdministeredProduct is not null) yield return new KeyValuePair<string,object>("administeredProduct",AdministeredProduct);
      if (Manufacturer is not null) yield return new KeyValuePair<string,object>("manufacturer",Manufacturer);
      if (LotNumberElement is not null) yield return new KeyValuePair<string,object>("lotNumber",LotNumberElement);
      if (ExpirationDateElement is not null) yield return new KeyValuePair<string,object>("expirationDate",ExpirationDateElement);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (SupportingInformation?.Any() == true) yield return new KeyValuePair<string,object>("supportingInformation",SupportingInformation);
      if (Occurrence is not null) yield return new KeyValuePair<string,object>("occurrence",Occurrence);
      if (PrimarySourceElement is not null) yield return new KeyValuePair<string,object>("primarySource",PrimarySourceElement);
      if (InformationSource is not null) yield return new KeyValuePair<string,object>("informationSource",InformationSource);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Site is not null) yield return new KeyValuePair<string,object>("site",Site);
      if (Route is not null) yield return new KeyValuePair<string,object>("route",Route);
      if (DoseQuantity is not null) yield return new KeyValuePair<string,object>("doseQuantity",DoseQuantity);
      if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Reason?.Any() == true) yield return new KeyValuePair<string,object>("reason",Reason);
      if (IsSubpotentElement is not null) yield return new KeyValuePair<string,object>("isSubpotent",IsSubpotentElement);
      if (SubpotentReason?.Any() == true) yield return new KeyValuePair<string,object>("subpotentReason",SubpotentReason);
      if (ProgramEligibility?.Any() == true) yield return new KeyValuePair<string,object>("programEligibility",ProgramEligibility);
      if (FundingSource is not null) yield return new KeyValuePair<string,object>("fundingSource",FundingSource);
      if (Reaction?.Any() == true) yield return new KeyValuePair<string,object>("reaction",Reaction);
      if (ProtocolApplied?.Any() == true) yield return new KeyValuePair<string,object>("protocolApplied",ProtocolApplied);
    }

  }

}

// end of file

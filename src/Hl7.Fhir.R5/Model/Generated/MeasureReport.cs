// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Results of a measure evaluation
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MeasureReport","http://hl7.org/fhir/StructureDefinition/MeasureReport", IsResource=true)]
  public partial class MeasureReport : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MeasureReport"; } }

    /// <summary>
    /// The status of the measure report.
    /// (url: http://hl7.org/fhir/ValueSet/measure-report-status)
    /// (system: http://hl7.org/fhir/measure-report-status)
    /// </summary>
    [FhirEnumeration("MeasureReportStatus", "http://hl7.org/fhir/ValueSet/measure-report-status", "http://hl7.org/fhir/measure-report-status")]
    public enum MeasureReportStatus
    {
      /// <summary>
      /// The report is complete and ready for use.
      /// (system: http://hl7.org/fhir/measure-report-status)
      /// </summary>
      [EnumLiteral("complete"), Description("Complete")]
      Complete,
      /// <summary>
      /// The report is currently being generated.
      /// (system: http://hl7.org/fhir/measure-report-status)
      /// </summary>
      [EnumLiteral("pending"), Description("Pending")]
      Pending,
      /// <summary>
      /// An error occurred attempting to generate the report.
      /// (system: http://hl7.org/fhir/measure-report-status)
      /// </summary>
      [EnumLiteral("error"), Description("Error")]
      Error,
    }

    /// <summary>
    /// The type of the measure report.
    /// (url: http://hl7.org/fhir/ValueSet/measure-report-type)
    /// (system: http://hl7.org/fhir/measure-report-type)
    /// </summary>
    [FhirEnumeration("MeasureReportType", "http://hl7.org/fhir/ValueSet/measure-report-type", "http://hl7.org/fhir/measure-report-type")]
    public enum MeasureReportType
    {
      /// <summary>
      /// An individual report that provides information on the performance for a given measure with respect to a single subject.
      /// (system: http://hl7.org/fhir/measure-report-type)
      /// </summary>
      [EnumLiteral("individual"), Description("Individual")]
      Individual,
      /// <summary>
      /// A subject list report that includes a listing of subjects that satisfied each population criteria in the measure.
      /// (system: http://hl7.org/fhir/measure-report-type)
      /// </summary>
      [EnumLiteral("subject-list"), Description("Subject List")]
      SubjectList,
      /// <summary>
      /// A summary report that returns the number of members in each population criteria for the measure.
      /// (system: http://hl7.org/fhir/measure-report-type)
      /// </summary>
      [EnumLiteral("summary"), Description("Summary")]
      Summary,
      /// <summary>
      /// A data exchange report that contains data-of-interest for the measure (i.e. data that is needed to calculate the measure)
      /// (system: http://hl7.org/fhir/measure-report-type)
      /// </summary>
      [EnumLiteral("data-exchange"), Description("Data Exchange")]
      DataExchange,
    }

    /// <summary>
    /// Concepts for how a measure report consumer and receiver coordinate data exchange updates. The choices are snapshot or incremental updates
    /// (url: http://hl7.org/fhir/ValueSet/submit-data-update-type)
    /// (system: http://hl7.org/fhir/CodeSystem/submit-data-update-type)
    /// </summary>
    [FhirEnumeration("SubmitDataUpdateType", "http://hl7.org/fhir/ValueSet/submit-data-update-type", "http://hl7.org/fhir/CodeSystem/submit-data-update-type")]
    public enum SubmitDataUpdateType
    {
      /// <summary>
      /// In contrast to the Snapshot Update, the FHIR Parameters resource used in a Submit Data or the Collect Data scenario contains only the new and updated DEQM and QI Core Profiles since the last transaction. If the Consumer supports incremental updates, the contents of the updated payload updates the previous payload data.
      /// (system: http://hl7.org/fhir/CodeSystem/submit-data-update-type)
      /// </summary>
      [EnumLiteral("incremental"), Description("Incremental")]
      Incremental,
      /// <summary>
      /// In contrast to the Incremental Update, the FHIR Parameters resource used in a Submit Data or the Collect Data scenario contains all the DEQM and QI Core Profiles for each transaction.  If the Consumer supports snapshot updates, the contents of the updated payload entirely replaces the previous payload
      /// (system: http://hl7.org/fhir/CodeSystem/submit-data-update-type)
      /// </summary>
      [EnumLiteral("snapshot"), Description("Snapshot")]
      Snapshot,
    }

    /// <summary>
    /// Measure results for each group
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#Group", IsNestedType=true)]
    [BackboneType("MeasureReport.group")]
    public partial class GroupComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#Group"; } }

      /// <summary>
      /// Pointer to specific group from Measure
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LinkIdElement;

      /// <summary>
      /// Pointer to specific group from Measure
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// Meaning of the group
      /// </summary>
      [FhirElement("code", InSummary=true, Order=50)]
      [Binding("MeasureGroupExample")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// What individual(s) the report is for
      /// </summary>
      [FhirElement("subject", InSummary=true, Order=60, FiveWs="FiveWs.subject[x]")]
      [CLSCompliant(false)]
      [References("CareTeam","Device","Group","HealthcareService","Location","Organization","Patient","Practitioner","PractitionerRole","RelatedPerson")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Subject
      {
        get { return _Subject; }
        set { _Subject = value; OnPropertyChanged("Subject"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Subject;

      /// <summary>
      /// The populations in the group
      /// </summary>
      [FhirElement("population", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.PopulationComponent> Population
      {
        get { if(_Population==null) _Population = new List<Hl7.Fhir.Model.MeasureReport.PopulationComponent>(); return _Population; }
        set { _Population = value; OnPropertyChanged("Population"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.PopulationComponent> _Population;

      /// <summary>
      /// What score this group achieved
      /// </summary>
      [FhirElement("measureScore", InSummary=true, Order=80, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Duration))]
      [DataMember]
      public Hl7.Fhir.Model.DataType MeasureScore
      {
        get { return _MeasureScore; }
        set { _MeasureScore = value; OnPropertyChanged("MeasureScore"); }
      }

      private Hl7.Fhir.Model.DataType _MeasureScore;

      /// <summary>
      /// Stratification results
      /// </summary>
      [FhirElement("stratifier", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.StratifierComponent> Stratifier
      {
        get { if(_Stratifier==null) _Stratifier = new List<Hl7.Fhir.Model.MeasureReport.StratifierComponent>(); return _Stratifier; }
        set { _Stratifier = value; OnPropertyChanged("Stratifier"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.StratifierComponent> _Stratifier;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as GroupComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.FhirString)LinkIdElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
        if(Population != null) dest.Population = new List<Hl7.Fhir.Model.MeasureReport.PopulationComponent>(Population.DeepCopy());
        if(MeasureScore != null) dest.MeasureScore = (Hl7.Fhir.Model.DataType)MeasureScore.DeepCopy();
        if(Stratifier != null) dest.Stratifier = new List<Hl7.Fhir.Model.MeasureReport.StratifierComponent>(Stratifier.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new GroupComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as GroupComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
        if( !DeepComparable.Matches(Population, otherT.Population)) return false;
        if( !DeepComparable.Matches(MeasureScore, otherT.MeasureScore)) return false;
        if( !DeepComparable.Matches(Stratifier, otherT.Stratifier)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as GroupComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
        if( !DeepComparable.IsExactly(Population, otherT.Population)) return false;
        if( !DeepComparable.IsExactly(MeasureScore, otherT.MeasureScore)) return false;
        if( !DeepComparable.IsExactly(Stratifier, otherT.Stratifier)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (Code != null) yield return Code;
          if (Subject != null) yield return Subject;
          foreach (var elem in Population) { if (elem != null) yield return elem; }
          if (MeasureScore != null) yield return MeasureScore;
          foreach (var elem in Stratifier) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (Code != null) yield return new ElementValue("code", Code);
          if (Subject != null) yield return new ElementValue("subject", Subject);
          foreach (var elem in Population) { if (elem != null) yield return new ElementValue("population", elem); }
          if (MeasureScore != null) yield return new ElementValue("measureScore", MeasureScore);
          foreach (var elem in Stratifier) { if (elem != null) yield return new ElementValue("stratifier", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "subject":
            value = Subject;
            return Subject is not null;
          case "population":
            value = Population;
            return Population?.Any() == true;
          case "measureScore":
            value = MeasureScore;
            return MeasureScore is not null;
          case "stratifier":
            value = Stratifier;
            return Stratifier?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
        if (Population?.Any() == true) yield return new KeyValuePair<string,object>("population",Population);
        if (MeasureScore is not null) yield return new KeyValuePair<string,object>("measureScore",MeasureScore);
        if (Stratifier?.Any() == true) yield return new KeyValuePair<string,object>("stratifier",Stratifier);
      }

    }

    /// <summary>
    /// The populations in the group
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#Population", IsNestedType=true)]
    [BackboneType("MeasureReport.group.population")]
    public partial class PopulationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#Population"; } }

      /// <summary>
      /// Pointer to specific population from Measure
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LinkIdElement;

      /// <summary>
      /// Pointer to specific population from Measure
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation
      /// </summary>
      [FhirElement("code", InSummary=true, Order=50)]
      [Binding("MeasurePopulation")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Size of the population
      /// </summary>
      [FhirElement("count", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// Size of the population
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      /// <summary>
      /// For subject-list reports, the subject results in this population
      /// </summary>
      [FhirElement("subjectResults", Order=70)]
      [CLSCompliant(false)]
      [References("List")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference SubjectResults
      {
        get { return _SubjectResults; }
        set { _SubjectResults = value; OnPropertyChanged("SubjectResults"); }
      }

      private Hl7.Fhir.Model.ResourceReference _SubjectResults;

      /// <summary>
      /// For subject-list reports, a subject result in this population
      /// </summary>
      [FhirElement("subjectReport", Order=80)]
      [CLSCompliant(false)]
      [References("MeasureReport")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> SubjectReport
      {
        get { if(_SubjectReport==null) _SubjectReport = new List<Hl7.Fhir.Model.ResourceReference>(); return _SubjectReport; }
        set { _SubjectReport = value; OnPropertyChanged("SubjectReport"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _SubjectReport;

      /// <summary>
      /// What individual(s) in the population
      /// </summary>
      [FhirElement("subjects", Order=90, FiveWs="FiveWs.subject[x]")]
      [CLSCompliant(false)]
      [References("Group")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Subjects
      {
        get { return _Subjects; }
        set { _Subjects = value; OnPropertyChanged("Subjects"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Subjects;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PopulationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.FhirString)LinkIdElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        if(SubjectResults != null) dest.SubjectResults = (Hl7.Fhir.Model.ResourceReference)SubjectResults.DeepCopy();
        if(SubjectReport != null) dest.SubjectReport = new List<Hl7.Fhir.Model.ResourceReference>(SubjectReport.DeepCopy());
        if(Subjects != null) dest.Subjects = (Hl7.Fhir.Model.ResourceReference)Subjects.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PopulationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PopulationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.Matches(SubjectResults, otherT.SubjectResults)) return false;
        if( !DeepComparable.Matches(SubjectReport, otherT.SubjectReport)) return false;
        if( !DeepComparable.Matches(Subjects, otherT.Subjects)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PopulationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.IsExactly(SubjectResults, otherT.SubjectResults)) return false;
        if( !DeepComparable.IsExactly(SubjectReport, otherT.SubjectReport)) return false;
        if( !DeepComparable.IsExactly(Subjects, otherT.Subjects)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (Code != null) yield return Code;
          if (CountElement != null) yield return CountElement;
          if (SubjectResults != null) yield return SubjectResults;
          foreach (var elem in SubjectReport) { if (elem != null) yield return elem; }
          if (Subjects != null) yield return Subjects;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (Code != null) yield return new ElementValue("code", Code);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
          if (SubjectResults != null) yield return new ElementValue("subjectResults", SubjectResults);
          foreach (var elem in SubjectReport) { if (elem != null) yield return new ElementValue("subjectReport", elem); }
          if (Subjects != null) yield return new ElementValue("subjects", Subjects);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "count":
            value = CountElement;
            return CountElement is not null;
          case "subjectResults":
            value = SubjectResults;
            return SubjectResults is not null;
          case "subjectReport":
            value = SubjectReport;
            return SubjectReport?.Any() == true;
          case "subjects":
            value = Subjects;
            return Subjects is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (CountElement is not null) yield return new KeyValuePair<string,object>("count",CountElement);
        if (SubjectResults is not null) yield return new KeyValuePair<string,object>("subjectResults",SubjectResults);
        if (SubjectReport?.Any() == true) yield return new KeyValuePair<string,object>("subjectReport",SubjectReport);
        if (Subjects is not null) yield return new KeyValuePair<string,object>("subjects",Subjects);
      }

    }

    /// <summary>
    /// Stratification results
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#Stratifier", IsNestedType=true)]
    [BackboneType("MeasureReport.group.stratifier")]
    public partial class StratifierComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#Stratifier"; } }

      /// <summary>
      /// Pointer to specific stratifier from Measure
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LinkIdElement;

      /// <summary>
      /// Pointer to specific stratifier from Measure
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// What stratifier of the group
      /// </summary>
      [FhirElement("code", Order=50)]
      [Binding("MeasureStratifierExample")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components
      /// </summary>
      [FhirElement("stratum", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent> Stratum
      {
        get { if(_Stratum==null) _Stratum = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent>(); return _Stratum; }
        set { _Stratum = value; OnPropertyChanged("Stratum"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent> _Stratum;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StratifierComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.FhirString)LinkIdElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Stratum != null) dest.Stratum = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent>(Stratum.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StratifierComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StratifierComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Stratum, otherT.Stratum)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StratifierComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Stratum, otherT.Stratum)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (Code != null) yield return Code;
          foreach (var elem in Stratum) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in Stratum) { if (elem != null) yield return new ElementValue("stratum", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "stratum":
            value = Stratum;
            return Stratum?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Stratum?.Any() == true) yield return new KeyValuePair<string,object>("stratum",Stratum);
      }

    }

    /// <summary>
    /// Stratum results, one for each unique value, or set of values, in the stratifier, or stratifier components
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#StratifierGroup", IsNestedType=true)]
    [BackboneType("MeasureReport.group.stratifier.stratum")]
    public partial class StratifierGroupComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#StratifierGroup"; } }

      /// <summary>
      /// The stratum value, e.g. male
      /// </summary>
      [FhirElement("value", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [Binding("MeasureReportStratifierValueExample")]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      /// <summary>
      /// Stratifier component values
      /// </summary>
      [FhirElement("component", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.ComponentComponent> Component
      {
        get { if(_Component==null) _Component = new List<Hl7.Fhir.Model.MeasureReport.ComponentComponent>(); return _Component; }
        set { _Component = value; OnPropertyChanged("Component"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.ComponentComponent> _Component;

      /// <summary>
      /// Population results in this stratum
      /// </summary>
      [FhirElement("population", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent> Population
      {
        get { if(_Population==null) _Population = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent>(); return _Population; }
        set { _Population = value; OnPropertyChanged("Population"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent> _Population;

      /// <summary>
      /// What score this stratum achieved
      /// </summary>
      [FhirElement("measureScore", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Duration))]
      [DataMember]
      public Hl7.Fhir.Model.DataType MeasureScore
      {
        get { return _MeasureScore; }
        set { _MeasureScore = value; OnPropertyChanged("MeasureScore"); }
      }

      private Hl7.Fhir.Model.DataType _MeasureScore;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StratifierGroupComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        if(Component != null) dest.Component = new List<Hl7.Fhir.Model.MeasureReport.ComponentComponent>(Component.DeepCopy());
        if(Population != null) dest.Population = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent>(Population.DeepCopy());
        if(MeasureScore != null) dest.MeasureScore = (Hl7.Fhir.Model.DataType)MeasureScore.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StratifierGroupComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StratifierGroupComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(Component, otherT.Component)) return false;
        if( !DeepComparable.Matches(Population, otherT.Population)) return false;
        if( !DeepComparable.Matches(MeasureScore, otherT.MeasureScore)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StratifierGroupComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;
        if( !DeepComparable.IsExactly(Population, otherT.Population)) return false;
        if( !DeepComparable.IsExactly(MeasureScore, otherT.MeasureScore)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Value != null) yield return Value;
          foreach (var elem in Component) { if (elem != null) yield return elem; }
          foreach (var elem in Population) { if (elem != null) yield return elem; }
          if (MeasureScore != null) yield return MeasureScore;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Value != null) yield return new ElementValue("value", Value);
          foreach (var elem in Component) { if (elem != null) yield return new ElementValue("component", elem); }
          foreach (var elem in Population) { if (elem != null) yield return new ElementValue("population", elem); }
          if (MeasureScore != null) yield return new ElementValue("measureScore", MeasureScore);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "value":
            value = Value;
            return Value is not null;
          case "component":
            value = Component;
            return Component?.Any() == true;
          case "population":
            value = Population;
            return Population?.Any() == true;
          case "measureScore":
            value = MeasureScore;
            return MeasureScore is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
        if (Component?.Any() == true) yield return new KeyValuePair<string,object>("component",Component);
        if (Population?.Any() == true) yield return new KeyValuePair<string,object>("population",Population);
        if (MeasureScore is not null) yield return new KeyValuePair<string,object>("measureScore",MeasureScore);
      }

    }

    /// <summary>
    /// Stratifier component values
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#Component", IsNestedType=true)]
    [BackboneType("MeasureReport.group.stratifier.stratum.component")]
    public partial class ComponentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#Component"; } }

      /// <summary>
      /// Pointer to specific stratifier component from Measure
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LinkIdElement;

      /// <summary>
      /// Pointer to specific stratifier component from Measure
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// What stratifier component of the group
      /// </summary>
      [FhirElement("code", Order=50)]
      [Binding("MeasureStratifierExample")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// The stratum component value, e.g. male
      /// </summary>
      [FhirElement("value", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [Binding("MeasureReportStratifierValueExample")]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ComponentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.FhirString)LinkIdElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ComponentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (Code != null) yield return Code;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (Code != null) yield return new ElementValue("code", Code);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Population results in this stratum
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#StratifierGroupPopulation", IsNestedType=true)]
    [BackboneType("MeasureReport.group.stratifier.stratum.population")]
    public partial class StratifierGroupPopulationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#StratifierGroupPopulation"; } }

      /// <summary>
      /// Pointer to specific population from Measure
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LinkIdElement;

      /// <summary>
      /// Pointer to specific population from Measure
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-observation
      /// </summary>
      [FhirElement("code", Order=50)]
      [Binding("MeasurePopulation")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Size of the population
      /// </summary>
      [FhirElement("count", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// Size of the population
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      /// <summary>
      /// For subject-list reports, the subject results in this population
      /// </summary>
      [FhirElement("subjectResults", Order=70)]
      [CLSCompliant(false)]
      [References("List")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference SubjectResults
      {
        get { return _SubjectResults; }
        set { _SubjectResults = value; OnPropertyChanged("SubjectResults"); }
      }

      private Hl7.Fhir.Model.ResourceReference _SubjectResults;

      /// <summary>
      /// For subject-list reports, a subject result in this population
      /// </summary>
      [FhirElement("subjectReport", Order=80)]
      [CLSCompliant(false)]
      [References("MeasureReport")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> SubjectReport
      {
        get { if(_SubjectReport==null) _SubjectReport = new List<Hl7.Fhir.Model.ResourceReference>(); return _SubjectReport; }
        set { _SubjectReport = value; OnPropertyChanged("SubjectReport"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _SubjectReport;

      /// <summary>
      /// What individual(s) in the population
      /// </summary>
      [FhirElement("subjects", Order=90, FiveWs="FiveWs.subject[x]")]
      [CLSCompliant(false)]
      [References("Group")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Subjects
      {
        get { return _Subjects; }
        set { _Subjects = value; OnPropertyChanged("Subjects"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Subjects;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StratifierGroupPopulationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.FhirString)LinkIdElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        if(SubjectResults != null) dest.SubjectResults = (Hl7.Fhir.Model.ResourceReference)SubjectResults.DeepCopy();
        if(SubjectReport != null) dest.SubjectReport = new List<Hl7.Fhir.Model.ResourceReference>(SubjectReport.DeepCopy());
        if(Subjects != null) dest.Subjects = (Hl7.Fhir.Model.ResourceReference)Subjects.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StratifierGroupPopulationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StratifierGroupPopulationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.Matches(SubjectResults, otherT.SubjectResults)) return false;
        if( !DeepComparable.Matches(SubjectReport, otherT.SubjectReport)) return false;
        if( !DeepComparable.Matches(Subjects, otherT.Subjects)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StratifierGroupPopulationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.IsExactly(SubjectResults, otherT.SubjectResults)) return false;
        if( !DeepComparable.IsExactly(SubjectReport, otherT.SubjectReport)) return false;
        if( !DeepComparable.IsExactly(Subjects, otherT.Subjects)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (Code != null) yield return Code;
          if (CountElement != null) yield return CountElement;
          if (SubjectResults != null) yield return SubjectResults;
          foreach (var elem in SubjectReport) { if (elem != null) yield return elem; }
          if (Subjects != null) yield return Subjects;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (Code != null) yield return new ElementValue("code", Code);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
          if (SubjectResults != null) yield return new ElementValue("subjectResults", SubjectResults);
          foreach (var elem in SubjectReport) { if (elem != null) yield return new ElementValue("subjectReport", elem); }
          if (Subjects != null) yield return new ElementValue("subjects", Subjects);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "count":
            value = CountElement;
            return CountElement is not null;
          case "subjectResults":
            value = SubjectResults;
            return SubjectResults is not null;
          case "subjectReport":
            value = SubjectReport;
            return SubjectReport?.Any() == true;
          case "subjects":
            value = Subjects;
            return Subjects is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (CountElement is not null) yield return new KeyValuePair<string,object>("count",CountElement);
        if (SubjectResults is not null) yield return new KeyValuePair<string,object>("subjectResults",SubjectResults);
        if (SubjectReport?.Any() == true) yield return new KeyValuePair<string,object>("subjectReport",SubjectReport);
        if (Subjects is not null) yield return new KeyValuePair<string,object>("subjects",Subjects);
      }

    }

    /// <summary>
    /// Additional identifier for the MeasureReport
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// complete | pending | error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("MeasureReportStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus> _StatusElement;

    /// <summary>
    /// complete | pending | error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MeasureReport.MeasureReportStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// individual | subject-list | summary | data-exchange
    /// </summary>
    [FhirElement("type", InSummary=true, Order=110, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("MeasureReportType")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType> TypeElement
    {
      get { return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType> _TypeElement;

    /// <summary>
    /// individual | subject-list | summary | data-exchange
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MeasureReport.MeasureReportType? Type
    {
      get { return TypeElement != null ? TypeElement.Value : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType>(value);
        OnPropertyChanged("Type");
      }
    }

    /// <summary>
    /// incremental | snapshot
    /// </summary>
    [FhirElement("dataUpdateType", InSummary=true, IsModifier=true, Order=120)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("SubmitDataUpdateType")]
    [DataMember]
    public Code<Hl7.Fhir.Model.MeasureReport.SubmitDataUpdateType> DataUpdateTypeElement
    {
      get { return _DataUpdateTypeElement; }
      set { _DataUpdateTypeElement = value; OnPropertyChanged("DataUpdateTypeElement"); }
    }

    private Code<Hl7.Fhir.Model.MeasureReport.SubmitDataUpdateType> _DataUpdateTypeElement;

    /// <summary>
    /// incremental | snapshot
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MeasureReport.SubmitDataUpdateType? DataUpdateType
    {
      get { return DataUpdateTypeElement != null ? DataUpdateTypeElement.Value : null; }
      set
      {
        if (value == null)
          DataUpdateTypeElement = null;
        else
          DataUpdateTypeElement = new Code<Hl7.Fhir.Model.MeasureReport.SubmitDataUpdateType>(value);
        OnPropertyChanged("DataUpdateType");
      }
    }

    /// <summary>
    /// What measure was calculated
    /// </summary>
    [FhirElement("measure", InSummary=true, Order=130, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Canonical MeasureElement
    {
      get { return _MeasureElement; }
      set { _MeasureElement = value; OnPropertyChanged("MeasureElement"); }
    }

    private Hl7.Fhir.Model.Canonical _MeasureElement;

    /// <summary>
    /// What measure was calculated
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Measure
    {
      get { return MeasureElement != null ? MeasureElement.Value : null; }
      set
      {
        if (value == null)
          MeasureElement = null;
        else
          MeasureElement = new Hl7.Fhir.Model.Canonical(value);
        OnPropertyChanged("Measure");
      }
    }

    /// <summary>
    /// What individual(s) the report is for
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=140, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("CareTeam","Device","Group","HealthcareService","Location","Organization","Patient","Practitioner","PractitionerRole","RelatedPerson")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// When the measure was calculated
    /// </summary>
    [FhirElement("date", InSummary=true, Order=150, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// When the measure was calculated
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Who is reporting the data
    /// </summary>
    [FhirElement("reporter", InSummary=true, Order=160, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization","Group")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Reporter
    {
      get { return _Reporter; }
      set { _Reporter = value; OnPropertyChanged("Reporter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Reporter;

    /// <summary>
    /// What vendor prepared the data
    /// </summary>
    [FhirElement("reportingVendor", Order=170)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ReportingVendor
    {
      get { return _ReportingVendor; }
      set { _ReportingVendor = value; OnPropertyChanged("ReportingVendor"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ReportingVendor;

    /// <summary>
    /// Where the reported data is from
    /// </summary>
    [FhirElement("location", Order=180)]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// What period the report covers
    /// </summary>
    [FhirElement("period", InSummary=true, Order=190)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// What parameters were provided to the report
    /// </summary>
    [FhirElement("inputParameters", Order=200)]
    [CLSCompliant(false)]
    [References("Parameters")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference InputParameters
    {
      get { return _InputParameters; }
      set { _InputParameters = value; OnPropertyChanged("InputParameters"); }
    }

    private Hl7.Fhir.Model.ResourceReference _InputParameters;

    /// <summary>
    /// What scoring method (e.g. proportion, ratio, continuous-variable)
    /// </summary>
    [FhirElement("scoring", InSummary=true, IsModifier=true, Order=210)]
    [Binding("MeasureScoring")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Scoring
    {
      get { return _Scoring; }
      set { _Scoring = value; OnPropertyChanged("Scoring"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Scoring;

    /// <summary>
    /// increase | decrease
    /// </summary>
    [FhirElement("improvementNotation", InSummary=true, IsModifier=true, Order=220)]
    [Binding("MeasureImprovementNotation")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept ImprovementNotation
    {
      get { return _ImprovementNotation; }
      set { _ImprovementNotation = value; OnPropertyChanged("ImprovementNotation"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _ImprovementNotation;

    /// <summary>
    /// Measure results for each group
    /// </summary>
    [FhirElement("group", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MeasureReport.GroupComponent> Group
    {
      get { if(_Group==null) _Group = new List<Hl7.Fhir.Model.MeasureReport.GroupComponent>(); return _Group; }
      set { _Group = value; OnPropertyChanged("Group"); }
    }

    private List<Hl7.Fhir.Model.MeasureReport.GroupComponent> _Group;

    /// <summary>
    /// Additional information collected for the report
    /// </summary>
    [FhirElement("supplementalData", Order=240)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupplementalData
    {
      get { if(_SupplementalData==null) _SupplementalData = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupplementalData; }
      set { _SupplementalData = value; OnPropertyChanged("SupplementalData"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupplementalData;

    /// <summary>
    /// What data was used to calculate the measure score
    /// </summary>
    [FhirElement("evaluatedResource", Order=250)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> EvaluatedResource
    {
      get { if(_EvaluatedResource==null) _EvaluatedResource = new List<Hl7.Fhir.Model.ResourceReference>(); return _EvaluatedResource; }
      set { _EvaluatedResource = value; OnPropertyChanged("EvaluatedResource"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _EvaluatedResource;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MeasureReport;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus>)StatusElement.DeepCopy();
      if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType>)TypeElement.DeepCopy();
      if(DataUpdateTypeElement != null) dest.DataUpdateTypeElement = (Code<Hl7.Fhir.Model.MeasureReport.SubmitDataUpdateType>)DataUpdateTypeElement.DeepCopy();
      if(MeasureElement != null) dest.MeasureElement = (Hl7.Fhir.Model.Canonical)MeasureElement.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(Reporter != null) dest.Reporter = (Hl7.Fhir.Model.ResourceReference)Reporter.DeepCopy();
      if(ReportingVendor != null) dest.ReportingVendor = (Hl7.Fhir.Model.ResourceReference)ReportingVendor.DeepCopy();
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(InputParameters != null) dest.InputParameters = (Hl7.Fhir.Model.ResourceReference)InputParameters.DeepCopy();
      if(Scoring != null) dest.Scoring = (Hl7.Fhir.Model.CodeableConcept)Scoring.DeepCopy();
      if(ImprovementNotation != null) dest.ImprovementNotation = (Hl7.Fhir.Model.CodeableConcept)ImprovementNotation.DeepCopy();
      if(Group != null) dest.Group = new List<Hl7.Fhir.Model.MeasureReport.GroupComponent>(Group.DeepCopy());
      if(SupplementalData != null) dest.SupplementalData = new List<Hl7.Fhir.Model.ResourceReference>(SupplementalData.DeepCopy());
      if(EvaluatedResource != null) dest.EvaluatedResource = new List<Hl7.Fhir.Model.ResourceReference>(EvaluatedResource.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MeasureReport());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MeasureReport;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(DataUpdateTypeElement, otherT.DataUpdateTypeElement)) return false;
      if( !DeepComparable.Matches(MeasureElement, otherT.MeasureElement)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Reporter, otherT.Reporter)) return false;
      if( !DeepComparable.Matches(ReportingVendor, otherT.ReportingVendor)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(InputParameters, otherT.InputParameters)) return false;
      if( !DeepComparable.Matches(Scoring, otherT.Scoring)) return false;
      if( !DeepComparable.Matches(ImprovementNotation, otherT.ImprovementNotation)) return false;
      if( !DeepComparable.Matches(Group, otherT.Group)) return false;
      if( !DeepComparable.Matches(SupplementalData, otherT.SupplementalData)) return false;
      if( !DeepComparable.Matches(EvaluatedResource, otherT.EvaluatedResource)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MeasureReport;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(DataUpdateTypeElement, otherT.DataUpdateTypeElement)) return false;
      if( !DeepComparable.IsExactly(MeasureElement, otherT.MeasureElement)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Reporter, otherT.Reporter)) return false;
      if( !DeepComparable.IsExactly(ReportingVendor, otherT.ReportingVendor)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(InputParameters, otherT.InputParameters)) return false;
      if( !DeepComparable.IsExactly(Scoring, otherT.Scoring)) return false;
      if( !DeepComparable.IsExactly(ImprovementNotation, otherT.ImprovementNotation)) return false;
      if( !DeepComparable.IsExactly(Group, otherT.Group)) return false;
      if( !DeepComparable.IsExactly(SupplementalData, otherT.SupplementalData)) return false;
      if( !DeepComparable.IsExactly(EvaluatedResource, otherT.EvaluatedResource)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (TypeElement != null) yield return TypeElement;
        if (DataUpdateTypeElement != null) yield return DataUpdateTypeElement;
        if (MeasureElement != null) yield return MeasureElement;
        if (Subject != null) yield return Subject;
        if (DateElement != null) yield return DateElement;
        if (Reporter != null) yield return Reporter;
        if (ReportingVendor != null) yield return ReportingVendor;
        if (Location != null) yield return Location;
        if (Period != null) yield return Period;
        if (InputParameters != null) yield return InputParameters;
        if (Scoring != null) yield return Scoring;
        if (ImprovementNotation != null) yield return ImprovementNotation;
        foreach (var elem in Group) { if (elem != null) yield return elem; }
        foreach (var elem in SupplementalData) { if (elem != null) yield return elem; }
        foreach (var elem in EvaluatedResource) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        if (DataUpdateTypeElement != null) yield return new ElementValue("dataUpdateType", DataUpdateTypeElement);
        if (MeasureElement != null) yield return new ElementValue("measure", MeasureElement);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (Reporter != null) yield return new ElementValue("reporter", Reporter);
        if (ReportingVendor != null) yield return new ElementValue("reportingVendor", ReportingVendor);
        if (Location != null) yield return new ElementValue("location", Location);
        if (Period != null) yield return new ElementValue("period", Period);
        if (InputParameters != null) yield return new ElementValue("inputParameters", InputParameters);
        if (Scoring != null) yield return new ElementValue("scoring", Scoring);
        if (ImprovementNotation != null) yield return new ElementValue("improvementNotation", ImprovementNotation);
        foreach (var elem in Group) { if (elem != null) yield return new ElementValue("group", elem); }
        foreach (var elem in SupplementalData) { if (elem != null) yield return new ElementValue("supplementalData", elem); }
        foreach (var elem in EvaluatedResource) { if (elem != null) yield return new ElementValue("evaluatedResource", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "type":
          value = TypeElement;
          return TypeElement is not null;
        case "dataUpdateType":
          value = DataUpdateTypeElement;
          return DataUpdateTypeElement is not null;
        case "measure":
          value = MeasureElement;
          return MeasureElement is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "reporter":
          value = Reporter;
          return Reporter is not null;
        case "reportingVendor":
          value = ReportingVendor;
          return ReportingVendor is not null;
        case "location":
          value = Location;
          return Location is not null;
        case "period":
          value = Period;
          return Period is not null;
        case "inputParameters":
          value = InputParameters;
          return InputParameters is not null;
        case "scoring":
          value = Scoring;
          return Scoring is not null;
        case "improvementNotation":
          value = ImprovementNotation;
          return ImprovementNotation is not null;
        case "group":
          value = Group;
          return Group?.Any() == true;
        case "supplementalData":
          value = SupplementalData;
          return SupplementalData?.Any() == true;
        case "evaluatedResource":
          value = EvaluatedResource;
          return EvaluatedResource?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      if (DataUpdateTypeElement is not null) yield return new KeyValuePair<string,object>("dataUpdateType",DataUpdateTypeElement);
      if (MeasureElement is not null) yield return new KeyValuePair<string,object>("measure",MeasureElement);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Reporter is not null) yield return new KeyValuePair<string,object>("reporter",Reporter);
      if (ReportingVendor is not null) yield return new KeyValuePair<string,object>("reportingVendor",ReportingVendor);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (InputParameters is not null) yield return new KeyValuePair<string,object>("inputParameters",InputParameters);
      if (Scoring is not null) yield return new KeyValuePair<string,object>("scoring",Scoring);
      if (ImprovementNotation is not null) yield return new KeyValuePair<string,object>("improvementNotation",ImprovementNotation);
      if (Group?.Any() == true) yield return new KeyValuePair<string,object>("group",Group);
      if (SupplementalData?.Any() == true) yield return new KeyValuePair<string,object>("supplementalData",SupplementalData);
      if (EvaluatedResource?.Any() == true) yield return new KeyValuePair<string,object>("evaluatedResource",EvaluatedResource);
    }

  }

}

// end of file

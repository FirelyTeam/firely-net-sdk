// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// An instance of a medical-related component of a medical device
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("DeviceDefinition","http://hl7.org/fhir/StructureDefinition/DeviceDefinition", IsResource=true)]
  public partial class DeviceDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "DeviceDefinition"; } }

    /// <summary>
    /// Device Production Identifier in UDI
    /// (url: http://hl7.org/fhir/ValueSet/device-productidentifierinudi)
    /// (system: http://terminology.hl7.org/CodeSystem/device-productidentifierinudi)
    /// </summary>
    [FhirEnumeration("DeviceProductionIdentifierInUDI")]
    public enum DeviceProductionIdentifierInUDI
    {
      /// <summary>
      /// The label includes the lot number.
      /// (system: http://terminology.hl7.org/CodeSystem/device-productidentifierinudi)
      /// </summary>
      [EnumLiteral("lot-number", "http://terminology.hl7.org/CodeSystem/device-productidentifierinudi"), Description("Lot Number")]
      LotNumber,
      /// <summary>
      /// The label includes the manufacture date.
      /// (system: http://terminology.hl7.org/CodeSystem/device-productidentifierinudi)
      /// </summary>
      [EnumLiteral("manufactured-date", "http://terminology.hl7.org/CodeSystem/device-productidentifierinudi"), Description("Manufactured date")]
      ManufacturedDate,
      /// <summary>
      /// The label includes the serial number.
      /// (system: http://terminology.hl7.org/CodeSystem/device-productidentifierinudi)
      /// </summary>
      [EnumLiteral("serial-number", "http://terminology.hl7.org/CodeSystem/device-productidentifierinudi"), Description("Serial Number")]
      SerialNumber,
      /// <summary>
      /// The label includes the expiration date.
      /// (system: http://terminology.hl7.org/CodeSystem/device-productidentifierinudi)
      /// </summary>
      [EnumLiteral("expiration-date", "http://terminology.hl7.org/CodeSystem/device-productidentifierinudi"), Description("Expiration date")]
      ExpirationDate,
      /// <summary>
      /// The label includes the biological source identifier.
      /// (system: http://terminology.hl7.org/CodeSystem/device-productidentifierinudi)
      /// </summary>
      [EnumLiteral("biological-source", "http://terminology.hl7.org/CodeSystem/device-productidentifierinudi"), Description("Biological source")]
      BiologicalSource,
      /// <summary>
      /// The label includes the software version.
      /// (system: http://terminology.hl7.org/CodeSystem/device-productidentifierinudi)
      /// </summary>
      [EnumLiteral("software-version", "http://terminology.hl7.org/CodeSystem/device-productidentifierinudi"), Description("Software Version")]
      SoftwareVersion,
    }

    /// <summary>
    /// Device - Corrective action scope
    /// (url: http://hl7.org/fhir/ValueSet/device-correctiveactionscope)
    /// (system: http://hl7.org/fhir/device-correctiveactionscope)
    /// </summary>
    [FhirEnumeration("DeviceCorrectiveActionScope")]
    public enum DeviceCorrectiveActionScope
    {
      /// <summary>
      /// The corrective action was intended for all units of the same model.
      /// (system: http://hl7.org/fhir/device-correctiveactionscope)
      /// </summary>
      [EnumLiteral("model", "http://hl7.org/fhir/device-correctiveactionscope"), Description("Model")]
      Model,
      /// <summary>
      /// The corrective action was intended for a specific batch of units identified by a lot number.
      /// (system: http://hl7.org/fhir/device-correctiveactionscope)
      /// </summary>
      [EnumLiteral("lot-numbers", "http://hl7.org/fhir/device-correctiveactionscope"), Description("Lot Numbers")]
      LotNumbers,
      /// <summary>
      /// The corrective action was intended for an individual unit (or a set of units) individually identified by serial number.
      /// (system: http://hl7.org/fhir/device-correctiveactionscope)
      /// </summary>
      [EnumLiteral("serial-numbers", "http://hl7.org/fhir/device-correctiveactionscope"), Description("Serial Numbers")]
      SerialNumbers,
    }

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#UdiDeviceIdentifier", IsNestedType=true)]
    public partial class UdiDeviceIdentifierComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#UdiDeviceIdentifier"; } }

      /// <summary>
      /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier
      /// </summary>
      [FhirElement("deviceIdentifier", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DeviceIdentifierElement
      {
        get { return _DeviceIdentifierElement; }
        set { _DeviceIdentifierElement = value; OnPropertyChanged("DeviceIdentifierElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DeviceIdentifierElement;

      /// <summary>
      /// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdiction provided in the DeviceDefinition.udiDeviceIdentifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DeviceIdentifier
      {
        get { return DeviceIdentifierElement != null ? DeviceIdentifierElement.Value : null; }
        set
        {
          if (value == null)
            DeviceIdentifierElement = null;
          else
            DeviceIdentifierElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("DeviceIdentifier");
        }
      }

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      [FhirElement("issuer", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri IssuerElement
      {
        get { return _IssuerElement; }
        set { _IssuerElement = value; OnPropertyChanged("IssuerElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _IssuerElement;

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Issuer
      {
        get { return IssuerElement != null ? IssuerElement.Value : null; }
        set
        {
          if (value == null)
            IssuerElement = null;
          else
            IssuerElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Issuer");
        }
      }

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      [FhirElement("jurisdiction", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri JurisdictionElement
      {
        get { return _JurisdictionElement; }
        set { _JurisdictionElement = value; OnPropertyChanged("JurisdictionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _JurisdictionElement;

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Jurisdiction
      {
        get { return JurisdictionElement != null ? JurisdictionElement.Value : null; }
        set
        {
          if (value == null)
            JurisdictionElement = null;
          else
            JurisdictionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Jurisdiction");
        }
      }

      /// <summary>
      /// Indicates whether and when the device is available on the market
      /// </summary>
      [FhirElement("marketDistribution", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierMarketDistributionComponent> MarketDistribution
      {
        get { if(_MarketDistribution==null) _MarketDistribution = new List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierMarketDistributionComponent>(); return _MarketDistribution; }
        set { _MarketDistribution = value; OnPropertyChanged("MarketDistribution"); }
      }

      private List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierMarketDistributionComponent> _MarketDistribution;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as UdiDeviceIdentifierComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DeviceIdentifierElement != null) dest.DeviceIdentifierElement = (Hl7.Fhir.Model.FhirString)DeviceIdentifierElement.DeepCopy();
        if(IssuerElement != null) dest.IssuerElement = (Hl7.Fhir.Model.FhirUri)IssuerElement.DeepCopy();
        if(JurisdictionElement != null) dest.JurisdictionElement = (Hl7.Fhir.Model.FhirUri)JurisdictionElement.DeepCopy();
        if(MarketDistribution != null) dest.MarketDistribution = new List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierMarketDistributionComponent>(MarketDistribution.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new UdiDeviceIdentifierComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as UdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.Matches(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.Matches(JurisdictionElement, otherT.JurisdictionElement)) return false;
        if( !DeepComparable.Matches(MarketDistribution, otherT.MarketDistribution)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as UdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.IsExactly(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.IsExactly(JurisdictionElement, otherT.JurisdictionElement)) return false;
        if( !DeepComparable.IsExactly(MarketDistribution, otherT.MarketDistribution)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DeviceIdentifierElement != null) yield return DeviceIdentifierElement;
          if (IssuerElement != null) yield return IssuerElement;
          if (JurisdictionElement != null) yield return JurisdictionElement;
          foreach (var elem in MarketDistribution) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DeviceIdentifierElement != null) yield return new ElementValue("deviceIdentifier", DeviceIdentifierElement);
          if (IssuerElement != null) yield return new ElementValue("issuer", IssuerElement);
          if (JurisdictionElement != null) yield return new ElementValue("jurisdiction", JurisdictionElement);
          foreach (var elem in MarketDistribution) { if (elem != null) yield return new ElementValue("marketDistribution", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "deviceIdentifier":
            value = DeviceIdentifierElement;
            return DeviceIdentifierElement is not null;
          case "issuer":
            value = IssuerElement;
            return IssuerElement is not null;
          case "jurisdiction":
            value = JurisdictionElement;
            return JurisdictionElement is not null;
          case "marketDistribution":
            value = MarketDistribution;
            return MarketDistribution?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DeviceIdentifierElement is not null) yield return new KeyValuePair<string,object>("deviceIdentifier",DeviceIdentifierElement);
        if (IssuerElement is not null) yield return new KeyValuePair<string,object>("issuer",IssuerElement);
        if (JurisdictionElement is not null) yield return new KeyValuePair<string,object>("jurisdiction",JurisdictionElement);
        if (MarketDistribution?.Any() == true) yield return new KeyValuePair<string,object>("marketDistribution",MarketDistribution);
      }

    }

    /// <summary>
    /// Indicates whether and when the device is available on the market
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#UdiDeviceIdentifierMarketDistribution", IsNestedType=true)]
    public partial class UdiDeviceIdentifierMarketDistributionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#UdiDeviceIdentifierMarketDistribution"; } }

      /// <summary>
      /// Begin and end dates for the commercial distribution of the device
      /// </summary>
      [FhirElement("marketPeriod", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Period MarketPeriod
      {
        get { return _MarketPeriod; }
        set { _MarketPeriod = value; OnPropertyChanged("MarketPeriod"); }
      }

      private Hl7.Fhir.Model.Period _MarketPeriod;

      /// <summary>
      /// National state or territory where the device is commercialized
      /// </summary>
      [FhirElement("subJurisdiction", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri SubJurisdictionElement
      {
        get { return _SubJurisdictionElement; }
        set { _SubJurisdictionElement = value; OnPropertyChanged("SubJurisdictionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _SubJurisdictionElement;

      /// <summary>
      /// National state or territory where the device is commercialized
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SubJurisdiction
      {
        get { return SubJurisdictionElement != null ? SubJurisdictionElement.Value : null; }
        set
        {
          if (value == null)
            SubJurisdictionElement = null;
          else
            SubJurisdictionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("SubJurisdiction");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as UdiDeviceIdentifierMarketDistributionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(MarketPeriod != null) dest.MarketPeriod = (Hl7.Fhir.Model.Period)MarketPeriod.DeepCopy();
        if(SubJurisdictionElement != null) dest.SubJurisdictionElement = (Hl7.Fhir.Model.FhirUri)SubJurisdictionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new UdiDeviceIdentifierMarketDistributionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as UdiDeviceIdentifierMarketDistributionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(MarketPeriod, otherT.MarketPeriod)) return false;
        if( !DeepComparable.Matches(SubJurisdictionElement, otherT.SubJurisdictionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as UdiDeviceIdentifierMarketDistributionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(MarketPeriod, otherT.MarketPeriod)) return false;
        if( !DeepComparable.IsExactly(SubJurisdictionElement, otherT.SubJurisdictionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (MarketPeriod != null) yield return MarketPeriod;
          if (SubJurisdictionElement != null) yield return SubJurisdictionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (MarketPeriod != null) yield return new ElementValue("marketPeriod", MarketPeriod);
          if (SubJurisdictionElement != null) yield return new ElementValue("subJurisdiction", SubJurisdictionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "marketPeriod":
            value = MarketPeriod;
            return MarketPeriod is not null;
          case "subJurisdiction":
            value = SubJurisdictionElement;
            return SubJurisdictionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (MarketPeriod is not null) yield return new KeyValuePair<string,object>("marketPeriod",MarketPeriod);
        if (SubJurisdictionElement is not null) yield return new KeyValuePair<string,object>("subJurisdiction",SubJurisdictionElement);
      }

    }

    /// <summary>
    /// The name or names of the device as given by the manufacturer
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#DeviceName", IsNestedType=true)]
    public partial class DeviceNameComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#DeviceName"; } }

      /// <summary>
      /// A name that is used to refer to the device
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// A name that is used to refer to the device
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// registered-name | user-friendly-name | patient-reported-name
      /// </summary>
      [FhirElement("type", Order=50, FiveWs="FiveWs.what[x]")]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.DeviceNameType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.DeviceNameType> _TypeElement;

      /// <summary>
      /// registered-name | user-friendly-name | patient-reported-name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.DeviceNameType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.DeviceNameType>(value);
          OnPropertyChanged("Type");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DeviceNameComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.DeviceNameType>)TypeElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DeviceNameComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DeviceNameComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DeviceNameComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (TypeElement != null) yield return TypeElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      }

    }

    /// <summary>
    /// What kind of device or device system this is
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Classification", IsNestedType=true)]
    public partial class ClassificationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Classification"; } }

      /// <summary>
      /// A classification or risk class of the device model
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Further information qualifying this classification of the device model
      /// </summary>
      [FhirElement("justification", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RelatedArtifact> Justification
      {
        get { if(_Justification==null) _Justification = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _Justification; }
        set { _Justification = value; OnPropertyChanged("Justification"); }
      }

      private List<Hl7.Fhir.Model.RelatedArtifact> _Justification;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ClassificationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Justification != null) dest.Justification = new List<Hl7.Fhir.Model.RelatedArtifact>(Justification.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ClassificationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ClassificationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Justification, otherT.Justification)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ClassificationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Justification, otherT.Justification)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Justification) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Justification) { if (elem != null) yield return new ElementValue("justification", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "justification":
            value = Justification;
            return Justification?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Justification?.Any() == true) yield return new KeyValuePair<string,object>("justification",Justification);
      }

    }

    /// <summary>
    /// A device, part of the current one
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#HasPart", IsNestedType=true)]
    public partial class HasPartComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#HasPart"; } }

      /// <summary>
      /// Reference to the part
      /// </summary>
      [FhirElement("reference", Order=40)]
      [CLSCompliant(false)]
      [References("DeviceDefinition")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Reference;

      /// <summary>
      /// Number of occurrences of the part
      /// </summary>
      [FhirElement("count", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// Number of occurrences of the part
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as HasPartComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.ResourceReference)Reference.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new HasPartComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as HasPartComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as HasPartComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Reference != null) yield return Reference;
          if (CountElement != null) yield return CountElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Reference != null) yield return new ElementValue("reference", Reference);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "reference":
            value = Reference;
            return Reference is not null;
          case "count":
            value = CountElement;
            return CountElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
        if (CountElement is not null) yield return new KeyValuePair<string,object>("count",CountElement);
      }

    }

    /// <summary>
    /// Information about the packaging of the device, i.e. how the device is packaged
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Packaging", IsNestedType=true)]
    public partial class PackagingComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Packaging"; } }

      /// <summary>
      /// Business identifier of the packaged medication
      /// </summary>
      [FhirElement("identifier", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// A code that defines the specific type of packaging
      /// </summary>
      [FhirElement("type", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The number of items contained in the package (devices or sub-packages)
      /// </summary>
      [FhirElement("count", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// The number of items contained in the package (devices or sub-packages)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      /// <summary>
      /// An organization that distributes the packaged device
      /// </summary>
      [FhirElement("distributor", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent> Distributor
      {
        get { if(_Distributor==null) _Distributor = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent>(); return _Distributor; }
        set { _Distributor = value; OnPropertyChanged("Distributor"); }
      }

      private List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent> _Distributor;

      /// <summary>
      /// Unique Device Identifier (UDI) Barcode string on the packaging
      /// </summary>
      [FhirElement("udiDeviceIdentifier", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent> UdiDeviceIdentifier
      {
        get { if(_UdiDeviceIdentifier==null) _UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent>(); return _UdiDeviceIdentifier; }
        set { _UdiDeviceIdentifier = value; OnPropertyChanged("UdiDeviceIdentifier"); }
      }

      private List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent> _UdiDeviceIdentifier;

      /// <summary>
      /// Allows packages within packages
      /// </summary>
      [FhirElement("packaging", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> Packaging
      {
        get { if(_Packaging==null) _Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(); return _Packaging; }
        set { _Packaging = value; OnPropertyChanged("Packaging"); }
      }

      private List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> _Packaging;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        if(Distributor != null) dest.Distributor = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingDistributorComponent>(Distributor.DeepCopy());
        if(UdiDeviceIdentifier != null) dest.UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierComponent>(UdiDeviceIdentifier.DeepCopy());
        if(Packaging != null) dest.Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(Packaging.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.Matches(Distributor, otherT.Distributor)) return false;
        if( !DeepComparable.Matches(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
        if( !DeepComparable.Matches(Packaging, otherT.Packaging)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.IsExactly(Distributor, otherT.Distributor)) return false;
        if( !DeepComparable.IsExactly(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
        if( !DeepComparable.IsExactly(Packaging, otherT.Packaging)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          if (Type != null) yield return Type;
          if (CountElement != null) yield return CountElement;
          foreach (var elem in Distributor) { if (elem != null) yield return elem; }
          foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return elem; }
          foreach (var elem in Packaging) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (Type != null) yield return new ElementValue("type", Type);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
          foreach (var elem in Distributor) { if (elem != null) yield return new ElementValue("distributor", elem); }
          foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return new ElementValue("udiDeviceIdentifier", elem); }
          foreach (var elem in Packaging) { if (elem != null) yield return new ElementValue("packaging", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "count":
            value = CountElement;
            return CountElement is not null;
          case "distributor":
            value = Distributor;
            return Distributor?.Any() == true;
          case "udiDeviceIdentifier":
            value = UdiDeviceIdentifier;
            return UdiDeviceIdentifier?.Any() == true;
          case "packaging":
            value = Packaging;
            return Packaging?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (CountElement is not null) yield return new KeyValuePair<string,object>("count",CountElement);
        if (Distributor?.Any() == true) yield return new KeyValuePair<string,object>("distributor",Distributor);
        if (UdiDeviceIdentifier?.Any() == true) yield return new KeyValuePair<string,object>("udiDeviceIdentifier",UdiDeviceIdentifier);
        if (Packaging?.Any() == true) yield return new KeyValuePair<string,object>("packaging",Packaging);
      }

    }

    /// <summary>
    /// An organization that distributes the packaged device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#PackagingDistributor", IsNestedType=true)]
    public partial class PackagingDistributorComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#PackagingDistributor"; } }

      /// <summary>
      /// Distributor's human-readable name
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Distributor's human-readable name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Distributor as an Organization resource
      /// </summary>
      [FhirElement("organizationReference", Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> OrganizationReference
      {
        get { if(_OrganizationReference==null) _OrganizationReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _OrganizationReference; }
        set { _OrganizationReference = value; OnPropertyChanged("OrganizationReference"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _OrganizationReference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingDistributorComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(OrganizationReference != null) dest.OrganizationReference = new List<Hl7.Fhir.Model.ResourceReference>(OrganizationReference.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingDistributorComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingDistributorComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(OrganizationReference, otherT.OrganizationReference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingDistributorComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(OrganizationReference, otherT.OrganizationReference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          foreach (var elem in OrganizationReference) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          foreach (var elem in OrganizationReference) { if (elem != null) yield return new ElementValue("organizationReference", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "organizationReference":
            value = OrganizationReference;
            return OrganizationReference?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (OrganizationReference?.Any() == true) yield return new KeyValuePair<string,object>("organizationReference",OrganizationReference);
      }

    }

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string on the packaging
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#PackagingUdiDeviceIdentifier", IsNestedType=true)]
    public partial class PackagingUdiDeviceIdentifierComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#PackagingUdiDeviceIdentifier"; } }

      /// <summary>
      /// Identifier to be associated with every instance for issuer and jurisdiction
      /// </summary>
      [FhirElement("deviceIdentifier", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DeviceIdentifierElement
      {
        get { return _DeviceIdentifierElement; }
        set { _DeviceIdentifierElement = value; OnPropertyChanged("DeviceIdentifierElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DeviceIdentifierElement;

      /// <summary>
      /// Identifier to be associated with every instance for issuer and jurisdiction
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DeviceIdentifier
      {
        get { return DeviceIdentifierElement != null ? DeviceIdentifierElement.Value : null; }
        set
        {
          if (value == null)
            DeviceIdentifierElement = null;
          else
            DeviceIdentifierElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("DeviceIdentifier");
        }
      }

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      [FhirElement("issuer", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri IssuerElement
      {
        get { return _IssuerElement; }
        set { _IssuerElement = value; OnPropertyChanged("IssuerElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _IssuerElement;

      /// <summary>
      /// The organization that assigns the identifier algorithm
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Issuer
      {
        get { return IssuerElement != null ? IssuerElement.Value : null; }
        set
        {
          if (value == null)
            IssuerElement = null;
          else
            IssuerElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Issuer");
        }
      }

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      [FhirElement("jurisdiction", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri JurisdictionElement
      {
        get { return _JurisdictionElement; }
        set { _JurisdictionElement = value; OnPropertyChanged("JurisdictionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _JurisdictionElement;

      /// <summary>
      /// The jurisdiction to which the deviceIdentifier applies
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Jurisdiction
      {
        get { return JurisdictionElement != null ? JurisdictionElement.Value : null; }
        set
        {
          if (value == null)
            JurisdictionElement = null;
          else
            JurisdictionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Jurisdiction");
        }
      }

      /// <summary>
      /// Indicates whether and when the device is available on the market
      /// </summary>
      [FhirElement("marketDistribution", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierMarketDistributionComponent MarketDistribution
      {
        get { return _MarketDistribution; }
        set { _MarketDistribution = value; OnPropertyChanged("MarketDistribution"); }
      }

      private Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierMarketDistributionComponent _MarketDistribution;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingUdiDeviceIdentifierComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DeviceIdentifierElement != null) dest.DeviceIdentifierElement = (Hl7.Fhir.Model.FhirString)DeviceIdentifierElement.DeepCopy();
        if(IssuerElement != null) dest.IssuerElement = (Hl7.Fhir.Model.FhirUri)IssuerElement.DeepCopy();
        if(JurisdictionElement != null) dest.JurisdictionElement = (Hl7.Fhir.Model.FhirUri)JurisdictionElement.DeepCopy();
        if(MarketDistribution != null) dest.MarketDistribution = (Hl7.Fhir.Model.DeviceDefinition.PackagingUdiDeviceIdentifierMarketDistributionComponent)MarketDistribution.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingUdiDeviceIdentifierComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingUdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.Matches(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.Matches(JurisdictionElement, otherT.JurisdictionElement)) return false;
        if( !DeepComparable.Matches(MarketDistribution, otherT.MarketDistribution)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingUdiDeviceIdentifierComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.IsExactly(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.IsExactly(JurisdictionElement, otherT.JurisdictionElement)) return false;
        if( !DeepComparable.IsExactly(MarketDistribution, otherT.MarketDistribution)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DeviceIdentifierElement != null) yield return DeviceIdentifierElement;
          if (IssuerElement != null) yield return IssuerElement;
          if (JurisdictionElement != null) yield return JurisdictionElement;
          if (MarketDistribution != null) yield return MarketDistribution;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DeviceIdentifierElement != null) yield return new ElementValue("deviceIdentifier", DeviceIdentifierElement);
          if (IssuerElement != null) yield return new ElementValue("issuer", IssuerElement);
          if (JurisdictionElement != null) yield return new ElementValue("jurisdiction", JurisdictionElement);
          if (MarketDistribution != null) yield return new ElementValue("marketDistribution", MarketDistribution);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "deviceIdentifier":
            value = DeviceIdentifierElement;
            return DeviceIdentifierElement is not null;
          case "issuer":
            value = IssuerElement;
            return IssuerElement is not null;
          case "jurisdiction":
            value = JurisdictionElement;
            return JurisdictionElement is not null;
          case "marketDistribution":
            value = MarketDistribution;
            return MarketDistribution is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DeviceIdentifierElement is not null) yield return new KeyValuePair<string,object>("deviceIdentifier",DeviceIdentifierElement);
        if (IssuerElement is not null) yield return new KeyValuePair<string,object>("issuer",IssuerElement);
        if (JurisdictionElement is not null) yield return new KeyValuePair<string,object>("jurisdiction",JurisdictionElement);
        if (MarketDistribution is not null) yield return new KeyValuePair<string,object>("marketDistribution",MarketDistribution);
      }

    }

    /// <summary>
    /// Indicates whether and when the device is available on the market
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#PackagingUdiDeviceIdentifierMarketDistribution", IsNestedType=true)]
    public partial class PackagingUdiDeviceIdentifierMarketDistributionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#PackagingUdiDeviceIdentifierMarketDistribution"; } }

      /// <summary>
      /// Begin and end dates for the commercial distribution of the device
      /// </summary>
      [FhirElement("marketPeriod", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Period MarketPeriod
      {
        get { return _MarketPeriod; }
        set { _MarketPeriod = value; OnPropertyChanged("MarketPeriod"); }
      }

      private Hl7.Fhir.Model.Period _MarketPeriod;

      /// <summary>
      /// National state or territory where the device is commercialized
      /// </summary>
      [FhirElement("subJurisdiction", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri SubJurisdictionElement
      {
        get { return _SubJurisdictionElement; }
        set { _SubJurisdictionElement = value; OnPropertyChanged("SubJurisdictionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _SubJurisdictionElement;

      /// <summary>
      /// National state or territory where the device is commercialized
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SubJurisdiction
      {
        get { return SubJurisdictionElement != null ? SubJurisdictionElement.Value : null; }
        set
        {
          if (value == null)
            SubJurisdictionElement = null;
          else
            SubJurisdictionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("SubJurisdiction");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingUdiDeviceIdentifierMarketDistributionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(MarketPeriod != null) dest.MarketPeriod = (Hl7.Fhir.Model.Period)MarketPeriod.DeepCopy();
        if(SubJurisdictionElement != null) dest.SubJurisdictionElement = (Hl7.Fhir.Model.FhirUri)SubJurisdictionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingUdiDeviceIdentifierMarketDistributionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingUdiDeviceIdentifierMarketDistributionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(MarketPeriod, otherT.MarketPeriod)) return false;
        if( !DeepComparable.Matches(SubJurisdictionElement, otherT.SubJurisdictionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingUdiDeviceIdentifierMarketDistributionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(MarketPeriod, otherT.MarketPeriod)) return false;
        if( !DeepComparable.IsExactly(SubJurisdictionElement, otherT.SubJurisdictionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (MarketPeriod != null) yield return MarketPeriod;
          if (SubJurisdictionElement != null) yield return SubJurisdictionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (MarketPeriod != null) yield return new ElementValue("marketPeriod", MarketPeriod);
          if (SubJurisdictionElement != null) yield return new ElementValue("subJurisdiction", SubJurisdictionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "marketPeriod":
            value = MarketPeriod;
            return MarketPeriod is not null;
          case "subJurisdiction":
            value = SubJurisdictionElement;
            return SubJurisdictionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (MarketPeriod is not null) yield return new KeyValuePair<string,object>("marketPeriod",MarketPeriod);
        if (SubJurisdictionElement is not null) yield return new KeyValuePair<string,object>("subJurisdiction",SubJurisdictionElement);
      }

    }

    /// <summary>
    /// The version of the device or software
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Version", IsNestedType=true)]
    public partial class VersionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Version"; } }

      /// <summary>
      /// The type of the device version, e.g. manufacturer, approved, internal
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The hardware or software module of the device to which the version applies
      /// </summary>
      [FhirElement("component", Order=50, FiveWs="FiveWs.what[x]")]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Component
      {
        get { return _Component; }
        set { _Component = value; OnPropertyChanged("Component"); }
      }

      private Hl7.Fhir.Model.Identifier _Component;

      /// <summary>
      /// The version text
      /// </summary>
      [FhirElement("value", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The version text
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VersionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Component != null) dest.Component = (Hl7.Fhir.Model.Identifier)Component.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VersionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Component, otherT.Component)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Component != null) yield return Component;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Component != null) yield return new ElementValue("component", Component);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "component":
            value = Component;
            return Component is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Component is not null) yield return new KeyValuePair<string,object>("component",Component);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// The potential, valid configuration settings of a device, e.g., regulation status, time properties
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Property", IsNestedType=true)]
    public partial class PropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Property"; } }

      /// <summary>
      /// Code that specifies the property
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Property value - as a code or quantity
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Attachment))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Link", IsNestedType=true)]
    public partial class LinkComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Link"; } }

      /// <summary>
      /// The type indicates the relationship of the related device to the device instance
      /// </summary>
      [FhirElement("relation", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Relation
      {
        get { return _Relation; }
        set { _Relation = value; OnPropertyChanged("Relation"); }
      }

      private Hl7.Fhir.Model.Coding _Relation;

      /// <summary>
      /// A reference to the linked device
      /// </summary>
      [FhirElement("relatedDevice", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference RelatedDevice
      {
        get { return _RelatedDevice; }
        set { _RelatedDevice = value; OnPropertyChanged("RelatedDevice"); }
      }

      private Hl7.Fhir.Model.CodeableReference _RelatedDevice;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LinkComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Relation != null) dest.Relation = (Hl7.Fhir.Model.Coding)Relation.DeepCopy();
        if(RelatedDevice != null) dest.RelatedDevice = (Hl7.Fhir.Model.CodeableReference)RelatedDevice.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LinkComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Relation, otherT.Relation)) return false;
        if( !DeepComparable.Matches(RelatedDevice, otherT.RelatedDevice)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Relation, otherT.Relation)) return false;
        if( !DeepComparable.IsExactly(RelatedDevice, otherT.RelatedDevice)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Relation != null) yield return Relation;
          if (RelatedDevice != null) yield return RelatedDevice;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Relation != null) yield return new ElementValue("relation", Relation);
          if (RelatedDevice != null) yield return new ElementValue("relatedDevice", RelatedDevice);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "relation":
            value = Relation;
            return Relation is not null;
          case "relatedDevice":
            value = RelatedDevice;
            return RelatedDevice is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Relation is not null) yield return new KeyValuePair<string,object>("relation",Relation);
        if (RelatedDevice is not null) yield return new KeyValuePair<string,object>("relatedDevice",RelatedDevice);
      }

    }

    /// <summary>
    /// A substance used to create the material(s) of which the device is made
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Material", IsNestedType=true)]
    public partial class MaterialComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Material"; } }

      /// <summary>
      /// A relevant substance that the device contains, may contain, or is made of
      /// </summary>
      [FhirElement("substance", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Substance
      {
        get { return _Substance; }
        set { _Substance = value; OnPropertyChanged("Substance"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Substance;

      /// <summary>
      /// Indicates an alternative material of the device
      /// </summary>
      [FhirElement("alternate", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AlternateElement
      {
        get { return _AlternateElement; }
        set { _AlternateElement = value; OnPropertyChanged("AlternateElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AlternateElement;

      /// <summary>
      /// Indicates an alternative material of the device
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Alternate
      {
        get { return AlternateElement != null ? AlternateElement.Value : null; }
        set
        {
          if (value == null)
            AlternateElement = null;
          else
            AlternateElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Alternate");
        }
      }

      /// <summary>
      /// Whether the substance is a known or suspected allergen
      /// </summary>
      [FhirElement("allergenicIndicator", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AllergenicIndicatorElement
      {
        get { return _AllergenicIndicatorElement; }
        set { _AllergenicIndicatorElement = value; OnPropertyChanged("AllergenicIndicatorElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AllergenicIndicatorElement;

      /// <summary>
      /// Whether the substance is a known or suspected allergen
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? AllergenicIndicator
      {
        get { return AllergenicIndicatorElement != null ? AllergenicIndicatorElement.Value : null; }
        set
        {
          if (value == null)
            AllergenicIndicatorElement = null;
          else
            AllergenicIndicatorElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("AllergenicIndicator");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MaterialComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Substance != null) dest.Substance = (Hl7.Fhir.Model.CodeableConcept)Substance.DeepCopy();
        if(AlternateElement != null) dest.AlternateElement = (Hl7.Fhir.Model.FhirBoolean)AlternateElement.DeepCopy();
        if(AllergenicIndicatorElement != null) dest.AllergenicIndicatorElement = (Hl7.Fhir.Model.FhirBoolean)AllergenicIndicatorElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MaterialComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MaterialComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Substance, otherT.Substance)) return false;
        if( !DeepComparable.Matches(AlternateElement, otherT.AlternateElement)) return false;
        if( !DeepComparable.Matches(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MaterialComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Substance, otherT.Substance)) return false;
        if( !DeepComparable.IsExactly(AlternateElement, otherT.AlternateElement)) return false;
        if( !DeepComparable.IsExactly(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Substance != null) yield return Substance;
          if (AlternateElement != null) yield return AlternateElement;
          if (AllergenicIndicatorElement != null) yield return AllergenicIndicatorElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Substance != null) yield return new ElementValue("substance", Substance);
          if (AlternateElement != null) yield return new ElementValue("alternate", AlternateElement);
          if (AllergenicIndicatorElement != null) yield return new ElementValue("allergenicIndicator", AllergenicIndicatorElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "substance":
            value = Substance;
            return Substance is not null;
          case "alternate":
            value = AlternateElement;
            return AlternateElement is not null;
          case "allergenicIndicator":
            value = AllergenicIndicatorElement;
            return AllergenicIndicatorElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Substance is not null) yield return new KeyValuePair<string,object>("substance",Substance);
        if (AlternateElement is not null) yield return new KeyValuePair<string,object>("alternate",AlternateElement);
        if (AllergenicIndicatorElement is not null) yield return new KeyValuePair<string,object>("allergenicIndicator",AllergenicIndicatorElement);
      }

    }

    /// <summary>
    /// Information aimed at providing directions for the usage of this model of device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#Guideline", IsNestedType=true)]
    public partial class GuidelineComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#Guideline"; } }

      /// <summary>
      /// The circumstances that form the setting for using the device
      /// </summary>
      [FhirElement("useContext", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.UsageContext> UseContext
      {
        get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
        set { _UseContext = value; OnPropertyChanged("UseContext"); }
      }

      private List<Hl7.Fhir.Model.UsageContext> _UseContext;

      /// <summary>
      /// Detailed written and visual directions for the user on how to use the device
      /// </summary>
      [FhirElement("usageInstruction", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown UsageInstruction
      {
        get { return _UsageInstruction; }
        set { _UsageInstruction = value; OnPropertyChanged("UsageInstruction"); }
      }

      private Hl7.Fhir.Model.Markdown _UsageInstruction;

      /// <summary>
      /// A source of information or reference for this guideline
      /// </summary>
      [FhirElement("relatedArtifact", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
      {
        get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
        set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
      }

      private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

      /// <summary>
      /// A clinical condition for which the device was designed to be used
      /// </summary>
      [FhirElement("indication", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Indication
      {
        get { if(_Indication==null) _Indication = new List<Hl7.Fhir.Model.CodeableReference>(); return _Indication; }
        set { _Indication = value; OnPropertyChanged("Indication"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Indication;

      /// <summary>
      /// A specific situation when a device should not be used because it may cause harm
      /// </summary>
      [FhirElement("contraindication", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Contraindication
      {
        get { if(_Contraindication==null) _Contraindication = new List<Hl7.Fhir.Model.CodeableReference>(); return _Contraindication; }
        set { _Contraindication = value; OnPropertyChanged("Contraindication"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Contraindication;

      /// <summary>
      /// Specific hazard alert information that a user needs to know before using the device
      /// </summary>
      [FhirElement("warning", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Warning
      {
        get { if(_Warning==null) _Warning = new List<Hl7.Fhir.Model.CodeableReference>(); return _Warning; }
        set { _Warning = value; OnPropertyChanged("Warning"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Warning;

      /// <summary>
      /// A description of the general purpose or medical use of the device or its function
      /// </summary>
      [FhirElement("intendedUse", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IntendedUseElement
      {
        get { return _IntendedUseElement; }
        set { _IntendedUseElement = value; OnPropertyChanged("IntendedUseElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IntendedUseElement;

      /// <summary>
      /// A description of the general purpose or medical use of the device or its function
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string IntendedUse
      {
        get { return IntendedUseElement != null ? IntendedUseElement.Value : null; }
        set
        {
          if (value == null)
            IntendedUseElement = null;
          else
            IntendedUseElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("IntendedUse");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as GuidelineComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
        if(UsageInstruction != null) dest.UsageInstruction = (Hl7.Fhir.Model.Markdown)UsageInstruction.DeepCopy();
        if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
        if(Indication != null) dest.Indication = new List<Hl7.Fhir.Model.CodeableReference>(Indication.DeepCopy());
        if(Contraindication != null) dest.Contraindication = new List<Hl7.Fhir.Model.CodeableReference>(Contraindication.DeepCopy());
        if(Warning != null) dest.Warning = new List<Hl7.Fhir.Model.CodeableReference>(Warning.DeepCopy());
        if(IntendedUseElement != null) dest.IntendedUseElement = (Hl7.Fhir.Model.FhirString)IntendedUseElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new GuidelineComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as GuidelineComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
        if( !DeepComparable.Matches(UsageInstruction, otherT.UsageInstruction)) return false;
        if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
        if( !DeepComparable.Matches(Indication, otherT.Indication)) return false;
        if( !DeepComparable.Matches(Contraindication, otherT.Contraindication)) return false;
        if( !DeepComparable.Matches(Warning, otherT.Warning)) return false;
        if( !DeepComparable.Matches(IntendedUseElement, otherT.IntendedUseElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as GuidelineComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
        if( !DeepComparable.IsExactly(UsageInstruction, otherT.UsageInstruction)) return false;
        if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
        if( !DeepComparable.IsExactly(Indication, otherT.Indication)) return false;
        if( !DeepComparable.IsExactly(Contraindication, otherT.Contraindication)) return false;
        if( !DeepComparable.IsExactly(Warning, otherT.Warning)) return false;
        if( !DeepComparable.IsExactly(IntendedUseElement, otherT.IntendedUseElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in UseContext) { if (elem != null) yield return elem; }
          if (UsageInstruction != null) yield return UsageInstruction;
          foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
          foreach (var elem in Indication) { if (elem != null) yield return elem; }
          foreach (var elem in Contraindication) { if (elem != null) yield return elem; }
          foreach (var elem in Warning) { if (elem != null) yield return elem; }
          if (IntendedUseElement != null) yield return IntendedUseElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
          if (UsageInstruction != null) yield return new ElementValue("usageInstruction", UsageInstruction);
          foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
          foreach (var elem in Indication) { if (elem != null) yield return new ElementValue("indication", elem); }
          foreach (var elem in Contraindication) { if (elem != null) yield return new ElementValue("contraindication", elem); }
          foreach (var elem in Warning) { if (elem != null) yield return new ElementValue("warning", elem); }
          if (IntendedUseElement != null) yield return new ElementValue("intendedUse", IntendedUseElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "useContext":
            value = UseContext;
            return UseContext?.Any() == true;
          case "usageInstruction":
            value = UsageInstruction;
            return UsageInstruction is not null;
          case "relatedArtifact":
            value = RelatedArtifact;
            return RelatedArtifact?.Any() == true;
          case "indication":
            value = Indication;
            return Indication?.Any() == true;
          case "contraindication":
            value = Contraindication;
            return Contraindication?.Any() == true;
          case "warning":
            value = Warning;
            return Warning?.Any() == true;
          case "intendedUse":
            value = IntendedUseElement;
            return IntendedUseElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
        if (UsageInstruction is not null) yield return new KeyValuePair<string,object>("usageInstruction",UsageInstruction);
        if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
        if (Indication?.Any() == true) yield return new KeyValuePair<string,object>("indication",Indication);
        if (Contraindication?.Any() == true) yield return new KeyValuePair<string,object>("contraindication",Contraindication);
        if (Warning?.Any() == true) yield return new KeyValuePair<string,object>("warning",Warning);
        if (IntendedUseElement is not null) yield return new KeyValuePair<string,object>("intendedUse",IntendedUseElement);
      }

    }

    /// <summary>
    /// Tracking of latest field safety corrective action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#CorrectiveAction", IsNestedType=true)]
    public partial class CorrectiveActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#CorrectiveAction"; } }

      /// <summary>
      /// Whether the corrective action was a recall
      /// </summary>
      [FhirElement("recall", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean RecallElement
      {
        get { return _RecallElement; }
        set { _RecallElement = value; OnPropertyChanged("RecallElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _RecallElement;

      /// <summary>
      /// Whether the corrective action was a recall
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Recall
      {
        get { return RecallElement != null ? RecallElement.Value : null; }
        set
        {
          if (value == null)
            RecallElement = null;
          else
            RecallElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Recall");
        }
      }

      /// <summary>
      /// model | lot-numbers | serial-numbers
      /// </summary>
      [FhirElement("scope", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.DeviceDefinition.DeviceCorrectiveActionScope> ScopeElement
      {
        get { return _ScopeElement; }
        set { _ScopeElement = value; OnPropertyChanged("ScopeElement"); }
      }

      private Code<Hl7.Fhir.Model.DeviceDefinition.DeviceCorrectiveActionScope> _ScopeElement;

      /// <summary>
      /// model | lot-numbers | serial-numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.DeviceDefinition.DeviceCorrectiveActionScope? Scope
      {
        get { return ScopeElement != null ? ScopeElement.Value : null; }
        set
        {
          if (value == null)
            ScopeElement = null;
          else
            ScopeElement = new Code<Hl7.Fhir.Model.DeviceDefinition.DeviceCorrectiveActionScope>(value);
          OnPropertyChanged("Scope");
        }
      }

      /// <summary>
      /// Start and end dates of the  corrective action
      /// </summary>
      [FhirElement("period", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CorrectiveActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RecallElement != null) dest.RecallElement = (Hl7.Fhir.Model.FhirBoolean)RecallElement.DeepCopy();
        if(ScopeElement != null) dest.ScopeElement = (Code<Hl7.Fhir.Model.DeviceDefinition.DeviceCorrectiveActionScope>)ScopeElement.DeepCopy();
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CorrectiveActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CorrectiveActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RecallElement, otherT.RecallElement)) return false;
        if( !DeepComparable.Matches(ScopeElement, otherT.ScopeElement)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CorrectiveActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RecallElement, otherT.RecallElement)) return false;
        if( !DeepComparable.IsExactly(ScopeElement, otherT.ScopeElement)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RecallElement != null) yield return RecallElement;
          if (ScopeElement != null) yield return ScopeElement;
          if (Period != null) yield return Period;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RecallElement != null) yield return new ElementValue("recall", RecallElement);
          if (ScopeElement != null) yield return new ElementValue("scope", ScopeElement);
          if (Period != null) yield return new ElementValue("period", Period);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "recall":
            value = RecallElement;
            return RecallElement is not null;
          case "scope":
            value = ScopeElement;
            return ScopeElement is not null;
          case "period":
            value = Period;
            return Period is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RecallElement is not null) yield return new KeyValuePair<string,object>("recall",RecallElement);
        if (ScopeElement is not null) yield return new KeyValuePair<string,object>("scope",ScopeElement);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      }

    }

    /// <summary>
    /// Billing code or reference associated with the device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDefinition#ChargeItem", IsNestedType=true)]
    public partial class ChargeItemComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDefinition#ChargeItem"; } }

      /// <summary>
      /// The code or reference for the charge item
      /// </summary>
      [FhirElement("chargeItemCode", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference ChargeItemCode
      {
        get { return _ChargeItemCode; }
        set { _ChargeItemCode = value; OnPropertyChanged("ChargeItemCode"); }
      }

      private Hl7.Fhir.Model.CodeableReference _ChargeItemCode;

      /// <summary>
      /// Coefficient applicable to the billing code
      /// </summary>
      [FhirElement("count", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Count
      {
        get { return _Count; }
        set { _Count = value; OnPropertyChanged("Count"); }
      }

      private Hl7.Fhir.Model.Quantity _Count;

      /// <summary>
      /// A specific time period in which this charge item applies
      /// </summary>
      [FhirElement("effectivePeriod", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Period EffectivePeriod
      {
        get { return _EffectivePeriod; }
        set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
      }

      private Hl7.Fhir.Model.Period _EffectivePeriod;

      /// <summary>
      /// The context to which this charge item applies
      /// </summary>
      [FhirElement("useContext", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.UsageContext> UseContext
      {
        get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
        set { _UseContext = value; OnPropertyChanged("UseContext"); }
      }

      private List<Hl7.Fhir.Model.UsageContext> _UseContext;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ChargeItemComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ChargeItemCode != null) dest.ChargeItemCode = (Hl7.Fhir.Model.CodeableReference)ChargeItemCode.DeepCopy();
        if(Count != null) dest.Count = (Hl7.Fhir.Model.Quantity)Count.DeepCopy();
        if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
        if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ChargeItemComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ChargeItemComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ChargeItemCode, otherT.ChargeItemCode)) return false;
        if( !DeepComparable.Matches(Count, otherT.Count)) return false;
        if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
        if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ChargeItemComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ChargeItemCode, otherT.ChargeItemCode)) return false;
        if( !DeepComparable.IsExactly(Count, otherT.Count)) return false;
        if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
        if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ChargeItemCode != null) yield return ChargeItemCode;
          if (Count != null) yield return Count;
          if (EffectivePeriod != null) yield return EffectivePeriod;
          foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ChargeItemCode != null) yield return new ElementValue("chargeItemCode", ChargeItemCode);
          if (Count != null) yield return new ElementValue("count", Count);
          if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
          foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "chargeItemCode":
            value = ChargeItemCode;
            return ChargeItemCode is not null;
          case "count":
            value = Count;
            return Count is not null;
          case "effectivePeriod":
            value = EffectivePeriod;
            return EffectivePeriod is not null;
          case "useContext":
            value = UseContext;
            return UseContext?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ChargeItemCode is not null) yield return new KeyValuePair<string,object>("chargeItemCode",ChargeItemCode);
        if (Count is not null) yield return new KeyValuePair<string,object>("count",Count);
        if (EffectivePeriod is not null) yield return new KeyValuePair<string,object>("effectivePeriod",EffectivePeriod);
        if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      }

    }

    /// <summary>
    /// Additional information to describe the device
    /// </summary>
    [FhirElement("description", Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// Instance identifier
    /// </summary>
    [FhirElement("identifier", Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string
    /// </summary>
    [FhirElement("udiDeviceIdentifier", Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent> UdiDeviceIdentifier
    {
      get { if(_UdiDeviceIdentifier==null) _UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent>(); return _UdiDeviceIdentifier; }
      set { _UdiDeviceIdentifier = value; OnPropertyChanged("UdiDeviceIdentifier"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent> _UdiDeviceIdentifier;

    /// <summary>
    /// The part number or catalog number of the device
    /// </summary>
    [FhirElement("partNumber", Order=120, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PartNumberElement
    {
      get { return _PartNumberElement; }
      set { _PartNumberElement = value; OnPropertyChanged("PartNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PartNumberElement;

    /// <summary>
    /// The part number or catalog number of the device
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string PartNumber
    {
      get { return PartNumberElement != null ? PartNumberElement.Value : null; }
      set
      {
        if (value == null)
          PartNumberElement = null;
        else
          PartNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("PartNumber");
      }
    }

    /// <summary>
    /// Name of device manufacturer
    /// </summary>
    [FhirElement("manufacturer", Order=130, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.what[x]")]
    [CLSCompliant(false)]
    [References("Organization")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Manufacturer
    {
      get { return _Manufacturer; }
      set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
    }

    private Hl7.Fhir.Model.DataType _Manufacturer;

    /// <summary>
    /// The name or names of the device as given by the manufacturer
    /// </summary>
    [FhirElement("deviceName", Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent> DeviceName
    {
      get { if(_DeviceName==null) _DeviceName = new List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent>(); return _DeviceName; }
      set { _DeviceName = value; OnPropertyChanged("DeviceName"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent> _DeviceName;

    /// <summary>
    /// The catalog or model number for the device for example as defined by the manufacturer
    /// </summary>
    [FhirElement("modelNumber", Order=150, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ModelNumberElement
    {
      get { return _ModelNumberElement; }
      set { _ModelNumberElement = value; OnPropertyChanged("ModelNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ModelNumberElement;

    /// <summary>
    /// The catalog or model number for the device for example as defined by the manufacturer
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ModelNumber
    {
      get { return ModelNumberElement != null ? ModelNumberElement.Value : null; }
      set
      {
        if (value == null)
          ModelNumberElement = null;
        else
          ModelNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("ModelNumber");
      }
    }

    /// <summary>
    /// What kind of device or device system this is
    /// </summary>
    [FhirElement("classification", Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.ClassificationComponent> Classification
    {
      get { if(_Classification==null) _Classification = new List<Hl7.Fhir.Model.DeviceDefinition.ClassificationComponent>(); return _Classification; }
      set { _Classification = value; OnPropertyChanged("Classification"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.ClassificationComponent> _Classification;

    /// <summary>
    /// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication
    /// </summary>
    [FhirElement("specialization", Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> Specialization
    {
      get { if(_Specialization==null) _Specialization = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _Specialization; }
      set { _Specialization = value; OnPropertyChanged("Specialization"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _Specialization;

    /// <summary>
    /// A device, part of the current one
    /// </summary>
    [FhirElement("hasPart", Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent> HasPart
    {
      get { if(_HasPart==null) _HasPart = new List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent>(); return _HasPart; }
      set { _HasPart = value; OnPropertyChanged("HasPart"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent> _HasPart;

    /// <summary>
    /// Information about the packaging of the device, i.e. how the device is packaged
    /// </summary>
    [FhirElement("packaging", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> Packaging
    {
      get { if(_Packaging==null) _Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(); return _Packaging; }
      set { _Packaging = value; OnPropertyChanged("Packaging"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent> _Packaging;

    /// <summary>
    /// The version of the device or software
    /// </summary>
    [FhirElement("version", Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent> Version
    {
      get { if(_Version==null) _Version = new List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent>(); return _Version; }
      set { _Version = value; OnPropertyChanged("Version"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent> _Version;

    /// <summary>
    /// Safety characteristics of the device
    /// </summary>
    [FhirElement("safety", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Safety
    {
      get { if(_Safety==null) _Safety = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Safety; }
      set { _Safety = value; OnPropertyChanged("Safety"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Safety;

    /// <summary>
    /// Shelf Life and storage information
    /// </summary>
    [FhirElement("shelfLifeStorage", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ProductShelfLife> ShelfLifeStorage
    {
      get { if(_ShelfLifeStorage==null) _ShelfLifeStorage = new List<Hl7.Fhir.Model.ProductShelfLife>(); return _ShelfLifeStorage; }
      set { _ShelfLifeStorage = value; OnPropertyChanged("ShelfLifeStorage"); }
    }

    private List<Hl7.Fhir.Model.ProductShelfLife> _ShelfLifeStorage;

    /// <summary>
    /// Language code for the human-readable text strings produced by the device (all supported)
    /// </summary>
    [FhirElement("languageCode", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> LanguageCode
    {
      get { if(_LanguageCode==null) _LanguageCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _LanguageCode; }
      set { _LanguageCode = value; OnPropertyChanged("LanguageCode"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _LanguageCode;

    /// <summary>
    /// The potential, valid configuration settings of a device, e.g., regulation status, time properties
    /// </summary>
    [FhirElement("property", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent> Property
    {
      get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent>(); return _Property; }
      set { _Property = value; OnPropertyChanged("Property"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent> _Property;

    /// <summary>
    /// Organization responsible for device
    /// </summary>
    [FhirElement("owner", Order=250, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Owner
    {
      get { return _Owner; }
      set { _Owner = value; OnPropertyChanged("Owner"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Owner;

    /// <summary>
    /// Details for human/organization for support
    /// </summary>
    [FhirElement("contact", Order=260, FiveWs="FiveWs.source")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactPoint> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactPoint>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactPoint> _Contact;

    /// <summary>
    /// An associated device, attached to, used with, communicating with or linking a previous or new device model to the focal device
    /// </summary>
    [FhirElement("link", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.LinkComponent> Link
    {
      get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.DeviceDefinition.LinkComponent>(); return _Link; }
      set { _Link = value; OnPropertyChanged("Link"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.LinkComponent> _Link;

    /// <summary>
    /// Device notes and comments
    /// </summary>
    [FhirElement("note", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// The parent device it can be part of
    /// </summary>
    [FhirElement("parentDevice", InSummary=true, Order=290)]
    [CLSCompliant(false)]
    [References("DeviceDefinition")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ParentDevice
    {
      get { return _ParentDevice; }
      set { _ParentDevice = value; OnPropertyChanged("ParentDevice"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ParentDevice;

    /// <summary>
    /// A substance used to create the material(s) of which the device is made
    /// </summary>
    [FhirElement("material", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent> Material
    {
      get { if(_Material==null) _Material = new List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent>(); return _Material; }
      set { _Material = value; OnPropertyChanged("Material"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent> _Material;

    /// <summary>
    /// lot-number | manufactured-date | serial-number | expiration-date | biological-source | software-version
    /// </summary>
    [FhirElement("productionIdentifierInUDI", Order=310)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.DeviceDefinition.DeviceProductionIdentifierInUDI>> ProductionIdentifierInUDIElement
    {
      get { if(_ProductionIdentifierInUDIElement==null) _ProductionIdentifierInUDIElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceDefinition.DeviceProductionIdentifierInUDI>>(); return _ProductionIdentifierInUDIElement; }
      set { _ProductionIdentifierInUDIElement = value; OnPropertyChanged("ProductionIdentifierInUDIElement"); }
    }

    private List<Code<Hl7.Fhir.Model.DeviceDefinition.DeviceProductionIdentifierInUDI>> _ProductionIdentifierInUDIElement;

    /// <summary>
    /// lot-number | manufactured-date | serial-number | expiration-date | biological-source | software-version
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.DeviceDefinition.DeviceProductionIdentifierInUDI?> ProductionIdentifierInUDI
    {
      get { return ProductionIdentifierInUDIElement != null ? ProductionIdentifierInUDIElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ProductionIdentifierInUDIElement = null;
        else
          ProductionIdentifierInUDIElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceDefinition.DeviceProductionIdentifierInUDI>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.DeviceDefinition.DeviceProductionIdentifierInUDI>(elem)));
        OnPropertyChanged("ProductionIdentifierInUDI");
      }
    }

    /// <summary>
    /// Information aimed at providing directions for the usage of this model of device
    /// </summary>
    [FhirElement("guideline", Order=320)]
    [DataMember]
    public Hl7.Fhir.Model.DeviceDefinition.GuidelineComponent Guideline
    {
      get { return _Guideline; }
      set { _Guideline = value; OnPropertyChanged("Guideline"); }
    }

    private Hl7.Fhir.Model.DeviceDefinition.GuidelineComponent _Guideline;

    /// <summary>
    /// Tracking of latest field safety corrective action
    /// </summary>
    [FhirElement("correctiveAction", Order=330)]
    [DataMember]
    public Hl7.Fhir.Model.DeviceDefinition.CorrectiveActionComponent CorrectiveAction
    {
      get { return _CorrectiveAction; }
      set { _CorrectiveAction = value; OnPropertyChanged("CorrectiveAction"); }
    }

    private Hl7.Fhir.Model.DeviceDefinition.CorrectiveActionComponent _CorrectiveAction;

    /// <summary>
    /// Billing code or reference associated with the device
    /// </summary>
    [FhirElement("chargeItem", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDefinition.ChargeItemComponent> ChargeItem
    {
      get { if(_ChargeItem==null) _ChargeItem = new List<Hl7.Fhir.Model.DeviceDefinition.ChargeItemComponent>(); return _ChargeItem; }
      set { _ChargeItem = value; OnPropertyChanged("ChargeItem"); }
    }

    private List<Hl7.Fhir.Model.DeviceDefinition.ChargeItemComponent> _ChargeItem;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as DeviceDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(UdiDeviceIdentifier != null) dest.UdiDeviceIdentifier = new List<Hl7.Fhir.Model.DeviceDefinition.UdiDeviceIdentifierComponent>(UdiDeviceIdentifier.DeepCopy());
      if(PartNumberElement != null) dest.PartNumberElement = (Hl7.Fhir.Model.FhirString)PartNumberElement.DeepCopy();
      if(Manufacturer != null) dest.Manufacturer = (Hl7.Fhir.Model.DataType)Manufacturer.DeepCopy();
      if(DeviceName != null) dest.DeviceName = new List<Hl7.Fhir.Model.DeviceDefinition.DeviceNameComponent>(DeviceName.DeepCopy());
      if(ModelNumberElement != null) dest.ModelNumberElement = (Hl7.Fhir.Model.FhirString)ModelNumberElement.DeepCopy();
      if(Classification != null) dest.Classification = new List<Hl7.Fhir.Model.DeviceDefinition.ClassificationComponent>(Classification.DeepCopy());
      if(Specialization != null) dest.Specialization = new List<Hl7.Fhir.Model.RelatedArtifact>(Specialization.DeepCopy());
      if(HasPart != null) dest.HasPart = new List<Hl7.Fhir.Model.DeviceDefinition.HasPartComponent>(HasPart.DeepCopy());
      if(Packaging != null) dest.Packaging = new List<Hl7.Fhir.Model.DeviceDefinition.PackagingComponent>(Packaging.DeepCopy());
      if(Version != null) dest.Version = new List<Hl7.Fhir.Model.DeviceDefinition.VersionComponent>(Version.DeepCopy());
      if(Safety != null) dest.Safety = new List<Hl7.Fhir.Model.CodeableConcept>(Safety.DeepCopy());
      if(ShelfLifeStorage != null) dest.ShelfLifeStorage = new List<Hl7.Fhir.Model.ProductShelfLife>(ShelfLifeStorage.DeepCopy());
      if(LanguageCode != null) dest.LanguageCode = new List<Hl7.Fhir.Model.CodeableConcept>(LanguageCode.DeepCopy());
      if(Property != null) dest.Property = new List<Hl7.Fhir.Model.DeviceDefinition.PropertyComponent>(Property.DeepCopy());
      if(Owner != null) dest.Owner = (Hl7.Fhir.Model.ResourceReference)Owner.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactPoint>(Contact.DeepCopy());
      if(Link != null) dest.Link = new List<Hl7.Fhir.Model.DeviceDefinition.LinkComponent>(Link.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(ParentDevice != null) dest.ParentDevice = (Hl7.Fhir.Model.ResourceReference)ParentDevice.DeepCopy();
      if(Material != null) dest.Material = new List<Hl7.Fhir.Model.DeviceDefinition.MaterialComponent>(Material.DeepCopy());
      if(ProductionIdentifierInUDIElement != null) dest.ProductionIdentifierInUDIElement = new List<Code<Hl7.Fhir.Model.DeviceDefinition.DeviceProductionIdentifierInUDI>>(ProductionIdentifierInUDIElement.DeepCopy());
      if(Guideline != null) dest.Guideline = (Hl7.Fhir.Model.DeviceDefinition.GuidelineComponent)Guideline.DeepCopy();
      if(CorrectiveAction != null) dest.CorrectiveAction = (Hl7.Fhir.Model.DeviceDefinition.CorrectiveActionComponent)CorrectiveAction.DeepCopy();
      if(ChargeItem != null) dest.ChargeItem = new List<Hl7.Fhir.Model.DeviceDefinition.ChargeItemComponent>(ChargeItem.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new DeviceDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as DeviceDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
      if( !DeepComparable.Matches(PartNumberElement, otherT.PartNumberElement)) return false;
      if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.Matches(DeviceName, otherT.DeviceName)) return false;
      if( !DeepComparable.Matches(ModelNumberElement, otherT.ModelNumberElement)) return false;
      if( !DeepComparable.Matches(Classification, otherT.Classification)) return false;
      if( !DeepComparable.Matches(Specialization, otherT.Specialization)) return false;
      if( !DeepComparable.Matches(HasPart, otherT.HasPart)) return false;
      if( !DeepComparable.Matches(Packaging, otherT.Packaging)) return false;
      if( !DeepComparable.Matches(Version, otherT.Version)) return false;
      if( !DeepComparable.Matches(Safety, otherT.Safety)) return false;
      if( !DeepComparable.Matches(ShelfLifeStorage, otherT.ShelfLifeStorage)) return false;
      if( !DeepComparable.Matches(LanguageCode, otherT.LanguageCode)) return false;
      if( !DeepComparable.Matches(Property, otherT.Property)) return false;
      if( !DeepComparable.Matches(Owner, otherT.Owner)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Link, otherT.Link)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(ParentDevice, otherT.ParentDevice)) return false;
      if( !DeepComparable.Matches(Material, otherT.Material)) return false;
      if( !DeepComparable.Matches(ProductionIdentifierInUDIElement, otherT.ProductionIdentifierInUDIElement)) return false;
      if( !DeepComparable.Matches(Guideline, otherT.Guideline)) return false;
      if( !DeepComparable.Matches(CorrectiveAction, otherT.CorrectiveAction)) return false;
      if( !DeepComparable.Matches(ChargeItem, otherT.ChargeItem)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as DeviceDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(UdiDeviceIdentifier, otherT.UdiDeviceIdentifier)) return false;
      if( !DeepComparable.IsExactly(PartNumberElement, otherT.PartNumberElement)) return false;
      if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.IsExactly(DeviceName, otherT.DeviceName)) return false;
      if( !DeepComparable.IsExactly(ModelNumberElement, otherT.ModelNumberElement)) return false;
      if( !DeepComparable.IsExactly(Classification, otherT.Classification)) return false;
      if( !DeepComparable.IsExactly(Specialization, otherT.Specialization)) return false;
      if( !DeepComparable.IsExactly(HasPart, otherT.HasPart)) return false;
      if( !DeepComparable.IsExactly(Packaging, otherT.Packaging)) return false;
      if( !DeepComparable.IsExactly(Version, otherT.Version)) return false;
      if( !DeepComparable.IsExactly(Safety, otherT.Safety)) return false;
      if( !DeepComparable.IsExactly(ShelfLifeStorage, otherT.ShelfLifeStorage)) return false;
      if( !DeepComparable.IsExactly(LanguageCode, otherT.LanguageCode)) return false;
      if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
      if( !DeepComparable.IsExactly(Owner, otherT.Owner)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(ParentDevice, otherT.ParentDevice)) return false;
      if( !DeepComparable.IsExactly(Material, otherT.Material)) return false;
      if( !DeepComparable.IsExactly(ProductionIdentifierInUDIElement, otherT.ProductionIdentifierInUDIElement)) return false;
      if( !DeepComparable.IsExactly(Guideline, otherT.Guideline)) return false;
      if( !DeepComparable.IsExactly(CorrectiveAction, otherT.CorrectiveAction)) return false;
      if( !DeepComparable.IsExactly(ChargeItem, otherT.ChargeItem)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Description != null) yield return Description;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return elem; }
        if (PartNumberElement != null) yield return PartNumberElement;
        if (Manufacturer != null) yield return Manufacturer;
        foreach (var elem in DeviceName) { if (elem != null) yield return elem; }
        if (ModelNumberElement != null) yield return ModelNumberElement;
        foreach (var elem in Classification) { if (elem != null) yield return elem; }
        foreach (var elem in Specialization) { if (elem != null) yield return elem; }
        foreach (var elem in HasPart) { if (elem != null) yield return elem; }
        foreach (var elem in Packaging) { if (elem != null) yield return elem; }
        foreach (var elem in Version) { if (elem != null) yield return elem; }
        foreach (var elem in Safety) { if (elem != null) yield return elem; }
        foreach (var elem in ShelfLifeStorage) { if (elem != null) yield return elem; }
        foreach (var elem in LanguageCode) { if (elem != null) yield return elem; }
        foreach (var elem in Property) { if (elem != null) yield return elem; }
        if (Owner != null) yield return Owner;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        foreach (var elem in Link) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (ParentDevice != null) yield return ParentDevice;
        foreach (var elem in Material) { if (elem != null) yield return elem; }
        foreach (var elem in ProductionIdentifierInUDIElement) { if (elem != null) yield return elem; }
        if (Guideline != null) yield return Guideline;
        if (CorrectiveAction != null) yield return CorrectiveAction;
        foreach (var elem in ChargeItem) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in UdiDeviceIdentifier) { if (elem != null) yield return new ElementValue("udiDeviceIdentifier", elem); }
        if (PartNumberElement != null) yield return new ElementValue("partNumber", PartNumberElement);
        if (Manufacturer != null) yield return new ElementValue("manufacturer", Manufacturer);
        foreach (var elem in DeviceName) { if (elem != null) yield return new ElementValue("deviceName", elem); }
        if (ModelNumberElement != null) yield return new ElementValue("modelNumber", ModelNumberElement);
        foreach (var elem in Classification) { if (elem != null) yield return new ElementValue("classification", elem); }
        foreach (var elem in Specialization) { if (elem != null) yield return new ElementValue("specialization", elem); }
        foreach (var elem in HasPart) { if (elem != null) yield return new ElementValue("hasPart", elem); }
        foreach (var elem in Packaging) { if (elem != null) yield return new ElementValue("packaging", elem); }
        foreach (var elem in Version) { if (elem != null) yield return new ElementValue("version", elem); }
        foreach (var elem in Safety) { if (elem != null) yield return new ElementValue("safety", elem); }
        foreach (var elem in ShelfLifeStorage) { if (elem != null) yield return new ElementValue("shelfLifeStorage", elem); }
        foreach (var elem in LanguageCode) { if (elem != null) yield return new ElementValue("languageCode", elem); }
        foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
        if (Owner != null) yield return new ElementValue("owner", Owner);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (ParentDevice != null) yield return new ElementValue("parentDevice", ParentDevice);
        foreach (var elem in Material) { if (elem != null) yield return new ElementValue("material", elem); }
        foreach (var elem in ProductionIdentifierInUDIElement) { if (elem != null) yield return new ElementValue("productionIdentifierInUDI", elem); }
        if (Guideline != null) yield return new ElementValue("guideline", Guideline);
        if (CorrectiveAction != null) yield return new ElementValue("correctiveAction", CorrectiveAction);
        foreach (var elem in ChargeItem) { if (elem != null) yield return new ElementValue("chargeItem", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "description":
          value = Description;
          return Description is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "udiDeviceIdentifier":
          value = UdiDeviceIdentifier;
          return UdiDeviceIdentifier?.Any() == true;
        case "partNumber":
          value = PartNumberElement;
          return PartNumberElement is not null;
        case "manufacturer":
          value = Manufacturer;
          return Manufacturer is not null;
        case "deviceName":
          value = DeviceName;
          return DeviceName?.Any() == true;
        case "modelNumber":
          value = ModelNumberElement;
          return ModelNumberElement is not null;
        case "classification":
          value = Classification;
          return Classification?.Any() == true;
        case "specialization":
          value = Specialization;
          return Specialization?.Any() == true;
        case "hasPart":
          value = HasPart;
          return HasPart?.Any() == true;
        case "packaging":
          value = Packaging;
          return Packaging?.Any() == true;
        case "version":
          value = Version;
          return Version?.Any() == true;
        case "safety":
          value = Safety;
          return Safety?.Any() == true;
        case "shelfLifeStorage":
          value = ShelfLifeStorage;
          return ShelfLifeStorage?.Any() == true;
        case "languageCode":
          value = LanguageCode;
          return LanguageCode?.Any() == true;
        case "property":
          value = Property;
          return Property?.Any() == true;
        case "owner":
          value = Owner;
          return Owner is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "link":
          value = Link;
          return Link?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "parentDevice":
          value = ParentDevice;
          return ParentDevice is not null;
        case "material":
          value = Material;
          return Material?.Any() == true;
        case "productionIdentifierInUDI":
          value = ProductionIdentifierInUDIElement;
          return ProductionIdentifierInUDIElement?.Any() == true;
        case "guideline":
          value = Guideline;
          return Guideline is not null;
        case "correctiveAction":
          value = CorrectiveAction;
          return CorrectiveAction is not null;
        case "chargeItem":
          value = ChargeItem;
          return ChargeItem?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (UdiDeviceIdentifier?.Any() == true) yield return new KeyValuePair<string,object>("udiDeviceIdentifier",UdiDeviceIdentifier);
      if (PartNumberElement is not null) yield return new KeyValuePair<string,object>("partNumber",PartNumberElement);
      if (Manufacturer is not null) yield return new KeyValuePair<string,object>("manufacturer",Manufacturer);
      if (DeviceName?.Any() == true) yield return new KeyValuePair<string,object>("deviceName",DeviceName);
      if (ModelNumberElement is not null) yield return new KeyValuePair<string,object>("modelNumber",ModelNumberElement);
      if (Classification?.Any() == true) yield return new KeyValuePair<string,object>("classification",Classification);
      if (Specialization?.Any() == true) yield return new KeyValuePair<string,object>("specialization",Specialization);
      if (HasPart?.Any() == true) yield return new KeyValuePair<string,object>("hasPart",HasPart);
      if (Packaging?.Any() == true) yield return new KeyValuePair<string,object>("packaging",Packaging);
      if (Version?.Any() == true) yield return new KeyValuePair<string,object>("version",Version);
      if (Safety?.Any() == true) yield return new KeyValuePair<string,object>("safety",Safety);
      if (ShelfLifeStorage?.Any() == true) yield return new KeyValuePair<string,object>("shelfLifeStorage",ShelfLifeStorage);
      if (LanguageCode?.Any() == true) yield return new KeyValuePair<string,object>("languageCode",LanguageCode);
      if (Property?.Any() == true) yield return new KeyValuePair<string,object>("property",Property);
      if (Owner is not null) yield return new KeyValuePair<string,object>("owner",Owner);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Link?.Any() == true) yield return new KeyValuePair<string,object>("link",Link);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (ParentDevice is not null) yield return new KeyValuePair<string,object>("parentDevice",ParentDevice);
      if (Material?.Any() == true) yield return new KeyValuePair<string,object>("material",Material);
      if (ProductionIdentifierInUDIElement?.Any() == true) yield return new KeyValuePair<string,object>("productionIdentifierInUDI",ProductionIdentifierInUDIElement);
      if (Guideline is not null) yield return new KeyValuePair<string,object>("guideline",Guideline);
      if (CorrectiveAction is not null) yield return new KeyValuePair<string,object>("correctiveAction",CorrectiveAction);
      if (ChargeItem?.Any() == true) yield return new KeyValuePair<string,object>("chargeItem",ChargeItem);
    }

  }

}

// end of file

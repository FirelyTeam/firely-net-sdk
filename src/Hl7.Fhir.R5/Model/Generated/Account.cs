// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Tracks balance, charges, for patient or cost center
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Account","http://hl7.org/fhir/StructureDefinition/Account", IsResource=true)]
  public partial class Account : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Account"; } }

    /// <summary>
    /// Indicates whether the account is available to be used.
    /// (url: http://hl7.org/fhir/ValueSet/account-status)
    /// (system: http://hl7.org/fhir/account-status)
    /// </summary>
    [FhirEnumeration("AccountStatus", "http://hl7.org/fhir/ValueSet/account-status")]
    public enum AccountStatus
    {
      /// <summary>
      /// This account is active and may be used.
      /// (system: http://hl7.org/fhir/account-status)
      /// </summary>
      [EnumLiteral("active", "http://hl7.org/fhir/account-status"), Description("Active")]
      Active,
      /// <summary>
      /// This account is inactive and should not be used to track financial information.
      /// (system: http://hl7.org/fhir/account-status)
      /// </summary>
      [EnumLiteral("inactive", "http://hl7.org/fhir/account-status"), Description("Inactive")]
      Inactive,
      /// <summary>
      /// This instance should not have been part of this patient's medical record.
      /// (system: http://hl7.org/fhir/account-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/account-status"), Description("Entered in error")]
      EnteredInError,
      /// <summary>
      /// This account is on hold.
      /// (system: http://hl7.org/fhir/account-status)
      /// </summary>
      [EnumLiteral("on-hold", "http://hl7.org/fhir/account-status"), Description("On Hold")]
      OnHold,
      /// <summary>
      /// The account status is unknown.
      /// (system: http://hl7.org/fhir/account-status)
      /// </summary>
      [EnumLiteral("unknown", "http://hl7.org/fhir/account-status"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Account#Coverage", IsNestedType=true)]
    [BackboneType("Account.coverage")]
    public partial class CoverageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Account#Coverage"; } }

      /// <summary>
      /// The party(s), such as insurances, that may contribute to the payment of this account
      /// </summary>
      [FhirElement("coverage", InSummary=true, Order=40)]
      [CLSCompliant(false)]
      [References("Coverage")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Coverage
      {
        get { return _Coverage; }
        set { _Coverage = value; OnPropertyChanged("Coverage"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Coverage;

      /// <summary>
      /// The priority of the coverage in the context of this account
      /// </summary>
      [FhirElement("priority", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt PriorityElement
      {
        get { return _PriorityElement; }
        set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _PriorityElement;

      /// <summary>
      /// The priority of the coverage in the context of this account
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Priority
      {
        get { return PriorityElement != null ? PriorityElement.Value : null; }
        set
        {
          if (value == null)
            PriorityElement = null;
          else
            PriorityElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Priority");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CoverageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Coverage != null) dest.Coverage = (Hl7.Fhir.Model.ResourceReference)Coverage.DeepCopy();
        if(PriorityElement != null) dest.PriorityElement = (Hl7.Fhir.Model.PositiveInt)PriorityElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CoverageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CoverageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CoverageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Coverage != null) yield return Coverage;
          if (PriorityElement != null) yield return PriorityElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Coverage != null) yield return new ElementValue("coverage", Coverage);
          if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "coverage":
            value = Coverage;
            return Coverage is not null;
          case "priority":
            value = PriorityElement;
            return PriorityElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Coverage is not null) yield return new KeyValuePair<string,object>("coverage",Coverage);
        if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      }

    }

    /// <summary>
    /// The parties ultimately responsible for balancing the Account
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Account#Guarantor", IsNestedType=true)]
    [BackboneType("Account.guarantor")]
    public partial class GuarantorComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Account#Guarantor"; } }

      /// <summary>
      /// Responsible entity
      /// </summary>
      [FhirElement("party", Order=40)]
      [CLSCompliant(false)]
      [References("Patient","RelatedPerson","Organization")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      /// <summary>
      /// Credit or other hold applied
      /// </summary>
      [FhirElement("onHold", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean OnHoldElement
      {
        get { return _OnHoldElement; }
        set { _OnHoldElement = value; OnPropertyChanged("OnHoldElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _OnHoldElement;

      /// <summary>
      /// Credit or other hold applied
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? OnHold
      {
        get { return OnHoldElement != null ? OnHoldElement.Value : null; }
        set
        {
          if (value == null)
            OnHoldElement = null;
          else
            OnHoldElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("OnHold");
        }
      }

      /// <summary>
      /// Guarantee account during
      /// </summary>
      [FhirElement("period", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as GuarantorComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        if(OnHoldElement != null) dest.OnHoldElement = (Hl7.Fhir.Model.FhirBoolean)OnHoldElement.DeepCopy();
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new GuarantorComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as GuarantorComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;
        if( !DeepComparable.Matches(OnHoldElement, otherT.OnHoldElement)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as GuarantorComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;
        if( !DeepComparable.IsExactly(OnHoldElement, otherT.OnHoldElement)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Party != null) yield return Party;
          if (OnHoldElement != null) yield return OnHoldElement;
          if (Period != null) yield return Period;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Party != null) yield return new ElementValue("party", Party);
          if (OnHoldElement != null) yield return new ElementValue("onHold", OnHoldElement);
          if (Period != null) yield return new ElementValue("period", Period);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "party":
            value = Party;
            return Party is not null;
          case "onHold":
            value = OnHoldElement;
            return OnHoldElement is not null;
          case "period":
            value = Period;
            return Period is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
        if (OnHoldElement is not null) yield return new KeyValuePair<string,object>("onHold",OnHoldElement);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      }

    }

    /// <summary>
    /// The list of diagnoses relevant to this account
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Account#Diagnosis", IsNestedType=true)]
    [BackboneType("Account.diagnosis")]
    public partial class DiagnosisComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Account#Diagnosis"; } }

      /// <summary>
      /// Ranking of the diagnosis (for each type)
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Ranking of the diagnosis (for each type)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// The diagnosis relevant to the account
      /// </summary>
      [FhirElement("condition", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Condition
      {
        get { return _Condition; }
        set { _Condition = value; OnPropertyChanged("Condition"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Condition;

      /// <summary>
      /// Date of the diagnosis (when coded diagnosis)
      /// </summary>
      [FhirElement("dateOfDiagnosis", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime DateOfDiagnosisElement
      {
        get { return _DateOfDiagnosisElement; }
        set { _DateOfDiagnosisElement = value; OnPropertyChanged("DateOfDiagnosisElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _DateOfDiagnosisElement;

      /// <summary>
      /// Date of the diagnosis (when coded diagnosis)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DateOfDiagnosis
      {
        get { return DateOfDiagnosisElement != null ? DateOfDiagnosisElement.Value : null; }
        set
        {
          if (value == null)
            DateOfDiagnosisElement = null;
          else
            DateOfDiagnosisElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("DateOfDiagnosis");
        }
      }

      /// <summary>
      /// Type that this diagnosis has relevant to the account (e.g. admission, billing, discharge …)
      /// </summary>
      [FhirElement("type", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// Diagnosis present on Admission
      /// </summary>
      [FhirElement("onAdmission", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean OnAdmissionElement
      {
        get { return _OnAdmissionElement; }
        set { _OnAdmissionElement = value; OnPropertyChanged("OnAdmissionElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _OnAdmissionElement;

      /// <summary>
      /// Diagnosis present on Admission
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? OnAdmission
      {
        get { return OnAdmissionElement != null ? OnAdmissionElement.Value : null; }
        set
        {
          if (value == null)
            OnAdmissionElement = null;
          else
            OnAdmissionElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("OnAdmission");
        }
      }

      /// <summary>
      /// Package Code specific for billing
      /// </summary>
      [FhirElement("packageCode", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> PackageCode
      {
        get { if(_PackageCode==null) _PackageCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _PackageCode; }
        set { _PackageCode = value; OnPropertyChanged("PackageCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _PackageCode;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DiagnosisComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Condition != null) dest.Condition = (Hl7.Fhir.Model.CodeableReference)Condition.DeepCopy();
        if(DateOfDiagnosisElement != null) dest.DateOfDiagnosisElement = (Hl7.Fhir.Model.FhirDateTime)DateOfDiagnosisElement.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(OnAdmissionElement != null) dest.OnAdmissionElement = (Hl7.Fhir.Model.FhirBoolean)OnAdmissionElement.DeepCopy();
        if(PackageCode != null) dest.PackageCode = new List<Hl7.Fhir.Model.CodeableConcept>(PackageCode.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DiagnosisComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Condition, otherT.Condition)) return false;
        if( !DeepComparable.Matches(DateOfDiagnosisElement, otherT.DateOfDiagnosisElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(OnAdmissionElement, otherT.OnAdmissionElement)) return false;
        if( !DeepComparable.Matches(PackageCode, otherT.PackageCode)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Condition, otherT.Condition)) return false;
        if( !DeepComparable.IsExactly(DateOfDiagnosisElement, otherT.DateOfDiagnosisElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(OnAdmissionElement, otherT.OnAdmissionElement)) return false;
        if( !DeepComparable.IsExactly(PackageCode, otherT.PackageCode)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Condition != null) yield return Condition;
          if (DateOfDiagnosisElement != null) yield return DateOfDiagnosisElement;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (OnAdmissionElement != null) yield return OnAdmissionElement;
          foreach (var elem in PackageCode) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Condition != null) yield return new ElementValue("condition", Condition);
          if (DateOfDiagnosisElement != null) yield return new ElementValue("dateOfDiagnosis", DateOfDiagnosisElement);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (OnAdmissionElement != null) yield return new ElementValue("onAdmission", OnAdmissionElement);
          foreach (var elem in PackageCode) { if (elem != null) yield return new ElementValue("packageCode", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "condition":
            value = Condition;
            return Condition is not null;
          case "dateOfDiagnosis":
            value = DateOfDiagnosisElement;
            return DateOfDiagnosisElement is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "onAdmission":
            value = OnAdmissionElement;
            return OnAdmissionElement is not null;
          case "packageCode":
            value = PackageCode;
            return PackageCode?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Condition is not null) yield return new KeyValuePair<string,object>("condition",Condition);
        if (DateOfDiagnosisElement is not null) yield return new KeyValuePair<string,object>("dateOfDiagnosis",DateOfDiagnosisElement);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (OnAdmissionElement is not null) yield return new KeyValuePair<string,object>("onAdmission",OnAdmissionElement);
        if (PackageCode?.Any() == true) yield return new KeyValuePair<string,object>("packageCode",PackageCode);
      }

    }

    /// <summary>
    /// The list of procedures relevant to this account
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Account#Procedure", IsNestedType=true)]
    [BackboneType("Account.procedure")]
    public partial class ProcedureComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Account#Procedure"; } }

      /// <summary>
      /// Ranking of the procedure (for each type)
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Ranking of the procedure (for each type)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// The procedure relevant to the account
      /// </summary>
      [FhirElement("code", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Code;

      /// <summary>
      /// Date of the procedure (when coded procedure)
      /// </summary>
      [FhirElement("dateOfService", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime DateOfServiceElement
      {
        get { return _DateOfServiceElement; }
        set { _DateOfServiceElement = value; OnPropertyChanged("DateOfServiceElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _DateOfServiceElement;

      /// <summary>
      /// Date of the procedure (when coded procedure)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DateOfService
      {
        get { return DateOfServiceElement != null ? DateOfServiceElement.Value : null; }
        set
        {
          if (value == null)
            DateOfServiceElement = null;
          else
            DateOfServiceElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("DateOfService");
        }
      }

      /// <summary>
      /// How this procedure value should be used in charging the account
      /// </summary>
      [FhirElement("type", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// Package Code specific for billing
      /// </summary>
      [FhirElement("packageCode", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> PackageCode
      {
        get { if(_PackageCode==null) _PackageCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _PackageCode; }
        set { _PackageCode = value; OnPropertyChanged("PackageCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _PackageCode;

      /// <summary>
      /// Any devices that were associated with the procedure
      /// </summary>
      [FhirElement("device", InSummary=true, Order=90)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Device
      {
        get { if(_Device==null) _Device = new List<Hl7.Fhir.Model.ResourceReference>(); return _Device; }
        set { _Device = value; OnPropertyChanged("Device"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Device;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProcedureComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableReference)Code.DeepCopy();
        if(DateOfServiceElement != null) dest.DateOfServiceElement = (Hl7.Fhir.Model.FhirDateTime)DateOfServiceElement.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(PackageCode != null) dest.PackageCode = new List<Hl7.Fhir.Model.CodeableConcept>(PackageCode.DeepCopy());
        if(Device != null) dest.Device = new List<Hl7.Fhir.Model.ResourceReference>(Device.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProcedureComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProcedureComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(DateOfServiceElement, otherT.DateOfServiceElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(PackageCode, otherT.PackageCode)) return false;
        if( !DeepComparable.Matches(Device, otherT.Device)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProcedureComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(DateOfServiceElement, otherT.DateOfServiceElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(PackageCode, otherT.PackageCode)) return false;
        if( !DeepComparable.IsExactly(Device, otherT.Device)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Code != null) yield return Code;
          if (DateOfServiceElement != null) yield return DateOfServiceElement;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          foreach (var elem in PackageCode) { if (elem != null) yield return elem; }
          foreach (var elem in Device) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Code != null) yield return new ElementValue("code", Code);
          if (DateOfServiceElement != null) yield return new ElementValue("dateOfService", DateOfServiceElement);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          foreach (var elem in PackageCode) { if (elem != null) yield return new ElementValue("packageCode", elem); }
          foreach (var elem in Device) { if (elem != null) yield return new ElementValue("device", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "dateOfService":
            value = DateOfServiceElement;
            return DateOfServiceElement is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "packageCode":
            value = PackageCode;
            return PackageCode?.Any() == true;
          case "device":
            value = Device;
            return Device?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (DateOfServiceElement is not null) yield return new KeyValuePair<string,object>("dateOfService",DateOfServiceElement);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (PackageCode?.Any() == true) yield return new KeyValuePair<string,object>("packageCode",PackageCode);
        if (Device?.Any() == true) yield return new KeyValuePair<string,object>("device",Device);
      }

    }

    /// <summary>
    /// Other associated accounts related to this account
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Account#RelatedAccount", IsNestedType=true)]
    [BackboneType("Account.relatedAccount")]
    public partial class RelatedAccountComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Account#RelatedAccount"; } }

      /// <summary>
      /// Relationship of the associated Account
      /// </summary>
      [FhirElement("relationship", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Relationship
      {
        get { return _Relationship; }
        set { _Relationship = value; OnPropertyChanged("Relationship"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Relationship;

      /// <summary>
      /// Reference to an associated Account
      /// </summary>
      [FhirElement("account", Order=50)]
      [CLSCompliant(false)]
      [References("Account")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Account
      {
        get { return _Account; }
        set { _Account = value; OnPropertyChanged("Account"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Account;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatedAccountComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Relationship != null) dest.Relationship = (Hl7.Fhir.Model.CodeableConcept)Relationship.DeepCopy();
        if(Account != null) dest.Account = (Hl7.Fhir.Model.ResourceReference)Account.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatedAccountComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatedAccountComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.Matches(Account, otherT.Account)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatedAccountComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.IsExactly(Account, otherT.Account)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Relationship != null) yield return Relationship;
          if (Account != null) yield return Account;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Relationship != null) yield return new ElementValue("relationship", Relationship);
          if (Account != null) yield return new ElementValue("account", Account);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "relationship":
            value = Relationship;
            return Relationship is not null;
          case "account":
            value = Account;
            return Account is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Relationship is not null) yield return new KeyValuePair<string,object>("relationship",Relationship);
        if (Account is not null) yield return new KeyValuePair<string,object>("account",Account);
      }

    }

    /// <summary>
    /// Calculated account balance(s)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Account#Balance", IsNestedType=true)]
    [BackboneType("Account.balance")]
    public partial class BalanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Account#Balance"; } }

      /// <summary>
      /// Who is expected to pay this part of the balance
      /// </summary>
      [FhirElement("aggregate", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Aggregate
      {
        get { return _Aggregate; }
        set { _Aggregate = value; OnPropertyChanged("Aggregate"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Aggregate;

      /// <summary>
      /// current | 30 | 60 | 90 | 120
      /// </summary>
      [FhirElement("term", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Term
      {
        get { return _Term; }
        set { _Term = value; OnPropertyChanged("Term"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Term;

      /// <summary>
      /// Estimated balance
      /// </summary>
      [FhirElement("estimate", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean EstimateElement
      {
        get { return _EstimateElement; }
        set { _EstimateElement = value; OnPropertyChanged("EstimateElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _EstimateElement;

      /// <summary>
      /// Estimated balance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Estimate
      {
        get { return EstimateElement != null ? EstimateElement.Value : null; }
        set
        {
          if (value == null)
            EstimateElement = null;
          else
            EstimateElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Estimate");
        }
      }

      /// <summary>
      /// Calculated amount
      /// </summary>
      [FhirElement("amount", Order=70)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Money Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.Money _Amount;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as BalanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Aggregate != null) dest.Aggregate = (Hl7.Fhir.Model.CodeableConcept)Aggregate.DeepCopy();
        if(Term != null) dest.Term = (Hl7.Fhir.Model.CodeableConcept)Term.DeepCopy();
        if(EstimateElement != null) dest.EstimateElement = (Hl7.Fhir.Model.FhirBoolean)EstimateElement.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Money)Amount.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new BalanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as BalanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Aggregate, otherT.Aggregate)) return false;
        if( !DeepComparable.Matches(Term, otherT.Term)) return false;
        if( !DeepComparable.Matches(EstimateElement, otherT.EstimateElement)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as BalanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Aggregate, otherT.Aggregate)) return false;
        if( !DeepComparable.IsExactly(Term, otherT.Term)) return false;
        if( !DeepComparable.IsExactly(EstimateElement, otherT.EstimateElement)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Aggregate != null) yield return Aggregate;
          if (Term != null) yield return Term;
          if (EstimateElement != null) yield return EstimateElement;
          if (Amount != null) yield return Amount;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Aggregate != null) yield return new ElementValue("aggregate", Aggregate);
          if (Term != null) yield return new ElementValue("term", Term);
          if (EstimateElement != null) yield return new ElementValue("estimate", EstimateElement);
          if (Amount != null) yield return new ElementValue("amount", Amount);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "aggregate":
            value = Aggregate;
            return Aggregate is not null;
          case "term":
            value = Term;
            return Term is not null;
          case "estimate":
            value = EstimateElement;
            return EstimateElement is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Aggregate is not null) yield return new KeyValuePair<string,object>("aggregate",Aggregate);
        if (Term is not null) yield return new KeyValuePair<string,object>("term",Term);
        if (EstimateElement is not null) yield return new KeyValuePair<string,object>("estimate",EstimateElement);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
      }

    }

    /// <summary>
    /// Account number
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// active | inactive | entered-in-error | on-hold | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("AccountStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Account.AccountStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Account.AccountStatus> _StatusElement;

    /// <summary>
    /// active | inactive | entered-in-error | on-hold | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Account.AccountStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Account.AccountStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Tracks the lifecycle of the account through the billing process
    /// </summary>
    [FhirElement("billingStatus", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept BillingStatus
    {
      get { return _BillingStatus; }
      set { _BillingStatus = value; OnPropertyChanged("BillingStatus"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _BillingStatus;

    /// <summary>
    /// E.g. patient, expense, depreciation
    /// </summary>
    [FhirElement("type", InSummary=true, Order=120, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// Human-readable label
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Human-readable label
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// The entity that caused the expenses
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=140, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("Patient","Device","Practitioner","PractitionerRole","Location","HealthcareService","Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Subject
    {
      get { if(_Subject==null) _Subject = new List<Hl7.Fhir.Model.ResourceReference>(); return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Subject;

    /// <summary>
    /// Transaction window
    /// </summary>
    [FhirElement("servicePeriod", InSummary=true, Order=150, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Period ServicePeriod
    {
      get { return _ServicePeriod; }
      set { _ServicePeriod = value; OnPropertyChanged("ServicePeriod"); }
    }

    private Hl7.Fhir.Model.Period _ServicePeriod;

    /// <summary>
    /// The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account
    /// </summary>
    [FhirElement("coverage", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Account.CoverageComponent> Coverage
    {
      get { if(_Coverage==null) _Coverage = new List<Hl7.Fhir.Model.Account.CoverageComponent>(); return _Coverage; }
      set { _Coverage = value; OnPropertyChanged("Coverage"); }
    }

    private List<Hl7.Fhir.Model.Account.CoverageComponent> _Coverage;

    /// <summary>
    /// Entity managing the Account
    /// </summary>
    [FhirElement("owner", InSummary=true, Order=170)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Owner
    {
      get { return _Owner; }
      set { _Owner = value; OnPropertyChanged("Owner"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Owner;

    /// <summary>
    /// Explanation of purpose/use
    /// </summary>
    [FhirElement("description", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Explanation of purpose/use
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// The parties ultimately responsible for balancing the Account
    /// </summary>
    [FhirElement("guarantor", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Account.GuarantorComponent> Guarantor
    {
      get { if(_Guarantor==null) _Guarantor = new List<Hl7.Fhir.Model.Account.GuarantorComponent>(); return _Guarantor; }
      set { _Guarantor = value; OnPropertyChanged("Guarantor"); }
    }

    private List<Hl7.Fhir.Model.Account.GuarantorComponent> _Guarantor;

    /// <summary>
    /// The list of diagnoses relevant to this account
    /// </summary>
    [FhirElement("diagnosis", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Account.DiagnosisComponent> Diagnosis
    {
      get { if(_Diagnosis==null) _Diagnosis = new List<Hl7.Fhir.Model.Account.DiagnosisComponent>(); return _Diagnosis; }
      set { _Diagnosis = value; OnPropertyChanged("Diagnosis"); }
    }

    private List<Hl7.Fhir.Model.Account.DiagnosisComponent> _Diagnosis;

    /// <summary>
    /// The list of procedures relevant to this account
    /// </summary>
    [FhirElement("procedure", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Account.ProcedureComponent> Procedure
    {
      get { if(_Procedure==null) _Procedure = new List<Hl7.Fhir.Model.Account.ProcedureComponent>(); return _Procedure; }
      set { _Procedure = value; OnPropertyChanged("Procedure"); }
    }

    private List<Hl7.Fhir.Model.Account.ProcedureComponent> _Procedure;

    /// <summary>
    /// Other associated accounts related to this account
    /// </summary>
    [FhirElement("relatedAccount", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Account.RelatedAccountComponent> RelatedAccount
    {
      get { if(_RelatedAccount==null) _RelatedAccount = new List<Hl7.Fhir.Model.Account.RelatedAccountComponent>(); return _RelatedAccount; }
      set { _RelatedAccount = value; OnPropertyChanged("RelatedAccount"); }
    }

    private List<Hl7.Fhir.Model.Account.RelatedAccountComponent> _RelatedAccount;

    /// <summary>
    /// The base or default currency
    /// </summary>
    [FhirElement("currency", Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Currency
    {
      get { return _Currency; }
      set { _Currency = value; OnPropertyChanged("Currency"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Currency;

    /// <summary>
    /// Calculated account balance(s)
    /// </summary>
    [FhirElement("balance", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Account.BalanceComponent> Balance
    {
      get { if(_Balance==null) _Balance = new List<Hl7.Fhir.Model.Account.BalanceComponent>(); return _Balance; }
      set { _Balance = value; OnPropertyChanged("Balance"); }
    }

    private List<Hl7.Fhir.Model.Account.BalanceComponent> _Balance;

    /// <summary>
    /// Time the balance amount was calculated
    /// </summary>
    [FhirElement("calculatedAt", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.Instant CalculatedAtElement
    {
      get { return _CalculatedAtElement; }
      set { _CalculatedAtElement = value; OnPropertyChanged("CalculatedAtElement"); }
    }

    private Hl7.Fhir.Model.Instant _CalculatedAtElement;

    /// <summary>
    /// Time the balance amount was calculated
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public DateTimeOffset? CalculatedAt
    {
      get { return CalculatedAtElement != null ? CalculatedAtElement.Value : null; }
      set
      {
        if (value == null)
          CalculatedAtElement = null;
        else
          CalculatedAtElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("CalculatedAt");
      }
    }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Account;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Account.AccountStatus>)StatusElement.DeepCopy();
      if(BillingStatus != null) dest.BillingStatus = (Hl7.Fhir.Model.CodeableConcept)BillingStatus.DeepCopy();
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(Subject != null) dest.Subject = new List<Hl7.Fhir.Model.ResourceReference>(Subject.DeepCopy());
      if(ServicePeriod != null) dest.ServicePeriod = (Hl7.Fhir.Model.Period)ServicePeriod.DeepCopy();
      if(Coverage != null) dest.Coverage = new List<Hl7.Fhir.Model.Account.CoverageComponent>(Coverage.DeepCopy());
      if(Owner != null) dest.Owner = (Hl7.Fhir.Model.ResourceReference)Owner.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(Guarantor != null) dest.Guarantor = new List<Hl7.Fhir.Model.Account.GuarantorComponent>(Guarantor.DeepCopy());
      if(Diagnosis != null) dest.Diagnosis = new List<Hl7.Fhir.Model.Account.DiagnosisComponent>(Diagnosis.DeepCopy());
      if(Procedure != null) dest.Procedure = new List<Hl7.Fhir.Model.Account.ProcedureComponent>(Procedure.DeepCopy());
      if(RelatedAccount != null) dest.RelatedAccount = new List<Hl7.Fhir.Model.Account.RelatedAccountComponent>(RelatedAccount.DeepCopy());
      if(Currency != null) dest.Currency = (Hl7.Fhir.Model.CodeableConcept)Currency.DeepCopy();
      if(Balance != null) dest.Balance = new List<Hl7.Fhir.Model.Account.BalanceComponent>(Balance.DeepCopy());
      if(CalculatedAtElement != null) dest.CalculatedAtElement = (Hl7.Fhir.Model.Instant)CalculatedAtElement.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Account());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Account;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(BillingStatus, otherT.BillingStatus)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(ServicePeriod, otherT.ServicePeriod)) return false;
      if( !DeepComparable.Matches(Coverage, otherT.Coverage)) return false;
      if( !DeepComparable.Matches(Owner, otherT.Owner)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Guarantor, otherT.Guarantor)) return false;
      if( !DeepComparable.Matches(Diagnosis, otherT.Diagnosis)) return false;
      if( !DeepComparable.Matches(Procedure, otherT.Procedure)) return false;
      if( !DeepComparable.Matches(RelatedAccount, otherT.RelatedAccount)) return false;
      if( !DeepComparable.Matches(Currency, otherT.Currency)) return false;
      if( !DeepComparable.Matches(Balance, otherT.Balance)) return false;
      if( !DeepComparable.Matches(CalculatedAtElement, otherT.CalculatedAtElement)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Account;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(BillingStatus, otherT.BillingStatus)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(ServicePeriod, otherT.ServicePeriod)) return false;
      if( !DeepComparable.IsExactly(Coverage, otherT.Coverage)) return false;
      if( !DeepComparable.IsExactly(Owner, otherT.Owner)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Guarantor, otherT.Guarantor)) return false;
      if( !DeepComparable.IsExactly(Diagnosis, otherT.Diagnosis)) return false;
      if( !DeepComparable.IsExactly(Procedure, otherT.Procedure)) return false;
      if( !DeepComparable.IsExactly(RelatedAccount, otherT.RelatedAccount)) return false;
      if( !DeepComparable.IsExactly(Currency, otherT.Currency)) return false;
      if( !DeepComparable.IsExactly(Balance, otherT.Balance)) return false;
      if( !DeepComparable.IsExactly(CalculatedAtElement, otherT.CalculatedAtElement)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (BillingStatus != null) yield return BillingStatus;
        if (Type != null) yield return Type;
        if (NameElement != null) yield return NameElement;
        foreach (var elem in Subject) { if (elem != null) yield return elem; }
        if (ServicePeriod != null) yield return ServicePeriod;
        foreach (var elem in Coverage) { if (elem != null) yield return elem; }
        if (Owner != null) yield return Owner;
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in Guarantor) { if (elem != null) yield return elem; }
        foreach (var elem in Diagnosis) { if (elem != null) yield return elem; }
        foreach (var elem in Procedure) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedAccount) { if (elem != null) yield return elem; }
        if (Currency != null) yield return Currency;
        foreach (var elem in Balance) { if (elem != null) yield return elem; }
        if (CalculatedAtElement != null) yield return CalculatedAtElement;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (BillingStatus != null) yield return new ElementValue("billingStatus", BillingStatus);
        if (Type != null) yield return new ElementValue("type", Type);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        foreach (var elem in Subject) { if (elem != null) yield return new ElementValue("subject", elem); }
        if (ServicePeriod != null) yield return new ElementValue("servicePeriod", ServicePeriod);
        foreach (var elem in Coverage) { if (elem != null) yield return new ElementValue("coverage", elem); }
        if (Owner != null) yield return new ElementValue("owner", Owner);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in Guarantor) { if (elem != null) yield return new ElementValue("guarantor", elem); }
        foreach (var elem in Diagnosis) { if (elem != null) yield return new ElementValue("diagnosis", elem); }
        foreach (var elem in Procedure) { if (elem != null) yield return new ElementValue("procedure", elem); }
        foreach (var elem in RelatedAccount) { if (elem != null) yield return new ElementValue("relatedAccount", elem); }
        if (Currency != null) yield return new ElementValue("currency", Currency);
        foreach (var elem in Balance) { if (elem != null) yield return new ElementValue("balance", elem); }
        if (CalculatedAtElement != null) yield return new ElementValue("calculatedAt", CalculatedAtElement);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "billingStatus":
          value = BillingStatus;
          return BillingStatus is not null;
        case "type":
          value = Type;
          return Type is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "subject":
          value = Subject;
          return Subject?.Any() == true;
        case "servicePeriod":
          value = ServicePeriod;
          return ServicePeriod is not null;
        case "coverage":
          value = Coverage;
          return Coverage?.Any() == true;
        case "owner":
          value = Owner;
          return Owner is not null;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "guarantor":
          value = Guarantor;
          return Guarantor?.Any() == true;
        case "diagnosis":
          value = Diagnosis;
          return Diagnosis?.Any() == true;
        case "procedure":
          value = Procedure;
          return Procedure?.Any() == true;
        case "relatedAccount":
          value = RelatedAccount;
          return RelatedAccount?.Any() == true;
        case "currency":
          value = Currency;
          return Currency is not null;
        case "balance":
          value = Balance;
          return Balance?.Any() == true;
        case "calculatedAt":
          value = CalculatedAtElement;
          return CalculatedAtElement is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (BillingStatus is not null) yield return new KeyValuePair<string,object>("billingStatus",BillingStatus);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (Subject?.Any() == true) yield return new KeyValuePair<string,object>("subject",Subject);
      if (ServicePeriod is not null) yield return new KeyValuePair<string,object>("servicePeriod",ServicePeriod);
      if (Coverage?.Any() == true) yield return new KeyValuePair<string,object>("coverage",Coverage);
      if (Owner is not null) yield return new KeyValuePair<string,object>("owner",Owner);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (Guarantor?.Any() == true) yield return new KeyValuePair<string,object>("guarantor",Guarantor);
      if (Diagnosis?.Any() == true) yield return new KeyValuePair<string,object>("diagnosis",Diagnosis);
      if (Procedure?.Any() == true) yield return new KeyValuePair<string,object>("procedure",Procedure);
      if (RelatedAccount?.Any() == true) yield return new KeyValuePair<string,object>("relatedAccount",RelatedAccount);
      if (Currency is not null) yield return new KeyValuePair<string,object>("currency",Currency);
      if (Balance?.Any() == true) yield return new KeyValuePair<string,object>("balance",Balance);
      if (CalculatedAtElement is not null) yield return new KeyValuePair<string,object>("calculatedAt",CalculatedAtElement);
    }

  }

}

// end of file

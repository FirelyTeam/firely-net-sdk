// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A record of dispensation of a biologically derived product
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("BiologicallyDerivedProductDispense","http://hl7.org/fhir/StructureDefinition/BiologicallyDerivedProductDispense", IsResource=true)]
  public partial class BiologicallyDerivedProductDispense : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "BiologicallyDerivedProductDispense"; } }

    /// <summary>
    /// BiologicallyDerivedProductDispense Status Codes
    /// (url: http://hl7.org/fhir/ValueSet/biologicallyderivedproductdispense-status)
    /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
    /// </summary>
    [FhirEnumeration("BiologicallyDerivedProductDispenseCodes", "http://hl7.org/fhir/ValueSet/biologicallyderivedproductdispense-status", "http://hl7.org/fhir/biologicallyderivedproductdispense-status")]
    public enum BiologicallyDerivedProductDispenseCodes
    {
      /// <summary>
      /// The dispense process has started but not yet completed.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("preparation"), Description("Preparation")]
      Preparation,
      /// <summary>
      /// The dispense process is in progress.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("in-progress"), Description("In Progress")]
      InProgress,
      /// <summary>
      /// The requested product has been allocated and is ready for transport.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("allocated"), Description("Allocated")]
      Allocated,
      /// <summary>
      /// The dispensed product has been picked up.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("issued"), Description("Issued")]
      Issued,
      /// <summary>
      /// The dispense could not be completed.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("unfulfilled"), Description("Unfulfilled")]
      Unfulfilled,
      /// <summary>
      /// The dispensed product was returned.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("returned"), Description("Returned")]
      Returned,
      /// <summary>
      /// The dispense was entered in error and therefore nullified.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("entered-in-error"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// The authoring system does not know which of the status values applies for this dispense. Note: this concept is not to be used for other - one of the listed statuses is presumed to apply, it's just not known which one.
      /// (system: http://hl7.org/fhir/biologicallyderivedproductdispense-status)
      /// </summary>
      [EnumLiteral("unknown"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// Indicates who or what performed an action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("BiologicallyDerivedProductDispense#Performer", IsNestedType=true)]
    [BackboneType("BiologicallyDerivedProductDispense.performer")]
    public partial class PerformerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "BiologicallyDerivedProductDispense#Performer"; } }

      /// <summary>
      /// Identifies the function of the performer during the dispense
      /// </summary>
      [FhirElement("function", InSummary=true, Order=40)]
      [Binding("BiologicallyDerivedProductDispensPerformerFunction")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Function
      {
        get { return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Function;

      /// <summary>
      /// Who performed the action
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Practitioner")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PerformerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Function != null) dest.Function = (Hl7.Fhir.Model.CodeableConcept)Function.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PerformerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Function != null) yield return Function;
          if (Actor != null) yield return Actor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Function != null) yield return new ElementValue("function", Function);
          if (Actor != null) yield return new ElementValue("actor", Actor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "function":
            value = Function;
            return Function is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Function is not null) yield return new KeyValuePair<string,object>("function",Function);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
      }

    }

    /// <summary>
    /// Business identifier for this dispense
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// The order or request that this dispense is fulfilling
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=100)]
    [CLSCompliant(false)]
    [References("ServiceRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Short description
    /// </summary>
    [FhirElement("partOf", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("BiologicallyDerivedProductDispense")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// preparation | in-progress | allocated | issued | unfulfilled | returned | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, Order=120)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("BiologicallyDerivedProductDispenseStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.BiologicallyDerivedProductDispenseCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.BiologicallyDerivedProductDispenseCodes> _StatusElement;

    /// <summary>
    /// preparation | in-progress | allocated | issued | unfulfilled | returned | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.BiologicallyDerivedProductDispense.BiologicallyDerivedProductDispenseCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.BiologicallyDerivedProductDispenseCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Relationship between the donor and intended recipient
    /// </summary>
    [FhirElement("originRelationshipType", InSummary=true, Order=130)]
    [Binding("BiologicallyDerivedProductDispenseOriginRelationship")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept OriginRelationshipType
    {
      get { return _OriginRelationshipType; }
      set { _OriginRelationshipType = value; OnPropertyChanged("OriginRelationshipType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _OriginRelationshipType;

    /// <summary>
    /// The BiologicallyDerivedProduct that is dispensed
    /// </summary>
    [FhirElement("product", InSummary=true, Order=140)]
    [CLSCompliant(false)]
    [References("BiologicallyDerivedProduct")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Product
    {
      get { return _Product; }
      set { _Product = value; OnPropertyChanged("Product"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Product;

    /// <summary>
    /// The intended recipient of the dispensed product
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=150)]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// Indicates the type of matching associated with the dispense
    /// </summary>
    [FhirElement("matchStatus", InSummary=true, Order=160)]
    [Binding("BiologicallyDerivedProductDispenseMatchStatus")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept MatchStatus
    {
      get { return _MatchStatus; }
      set { _MatchStatus = value; OnPropertyChanged("MatchStatus"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _MatchStatus;

    /// <summary>
    /// Indicates who or what performed an action
    /// </summary>
    [FhirElement("performer", InSummary=true, Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.PerformerComponent> Performer
    {
      get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.PerformerComponent>(); return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private List<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.PerformerComponent> _Performer;

    /// <summary>
    /// Where the dispense occurred
    /// </summary>
    [FhirElement("location", InSummary=true, Order=180)]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// Amount dispensed
    /// </summary>
    [FhirElement("quantity", InSummary=true, Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.Quantity Quantity
    {
      get { return _Quantity; }
      set { _Quantity = value; OnPropertyChanged("Quantity"); }
    }

    private Hl7.Fhir.Model.Quantity _Quantity;

    /// <summary>
    /// When product was selected/matched
    /// </summary>
    [FhirElement("preparedDate", InSummary=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime PreparedDateElement
    {
      get { return _PreparedDateElement; }
      set { _PreparedDateElement = value; OnPropertyChanged("PreparedDateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _PreparedDateElement;

    /// <summary>
    /// When product was selected/matched
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string PreparedDate
    {
      get { return PreparedDateElement != null ? PreparedDateElement.Value : null; }
      set
      {
        if (value == null)
          PreparedDateElement = null;
        else
          PreparedDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("PreparedDate");
      }
    }

    /// <summary>
    /// When the product was dispatched
    /// </summary>
    [FhirElement("whenHandedOver", InSummary=true, Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime WhenHandedOverElement
    {
      get { return _WhenHandedOverElement; }
      set { _WhenHandedOverElement = value; OnPropertyChanged("WhenHandedOverElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _WhenHandedOverElement;

    /// <summary>
    /// When the product was dispatched
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string WhenHandedOver
    {
      get { return WhenHandedOverElement != null ? WhenHandedOverElement.Value : null; }
      set
      {
        if (value == null)
          WhenHandedOverElement = null;
        else
          WhenHandedOverElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("WhenHandedOver");
      }
    }

    /// <summary>
    /// Where the product was dispatched to
    /// </summary>
    [FhirElement("destination", InSummary=true, Order=220)]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Destination
    {
      get { return _Destination; }
      set { _Destination = value; OnPropertyChanged("Destination"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Destination;

    /// <summary>
    /// Additional notes
    /// </summary>
    [FhirElement("note", InSummary=true, Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Specific instructions for use
    /// </summary>
    [FhirElement("usageInstruction", InSummary=true, Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString UsageInstructionElement
    {
      get { return _UsageInstructionElement; }
      set { _UsageInstructionElement = value; OnPropertyChanged("UsageInstructionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _UsageInstructionElement;

    /// <summary>
    /// Specific instructions for use
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string UsageInstruction
    {
      get { return UsageInstructionElement != null ? UsageInstructionElement.Value : null; }
      set
      {
        if (value == null)
          UsageInstructionElement = null;
        else
          UsageInstructionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("UsageInstruction");
      }
    }

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as BiologicallyDerivedProductDispense;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.BiologicallyDerivedProductDispenseCodes>)StatusElement.DeepCopy();
      if(OriginRelationshipType != null) dest.OriginRelationshipType = (Hl7.Fhir.Model.CodeableConcept)OriginRelationshipType.DeepCopy();
      if(Product != null) dest.Product = (Hl7.Fhir.Model.ResourceReference)Product.DeepCopy();
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(MatchStatus != null) dest.MatchStatus = (Hl7.Fhir.Model.CodeableConcept)MatchStatus.DeepCopy();
      if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.BiologicallyDerivedProductDispense.PerformerComponent>(Performer.DeepCopy());
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
      if(PreparedDateElement != null) dest.PreparedDateElement = (Hl7.Fhir.Model.FhirDateTime)PreparedDateElement.DeepCopy();
      if(WhenHandedOverElement != null) dest.WhenHandedOverElement = (Hl7.Fhir.Model.FhirDateTime)WhenHandedOverElement.DeepCopy();
      if(Destination != null) dest.Destination = (Hl7.Fhir.Model.ResourceReference)Destination.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(UsageInstructionElement != null) dest.UsageInstructionElement = (Hl7.Fhir.Model.FhirString)UsageInstructionElement.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new BiologicallyDerivedProductDispense());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as BiologicallyDerivedProductDispense;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(OriginRelationshipType, otherT.OriginRelationshipType)) return false;
      if( !DeepComparable.Matches(Product, otherT.Product)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(MatchStatus, otherT.MatchStatus)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.Matches(PreparedDateElement, otherT.PreparedDateElement)) return false;
      if( !DeepComparable.Matches(WhenHandedOverElement, otherT.WhenHandedOverElement)) return false;
      if( !DeepComparable.Matches(Destination, otherT.Destination)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(UsageInstructionElement, otherT.UsageInstructionElement)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as BiologicallyDerivedProductDispense;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(OriginRelationshipType, otherT.OriginRelationshipType)) return false;
      if( !DeepComparable.IsExactly(Product, otherT.Product)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(MatchStatus, otherT.MatchStatus)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.IsExactly(PreparedDateElement, otherT.PreparedDateElement)) return false;
      if( !DeepComparable.IsExactly(WhenHandedOverElement, otherT.WhenHandedOverElement)) return false;
      if( !DeepComparable.IsExactly(Destination, otherT.Destination)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(UsageInstructionElement, otherT.UsageInstructionElement)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (OriginRelationshipType != null) yield return OriginRelationshipType;
        if (Product != null) yield return Product;
        if (Patient != null) yield return Patient;
        if (MatchStatus != null) yield return MatchStatus;
        foreach (var elem in Performer) { if (elem != null) yield return elem; }
        if (Location != null) yield return Location;
        if (Quantity != null) yield return Quantity;
        if (PreparedDateElement != null) yield return PreparedDateElement;
        if (WhenHandedOverElement != null) yield return WhenHandedOverElement;
        if (Destination != null) yield return Destination;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (UsageInstructionElement != null) yield return UsageInstructionElement;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (OriginRelationshipType != null) yield return new ElementValue("originRelationshipType", OriginRelationshipType);
        if (Product != null) yield return new ElementValue("product", Product);
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (MatchStatus != null) yield return new ElementValue("matchStatus", MatchStatus);
        foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
        if (Location != null) yield return new ElementValue("location", Location);
        if (Quantity != null) yield return new ElementValue("quantity", Quantity);
        if (PreparedDateElement != null) yield return new ElementValue("preparedDate", PreparedDateElement);
        if (WhenHandedOverElement != null) yield return new ElementValue("whenHandedOver", WhenHandedOverElement);
        if (Destination != null) yield return new ElementValue("destination", Destination);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (UsageInstructionElement != null) yield return new ElementValue("usageInstruction", UsageInstructionElement);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "originRelationshipType":
          value = OriginRelationshipType;
          return OriginRelationshipType is not null;
        case "product":
          value = Product;
          return Product is not null;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "matchStatus":
          value = MatchStatus;
          return MatchStatus is not null;
        case "performer":
          value = Performer;
          return Performer?.Any() == true;
        case "location":
          value = Location;
          return Location is not null;
        case "quantity":
          value = Quantity;
          return Quantity is not null;
        case "preparedDate":
          value = PreparedDateElement;
          return PreparedDateElement is not null;
        case "whenHandedOver":
          value = WhenHandedOverElement;
          return WhenHandedOverElement is not null;
        case "destination":
          value = Destination;
          return Destination is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "usageInstruction":
          value = UsageInstructionElement;
          return UsageInstructionElement is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (OriginRelationshipType is not null) yield return new KeyValuePair<string,object>("originRelationshipType",OriginRelationshipType);
      if (Product is not null) yield return new KeyValuePair<string,object>("product",Product);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (MatchStatus is not null) yield return new KeyValuePair<string,object>("matchStatus",MatchStatus);
      if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
      if (PreparedDateElement is not null) yield return new KeyValuePair<string,object>("preparedDate",PreparedDateElement);
      if (WhenHandedOverElement is not null) yield return new KeyValuePair<string,object>("whenHandedOver",WhenHandedOverElement);
      if (Destination is not null) yield return new KeyValuePair<string,object>("destination",Destination);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (UsageInstructionElement is not null) yield return new KeyValuePair<string,object>("usageInstruction",UsageInstructionElement);
    }

  }

}

// end of file

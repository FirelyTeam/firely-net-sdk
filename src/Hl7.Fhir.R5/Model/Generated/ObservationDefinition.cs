// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Definition of an observation
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ObservationDefinition","http://hl7.org/fhir/StructureDefinition/ObservationDefinition", IsResource=true)]
  public partial class ObservationDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ObservationDefinition"; } }

    /// <summary>
    /// Permitted data type for observation value.
    /// (url: http://hl7.org/fhir/ValueSet/permitted-data-type)
    /// (system: http://hl7.org/fhir/permitted-data-type)
    /// </summary>
    [FhirEnumeration("ObservationDataType")]
    public enum ObservationDataType
    {
      /// <summary>
      /// A measured amount.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("Quantity", "http://hl7.org/fhir/permitted-data-type"), Description("Quantity")]
      Quantity,
      /// <summary>
      /// A coded concept from a reference terminology and/or text.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("CodeableConcept", "http://hl7.org/fhir/permitted-data-type"), Description("CodeableConcept")]
      CodeableConcept,
      /// <summary>
      /// A sequence of Unicode characters.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("string", "http://hl7.org/fhir/permitted-data-type"), Description("string")]
      String,
      /// <summary>
      /// true or false.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("boolean", "http://hl7.org/fhir/permitted-data-type"), Description("boolean")]
      Boolean,
      /// <summary>
      /// A signed integer.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("integer", "http://hl7.org/fhir/permitted-data-type"), Description("integer")]
      Integer,
      /// <summary>
      /// A set of values bounded by low and high.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("Range", "http://hl7.org/fhir/permitted-data-type"), Description("Range")]
      Range,
      /// <summary>
      /// A ratio of two Quantity values - a numerator and a denominator.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("Ratio", "http://hl7.org/fhir/permitted-data-type"), Description("Ratio")]
      Ratio,
      /// <summary>
      /// A series of measurements taken by a device.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("SampledData", "http://hl7.org/fhir/permitted-data-type"), Description("SampledData")]
      SampledData,
      /// <summary>
      /// A time during the day, in the format hh:mm:ss.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("time", "http://hl7.org/fhir/permitted-data-type"), Description("time")]
      Time,
      /// <summary>
      /// A date, date-time or partial date (e.g. just year or year + month) as used in human communication.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("dateTime", "http://hl7.org/fhir/permitted-data-type"), Description("dateTime")]
      DateTime,
      /// <summary>
      /// A time range defined by start and end date/time.
      /// (system: http://hl7.org/fhir/permitted-data-type)
      /// </summary>
      [EnumLiteral("Period", "http://hl7.org/fhir/permitted-data-type"), Description("Period")]
      Period,
    }

    /// <summary>
    /// Codes identifying the category of observation range.
    /// (url: http://hl7.org/fhir/ValueSet/observation-range-category)
    /// (system: http://hl7.org/fhir/observation-range-category)
    /// </summary>
    [FhirEnumeration("ObservationRangeCategory")]
    public enum ObservationRangeCategory
    {
      /// <summary>
      /// Reference (Normal) Range for Ordinal and Continuous Observations.
      /// (system: http://hl7.org/fhir/observation-range-category)
      /// </summary>
      [EnumLiteral("reference", "http://hl7.org/fhir/observation-range-category"), Description("reference range")]
      Reference,
      /// <summary>
      /// Critical Range for Ordinal and Continuous Observations. Results outside this range are critical.
      /// (system: http://hl7.org/fhir/observation-range-category)
      /// </summary>
      [EnumLiteral("critical", "http://hl7.org/fhir/observation-range-category"), Description("critical range")]
      Critical,
      /// <summary>
      /// Absolute Range for Ordinal and Continuous Observations. Results outside this range are not possible.
      /// (system: http://hl7.org/fhir/observation-range-category)
      /// </summary>
      [EnumLiteral("absolute", "http://hl7.org/fhir/observation-range-category"), Description("absolute range")]
      Absolute,
    }

    /// <summary>
    /// Characteristics of quantitative results
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ObservationDefinition#QuantitativeDetails", IsNestedType=true)]
    public partial class QuantitativeDetailsComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ObservationDefinition#QuantitativeDetails"; } }

      /// <summary>
      /// Primary unit for quantitative results
      /// </summary>
      [FhirElement("unit", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Unit
      {
        get { return _Unit; }
        set { _Unit = value; OnPropertyChanged("Unit"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Unit;

      /// <summary>
      /// Customary (secondary) unit for quantitative results
      /// </summary>
      [FhirElement("customaryUnit", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept CustomaryUnit
      {
        get { return _CustomaryUnit; }
        set { _CustomaryUnit = value; OnPropertyChanged("CustomaryUnit"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _CustomaryUnit;

      /// <summary>
      /// Primary to secondary unit conversion factor
      /// </summary>
      [FhirElement("conversionFactor", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal ConversionFactorElement
      {
        get { return _ConversionFactorElement; }
        set { _ConversionFactorElement = value; OnPropertyChanged("ConversionFactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _ConversionFactorElement;

      /// <summary>
      /// Primary to secondary unit conversion factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? ConversionFactor
      {
        get { return ConversionFactorElement != null ? ConversionFactorElement.Value : null; }
        set
        {
          if (value == null)
            ConversionFactorElement = null;
          else
            ConversionFactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("ConversionFactor");
        }
      }

      /// <summary>
      /// Decimal precision of observation quantitative results
      /// </summary>
      [FhirElement("decimalPrecision", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Integer DecimalPrecisionElement
      {
        get { return _DecimalPrecisionElement; }
        set { _DecimalPrecisionElement = value; OnPropertyChanged("DecimalPrecisionElement"); }
      }

      private Hl7.Fhir.Model.Integer _DecimalPrecisionElement;

      /// <summary>
      /// Decimal precision of observation quantitative results
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? DecimalPrecision
      {
        get { return DecimalPrecisionElement != null ? DecimalPrecisionElement.Value : null; }
        set
        {
          if (value == null)
            DecimalPrecisionElement = null;
          else
            DecimalPrecisionElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("DecimalPrecision");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as QuantitativeDetailsComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Unit != null) dest.Unit = (Hl7.Fhir.Model.CodeableConcept)Unit.DeepCopy();
        if(CustomaryUnit != null) dest.CustomaryUnit = (Hl7.Fhir.Model.CodeableConcept)CustomaryUnit.DeepCopy();
        if(ConversionFactorElement != null) dest.ConversionFactorElement = (Hl7.Fhir.Model.FhirDecimal)ConversionFactorElement.DeepCopy();
        if(DecimalPrecisionElement != null) dest.DecimalPrecisionElement = (Hl7.Fhir.Model.Integer)DecimalPrecisionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new QuantitativeDetailsComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as QuantitativeDetailsComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Unit, otherT.Unit)) return false;
        if( !DeepComparable.Matches(CustomaryUnit, otherT.CustomaryUnit)) return false;
        if( !DeepComparable.Matches(ConversionFactorElement, otherT.ConversionFactorElement)) return false;
        if( !DeepComparable.Matches(DecimalPrecisionElement, otherT.DecimalPrecisionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as QuantitativeDetailsComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Unit, otherT.Unit)) return false;
        if( !DeepComparable.IsExactly(CustomaryUnit, otherT.CustomaryUnit)) return false;
        if( !DeepComparable.IsExactly(ConversionFactorElement, otherT.ConversionFactorElement)) return false;
        if( !DeepComparable.IsExactly(DecimalPrecisionElement, otherT.DecimalPrecisionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Unit != null) yield return Unit;
          if (CustomaryUnit != null) yield return CustomaryUnit;
          if (ConversionFactorElement != null) yield return ConversionFactorElement;
          if (DecimalPrecisionElement != null) yield return DecimalPrecisionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Unit != null) yield return new ElementValue("unit", Unit);
          if (CustomaryUnit != null) yield return new ElementValue("customaryUnit", CustomaryUnit);
          if (ConversionFactorElement != null) yield return new ElementValue("conversionFactor", ConversionFactorElement);
          if (DecimalPrecisionElement != null) yield return new ElementValue("decimalPrecision", DecimalPrecisionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "unit":
            value = Unit;
            return Unit is not null;
          case "customaryUnit":
            value = CustomaryUnit;
            return CustomaryUnit is not null;
          case "conversionFactor":
            value = ConversionFactorElement;
            return ConversionFactorElement is not null;
          case "decimalPrecision":
            value = DecimalPrecisionElement;
            return DecimalPrecisionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Unit is not null) yield return new KeyValuePair<string,object>("unit",Unit);
        if (CustomaryUnit is not null) yield return new KeyValuePair<string,object>("customaryUnit",CustomaryUnit);
        if (ConversionFactorElement is not null) yield return new KeyValuePair<string,object>("conversionFactor",ConversionFactorElement);
        if (DecimalPrecisionElement is not null) yield return new KeyValuePair<string,object>("decimalPrecision",DecimalPrecisionElement);
      }

    }

    /// <summary>
    /// Set of qualified values for observation results
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ObservationDefinition#QualifiedValue", IsNestedType=true)]
    public partial class QualifiedValueComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ObservationDefinition#QualifiedValue"; } }

      /// <summary>
      /// Context qualifier for the set of qualified values
      /// </summary>
      [FhirElement("context", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Context
      {
        get { return _Context; }
        set { _Context = value; OnPropertyChanged("Context"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Context;

      /// <summary>
      /// Targetted population for the set of qualified values
      /// </summary>
      [FhirElement("appliesTo", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> AppliesTo
      {
        get { if(_AppliesTo==null) _AppliesTo = new List<Hl7.Fhir.Model.CodeableConcept>(); return _AppliesTo; }
        set { _AppliesTo = value; OnPropertyChanged("AppliesTo"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _AppliesTo;

      /// <summary>
      /// male | female | other | unknown
      /// </summary>
      [FhirElement("gender", Order=60)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.AdministrativeGender> GenderElement
      {
        get { return _GenderElement; }
        set { _GenderElement = value; OnPropertyChanged("GenderElement"); }
      }

      private Code<Hl7.Fhir.Model.AdministrativeGender> _GenderElement;

      /// <summary>
      /// male | female | other | unknown
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.AdministrativeGender? Gender
      {
        get { return GenderElement != null ? GenderElement.Value : null; }
        set
        {
          if (value == null)
            GenderElement = null;
          else
            GenderElement = new Code<Hl7.Fhir.Model.AdministrativeGender>(value);
          OnPropertyChanged("Gender");
        }
      }

      /// <summary>
      /// Applicable age range for the set of qualified values
      /// </summary>
      [FhirElement("age", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Range Age
      {
        get { return _Age; }
        set { _Age = value; OnPropertyChanged("Age"); }
      }

      private Hl7.Fhir.Model.Range _Age;

      /// <summary>
      /// Applicable gestational age range for the set of qualified values
      /// </summary>
      [FhirElement("gestationalAge", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Range GestationalAge
      {
        get { return _GestationalAge; }
        set { _GestationalAge = value; OnPropertyChanged("GestationalAge"); }
      }

      private Hl7.Fhir.Model.Range _GestationalAge;

      /// <summary>
      /// Condition associated with the set of qualified values
      /// </summary>
      [FhirElement("condition", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ConditionElement
      {
        get { return _ConditionElement; }
        set { _ConditionElement = value; OnPropertyChanged("ConditionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ConditionElement;

      /// <summary>
      /// Condition associated with the set of qualified values
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Condition
      {
        get { return ConditionElement != null ? ConditionElement.Value : null; }
        set
        {
          if (value == null)
            ConditionElement = null;
          else
            ConditionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Condition");
        }
      }

      /// <summary>
      /// reference | critical | absolute
      /// </summary>
      [FhirElement("rangeCategory", Order=100)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.ObservationDefinition.ObservationRangeCategory> RangeCategoryElement
      {
        get { return _RangeCategoryElement; }
        set { _RangeCategoryElement = value; OnPropertyChanged("RangeCategoryElement"); }
      }

      private Code<Hl7.Fhir.Model.ObservationDefinition.ObservationRangeCategory> _RangeCategoryElement;

      /// <summary>
      /// reference | critical | absolute
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ObservationDefinition.ObservationRangeCategory? RangeCategory
      {
        get { return RangeCategoryElement != null ? RangeCategoryElement.Value : null; }
        set
        {
          if (value == null)
            RangeCategoryElement = null;
          else
            RangeCategoryElement = new Code<Hl7.Fhir.Model.ObservationDefinition.ObservationRangeCategory>(value);
          OnPropertyChanged("RangeCategory");
        }
      }

      /// <summary>
      /// The range for continuous or ordinal observations
      /// </summary>
      [FhirElement("range", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Range Range
      {
        get { return _Range; }
        set { _Range = value; OnPropertyChanged("Range"); }
      }

      private Hl7.Fhir.Model.Range _Range;

      /// <summary>
      /// Value set of valid coded values as part of this set of qualified values
      /// </summary>
      [FhirElement("validCodedValueSet", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical ValidCodedValueSetElement
      {
        get { return _ValidCodedValueSetElement; }
        set { _ValidCodedValueSetElement = value; OnPropertyChanged("ValidCodedValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _ValidCodedValueSetElement;

      /// <summary>
      /// Value set of valid coded values as part of this set of qualified values
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ValidCodedValueSet
      {
        get { return ValidCodedValueSetElement != null ? ValidCodedValueSetElement.Value : null; }
        set
        {
          if (value == null)
            ValidCodedValueSetElement = null;
          else
            ValidCodedValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("ValidCodedValueSet");
        }
      }

      /// <summary>
      /// Value set of normal coded values as part of this set of qualified values
      /// </summary>
      [FhirElement("normalCodedValueSet", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical NormalCodedValueSetElement
      {
        get { return _NormalCodedValueSetElement; }
        set { _NormalCodedValueSetElement = value; OnPropertyChanged("NormalCodedValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _NormalCodedValueSetElement;

      /// <summary>
      /// Value set of normal coded values as part of this set of qualified values
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string NormalCodedValueSet
      {
        get { return NormalCodedValueSetElement != null ? NormalCodedValueSetElement.Value : null; }
        set
        {
          if (value == null)
            NormalCodedValueSetElement = null;
          else
            NormalCodedValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("NormalCodedValueSet");
        }
      }

      /// <summary>
      /// Value set of abnormal coded values as part of this set of qualified values
      /// </summary>
      [FhirElement("abnormalCodedValueSet", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical AbnormalCodedValueSetElement
      {
        get { return _AbnormalCodedValueSetElement; }
        set { _AbnormalCodedValueSetElement = value; OnPropertyChanged("AbnormalCodedValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _AbnormalCodedValueSetElement;

      /// <summary>
      /// Value set of abnormal coded values as part of this set of qualified values
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string AbnormalCodedValueSet
      {
        get { return AbnormalCodedValueSetElement != null ? AbnormalCodedValueSetElement.Value : null; }
        set
        {
          if (value == null)
            AbnormalCodedValueSetElement = null;
          else
            AbnormalCodedValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("AbnormalCodedValueSet");
        }
      }

      /// <summary>
      /// Value set of critical coded values as part of this set of qualified values
      /// </summary>
      [FhirElement("criticalCodedValueSet", Order=150)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical CriticalCodedValueSetElement
      {
        get { return _CriticalCodedValueSetElement; }
        set { _CriticalCodedValueSetElement = value; OnPropertyChanged("CriticalCodedValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _CriticalCodedValueSetElement;

      /// <summary>
      /// Value set of critical coded values as part of this set of qualified values
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string CriticalCodedValueSet
      {
        get { return CriticalCodedValueSetElement != null ? CriticalCodedValueSetElement.Value : null; }
        set
        {
          if (value == null)
            CriticalCodedValueSetElement = null;
          else
            CriticalCodedValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("CriticalCodedValueSet");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as QualifiedValueComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Context != null) dest.Context = (Hl7.Fhir.Model.CodeableConcept)Context.DeepCopy();
        if(AppliesTo != null) dest.AppliesTo = new List<Hl7.Fhir.Model.CodeableConcept>(AppliesTo.DeepCopy());
        if(GenderElement != null) dest.GenderElement = (Code<Hl7.Fhir.Model.AdministrativeGender>)GenderElement.DeepCopy();
        if(Age != null) dest.Age = (Hl7.Fhir.Model.Range)Age.DeepCopy();
        if(GestationalAge != null) dest.GestationalAge = (Hl7.Fhir.Model.Range)GestationalAge.DeepCopy();
        if(ConditionElement != null) dest.ConditionElement = (Hl7.Fhir.Model.FhirString)ConditionElement.DeepCopy();
        if(RangeCategoryElement != null) dest.RangeCategoryElement = (Code<Hl7.Fhir.Model.ObservationDefinition.ObservationRangeCategory>)RangeCategoryElement.DeepCopy();
        if(Range != null) dest.Range = (Hl7.Fhir.Model.Range)Range.DeepCopy();
        if(ValidCodedValueSetElement != null) dest.ValidCodedValueSetElement = (Hl7.Fhir.Model.Canonical)ValidCodedValueSetElement.DeepCopy();
        if(NormalCodedValueSetElement != null) dest.NormalCodedValueSetElement = (Hl7.Fhir.Model.Canonical)NormalCodedValueSetElement.DeepCopy();
        if(AbnormalCodedValueSetElement != null) dest.AbnormalCodedValueSetElement = (Hl7.Fhir.Model.Canonical)AbnormalCodedValueSetElement.DeepCopy();
        if(CriticalCodedValueSetElement != null) dest.CriticalCodedValueSetElement = (Hl7.Fhir.Model.Canonical)CriticalCodedValueSetElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new QualifiedValueComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as QualifiedValueComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Context, otherT.Context)) return false;
        if( !DeepComparable.Matches(AppliesTo, otherT.AppliesTo)) return false;
        if( !DeepComparable.Matches(GenderElement, otherT.GenderElement)) return false;
        if( !DeepComparable.Matches(Age, otherT.Age)) return false;
        if( !DeepComparable.Matches(GestationalAge, otherT.GestationalAge)) return false;
        if( !DeepComparable.Matches(ConditionElement, otherT.ConditionElement)) return false;
        if( !DeepComparable.Matches(RangeCategoryElement, otherT.RangeCategoryElement)) return false;
        if( !DeepComparable.Matches(Range, otherT.Range)) return false;
        if( !DeepComparable.Matches(ValidCodedValueSetElement, otherT.ValidCodedValueSetElement)) return false;
        if( !DeepComparable.Matches(NormalCodedValueSetElement, otherT.NormalCodedValueSetElement)) return false;
        if( !DeepComparable.Matches(AbnormalCodedValueSetElement, otherT.AbnormalCodedValueSetElement)) return false;
        if( !DeepComparable.Matches(CriticalCodedValueSetElement, otherT.CriticalCodedValueSetElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as QualifiedValueComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Context, otherT.Context)) return false;
        if( !DeepComparable.IsExactly(AppliesTo, otherT.AppliesTo)) return false;
        if( !DeepComparable.IsExactly(GenderElement, otherT.GenderElement)) return false;
        if( !DeepComparable.IsExactly(Age, otherT.Age)) return false;
        if( !DeepComparable.IsExactly(GestationalAge, otherT.GestationalAge)) return false;
        if( !DeepComparable.IsExactly(ConditionElement, otherT.ConditionElement)) return false;
        if( !DeepComparable.IsExactly(RangeCategoryElement, otherT.RangeCategoryElement)) return false;
        if( !DeepComparable.IsExactly(Range, otherT.Range)) return false;
        if( !DeepComparable.IsExactly(ValidCodedValueSetElement, otherT.ValidCodedValueSetElement)) return false;
        if( !DeepComparable.IsExactly(NormalCodedValueSetElement, otherT.NormalCodedValueSetElement)) return false;
        if( !DeepComparable.IsExactly(AbnormalCodedValueSetElement, otherT.AbnormalCodedValueSetElement)) return false;
        if( !DeepComparable.IsExactly(CriticalCodedValueSetElement, otherT.CriticalCodedValueSetElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Context != null) yield return Context;
          foreach (var elem in AppliesTo) { if (elem != null) yield return elem; }
          if (GenderElement != null) yield return GenderElement;
          if (Age != null) yield return Age;
          if (GestationalAge != null) yield return GestationalAge;
          if (ConditionElement != null) yield return ConditionElement;
          if (RangeCategoryElement != null) yield return RangeCategoryElement;
          if (Range != null) yield return Range;
          if (ValidCodedValueSetElement != null) yield return ValidCodedValueSetElement;
          if (NormalCodedValueSetElement != null) yield return NormalCodedValueSetElement;
          if (AbnormalCodedValueSetElement != null) yield return AbnormalCodedValueSetElement;
          if (CriticalCodedValueSetElement != null) yield return CriticalCodedValueSetElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Context != null) yield return new ElementValue("context", Context);
          foreach (var elem in AppliesTo) { if (elem != null) yield return new ElementValue("appliesTo", elem); }
          if (GenderElement != null) yield return new ElementValue("gender", GenderElement);
          if (Age != null) yield return new ElementValue("age", Age);
          if (GestationalAge != null) yield return new ElementValue("gestationalAge", GestationalAge);
          if (ConditionElement != null) yield return new ElementValue("condition", ConditionElement);
          if (RangeCategoryElement != null) yield return new ElementValue("rangeCategory", RangeCategoryElement);
          if (Range != null) yield return new ElementValue("range", Range);
          if (ValidCodedValueSetElement != null) yield return new ElementValue("validCodedValueSet", ValidCodedValueSetElement);
          if (NormalCodedValueSetElement != null) yield return new ElementValue("normalCodedValueSet", NormalCodedValueSetElement);
          if (AbnormalCodedValueSetElement != null) yield return new ElementValue("abnormalCodedValueSet", AbnormalCodedValueSetElement);
          if (CriticalCodedValueSetElement != null) yield return new ElementValue("criticalCodedValueSet", CriticalCodedValueSetElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "context":
            value = Context;
            return Context is not null;
          case "appliesTo":
            value = AppliesTo;
            return AppliesTo?.Any() == true;
          case "gender":
            value = GenderElement;
            return GenderElement is not null;
          case "age":
            value = Age;
            return Age is not null;
          case "gestationalAge":
            value = GestationalAge;
            return GestationalAge is not null;
          case "condition":
            value = ConditionElement;
            return ConditionElement is not null;
          case "rangeCategory":
            value = RangeCategoryElement;
            return RangeCategoryElement is not null;
          case "range":
            value = Range;
            return Range is not null;
          case "validCodedValueSet":
            value = ValidCodedValueSetElement;
            return ValidCodedValueSetElement is not null;
          case "normalCodedValueSet":
            value = NormalCodedValueSetElement;
            return NormalCodedValueSetElement is not null;
          case "abnormalCodedValueSet":
            value = AbnormalCodedValueSetElement;
            return AbnormalCodedValueSetElement is not null;
          case "criticalCodedValueSet":
            value = CriticalCodedValueSetElement;
            return CriticalCodedValueSetElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Context is not null) yield return new KeyValuePair<string,object>("context",Context);
        if (AppliesTo?.Any() == true) yield return new KeyValuePair<string,object>("appliesTo",AppliesTo);
        if (GenderElement is not null) yield return new KeyValuePair<string,object>("gender",GenderElement);
        if (Age is not null) yield return new KeyValuePair<string,object>("age",Age);
        if (GestationalAge is not null) yield return new KeyValuePair<string,object>("gestationalAge",GestationalAge);
        if (ConditionElement is not null) yield return new KeyValuePair<string,object>("condition",ConditionElement);
        if (RangeCategoryElement is not null) yield return new KeyValuePair<string,object>("rangeCategory",RangeCategoryElement);
        if (Range is not null) yield return new KeyValuePair<string,object>("range",Range);
        if (ValidCodedValueSetElement is not null) yield return new KeyValuePair<string,object>("validCodedValueSet",ValidCodedValueSetElement);
        if (NormalCodedValueSetElement is not null) yield return new KeyValuePair<string,object>("normalCodedValueSet",NormalCodedValueSetElement);
        if (AbnormalCodedValueSetElement is not null) yield return new KeyValuePair<string,object>("abnormalCodedValueSet",AbnormalCodedValueSetElement);
        if (CriticalCodedValueSetElement is not null) yield return new KeyValuePair<string,object>("criticalCodedValueSet",CriticalCodedValueSetElement);
      }

    }

    /// <summary>
    /// Component results
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ObservationDefinition#Component", IsNestedType=true)]
    public partial class ComponentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ObservationDefinition#Component"; } }

      /// <summary>
      /// Type of observation
      /// </summary>
      [FhirElement("code", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
      /// </summary>
      [FhirElement("permittedDataType", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>> PermittedDataTypeElement
      {
        get { if(_PermittedDataTypeElement==null) _PermittedDataTypeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>>(); return _PermittedDataTypeElement; }
        set { _PermittedDataTypeElement = value; OnPropertyChanged("PermittedDataTypeElement"); }
      }

      private List<Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>> _PermittedDataTypeElement;

      /// <summary>
      /// Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType?> PermittedDataType
      {
        get { return PermittedDataTypeElement != null ? PermittedDataTypeElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            PermittedDataTypeElement = null;
          else
            PermittedDataTypeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>(elem)));
          OnPropertyChanged("PermittedDataType");
        }
      }

      /// <summary>
      /// Characteristics of quantitative results
      /// </summary>
      [FhirElement("quantitativeDetails", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent QuantitativeDetails
      {
        get { return _QuantitativeDetails; }
        set { _QuantitativeDetails = value; OnPropertyChanged("QuantitativeDetails"); }
      }

      private Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent _QuantitativeDetails;

      /// <summary>
      /// Set of qualified values for observation results
      /// </summary>
      [FhirElement("qualifiedValue", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent> QualifiedValue
      {
        get { if(_QualifiedValue==null) _QualifiedValue = new List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent>(); return _QualifiedValue; }
        set { _QualifiedValue = value; OnPropertyChanged("QualifiedValue"); }
      }

      private List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent> _QualifiedValue;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ComponentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(PermittedDataTypeElement != null) dest.PermittedDataTypeElement = new List<Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>>(PermittedDataTypeElement.DeepCopy());
        if(QuantitativeDetails != null) dest.QuantitativeDetails = (Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent)QuantitativeDetails.DeepCopy();
        if(QualifiedValue != null) dest.QualifiedValue = new List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent>(QualifiedValue.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ComponentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(PermittedDataTypeElement, otherT.PermittedDataTypeElement)) return false;
        if( !DeepComparable.Matches(QuantitativeDetails, otherT.QuantitativeDetails)) return false;
        if( !DeepComparable.Matches(QualifiedValue, otherT.QualifiedValue)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(PermittedDataTypeElement, otherT.PermittedDataTypeElement)) return false;
        if( !DeepComparable.IsExactly(QuantitativeDetails, otherT.QuantitativeDetails)) return false;
        if( !DeepComparable.IsExactly(QualifiedValue, otherT.QualifiedValue)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          foreach (var elem in PermittedDataTypeElement) { if (elem != null) yield return elem; }
          if (QuantitativeDetails != null) yield return QuantitativeDetails;
          foreach (var elem in QualifiedValue) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in PermittedDataTypeElement) { if (elem != null) yield return new ElementValue("permittedDataType", elem); }
          if (QuantitativeDetails != null) yield return new ElementValue("quantitativeDetails", QuantitativeDetails);
          foreach (var elem in QualifiedValue) { if (elem != null) yield return new ElementValue("qualifiedValue", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "permittedDataType":
            value = PermittedDataTypeElement;
            return PermittedDataTypeElement?.Any() == true;
          case "quantitativeDetails":
            value = QuantitativeDetails;
            return QuantitativeDetails is not null;
          case "qualifiedValue":
            value = QualifiedValue;
            return QualifiedValue?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (PermittedDataTypeElement?.Any() == true) yield return new KeyValuePair<string,object>("permittedDataType",PermittedDataTypeElement);
        if (QuantitativeDetails is not null) yield return new KeyValuePair<string,object>("quantitativeDetails",QuantitativeDetails);
        if (QualifiedValue?.Any() == true) yield return new KeyValuePair<string,object>("qualifiedValue",QualifiedValue);
      }

    }

    /// <summary>
    /// Logical canonical URL to reference this ObservationDefinition (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Logical canonical URL to reference this ObservationDefinition (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Business identifier of the ObservationDefinition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// Business version of the ObservationDefinition
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the ObservationDefinition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this ObservationDefinition (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this ObservationDefinition (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this ObservationDefinition (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this ObservationDefinition (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=140)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, IsModifier=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// If for testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// The name of the individual or organization that published the ObservationDefinition
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=170)]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Publisher
    {
      get { return _Publisher; }
      set { _Publisher = value; OnPropertyChanged("Publisher"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Publisher;

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the ObservationDefinition
    /// </summary>
    [FhirElement("description", Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// Content intends to support these contexts
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for this ObservationDefinition (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this ObservationDefinition is defined
    /// </summary>
    [FhirElement("purpose", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Purpose
    {
      get { return _Purpose; }
      set { _Purpose = value; OnPropertyChanged("Purpose"); }
    }

    private Hl7.Fhir.Model.Markdown _Purpose;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Copyright
    {
      get { return _Copyright; }
      set { _Copyright = value; OnPropertyChanged("Copyright"); }
    }

    private Hl7.Fhir.Model.Markdown _Copyright;

    /// <summary>
    /// When ObservationDefinition was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When ObservationDefinition was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// Date on which the asset content was last reviewed
    /// </summary>
    [FhirElement("lastReviewDate", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// Date on which the asset content was last reviewed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// The effective date range for the ObservationDefinition
    /// </summary>
    [FhirElement("effectivePeriod", InSummary=true, Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.Period EffectivePeriod
    {
      get { return _EffectivePeriod; }
      set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
    }

    private Hl7.Fhir.Model.Period _EffectivePeriod;

    /// <summary>
    /// Based on FHIR definition of another observation
    /// </summary>
    [FhirElement("derivedFromCanonical", InSummary=true, Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> DerivedFromCanonicalElement
    {
      get { if(_DerivedFromCanonicalElement==null) _DerivedFromCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _DerivedFromCanonicalElement; }
      set { _DerivedFromCanonicalElement = value; OnPropertyChanged("DerivedFromCanonicalElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _DerivedFromCanonicalElement;

    /// <summary>
    /// Based on FHIR definition of another observation
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> DerivedFromCanonical
    {
      get { return DerivedFromCanonicalElement != null ? DerivedFromCanonicalElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          DerivedFromCanonicalElement = null;
        else
          DerivedFromCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("DerivedFromCanonical");
      }
    }

    /// <summary>
    /// Based on external definition
    /// </summary>
    [FhirElement("derivedFromUri", InSummary=true, Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirUri> DerivedFromUriElement
    {
      get { if(_DerivedFromUriElement==null) _DerivedFromUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _DerivedFromUriElement; }
      set { _DerivedFromUriElement = value; OnPropertyChanged("DerivedFromUriElement"); }
    }

    private List<Hl7.Fhir.Model.FhirUri> _DerivedFromUriElement;

    /// <summary>
    /// Based on external definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> DerivedFromUri
    {
      get { return DerivedFromUriElement != null ? DerivedFromUriElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          DerivedFromUriElement = null;
        else
          DerivedFromUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
        OnPropertyChanged("DerivedFromUri");
      }
    }

    /// <summary>
    /// Type of subject for the defined observation
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=290)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Subject
    {
      get { if(_Subject==null) _Subject = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Subject;

    /// <summary>
    /// Desired kind of performer for such kind of observation
    /// </summary>
    [FhirElement("performerType", InSummary=true, Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept PerformerType
    {
      get { return _PerformerType; }
      set { _PerformerType = value; OnPropertyChanged("PerformerType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _PerformerType;

    /// <summary>
    /// General type of observation
    /// </summary>
    [FhirElement("category", InSummary=true, Order=310, FiveWs="FiveWs.class")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Type of observation
    /// </summary>
    [FhirElement("code", InSummary=true, Order=320, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
    /// </summary>
    [FhirElement("permittedDataType", Order=330)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>> PermittedDataTypeElement
    {
      get { if(_PermittedDataTypeElement==null) _PermittedDataTypeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>>(); return _PermittedDataTypeElement; }
      set { _PermittedDataTypeElement = value; OnPropertyChanged("PermittedDataTypeElement"); }
    }

    private List<Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>> _PermittedDataTypeElement;

    /// <summary>
    /// Quantity | CodeableConcept | string | boolean | integer | Range | Ratio | SampledData | time | dateTime | Period
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType?> PermittedDataType
    {
      get { return PermittedDataTypeElement != null ? PermittedDataTypeElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          PermittedDataTypeElement = null;
        else
          PermittedDataTypeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>(elem)));
        OnPropertyChanged("PermittedDataType");
      }
    }

    /// <summary>
    /// Multiple results allowed for conforming observations
    /// </summary>
    [FhirElement("multipleResultsAllowed", Order=340)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean MultipleResultsAllowedElement
    {
      get { return _MultipleResultsAllowedElement; }
      set { _MultipleResultsAllowedElement = value; OnPropertyChanged("MultipleResultsAllowedElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _MultipleResultsAllowedElement;

    /// <summary>
    /// Multiple results allowed for conforming observations
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? MultipleResultsAllowed
    {
      get { return MultipleResultsAllowedElement != null ? MultipleResultsAllowedElement.Value : null; }
      set
      {
        if (value == null)
          MultipleResultsAllowedElement = null;
        else
          MultipleResultsAllowedElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("MultipleResultsAllowed");
      }
    }

    /// <summary>
    /// Body part to be observed
    /// </summary>
    [FhirElement("bodySite", Order=350)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept BodySite
    {
      get { return _BodySite; }
      set { _BodySite = value; OnPropertyChanged("BodySite"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _BodySite;

    /// <summary>
    /// Method used to produce the observation
    /// </summary>
    [FhirElement("method", Order=360)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Method
    {
      get { return _Method; }
      set { _Method = value; OnPropertyChanged("Method"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Method;

    /// <summary>
    /// Kind of specimen used by this type of observation
    /// </summary>
    [FhirElement("specimen", Order=370)]
    [CLSCompliant(false)]
    [References("SpecimenDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Specimen
    {
      get { if(_Specimen==null) _Specimen = new List<Hl7.Fhir.Model.ResourceReference>(); return _Specimen; }
      set { _Specimen = value; OnPropertyChanged("Specimen"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Specimen;

    /// <summary>
    /// Measurement device or model of device
    /// </summary>
    [FhirElement("device", Order=380)]
    [CLSCompliant(false)]
    [References("DeviceDefinition","Device")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Device
    {
      get { if(_Device==null) _Device = new List<Hl7.Fhir.Model.ResourceReference>(); return _Device; }
      set { _Device = value; OnPropertyChanged("Device"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Device;

    /// <summary>
    /// The preferred name to be used when reporting the observation results
    /// </summary>
    [FhirElement("preferredReportName", Order=390)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PreferredReportNameElement
    {
      get { return _PreferredReportNameElement; }
      set { _PreferredReportNameElement = value; OnPropertyChanged("PreferredReportNameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PreferredReportNameElement;

    /// <summary>
    /// The preferred name to be used when reporting the observation results
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string PreferredReportName
    {
      get { return PreferredReportNameElement != null ? PreferredReportNameElement.Value : null; }
      set
      {
        if (value == null)
          PreferredReportNameElement = null;
        else
          PreferredReportNameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("PreferredReportName");
      }
    }

    /// <summary>
    /// Characteristics of quantitative results
    /// </summary>
    [FhirElement("quantitativeDetails", Order=400)]
    [DataMember]
    public Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent QuantitativeDetails
    {
      get { return _QuantitativeDetails; }
      set { _QuantitativeDetails = value; OnPropertyChanged("QuantitativeDetails"); }
    }

    private Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent _QuantitativeDetails;

    /// <summary>
    /// Set of qualified values for observation results
    /// </summary>
    [FhirElement("qualifiedValue", Order=410)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent> QualifiedValue
    {
      get { if(_QualifiedValue==null) _QualifiedValue = new List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent>(); return _QualifiedValue; }
      set { _QualifiedValue = value; OnPropertyChanged("QualifiedValue"); }
    }

    private List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent> _QualifiedValue;

    /// <summary>
    /// Definitions of related resources belonging to this kind of observation group
    /// </summary>
    [FhirElement("hasMember", Order=420)]
    [CLSCompliant(false)]
    [References("ObservationDefinition","Questionnaire")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> HasMember
    {
      get { if(_HasMember==null) _HasMember = new List<Hl7.Fhir.Model.ResourceReference>(); return _HasMember; }
      set { _HasMember = value; OnPropertyChanged("HasMember"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _HasMember;

    /// <summary>
    /// Component results
    /// </summary>
    [FhirElement("component", Order=430)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ObservationDefinition.ComponentComponent> Component
    {
      get { if(_Component==null) _Component = new List<Hl7.Fhir.Model.ObservationDefinition.ComponentComponent>(); return _Component; }
      set { _Component = value; OnPropertyChanged("Component"); }
    }

    private List<Hl7.Fhir.Model.ObservationDefinition.ComponentComponent> _Component;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ObservationDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(Publisher != null) dest.Publisher = (Hl7.Fhir.Model.ResourceReference)Publisher.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(Purpose != null) dest.Purpose = (Hl7.Fhir.Model.Markdown)Purpose.DeepCopy();
      if(Copyright != null) dest.Copyright = (Hl7.Fhir.Model.Markdown)Copyright.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
      if(DerivedFromCanonicalElement != null) dest.DerivedFromCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(DerivedFromCanonicalElement.DeepCopy());
      if(DerivedFromUriElement != null) dest.DerivedFromUriElement = new List<Hl7.Fhir.Model.FhirUri>(DerivedFromUriElement.DeepCopy());
      if(Subject != null) dest.Subject = new List<Hl7.Fhir.Model.CodeableConcept>(Subject.DeepCopy());
      if(PerformerType != null) dest.PerformerType = (Hl7.Fhir.Model.CodeableConcept)PerformerType.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(PermittedDataTypeElement != null) dest.PermittedDataTypeElement = new List<Code<Hl7.Fhir.Model.ObservationDefinition.ObservationDataType>>(PermittedDataTypeElement.DeepCopy());
      if(MultipleResultsAllowedElement != null) dest.MultipleResultsAllowedElement = (Hl7.Fhir.Model.FhirBoolean)MultipleResultsAllowedElement.DeepCopy();
      if(BodySite != null) dest.BodySite = (Hl7.Fhir.Model.CodeableConcept)BodySite.DeepCopy();
      if(Method != null) dest.Method = (Hl7.Fhir.Model.CodeableConcept)Method.DeepCopy();
      if(Specimen != null) dest.Specimen = new List<Hl7.Fhir.Model.ResourceReference>(Specimen.DeepCopy());
      if(Device != null) dest.Device = new List<Hl7.Fhir.Model.ResourceReference>(Device.DeepCopy());
      if(PreferredReportNameElement != null) dest.PreferredReportNameElement = (Hl7.Fhir.Model.FhirString)PreferredReportNameElement.DeepCopy();
      if(QuantitativeDetails != null) dest.QuantitativeDetails = (Hl7.Fhir.Model.ObservationDefinition.QuantitativeDetailsComponent)QuantitativeDetails.DeepCopy();
      if(QualifiedValue != null) dest.QualifiedValue = new List<Hl7.Fhir.Model.ObservationDefinition.QualifiedValueComponent>(QualifiedValue.DeepCopy());
      if(HasMember != null) dest.HasMember = new List<Hl7.Fhir.Model.ResourceReference>(HasMember.DeepCopy());
      if(Component != null) dest.Component = new List<Hl7.Fhir.Model.ObservationDefinition.ComponentComponent>(Component.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ObservationDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ObservationDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Publisher, otherT.Publisher)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.Matches(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.Matches(DerivedFromCanonicalElement, otherT.DerivedFromCanonicalElement)) return false;
      if( !DeepComparable.Matches(DerivedFromUriElement, otherT.DerivedFromUriElement)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(PermittedDataTypeElement, otherT.PermittedDataTypeElement)) return false;
      if( !DeepComparable.Matches(MultipleResultsAllowedElement, otherT.MultipleResultsAllowedElement)) return false;
      if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.Matches(Method, otherT.Method)) return false;
      if( !DeepComparable.Matches(Specimen, otherT.Specimen)) return false;
      if( !DeepComparable.Matches(Device, otherT.Device)) return false;
      if( !DeepComparable.Matches(PreferredReportNameElement, otherT.PreferredReportNameElement)) return false;
      if( !DeepComparable.Matches(QuantitativeDetails, otherT.QuantitativeDetails)) return false;
      if( !DeepComparable.Matches(QualifiedValue, otherT.QualifiedValue)) return false;
      if( !DeepComparable.Matches(HasMember, otherT.HasMember)) return false;
      if( !DeepComparable.Matches(Component, otherT.Component)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ObservationDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Publisher, otherT.Publisher)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.IsExactly(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.IsExactly(DerivedFromCanonicalElement, otherT.DerivedFromCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(DerivedFromUriElement, otherT.DerivedFromUriElement)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(PermittedDataTypeElement, otherT.PermittedDataTypeElement)) return false;
      if( !DeepComparable.IsExactly(MultipleResultsAllowedElement, otherT.MultipleResultsAllowedElement)) return false;
      if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.IsExactly(Method, otherT.Method)) return false;
      if( !DeepComparable.IsExactly(Specimen, otherT.Specimen)) return false;
      if( !DeepComparable.IsExactly(Device, otherT.Device)) return false;
      if( !DeepComparable.IsExactly(PreferredReportNameElement, otherT.PreferredReportNameElement)) return false;
      if( !DeepComparable.IsExactly(QuantitativeDetails, otherT.QuantitativeDetails)) return false;
      if( !DeepComparable.IsExactly(QualifiedValue, otherT.QualifiedValue)) return false;
      if( !DeepComparable.IsExactly(HasMember, otherT.HasMember)) return false;
      if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        if (Identifier != null) yield return Identifier;
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (Publisher != null) yield return Publisher;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (Description != null) yield return Description;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (Purpose != null) yield return Purpose;
        if (Copyright != null) yield return Copyright;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (EffectivePeriod != null) yield return EffectivePeriod;
        foreach (var elem in DerivedFromCanonicalElement) { if (elem != null) yield return elem; }
        foreach (var elem in DerivedFromUriElement) { if (elem != null) yield return elem; }
        foreach (var elem in Subject) { if (elem != null) yield return elem; }
        if (PerformerType != null) yield return PerformerType;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Code != null) yield return Code;
        foreach (var elem in PermittedDataTypeElement) { if (elem != null) yield return elem; }
        if (MultipleResultsAllowedElement != null) yield return MultipleResultsAllowedElement;
        if (BodySite != null) yield return BodySite;
        if (Method != null) yield return Method;
        foreach (var elem in Specimen) { if (elem != null) yield return elem; }
        foreach (var elem in Device) { if (elem != null) yield return elem; }
        if (PreferredReportNameElement != null) yield return PreferredReportNameElement;
        if (QuantitativeDetails != null) yield return QuantitativeDetails;
        foreach (var elem in QualifiedValue) { if (elem != null) yield return elem; }
        foreach (var elem in HasMember) { if (elem != null) yield return elem; }
        foreach (var elem in Component) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (Publisher != null) yield return new ElementValue("publisher", Publisher);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (Purpose != null) yield return new ElementValue("purpose", Purpose);
        if (Copyright != null) yield return new ElementValue("copyright", Copyright);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
        foreach (var elem in DerivedFromCanonicalElement) { if (elem != null) yield return new ElementValue("derivedFromCanonical", elem); }
        foreach (var elem in DerivedFromUriElement) { if (elem != null) yield return new ElementValue("derivedFromUri", elem); }
        foreach (var elem in Subject) { if (elem != null) yield return new ElementValue("subject", elem); }
        if (PerformerType != null) yield return new ElementValue("performerType", PerformerType);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Code != null) yield return new ElementValue("code", Code);
        foreach (var elem in PermittedDataTypeElement) { if (elem != null) yield return new ElementValue("permittedDataType", elem); }
        if (MultipleResultsAllowedElement != null) yield return new ElementValue("multipleResultsAllowed", MultipleResultsAllowedElement);
        if (BodySite != null) yield return new ElementValue("bodySite", BodySite);
        if (Method != null) yield return new ElementValue("method", Method);
        foreach (var elem in Specimen) { if (elem != null) yield return new ElementValue("specimen", elem); }
        foreach (var elem in Device) { if (elem != null) yield return new ElementValue("device", elem); }
        if (PreferredReportNameElement != null) yield return new ElementValue("preferredReportName", PreferredReportNameElement);
        if (QuantitativeDetails != null) yield return new ElementValue("quantitativeDetails", QuantitativeDetails);
        foreach (var elem in QualifiedValue) { if (elem != null) yield return new ElementValue("qualifiedValue", elem); }
        foreach (var elem in HasMember) { if (elem != null) yield return new ElementValue("hasMember", elem); }
        foreach (var elem in Component) { if (elem != null) yield return new ElementValue("component", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = Publisher;
          return Publisher is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = Description;
          return Description is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = Purpose;
          return Purpose is not null;
        case "copyright":
          value = Copyright;
          return Copyright is not null;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "effectivePeriod":
          value = EffectivePeriod;
          return EffectivePeriod is not null;
        case "derivedFromCanonical":
          value = DerivedFromCanonicalElement;
          return DerivedFromCanonicalElement?.Any() == true;
        case "derivedFromUri":
          value = DerivedFromUriElement;
          return DerivedFromUriElement?.Any() == true;
        case "subject":
          value = Subject;
          return Subject?.Any() == true;
        case "performerType":
          value = PerformerType;
          return PerformerType is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "code":
          value = Code;
          return Code is not null;
        case "permittedDataType":
          value = PermittedDataTypeElement;
          return PermittedDataTypeElement?.Any() == true;
        case "multipleResultsAllowed":
          value = MultipleResultsAllowedElement;
          return MultipleResultsAllowedElement is not null;
        case "bodySite":
          value = BodySite;
          return BodySite is not null;
        case "method":
          value = Method;
          return Method is not null;
        case "specimen":
          value = Specimen;
          return Specimen?.Any() == true;
        case "device":
          value = Device;
          return Device?.Any() == true;
        case "preferredReportName":
          value = PreferredReportNameElement;
          return PreferredReportNameElement is not null;
        case "quantitativeDetails":
          value = QuantitativeDetails;
          return QuantitativeDetails is not null;
        case "qualifiedValue":
          value = QualifiedValue;
          return QualifiedValue?.Any() == true;
        case "hasMember":
          value = HasMember;
          return HasMember?.Any() == true;
        case "component":
          value = Component;
          return Component?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Publisher is not null) yield return new KeyValuePair<string,object>("publisher",Publisher);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (Purpose is not null) yield return new KeyValuePair<string,object>("purpose",Purpose);
      if (Copyright is not null) yield return new KeyValuePair<string,object>("copyright",Copyright);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (EffectivePeriod is not null) yield return new KeyValuePair<string,object>("effectivePeriod",EffectivePeriod);
      if (DerivedFromCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("derivedFromCanonical",DerivedFromCanonicalElement);
      if (DerivedFromUriElement?.Any() == true) yield return new KeyValuePair<string,object>("derivedFromUri",DerivedFromUriElement);
      if (Subject?.Any() == true) yield return new KeyValuePair<string,object>("subject",Subject);
      if (PerformerType is not null) yield return new KeyValuePair<string,object>("performerType",PerformerType);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (PermittedDataTypeElement?.Any() == true) yield return new KeyValuePair<string,object>("permittedDataType",PermittedDataTypeElement);
      if (MultipleResultsAllowedElement is not null) yield return new KeyValuePair<string,object>("multipleResultsAllowed",MultipleResultsAllowedElement);
      if (BodySite is not null) yield return new KeyValuePair<string,object>("bodySite",BodySite);
      if (Method is not null) yield return new KeyValuePair<string,object>("method",Method);
      if (Specimen?.Any() == true) yield return new KeyValuePair<string,object>("specimen",Specimen);
      if (Device?.Any() == true) yield return new KeyValuePair<string,object>("device",Device);
      if (PreferredReportNameElement is not null) yield return new KeyValuePair<string,object>("preferredReportName",PreferredReportNameElement);
      if (QuantitativeDetails is not null) yield return new KeyValuePair<string,object>("quantitativeDetails",QuantitativeDetails);
      if (QualifiedValue?.Any() == true) yield return new KeyValuePair<string,object>("qualifiedValue",QualifiedValue);
      if (HasMember?.Any() == true) yield return new KeyValuePair<string,object>("hasMember",HasMember);
      if (Component?.Any() == true) yield return new KeyValuePair<string,object>("component",Component);
    }

  }

}

// end of file

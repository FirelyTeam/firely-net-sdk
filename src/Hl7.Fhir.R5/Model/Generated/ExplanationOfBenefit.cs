// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Explanation of Benefit resource
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ExplanationOfBenefit","http://hl7.org/fhir/StructureDefinition/ExplanationOfBenefit", IsResource=true)]
  public partial class ExplanationOfBenefit : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ExplanationOfBenefit"; } }

    /// <summary>
    /// A code specifying the state of the resource instance.
    /// (url: http://hl7.org/fhir/ValueSet/explanationofbenefit-status)
    /// (system: http://hl7.org/fhir/explanationofbenefit-status)
    /// </summary>
    [FhirEnumeration("ExplanationOfBenefitStatus", "http://hl7.org/fhir/ValueSet/explanationofbenefit-status")]
    public enum ExplanationOfBenefitStatus
    {
      /// <summary>
      /// The resource instance is currently in-force.
      /// (system: http://hl7.org/fhir/explanationofbenefit-status)
      /// </summary>
      [EnumLiteral("active", "http://hl7.org/fhir/explanationofbenefit-status"), Description("Active")]
      Active,
      /// <summary>
      /// The resource instance is withdrawn, rescinded or reversed.
      /// (system: http://hl7.org/fhir/explanationofbenefit-status)
      /// </summary>
      [EnumLiteral("cancelled", "http://hl7.org/fhir/explanationofbenefit-status"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// A new resource instance the contents of which is not complete.
      /// (system: http://hl7.org/fhir/explanationofbenefit-status)
      /// </summary>
      [EnumLiteral("draft", "http://hl7.org/fhir/explanationofbenefit-status"), Description("Draft")]
      Draft,
      /// <summary>
      /// The resource instance was entered in error.
      /// (system: http://hl7.org/fhir/explanationofbenefit-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/explanationofbenefit-status"), Description("Entered In Error")]
      EnteredInError,
    }

    /// <summary>
    /// Prior or corollary claims
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#RelatedClaim", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.related")]
    public partial class RelatedClaimComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#RelatedClaim"; } }

      /// <summary>
      /// Reference to the related claim
      /// </summary>
      [FhirElement("claim", Order=40)]
      [CLSCompliant(false)]
      [References("Claim")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Claim
      {
        get { return _Claim; }
        set { _Claim = value; OnPropertyChanged("Claim"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Claim;

      /// <summary>
      /// How the reference claim is related
      /// </summary>
      [FhirElement("relationship", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Relationship
      {
        get { return _Relationship; }
        set { _Relationship = value; OnPropertyChanged("Relationship"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Relationship;

      /// <summary>
      /// File or case reference
      /// </summary>
      [FhirElement("reference", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.Identifier _Reference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatedClaimComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Claim != null) dest.Claim = (Hl7.Fhir.Model.ResourceReference)Claim.DeepCopy();
        if(Relationship != null) dest.Relationship = (Hl7.Fhir.Model.CodeableConcept)Relationship.DeepCopy();
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.Identifier)Reference.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatedClaimComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatedClaimComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Claim, otherT.Claim)) return false;
        if( !DeepComparable.Matches(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatedClaimComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Claim, otherT.Claim)) return false;
        if( !DeepComparable.IsExactly(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Claim != null) yield return Claim;
          if (Relationship != null) yield return Relationship;
          if (Reference != null) yield return Reference;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Claim != null) yield return new ElementValue("claim", Claim);
          if (Relationship != null) yield return new ElementValue("relationship", Relationship);
          if (Reference != null) yield return new ElementValue("reference", Reference);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "claim":
            value = Claim;
            return Claim is not null;
          case "relationship":
            value = Relationship;
            return Relationship is not null;
          case "reference":
            value = Reference;
            return Reference is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Claim is not null) yield return new KeyValuePair<string,object>("claim",Claim);
        if (Relationship is not null) yield return new KeyValuePair<string,object>("relationship",Relationship);
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
      }

    }

    /// <summary>
    /// Event information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Event", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.event")]
    public partial class EventComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Event"; } }

      /// <summary>
      /// Specific event
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Occurance date or period
      /// </summary>
      [FhirElement("when", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Period))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType When
      {
        get { return _When; }
        set { _When = value; OnPropertyChanged("When"); }
      }

      private Hl7.Fhir.Model.DataType _When;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EventComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(When != null) dest.When = (Hl7.Fhir.Model.DataType)When.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EventComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EventComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(When, otherT.When)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EventComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(When, otherT.When)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (When != null) yield return When;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (When != null) yield return new ElementValue("when", When);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "when":
            value = When;
            return When is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (When is not null) yield return new KeyValuePair<string,object>("when",When);
      }

    }

    /// <summary>
    /// Recipient of benefits payable
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Payee", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.payee")]
    public partial class PayeeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Payee"; } }

      /// <summary>
      /// Category of recipient
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Recipient reference
      /// </summary>
      [FhirElement("party", Order=50)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","Patient","RelatedPerson")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PayeeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PayeeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PayeeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PayeeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Party != null) yield return Party;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Party != null) yield return new ElementValue("party", Party);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "party":
            value = Party;
            return Party is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
      }

    }

    /// <summary>
    /// Care Team members
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#CareTeam", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.careTeam")]
    public partial class CareTeamComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#CareTeam"; } }

      /// <summary>
      /// Order of care team
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Order of care team
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Practitioner or organization
      /// </summary>
      [FhirElement("provider", Order=50, FiveWs="FiveWs.actor")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Provider
      {
        get { return _Provider; }
        set { _Provider = value; OnPropertyChanged("Provider"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Provider;

      /// <summary>
      /// Indicator of the lead practitioner
      /// </summary>
      [FhirElement("responsible", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ResponsibleElement
      {
        get { return _ResponsibleElement; }
        set { _ResponsibleElement = value; OnPropertyChanged("ResponsibleElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ResponsibleElement;

      /// <summary>
      /// Indicator of the lead practitioner
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Responsible
      {
        get { return ResponsibleElement != null ? ResponsibleElement.Value : null; }
        set
        {
          if (value == null)
            ResponsibleElement = null;
          else
            ResponsibleElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Responsible");
        }
      }

      /// <summary>
      /// Function within the team
      /// </summary>
      [FhirElement("role", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// Practitioner or provider specialization
      /// </summary>
      [FhirElement("specialty", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Specialty
      {
        get { return _Specialty; }
        set { _Specialty = value; OnPropertyChanged("Specialty"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Specialty;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CareTeamComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Provider != null) dest.Provider = (Hl7.Fhir.Model.ResourceReference)Provider.DeepCopy();
        if(ResponsibleElement != null) dest.ResponsibleElement = (Hl7.Fhir.Model.FhirBoolean)ResponsibleElement.DeepCopy();
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(Specialty != null) dest.Specialty = (Hl7.Fhir.Model.CodeableConcept)Specialty.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CareTeamComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CareTeamComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Provider, otherT.Provider)) return false;
        if( !DeepComparable.Matches(ResponsibleElement, otherT.ResponsibleElement)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Specialty, otherT.Specialty)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CareTeamComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Provider, otherT.Provider)) return false;
        if( !DeepComparable.IsExactly(ResponsibleElement, otherT.ResponsibleElement)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Specialty, otherT.Specialty)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Provider != null) yield return Provider;
          if (ResponsibleElement != null) yield return ResponsibleElement;
          if (Role != null) yield return Role;
          if (Specialty != null) yield return Specialty;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Provider != null) yield return new ElementValue("provider", Provider);
          if (ResponsibleElement != null) yield return new ElementValue("responsible", ResponsibleElement);
          if (Role != null) yield return new ElementValue("role", Role);
          if (Specialty != null) yield return new ElementValue("specialty", Specialty);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "provider":
            value = Provider;
            return Provider is not null;
          case "responsible":
            value = ResponsibleElement;
            return ResponsibleElement is not null;
          case "role":
            value = Role;
            return Role is not null;
          case "specialty":
            value = Specialty;
            return Specialty is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Provider is not null) yield return new KeyValuePair<string,object>("provider",Provider);
        if (ResponsibleElement is not null) yield return new KeyValuePair<string,object>("responsible",ResponsibleElement);
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Specialty is not null) yield return new KeyValuePair<string,object>("specialty",Specialty);
      }

    }

    /// <summary>
    /// Supporting information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#SupportingInformation", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.supportingInfo")]
    public partial class SupportingInformationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#SupportingInformation"; } }

      /// <summary>
      /// Information instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Information instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Classification of the supplied information
      /// </summary>
      [FhirElement("category", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Type of information
      /// </summary>
      [FhirElement("code", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// When it occurred
      /// </summary>
      [FhirElement("timing", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.Period))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Timing
      {
        get { return _Timing; }
        set { _Timing = value; OnPropertyChanged("Timing"); }
      }

      private Hl7.Fhir.Model.DataType _Timing;

      /// <summary>
      /// Data to be provided
      /// </summary>
      [FhirElement("value", Order=80, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Resource")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.Identifier))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      /// <summary>
      /// Explanation for the information
      /// </summary>
      [FhirElement("reason", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Reason
      {
        get { return _Reason; }
        set { _Reason = value; OnPropertyChanged("Reason"); }
      }

      private Hl7.Fhir.Model.Coding _Reason;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SupportingInformationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Timing != null) dest.Timing = (Hl7.Fhir.Model.DataType)Timing.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        if(Reason != null) dest.Reason = (Hl7.Fhir.Model.Coding)Reason.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SupportingInformationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SupportingInformationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Timing, otherT.Timing)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SupportingInformationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Timing, otherT.Timing)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Category != null) yield return Category;
          if (Code != null) yield return Code;
          if (Timing != null) yield return Timing;
          if (Value != null) yield return Value;
          if (Reason != null) yield return Reason;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Category != null) yield return new ElementValue("category", Category);
          if (Code != null) yield return new ElementValue("code", Code);
          if (Timing != null) yield return new ElementValue("timing", Timing);
          if (Value != null) yield return new ElementValue("value", Value);
          if (Reason != null) yield return new ElementValue("reason", Reason);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "timing":
            value = Timing;
            return Timing is not null;
          case "value":
            value = Value;
            return Value is not null;
          case "reason":
            value = Reason;
            return Reason is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Timing is not null) yield return new KeyValuePair<string,object>("timing",Timing);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
        if (Reason is not null) yield return new KeyValuePair<string,object>("reason",Reason);
      }

    }

    /// <summary>
    /// Pertinent diagnosis information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Diagnosis", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.diagnosis")]
    public partial class DiagnosisComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Diagnosis"; } }

      /// <summary>
      /// Diagnosis instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Diagnosis instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Nature of illness or problem
      /// </summary>
      [FhirElement("diagnosis", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Condition")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Diagnosis
      {
        get { return _Diagnosis; }
        set { _Diagnosis = value; OnPropertyChanged("Diagnosis"); }
      }

      private Hl7.Fhir.Model.DataType _Diagnosis;

      /// <summary>
      /// Timing or nature of the diagnosis
      /// </summary>
      [FhirElement("type", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// Present on admission
      /// </summary>
      [FhirElement("onAdmission", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept OnAdmission
      {
        get { return _OnAdmission; }
        set { _OnAdmission = value; OnPropertyChanged("OnAdmission"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _OnAdmission;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DiagnosisComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Diagnosis != null) dest.Diagnosis = (Hl7.Fhir.Model.DataType)Diagnosis.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(OnAdmission != null) dest.OnAdmission = (Hl7.Fhir.Model.CodeableConcept)OnAdmission.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DiagnosisComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Diagnosis, otherT.Diagnosis)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(OnAdmission, otherT.OnAdmission)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Diagnosis, otherT.Diagnosis)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(OnAdmission, otherT.OnAdmission)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Diagnosis != null) yield return Diagnosis;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (OnAdmission != null) yield return OnAdmission;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Diagnosis != null) yield return new ElementValue("diagnosis", Diagnosis);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (OnAdmission != null) yield return new ElementValue("onAdmission", OnAdmission);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "diagnosis":
            value = Diagnosis;
            return Diagnosis is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "onAdmission":
            value = OnAdmission;
            return OnAdmission is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Diagnosis is not null) yield return new KeyValuePair<string,object>("diagnosis",Diagnosis);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (OnAdmission is not null) yield return new KeyValuePair<string,object>("onAdmission",OnAdmission);
      }

    }

    /// <summary>
    /// Clinical procedures performed
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Procedure", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.procedure")]
    public partial class ProcedureComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Procedure"; } }

      /// <summary>
      /// Procedure instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Procedure instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Category of Procedure
      /// </summary>
      [FhirElement("type", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// When the procedure was performed
      /// </summary>
      [FhirElement("date", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _DateElement;

      /// <summary>
      /// When the procedure was performed
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// Specific clinical procedure
      /// </summary>
      [FhirElement("procedure", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Procedure")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Procedure
      {
        get { return _Procedure; }
        set { _Procedure = value; OnPropertyChanged("Procedure"); }
      }

      private Hl7.Fhir.Model.DataType _Procedure;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=80)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProcedureComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
        if(Procedure != null) dest.Procedure = (Hl7.Fhir.Model.DataType)Procedure.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProcedureComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProcedureComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(Procedure, otherT.Procedure)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProcedureComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(Procedure, otherT.Procedure)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (DateElement != null) yield return DateElement;
          if (Procedure != null) yield return Procedure;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (Procedure != null) yield return new ElementValue("procedure", Procedure);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "date":
            value = DateElement;
            return DateElement is not null;
          case "procedure":
            value = Procedure;
            return Procedure is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
        if (Procedure is not null) yield return new KeyValuePair<string,object>("procedure",Procedure);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
      }

    }

    /// <summary>
    /// Patient insurance information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Insurance", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.insurance")]
    public partial class InsuranceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Insurance"; } }

      /// <summary>
      /// Coverage to be used for adjudication
      /// </summary>
      [FhirElement("focal", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean FocalElement
      {
        get { return _FocalElement; }
        set { _FocalElement = value; OnPropertyChanged("FocalElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _FocalElement;

      /// <summary>
      /// Coverage to be used for adjudication
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Focal
      {
        get { return FocalElement != null ? FocalElement.Value : null; }
        set
        {
          if (value == null)
            FocalElement = null;
          else
            FocalElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Focal");
        }
      }

      /// <summary>
      /// Insurance information
      /// </summary>
      [FhirElement("coverage", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Coverage")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Coverage
      {
        get { return _Coverage; }
        set { _Coverage = value; OnPropertyChanged("Coverage"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Coverage;

      /// <summary>
      /// Prior authorization reference number
      /// </summary>
      [FhirElement("preAuthRef", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirString> PreAuthRefElement
      {
        get { if(_PreAuthRefElement==null) _PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(); return _PreAuthRefElement; }
        set { _PreAuthRefElement = value; OnPropertyChanged("PreAuthRefElement"); }
      }

      private List<Hl7.Fhir.Model.FhirString> _PreAuthRefElement;

      /// <summary>
      /// Prior authorization reference number
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> PreAuthRef
      {
        get { return PreAuthRefElement != null ? PreAuthRefElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            PreAuthRefElement = null;
          else
            PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
          OnPropertyChanged("PreAuthRef");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InsuranceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(FocalElement != null) dest.FocalElement = (Hl7.Fhir.Model.FhirBoolean)FocalElement.DeepCopy();
        if(Coverage != null) dest.Coverage = (Hl7.Fhir.Model.ResourceReference)Coverage.DeepCopy();
        if(PreAuthRefElement != null) dest.PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(PreAuthRefElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InsuranceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InsuranceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(FocalElement, otherT.FocalElement)) return false;
        if( !DeepComparable.Matches(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.Matches(PreAuthRefElement, otherT.PreAuthRefElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InsuranceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(FocalElement, otherT.FocalElement)) return false;
        if( !DeepComparable.IsExactly(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.IsExactly(PreAuthRefElement, otherT.PreAuthRefElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (FocalElement != null) yield return FocalElement;
          if (Coverage != null) yield return Coverage;
          foreach (var elem in PreAuthRefElement) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (FocalElement != null) yield return new ElementValue("focal", FocalElement);
          if (Coverage != null) yield return new ElementValue("coverage", Coverage);
          foreach (var elem in PreAuthRefElement) { if (elem != null) yield return new ElementValue("preAuthRef", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "focal":
            value = FocalElement;
            return FocalElement is not null;
          case "coverage":
            value = Coverage;
            return Coverage is not null;
          case "preAuthRef":
            value = PreAuthRefElement;
            return PreAuthRefElement?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (FocalElement is not null) yield return new KeyValuePair<string,object>("focal",FocalElement);
        if (Coverage is not null) yield return new KeyValuePair<string,object>("coverage",Coverage);
        if (PreAuthRefElement?.Any() == true) yield return new KeyValuePair<string,object>("preAuthRef",PreAuthRefElement);
      }

    }

    /// <summary>
    /// Details of the event
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Accident", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.accident")]
    public partial class AccidentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Accident"; } }

      /// <summary>
      /// When the incident occurred
      /// </summary>
      [FhirElement("date", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.Date _DateElement;

      /// <summary>
      /// When the incident occurred
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// The nature of the accident
      /// </summary>
      [FhirElement("type", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Where the event occurred
      /// </summary>
      [FhirElement("location", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Location")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.DataType _Location;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AccidentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Date)DateElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.DataType)Location.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AccidentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AccidentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AccidentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DateElement != null) yield return DateElement;
          if (Type != null) yield return Type;
          if (Location != null) yield return Location;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (Type != null) yield return new ElementValue("type", Type);
          if (Location != null) yield return new ElementValue("location", Location);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "date":
            value = DateElement;
            return DateElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "location":
            value = Location;
            return Location is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      }

    }

    /// <summary>
    /// Product or service provided
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Item", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.item")]
    public partial class ItemComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Item"; } }

      /// <summary>
      /// Item instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Item instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Applicable care team members
      /// </summary>
      [FhirElement("careTeamSequence", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> CareTeamSequenceElement
      {
        get { if(_CareTeamSequenceElement==null) _CareTeamSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _CareTeamSequenceElement; }
        set { _CareTeamSequenceElement = value; OnPropertyChanged("CareTeamSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _CareTeamSequenceElement;

      /// <summary>
      /// Applicable care team members
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> CareTeamSequence
      {
        get { return CareTeamSequenceElement != null ? CareTeamSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            CareTeamSequenceElement = null;
          else
            CareTeamSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("CareTeamSequence");
        }
      }

      /// <summary>
      /// Applicable diagnoses
      /// </summary>
      [FhirElement("diagnosisSequence", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> DiagnosisSequenceElement
      {
        get { if(_DiagnosisSequenceElement==null) _DiagnosisSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _DiagnosisSequenceElement; }
        set { _DiagnosisSequenceElement = value; OnPropertyChanged("DiagnosisSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _DiagnosisSequenceElement;

      /// <summary>
      /// Applicable diagnoses
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> DiagnosisSequence
      {
        get { return DiagnosisSequenceElement != null ? DiagnosisSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            DiagnosisSequenceElement = null;
          else
            DiagnosisSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("DiagnosisSequence");
        }
      }

      /// <summary>
      /// Applicable procedures
      /// </summary>
      [FhirElement("procedureSequence", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> ProcedureSequenceElement
      {
        get { if(_ProcedureSequenceElement==null) _ProcedureSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _ProcedureSequenceElement; }
        set { _ProcedureSequenceElement = value; OnPropertyChanged("ProcedureSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _ProcedureSequenceElement;

      /// <summary>
      /// Applicable procedures
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> ProcedureSequence
      {
        get { return ProcedureSequenceElement != null ? ProcedureSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ProcedureSequenceElement = null;
          else
            ProcedureSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("ProcedureSequence");
        }
      }

      /// <summary>
      /// Applicable exception and supporting information
      /// </summary>
      [FhirElement("informationSequence", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> InformationSequenceElement
      {
        get { if(_InformationSequenceElement==null) _InformationSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _InformationSequenceElement; }
        set { _InformationSequenceElement = value; OnPropertyChanged("InformationSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _InformationSequenceElement;

      /// <summary>
      /// Applicable exception and supporting information
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> InformationSequence
      {
        get { return InformationSequenceElement != null ? InformationSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            InformationSequenceElement = null;
          else
            InformationSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("InformationSequence");
        }
      }

      /// <summary>
      /// Number for tracking
      /// </summary>
      [FhirElement("traceNumber", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> TraceNumber
      {
        get { if(_TraceNumber==null) _TraceNumber = new List<Hl7.Fhir.Model.Identifier>(); return _TraceNumber; }
        set { _TraceNumber = value; OnPropertyChanged("TraceNumber"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _TraceNumber;

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// End of a range of codes
      /// </summary>
      [FhirElement("productOrServiceEnd", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrServiceEnd
      {
        get { return _ProductOrServiceEnd; }
        set { _ProductOrServiceEnd = value; OnPropertyChanged("ProductOrServiceEnd"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrServiceEnd;

      /// <summary>
      /// Request or Referral for Service
      /// </summary>
      [FhirElement("request", Order=140)]
      [CLSCompliant(false)]
      [References("DeviceRequest","MedicationRequest","NutritionOrder","ServiceRequest","SupplyRequest","VisionPrescription")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Request
      {
        get { if(_Request==null) _Request = new List<Hl7.Fhir.Model.ResourceReference>(); return _Request; }
        set { _Request = value; OnPropertyChanged("Request"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Request;

      /// <summary>
      /// Product or service billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=150)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Program the product or service is provided under
      /// </summary>
      [FhirElement("programCode", Order=160)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ProgramCode
      {
        get { if(_ProgramCode==null) _ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProgramCode; }
        set { _ProgramCode = value; OnPropertyChanged("ProgramCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ProgramCode;

      /// <summary>
      /// Date or dates of service or product delivery
      /// </summary>
      [FhirElement("serviced", Order=170, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.Period))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Serviced
      {
        get { return _Serviced; }
        set { _Serviced = value; OnPropertyChanged("Serviced"); }
      }

      private Hl7.Fhir.Model.DataType _Serviced;

      /// <summary>
      /// Place of service or where product was supplied
      /// </summary>
      [FhirElement("location", Order=180, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.where[x]")]
      [CLSCompliant(false)]
      [References("Location")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.DataType _Location;

      /// <summary>
      /// Paid by the patient
      /// </summary>
      [FhirElement("patientPaid", Order=190)]
      [DataMember]
      public Hl7.Fhir.Model.Money PatientPaid
      {
        get { return _PatientPaid; }
        set { _PatientPaid = value; OnPropertyChanged("PatientPaid"); }
      }

      private Hl7.Fhir.Model.Money _PatientPaid;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=200)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=210)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=220)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total tax
      /// </summary>
      [FhirElement("tax", Order=230)]
      [DataMember]
      public Hl7.Fhir.Model.Money Tax
      {
        get { return _Tax; }
        set { _Tax = value; OnPropertyChanged("Tax"); }
      }

      private Hl7.Fhir.Model.Money _Tax;

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=240)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=250)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      /// <summary>
      /// Anatomical location
      /// </summary>
      [FhirElement("bodySite", Order=260)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemBodySiteComponent> BodySite
      {
        get { if(_BodySite==null) _BodySite = new List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemBodySiteComponent>(); return _BodySite; }
        set { _BodySite = value; OnPropertyChanged("BodySite"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemBodySiteComponent> _BodySite;

      /// <summary>
      /// Encounters associated with the listed treatments
      /// </summary>
      [FhirElement("encounter", Order=270)]
      [CLSCompliant(false)]
      [References("Encounter")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Encounter
      {
        get { if(_Encounter==null) _Encounter = new List<Hl7.Fhir.Model.ResourceReference>(); return _Encounter; }
        set { _Encounter = value; OnPropertyChanged("Encounter"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Encounter;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      [FhirElement("noteNumber", Order=280)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> NoteNumberElement
      {
        get { if(_NoteNumberElement==null) _NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _NoteNumberElement; }
        set { _NoteNumberElement = value; OnPropertyChanged("NoteNumberElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _NoteNumberElement;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> NoteNumber
      {
        get { return NoteNumberElement != null ? NoteNumberElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            NoteNumberElement = null;
          else
            NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("NoteNumber");
        }
      }

      /// <summary>
      /// Adjudication results
      /// </summary>
      [FhirElement("reviewOutcome", Order=290)]
      [DataMember]
      public Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent ReviewOutcome
      {
        get { return _ReviewOutcome; }
        set { _ReviewOutcome = value; OnPropertyChanged("ReviewOutcome"); }
      }

      private Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent _ReviewOutcome;

      /// <summary>
      /// Adjudication details
      /// </summary>
      [FhirElement("adjudication", Order=300)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> Adjudication
      {
        get { if(_Adjudication==null) _Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(); return _Adjudication; }
        set { _Adjudication = value; OnPropertyChanged("Adjudication"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> _Adjudication;

      /// <summary>
      /// Additional items
      /// </summary>
      [FhirElement("detail", Order=310)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent> _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ItemComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(CareTeamSequenceElement != null) dest.CareTeamSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(CareTeamSequenceElement.DeepCopy());
        if(DiagnosisSequenceElement != null) dest.DiagnosisSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(DiagnosisSequenceElement.DeepCopy());
        if(ProcedureSequenceElement != null) dest.ProcedureSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(ProcedureSequenceElement.DeepCopy());
        if(InformationSequenceElement != null) dest.InformationSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(InformationSequenceElement.DeepCopy());
        if(TraceNumber != null) dest.TraceNumber = new List<Hl7.Fhir.Model.Identifier>(TraceNumber.DeepCopy());
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(ProductOrServiceEnd != null) dest.ProductOrServiceEnd = (Hl7.Fhir.Model.CodeableConcept)ProductOrServiceEnd.DeepCopy();
        if(Request != null) dest.Request = new List<Hl7.Fhir.Model.ResourceReference>(Request.DeepCopy());
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(ProgramCode != null) dest.ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(ProgramCode.DeepCopy());
        if(Serviced != null) dest.Serviced = (Hl7.Fhir.Model.DataType)Serviced.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.DataType)Location.DeepCopy();
        if(PatientPaid != null) dest.PatientPaid = (Hl7.Fhir.Model.Money)PatientPaid.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Tax != null) dest.Tax = (Hl7.Fhir.Model.Money)Tax.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        if(BodySite != null) dest.BodySite = new List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemBodySiteComponent>(BodySite.DeepCopy());
        if(Encounter != null) dest.Encounter = new List<Hl7.Fhir.Model.ResourceReference>(Encounter.DeepCopy());
        if(NoteNumberElement != null) dest.NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(NoteNumberElement.DeepCopy());
        if(ReviewOutcome != null) dest.ReviewOutcome = (Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent)ReviewOutcome.DeepCopy();
        if(Adjudication != null) dest.Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(Adjudication.DeepCopy());
        if(Detail != null) dest.Detail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.DetailComponent>(Detail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ItemComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ItemComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(CareTeamSequenceElement, otherT.CareTeamSequenceElement)) return false;
        if( !DeepComparable.Matches(DiagnosisSequenceElement, otherT.DiagnosisSequenceElement)) return false;
        if( !DeepComparable.Matches(ProcedureSequenceElement, otherT.ProcedureSequenceElement)) return false;
        if( !DeepComparable.Matches(InformationSequenceElement, otherT.InformationSequenceElement)) return false;
        if( !DeepComparable.Matches(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.Matches(Request, otherT.Request)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.Matches(Serviced, otherT.Serviced)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;
        if( !DeepComparable.Matches(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Tax, otherT.Tax)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;
        if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
        if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
        if( !DeepComparable.Matches(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.Matches(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.Matches(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ItemComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(CareTeamSequenceElement, otherT.CareTeamSequenceElement)) return false;
        if( !DeepComparable.IsExactly(DiagnosisSequenceElement, otherT.DiagnosisSequenceElement)) return false;
        if( !DeepComparable.IsExactly(ProcedureSequenceElement, otherT.ProcedureSequenceElement)) return false;
        if( !DeepComparable.IsExactly(InformationSequenceElement, otherT.InformationSequenceElement)) return false;
        if( !DeepComparable.IsExactly(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.IsExactly(Request, otherT.Request)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.IsExactly(Serviced, otherT.Serviced)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
        if( !DeepComparable.IsExactly(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Tax, otherT.Tax)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;
        if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
        if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
        if( !DeepComparable.IsExactly(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.IsExactly(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.IsExactly(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          foreach (var elem in CareTeamSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in DiagnosisSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in ProcedureSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in InformationSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in TraceNumber) { if (elem != null) yield return elem; }
          if (Revenue != null) yield return Revenue;
          if (Category != null) yield return Category;
          if (ProductOrService != null) yield return ProductOrService;
          if (ProductOrServiceEnd != null) yield return ProductOrServiceEnd;
          foreach (var elem in Request) { if (elem != null) yield return elem; }
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          foreach (var elem in ProgramCode) { if (elem != null) yield return elem; }
          if (Serviced != null) yield return Serviced;
          if (Location != null) yield return Location;
          if (PatientPaid != null) yield return PatientPaid;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Tax != null) yield return Tax;
          if (Net != null) yield return Net;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
          foreach (var elem in BodySite) { if (elem != null) yield return elem; }
          foreach (var elem in Encounter) { if (elem != null) yield return elem; }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return elem; }
          if (ReviewOutcome != null) yield return ReviewOutcome;
          foreach (var elem in Adjudication) { if (elem != null) yield return elem; }
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          foreach (var elem in CareTeamSequenceElement) { if (elem != null) yield return new ElementValue("careTeamSequence", elem); }
          foreach (var elem in DiagnosisSequenceElement) { if (elem != null) yield return new ElementValue("diagnosisSequence", elem); }
          foreach (var elem in ProcedureSequenceElement) { if (elem != null) yield return new ElementValue("procedureSequence", elem); }
          foreach (var elem in InformationSequenceElement) { if (elem != null) yield return new ElementValue("informationSequence", elem); }
          foreach (var elem in TraceNumber) { if (elem != null) yield return new ElementValue("traceNumber", elem); }
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (Category != null) yield return new ElementValue("category", Category);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          if (ProductOrServiceEnd != null) yield return new ElementValue("productOrServiceEnd", ProductOrServiceEnd);
          foreach (var elem in Request) { if (elem != null) yield return new ElementValue("request", elem); }
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          foreach (var elem in ProgramCode) { if (elem != null) yield return new ElementValue("programCode", elem); }
          if (Serviced != null) yield return new ElementValue("serviced", Serviced);
          if (Location != null) yield return new ElementValue("location", Location);
          if (PatientPaid != null) yield return new ElementValue("patientPaid", PatientPaid);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Tax != null) yield return new ElementValue("tax", Tax);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
          foreach (var elem in BodySite) { if (elem != null) yield return new ElementValue("bodySite", elem); }
          foreach (var elem in Encounter) { if (elem != null) yield return new ElementValue("encounter", elem); }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return new ElementValue("noteNumber", elem); }
          if (ReviewOutcome != null) yield return new ElementValue("reviewOutcome", ReviewOutcome);
          foreach (var elem in Adjudication) { if (elem != null) yield return new ElementValue("adjudication", elem); }
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "careTeamSequence":
            value = CareTeamSequenceElement;
            return CareTeamSequenceElement?.Any() == true;
          case "diagnosisSequence":
            value = DiagnosisSequenceElement;
            return DiagnosisSequenceElement?.Any() == true;
          case "procedureSequence":
            value = ProcedureSequenceElement;
            return ProcedureSequenceElement?.Any() == true;
          case "informationSequence":
            value = InformationSequenceElement;
            return InformationSequenceElement?.Any() == true;
          case "traceNumber":
            value = TraceNumber;
            return TraceNumber?.Any() == true;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "productOrServiceEnd":
            value = ProductOrServiceEnd;
            return ProductOrServiceEnd is not null;
          case "request":
            value = Request;
            return Request?.Any() == true;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "programCode":
            value = ProgramCode;
            return ProgramCode?.Any() == true;
          case "serviced":
            value = Serviced;
            return Serviced is not null;
          case "location":
            value = Location;
            return Location is not null;
          case "patientPaid":
            value = PatientPaid;
            return PatientPaid is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "tax":
            value = Tax;
            return Tax is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          case "bodySite":
            value = BodySite;
            return BodySite?.Any() == true;
          case "encounter":
            value = Encounter;
            return Encounter?.Any() == true;
          case "noteNumber":
            value = NoteNumberElement;
            return NoteNumberElement?.Any() == true;
          case "reviewOutcome":
            value = ReviewOutcome;
            return ReviewOutcome is not null;
          case "adjudication":
            value = Adjudication;
            return Adjudication?.Any() == true;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (CareTeamSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("careTeamSequence",CareTeamSequenceElement);
        if (DiagnosisSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("diagnosisSequence",DiagnosisSequenceElement);
        if (ProcedureSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("procedureSequence",ProcedureSequenceElement);
        if (InformationSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("informationSequence",InformationSequenceElement);
        if (TraceNumber?.Any() == true) yield return new KeyValuePair<string,object>("traceNumber",TraceNumber);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (ProductOrServiceEnd is not null) yield return new KeyValuePair<string,object>("productOrServiceEnd",ProductOrServiceEnd);
        if (Request?.Any() == true) yield return new KeyValuePair<string,object>("request",Request);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (ProgramCode?.Any() == true) yield return new KeyValuePair<string,object>("programCode",ProgramCode);
        if (Serviced is not null) yield return new KeyValuePair<string,object>("serviced",Serviced);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
        if (PatientPaid is not null) yield return new KeyValuePair<string,object>("patientPaid",PatientPaid);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Tax is not null) yield return new KeyValuePair<string,object>("tax",Tax);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
        if (BodySite?.Any() == true) yield return new KeyValuePair<string,object>("bodySite",BodySite);
        if (Encounter?.Any() == true) yield return new KeyValuePair<string,object>("encounter",Encounter);
        if (NoteNumberElement?.Any() == true) yield return new KeyValuePair<string,object>("noteNumber",NoteNumberElement);
        if (ReviewOutcome is not null) yield return new KeyValuePair<string,object>("reviewOutcome",ReviewOutcome);
        if (Adjudication?.Any() == true) yield return new KeyValuePair<string,object>("adjudication",Adjudication);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// Anatomical location
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#ItemBodySite", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.item.bodySite")]
    public partial class ItemBodySiteComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#ItemBodySite"; } }

      /// <summary>
      /// Location
      /// </summary>
      [FhirElement("site", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Site
      {
        get { if(_Site==null) _Site = new List<Hl7.Fhir.Model.CodeableReference>(); return _Site; }
        set { _Site = value; OnPropertyChanged("Site"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Site;

      /// <summary>
      /// Sub-location
      /// </summary>
      [FhirElement("subSite", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> SubSite
      {
        get { if(_SubSite==null) _SubSite = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SubSite; }
        set { _SubSite = value; OnPropertyChanged("SubSite"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _SubSite;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ItemBodySiteComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Site != null) dest.Site = new List<Hl7.Fhir.Model.CodeableReference>(Site.DeepCopy());
        if(SubSite != null) dest.SubSite = new List<Hl7.Fhir.Model.CodeableConcept>(SubSite.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ItemBodySiteComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ItemBodySiteComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Site, otherT.Site)) return false;
        if( !DeepComparable.Matches(SubSite, otherT.SubSite)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ItemBodySiteComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
        if( !DeepComparable.IsExactly(SubSite, otherT.SubSite)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Site) { if (elem != null) yield return elem; }
          foreach (var elem in SubSite) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Site) { if (elem != null) yield return new ElementValue("site", elem); }
          foreach (var elem in SubSite) { if (elem != null) yield return new ElementValue("subSite", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "site":
            value = Site;
            return Site?.Any() == true;
          case "subSite":
            value = SubSite;
            return SubSite?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Site?.Any() == true) yield return new KeyValuePair<string,object>("site",Site);
        if (SubSite?.Any() == true) yield return new KeyValuePair<string,object>("subSite",SubSite);
      }

    }

    /// <summary>
    /// Adjudication results
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#ReviewOutcome", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.item.reviewOutcome")]
    public partial class ReviewOutcomeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#ReviewOutcome"; } }

      /// <summary>
      /// Result of the adjudication
      /// </summary>
      [FhirElement("decision", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Decision
      {
        get { return _Decision; }
        set { _Decision = value; OnPropertyChanged("Decision"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Decision;

      /// <summary>
      /// Reason for result of the adjudication
      /// </summary>
      [FhirElement("reason", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Reason
      {
        get { if(_Reason==null) _Reason = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Reason; }
        set { _Reason = value; OnPropertyChanged("Reason"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Reason;

      /// <summary>
      /// Preauthorization reference
      /// </summary>
      [FhirElement("preAuthRef", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PreAuthRefElement
      {
        get { return _PreAuthRefElement; }
        set { _PreAuthRefElement = value; OnPropertyChanged("PreAuthRefElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PreAuthRefElement;

      /// <summary>
      /// Preauthorization reference
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string PreAuthRef
      {
        get { return PreAuthRefElement != null ? PreAuthRefElement.Value : null; }
        set
        {
          if (value == null)
            PreAuthRefElement = null;
          else
            PreAuthRefElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("PreAuthRef");
        }
      }

      /// <summary>
      /// Preauthorization reference effective period
      /// </summary>
      [FhirElement("preAuthPeriod", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Period PreAuthPeriod
      {
        get { return _PreAuthPeriod; }
        set { _PreAuthPeriod = value; OnPropertyChanged("PreAuthPeriod"); }
      }

      private Hl7.Fhir.Model.Period _PreAuthPeriod;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ReviewOutcomeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Decision != null) dest.Decision = (Hl7.Fhir.Model.CodeableConcept)Decision.DeepCopy();
        if(Reason != null) dest.Reason = new List<Hl7.Fhir.Model.CodeableConcept>(Reason.DeepCopy());
        if(PreAuthRefElement != null) dest.PreAuthRefElement = (Hl7.Fhir.Model.FhirString)PreAuthRefElement.DeepCopy();
        if(PreAuthPeriod != null) dest.PreAuthPeriod = (Hl7.Fhir.Model.Period)PreAuthPeriod.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ReviewOutcomeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ReviewOutcomeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Decision, otherT.Decision)) return false;
        if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
        if( !DeepComparable.Matches(PreAuthRefElement, otherT.PreAuthRefElement)) return false;
        if( !DeepComparable.Matches(PreAuthPeriod, otherT.PreAuthPeriod)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ReviewOutcomeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Decision, otherT.Decision)) return false;
        if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
        if( !DeepComparable.IsExactly(PreAuthRefElement, otherT.PreAuthRefElement)) return false;
        if( !DeepComparable.IsExactly(PreAuthPeriod, otherT.PreAuthPeriod)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Decision != null) yield return Decision;
          foreach (var elem in Reason) { if (elem != null) yield return elem; }
          if (PreAuthRefElement != null) yield return PreAuthRefElement;
          if (PreAuthPeriod != null) yield return PreAuthPeriod;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Decision != null) yield return new ElementValue("decision", Decision);
          foreach (var elem in Reason) { if (elem != null) yield return new ElementValue("reason", elem); }
          if (PreAuthRefElement != null) yield return new ElementValue("preAuthRef", PreAuthRefElement);
          if (PreAuthPeriod != null) yield return new ElementValue("preAuthPeriod", PreAuthPeriod);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "decision":
            value = Decision;
            return Decision is not null;
          case "reason":
            value = Reason;
            return Reason?.Any() == true;
          case "preAuthRef":
            value = PreAuthRefElement;
            return PreAuthRefElement is not null;
          case "preAuthPeriod":
            value = PreAuthPeriod;
            return PreAuthPeriod is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Decision is not null) yield return new KeyValuePair<string,object>("decision",Decision);
        if (Reason?.Any() == true) yield return new KeyValuePair<string,object>("reason",Reason);
        if (PreAuthRefElement is not null) yield return new KeyValuePair<string,object>("preAuthRef",PreAuthRefElement);
        if (PreAuthPeriod is not null) yield return new KeyValuePair<string,object>("preAuthPeriod",PreAuthPeriod);
      }

    }

    /// <summary>
    /// Adjudication details
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Adjudication", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.item.adjudication")]
    public partial class AdjudicationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Adjudication"; } }

      /// <summary>
      /// Type of adjudication information
      /// </summary>
      [FhirElement("category", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Explanation of adjudication outcome
      /// </summary>
      [FhirElement("reason", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Reason
      {
        get { return _Reason; }
        set { _Reason = value; OnPropertyChanged("Reason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Reason;

      /// <summary>
      /// Monetary amount
      /// </summary>
      [FhirElement("amount", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Money Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.Money _Amount;

      /// <summary>
      /// Non-monitary value
      /// </summary>
      [FhirElement("quantity", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AdjudicationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(Reason != null) dest.Reason = (Hl7.Fhir.Model.CodeableConcept)Reason.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Money)Amount.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AdjudicationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AdjudicationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AdjudicationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Category != null) yield return Category;
          if (Reason != null) yield return Reason;
          if (Amount != null) yield return Amount;
          if (Quantity != null) yield return Quantity;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Category != null) yield return new ElementValue("category", Category);
          if (Reason != null) yield return new ElementValue("reason", Reason);
          if (Amount != null) yield return new ElementValue("amount", Amount);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "category":
            value = Category;
            return Category is not null;
          case "reason":
            value = Reason;
            return Reason is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (Reason is not null) yield return new KeyValuePair<string,object>("reason",Reason);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
      }

    }

    /// <summary>
    /// Additional items
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Detail", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.item.detail")]
    public partial class DetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Detail"; } }

      /// <summary>
      /// Product or service provided
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Product or service provided
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Number for tracking
      /// </summary>
      [FhirElement("traceNumber", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> TraceNumber
      {
        get { if(_TraceNumber==null) _TraceNumber = new List<Hl7.Fhir.Model.Identifier>(); return _TraceNumber; }
        set { _TraceNumber = value; OnPropertyChanged("TraceNumber"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _TraceNumber;

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// End of a range of codes
      /// </summary>
      [FhirElement("productOrServiceEnd", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrServiceEnd
      {
        get { return _ProductOrServiceEnd; }
        set { _ProductOrServiceEnd = value; OnPropertyChanged("ProductOrServiceEnd"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrServiceEnd;

      /// <summary>
      /// Service/Product billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Program the product or service is provided under
      /// </summary>
      [FhirElement("programCode", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ProgramCode
      {
        get { if(_ProgramCode==null) _ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProgramCode; }
        set { _ProgramCode = value; OnPropertyChanged("ProgramCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ProgramCode;

      /// <summary>
      /// Paid by the patient
      /// </summary>
      [FhirElement("patientPaid", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.Money PatientPaid
      {
        get { return _PatientPaid; }
        set { _PatientPaid = value; OnPropertyChanged("PatientPaid"); }
      }

      private Hl7.Fhir.Model.Money _PatientPaid;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=150)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total tax
      /// </summary>
      [FhirElement("tax", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.Money Tax
      {
        get { return _Tax; }
        set { _Tax = value; OnPropertyChanged("Tax"); }
      }

      private Hl7.Fhir.Model.Money _Tax;

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=170)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=180)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      [FhirElement("noteNumber", Order=190)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> NoteNumberElement
      {
        get { if(_NoteNumberElement==null) _NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _NoteNumberElement; }
        set { _NoteNumberElement = value; OnPropertyChanged("NoteNumberElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _NoteNumberElement;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> NoteNumber
      {
        get { return NoteNumberElement != null ? NoteNumberElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            NoteNumberElement = null;
          else
            NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("NoteNumber");
        }
      }

      /// <summary>
      /// Detail level adjudication results
      /// </summary>
      [FhirElement("reviewOutcome", Order=200)]
      [DataMember]
      public Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent ReviewOutcome
      {
        get { return _ReviewOutcome; }
        set { _ReviewOutcome = value; OnPropertyChanged("ReviewOutcome"); }
      }

      private Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent _ReviewOutcome;

      /// <summary>
      /// Detail level adjudication details
      /// </summary>
      [FhirElement("adjudication", Order=210)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> Adjudication
      {
        get { if(_Adjudication==null) _Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(); return _Adjudication; }
        set { _Adjudication = value; OnPropertyChanged("Adjudication"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> _Adjudication;

      /// <summary>
      /// Additional items
      /// </summary>
      [FhirElement("subDetail", Order=220)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent> SubDetail
      {
        get { if(_SubDetail==null) _SubDetail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent>(); return _SubDetail; }
        set { _SubDetail = value; OnPropertyChanged("SubDetail"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent> _SubDetail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(TraceNumber != null) dest.TraceNumber = new List<Hl7.Fhir.Model.Identifier>(TraceNumber.DeepCopy());
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(ProductOrServiceEnd != null) dest.ProductOrServiceEnd = (Hl7.Fhir.Model.CodeableConcept)ProductOrServiceEnd.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(ProgramCode != null) dest.ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(ProgramCode.DeepCopy());
        if(PatientPaid != null) dest.PatientPaid = (Hl7.Fhir.Model.Money)PatientPaid.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Tax != null) dest.Tax = (Hl7.Fhir.Model.Money)Tax.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        if(NoteNumberElement != null) dest.NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(NoteNumberElement.DeepCopy());
        if(ReviewOutcome != null) dest.ReviewOutcome = (Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent)ReviewOutcome.DeepCopy();
        if(Adjudication != null) dest.Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(Adjudication.DeepCopy());
        if(SubDetail != null) dest.SubDetail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.SubDetailComponent>(SubDetail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.Matches(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Tax, otherT.Tax)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;
        if( !DeepComparable.Matches(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.Matches(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.Matches(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.Matches(SubDetail, otherT.SubDetail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.IsExactly(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Tax, otherT.Tax)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;
        if( !DeepComparable.IsExactly(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.IsExactly(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.IsExactly(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.IsExactly(SubDetail, otherT.SubDetail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          foreach (var elem in TraceNumber) { if (elem != null) yield return elem; }
          if (Revenue != null) yield return Revenue;
          if (Category != null) yield return Category;
          if (ProductOrService != null) yield return ProductOrService;
          if (ProductOrServiceEnd != null) yield return ProductOrServiceEnd;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          foreach (var elem in ProgramCode) { if (elem != null) yield return elem; }
          if (PatientPaid != null) yield return PatientPaid;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Tax != null) yield return Tax;
          if (Net != null) yield return Net;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return elem; }
          if (ReviewOutcome != null) yield return ReviewOutcome;
          foreach (var elem in Adjudication) { if (elem != null) yield return elem; }
          foreach (var elem in SubDetail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          foreach (var elem in TraceNumber) { if (elem != null) yield return new ElementValue("traceNumber", elem); }
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (Category != null) yield return new ElementValue("category", Category);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          if (ProductOrServiceEnd != null) yield return new ElementValue("productOrServiceEnd", ProductOrServiceEnd);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          foreach (var elem in ProgramCode) { if (elem != null) yield return new ElementValue("programCode", elem); }
          if (PatientPaid != null) yield return new ElementValue("patientPaid", PatientPaid);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Tax != null) yield return new ElementValue("tax", Tax);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return new ElementValue("noteNumber", elem); }
          if (ReviewOutcome != null) yield return new ElementValue("reviewOutcome", ReviewOutcome);
          foreach (var elem in Adjudication) { if (elem != null) yield return new ElementValue("adjudication", elem); }
          foreach (var elem in SubDetail) { if (elem != null) yield return new ElementValue("subDetail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "traceNumber":
            value = TraceNumber;
            return TraceNumber?.Any() == true;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "productOrServiceEnd":
            value = ProductOrServiceEnd;
            return ProductOrServiceEnd is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "programCode":
            value = ProgramCode;
            return ProgramCode?.Any() == true;
          case "patientPaid":
            value = PatientPaid;
            return PatientPaid is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "tax":
            value = Tax;
            return Tax is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          case "noteNumber":
            value = NoteNumberElement;
            return NoteNumberElement?.Any() == true;
          case "reviewOutcome":
            value = ReviewOutcome;
            return ReviewOutcome is not null;
          case "adjudication":
            value = Adjudication;
            return Adjudication?.Any() == true;
          case "subDetail":
            value = SubDetail;
            return SubDetail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (TraceNumber?.Any() == true) yield return new KeyValuePair<string,object>("traceNumber",TraceNumber);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (ProductOrServiceEnd is not null) yield return new KeyValuePair<string,object>("productOrServiceEnd",ProductOrServiceEnd);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (ProgramCode?.Any() == true) yield return new KeyValuePair<string,object>("programCode",ProgramCode);
        if (PatientPaid is not null) yield return new KeyValuePair<string,object>("patientPaid",PatientPaid);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Tax is not null) yield return new KeyValuePair<string,object>("tax",Tax);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
        if (NoteNumberElement?.Any() == true) yield return new KeyValuePair<string,object>("noteNumber",NoteNumberElement);
        if (ReviewOutcome is not null) yield return new KeyValuePair<string,object>("reviewOutcome",ReviewOutcome);
        if (Adjudication?.Any() == true) yield return new KeyValuePair<string,object>("adjudication",Adjudication);
        if (SubDetail?.Any() == true) yield return new KeyValuePair<string,object>("subDetail",SubDetail);
      }

    }

    /// <summary>
    /// Additional items
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#SubDetail", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.item.detail.subDetail")]
    public partial class SubDetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#SubDetail"; } }

      /// <summary>
      /// Product or service provided
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Product or service provided
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Number for tracking
      /// </summary>
      [FhirElement("traceNumber", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> TraceNumber
      {
        get { if(_TraceNumber==null) _TraceNumber = new List<Hl7.Fhir.Model.Identifier>(); return _TraceNumber; }
        set { _TraceNumber = value; OnPropertyChanged("TraceNumber"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _TraceNumber;

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// End of a range of codes
      /// </summary>
      [FhirElement("productOrServiceEnd", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrServiceEnd
      {
        get { return _ProductOrServiceEnd; }
        set { _ProductOrServiceEnd = value; OnPropertyChanged("ProductOrServiceEnd"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrServiceEnd;

      /// <summary>
      /// Service/Product billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Program the product or service is provided under
      /// </summary>
      [FhirElement("programCode", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ProgramCode
      {
        get { if(_ProgramCode==null) _ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProgramCode; }
        set { _ProgramCode = value; OnPropertyChanged("ProgramCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ProgramCode;

      /// <summary>
      /// Paid by the patient
      /// </summary>
      [FhirElement("patientPaid", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.Money PatientPaid
      {
        get { return _PatientPaid; }
        set { _PatientPaid = value; OnPropertyChanged("PatientPaid"); }
      }

      private Hl7.Fhir.Model.Money _PatientPaid;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=150)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total tax
      /// </summary>
      [FhirElement("tax", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.Money Tax
      {
        get { return _Tax; }
        set { _Tax = value; OnPropertyChanged("Tax"); }
      }

      private Hl7.Fhir.Model.Money _Tax;

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=170)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=180)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      [FhirElement("noteNumber", Order=190)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> NoteNumberElement
      {
        get { if(_NoteNumberElement==null) _NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _NoteNumberElement; }
        set { _NoteNumberElement = value; OnPropertyChanged("NoteNumberElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _NoteNumberElement;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> NoteNumber
      {
        get { return NoteNumberElement != null ? NoteNumberElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            NoteNumberElement = null;
          else
            NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("NoteNumber");
        }
      }

      /// <summary>
      /// Subdetail level adjudication results
      /// </summary>
      [FhirElement("reviewOutcome", Order=200)]
      [DataMember]
      public Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent ReviewOutcome
      {
        get { return _ReviewOutcome; }
        set { _ReviewOutcome = value; OnPropertyChanged("ReviewOutcome"); }
      }

      private Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent _ReviewOutcome;

      /// <summary>
      /// Subdetail level adjudication details
      /// </summary>
      [FhirElement("adjudication", Order=210)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> Adjudication
      {
        get { if(_Adjudication==null) _Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(); return _Adjudication; }
        set { _Adjudication = value; OnPropertyChanged("Adjudication"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> _Adjudication;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SubDetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(TraceNumber != null) dest.TraceNumber = new List<Hl7.Fhir.Model.Identifier>(TraceNumber.DeepCopy());
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(ProductOrServiceEnd != null) dest.ProductOrServiceEnd = (Hl7.Fhir.Model.CodeableConcept)ProductOrServiceEnd.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(ProgramCode != null) dest.ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(ProgramCode.DeepCopy());
        if(PatientPaid != null) dest.PatientPaid = (Hl7.Fhir.Model.Money)PatientPaid.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Tax != null) dest.Tax = (Hl7.Fhir.Model.Money)Tax.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        if(NoteNumberElement != null) dest.NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(NoteNumberElement.DeepCopy());
        if(ReviewOutcome != null) dest.ReviewOutcome = (Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent)ReviewOutcome.DeepCopy();
        if(Adjudication != null) dest.Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(Adjudication.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SubDetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SubDetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.Matches(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Tax, otherT.Tax)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;
        if( !DeepComparable.Matches(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.Matches(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.Matches(Adjudication, otherT.Adjudication)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SubDetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.IsExactly(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Tax, otherT.Tax)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;
        if( !DeepComparable.IsExactly(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.IsExactly(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.IsExactly(Adjudication, otherT.Adjudication)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          foreach (var elem in TraceNumber) { if (elem != null) yield return elem; }
          if (Revenue != null) yield return Revenue;
          if (Category != null) yield return Category;
          if (ProductOrService != null) yield return ProductOrService;
          if (ProductOrServiceEnd != null) yield return ProductOrServiceEnd;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          foreach (var elem in ProgramCode) { if (elem != null) yield return elem; }
          if (PatientPaid != null) yield return PatientPaid;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Tax != null) yield return Tax;
          if (Net != null) yield return Net;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return elem; }
          if (ReviewOutcome != null) yield return ReviewOutcome;
          foreach (var elem in Adjudication) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          foreach (var elem in TraceNumber) { if (elem != null) yield return new ElementValue("traceNumber", elem); }
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (Category != null) yield return new ElementValue("category", Category);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          if (ProductOrServiceEnd != null) yield return new ElementValue("productOrServiceEnd", ProductOrServiceEnd);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          foreach (var elem in ProgramCode) { if (elem != null) yield return new ElementValue("programCode", elem); }
          if (PatientPaid != null) yield return new ElementValue("patientPaid", PatientPaid);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Tax != null) yield return new ElementValue("tax", Tax);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return new ElementValue("noteNumber", elem); }
          if (ReviewOutcome != null) yield return new ElementValue("reviewOutcome", ReviewOutcome);
          foreach (var elem in Adjudication) { if (elem != null) yield return new ElementValue("adjudication", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "traceNumber":
            value = TraceNumber;
            return TraceNumber?.Any() == true;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "productOrServiceEnd":
            value = ProductOrServiceEnd;
            return ProductOrServiceEnd is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "programCode":
            value = ProgramCode;
            return ProgramCode?.Any() == true;
          case "patientPaid":
            value = PatientPaid;
            return PatientPaid is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "tax":
            value = Tax;
            return Tax is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          case "noteNumber":
            value = NoteNumberElement;
            return NoteNumberElement?.Any() == true;
          case "reviewOutcome":
            value = ReviewOutcome;
            return ReviewOutcome is not null;
          case "adjudication":
            value = Adjudication;
            return Adjudication?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (TraceNumber?.Any() == true) yield return new KeyValuePair<string,object>("traceNumber",TraceNumber);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (ProductOrServiceEnd is not null) yield return new KeyValuePair<string,object>("productOrServiceEnd",ProductOrServiceEnd);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (ProgramCode?.Any() == true) yield return new KeyValuePair<string,object>("programCode",ProgramCode);
        if (PatientPaid is not null) yield return new KeyValuePair<string,object>("patientPaid",PatientPaid);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Tax is not null) yield return new KeyValuePair<string,object>("tax",Tax);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
        if (NoteNumberElement?.Any() == true) yield return new KeyValuePair<string,object>("noteNumber",NoteNumberElement);
        if (ReviewOutcome is not null) yield return new KeyValuePair<string,object>("reviewOutcome",ReviewOutcome);
        if (Adjudication?.Any() == true) yield return new KeyValuePair<string,object>("adjudication",Adjudication);
      }

    }

    /// <summary>
    /// Insurer added line items
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#AddedItem", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.addItem")]
    public partial class AddedItemComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#AddedItem"; } }

      /// <summary>
      /// Item sequence number
      /// </summary>
      [FhirElement("itemSequence", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> ItemSequenceElement
      {
        get { if(_ItemSequenceElement==null) _ItemSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _ItemSequenceElement; }
        set { _ItemSequenceElement = value; OnPropertyChanged("ItemSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _ItemSequenceElement;

      /// <summary>
      /// Item sequence number
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> ItemSequence
      {
        get { return ItemSequenceElement != null ? ItemSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ItemSequenceElement = null;
          else
            ItemSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("ItemSequence");
        }
      }

      /// <summary>
      /// Detail sequence number
      /// </summary>
      [FhirElement("detailSequence", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> DetailSequenceElement
      {
        get { if(_DetailSequenceElement==null) _DetailSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _DetailSequenceElement; }
        set { _DetailSequenceElement = value; OnPropertyChanged("DetailSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _DetailSequenceElement;

      /// <summary>
      /// Detail sequence number
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> DetailSequence
      {
        get { return DetailSequenceElement != null ? DetailSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            DetailSequenceElement = null;
          else
            DetailSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("DetailSequence");
        }
      }

      /// <summary>
      /// Subdetail sequence number
      /// </summary>
      [FhirElement("subDetailSequence", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> SubDetailSequenceElement
      {
        get { if(_SubDetailSequenceElement==null) _SubDetailSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _SubDetailSequenceElement; }
        set { _SubDetailSequenceElement = value; OnPropertyChanged("SubDetailSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _SubDetailSequenceElement;

      /// <summary>
      /// Subdetail sequence number
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> SubDetailSequence
      {
        get { return SubDetailSequenceElement != null ? SubDetailSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            SubDetailSequenceElement = null;
          else
            SubDetailSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("SubDetailSequence");
        }
      }

      /// <summary>
      /// Number for tracking
      /// </summary>
      [FhirElement("traceNumber", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> TraceNumber
      {
        get { if(_TraceNumber==null) _TraceNumber = new List<Hl7.Fhir.Model.Identifier>(); return _TraceNumber; }
        set { _TraceNumber = value; OnPropertyChanged("TraceNumber"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _TraceNumber;

      /// <summary>
      /// Authorized providers
      /// </summary>
      [FhirElement("provider", Order=80, FiveWs="FiveWs.source")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Provider
      {
        get { if(_Provider==null) _Provider = new List<Hl7.Fhir.Model.ResourceReference>(); return _Provider; }
        set { _Provider = value; OnPropertyChanged("Provider"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Provider;

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// End of a range of codes
      /// </summary>
      [FhirElement("productOrServiceEnd", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrServiceEnd
      {
        get { return _ProductOrServiceEnd; }
        set { _ProductOrServiceEnd = value; OnPropertyChanged("ProductOrServiceEnd"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrServiceEnd;

      /// <summary>
      /// Request or Referral for Service
      /// </summary>
      [FhirElement("request", Order=120)]
      [CLSCompliant(false)]
      [References("DeviceRequest","MedicationRequest","NutritionOrder","ServiceRequest","SupplyRequest","VisionPrescription")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Request
      {
        get { if(_Request==null) _Request = new List<Hl7.Fhir.Model.ResourceReference>(); return _Request; }
        set { _Request = value; OnPropertyChanged("Request"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Request;

      /// <summary>
      /// Service/Product billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Program the product or service is provided under
      /// </summary>
      [FhirElement("programCode", Order=140)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ProgramCode
      {
        get { if(_ProgramCode==null) _ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProgramCode; }
        set { _ProgramCode = value; OnPropertyChanged("ProgramCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ProgramCode;

      /// <summary>
      /// Date or dates of service or product delivery
      /// </summary>
      [FhirElement("serviced", Order=150, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.Period))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Serviced
      {
        get { return _Serviced; }
        set { _Serviced = value; OnPropertyChanged("Serviced"); }
      }

      private Hl7.Fhir.Model.DataType _Serviced;

      /// <summary>
      /// Place of service or where product was supplied
      /// </summary>
      [FhirElement("location", Order=160, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.where[x]")]
      [CLSCompliant(false)]
      [References("Location")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.DataType _Location;

      /// <summary>
      /// Paid by the patient
      /// </summary>
      [FhirElement("patientPaid", Order=170)]
      [DataMember]
      public Hl7.Fhir.Model.Money PatientPaid
      {
        get { return _PatientPaid; }
        set { _PatientPaid = value; OnPropertyChanged("PatientPaid"); }
      }

      private Hl7.Fhir.Model.Money _PatientPaid;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=180)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=190)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=200)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total tax
      /// </summary>
      [FhirElement("tax", Order=210)]
      [DataMember]
      public Hl7.Fhir.Model.Money Tax
      {
        get { return _Tax; }
        set { _Tax = value; OnPropertyChanged("Tax"); }
      }

      private Hl7.Fhir.Model.Money _Tax;

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=220)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Anatomical location
      /// </summary>
      [FhirElement("bodySite", Order=230)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemBodySiteComponent> BodySite
      {
        get { if(_BodySite==null) _BodySite = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemBodySiteComponent>(); return _BodySite; }
        set { _BodySite = value; OnPropertyChanged("BodySite"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemBodySiteComponent> _BodySite;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      [FhirElement("noteNumber", Order=240)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> NoteNumberElement
      {
        get { if(_NoteNumberElement==null) _NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _NoteNumberElement; }
        set { _NoteNumberElement = value; OnPropertyChanged("NoteNumberElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _NoteNumberElement;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> NoteNumber
      {
        get { return NoteNumberElement != null ? NoteNumberElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            NoteNumberElement = null;
          else
            NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("NoteNumber");
        }
      }

      /// <summary>
      /// Additem level adjudication results
      /// </summary>
      [FhirElement("reviewOutcome", Order=250)]
      [DataMember]
      public Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent ReviewOutcome
      {
        get { return _ReviewOutcome; }
        set { _ReviewOutcome = value; OnPropertyChanged("ReviewOutcome"); }
      }

      private Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent _ReviewOutcome;

      /// <summary>
      /// Added items adjudication
      /// </summary>
      [FhirElement("adjudication", Order=260)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> Adjudication
      {
        get { if(_Adjudication==null) _Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(); return _Adjudication; }
        set { _Adjudication = value; OnPropertyChanged("Adjudication"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> _Adjudication;

      /// <summary>
      /// Insurer added line items
      /// </summary>
      [FhirElement("detail", Order=270)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent> _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AddedItemComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ItemSequenceElement != null) dest.ItemSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(ItemSequenceElement.DeepCopy());
        if(DetailSequenceElement != null) dest.DetailSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(DetailSequenceElement.DeepCopy());
        if(SubDetailSequenceElement != null) dest.SubDetailSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(SubDetailSequenceElement.DeepCopy());
        if(TraceNumber != null) dest.TraceNumber = new List<Hl7.Fhir.Model.Identifier>(TraceNumber.DeepCopy());
        if(Provider != null) dest.Provider = new List<Hl7.Fhir.Model.ResourceReference>(Provider.DeepCopy());
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(ProductOrServiceEnd != null) dest.ProductOrServiceEnd = (Hl7.Fhir.Model.CodeableConcept)ProductOrServiceEnd.DeepCopy();
        if(Request != null) dest.Request = new List<Hl7.Fhir.Model.ResourceReference>(Request.DeepCopy());
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(ProgramCode != null) dest.ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(ProgramCode.DeepCopy());
        if(Serviced != null) dest.Serviced = (Hl7.Fhir.Model.DataType)Serviced.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.DataType)Location.DeepCopy();
        if(PatientPaid != null) dest.PatientPaid = (Hl7.Fhir.Model.Money)PatientPaid.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Tax != null) dest.Tax = (Hl7.Fhir.Model.Money)Tax.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(BodySite != null) dest.BodySite = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemBodySiteComponent>(BodySite.DeepCopy());
        if(NoteNumberElement != null) dest.NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(NoteNumberElement.DeepCopy());
        if(ReviewOutcome != null) dest.ReviewOutcome = (Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent)ReviewOutcome.DeepCopy();
        if(Adjudication != null) dest.Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(Adjudication.DeepCopy());
        if(Detail != null) dest.Detail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailComponent>(Detail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AddedItemComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AddedItemComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ItemSequenceElement, otherT.ItemSequenceElement)) return false;
        if( !DeepComparable.Matches(DetailSequenceElement, otherT.DetailSequenceElement)) return false;
        if( !DeepComparable.Matches(SubDetailSequenceElement, otherT.SubDetailSequenceElement)) return false;
        if( !DeepComparable.Matches(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.Matches(Provider, otherT.Provider)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.Matches(Request, otherT.Request)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.Matches(Serviced, otherT.Serviced)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;
        if( !DeepComparable.Matches(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Tax, otherT.Tax)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
        if( !DeepComparable.Matches(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.Matches(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.Matches(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AddedItemComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ItemSequenceElement, otherT.ItemSequenceElement)) return false;
        if( !DeepComparable.IsExactly(DetailSequenceElement, otherT.DetailSequenceElement)) return false;
        if( !DeepComparable.IsExactly(SubDetailSequenceElement, otherT.SubDetailSequenceElement)) return false;
        if( !DeepComparable.IsExactly(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.IsExactly(Provider, otherT.Provider)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.IsExactly(Request, otherT.Request)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.IsExactly(Serviced, otherT.Serviced)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
        if( !DeepComparable.IsExactly(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Tax, otherT.Tax)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
        if( !DeepComparable.IsExactly(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.IsExactly(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.IsExactly(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in ItemSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in DetailSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in SubDetailSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in TraceNumber) { if (elem != null) yield return elem; }
          foreach (var elem in Provider) { if (elem != null) yield return elem; }
          if (Revenue != null) yield return Revenue;
          if (ProductOrService != null) yield return ProductOrService;
          if (ProductOrServiceEnd != null) yield return ProductOrServiceEnd;
          foreach (var elem in Request) { if (elem != null) yield return elem; }
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          foreach (var elem in ProgramCode) { if (elem != null) yield return elem; }
          if (Serviced != null) yield return Serviced;
          if (Location != null) yield return Location;
          if (PatientPaid != null) yield return PatientPaid;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Tax != null) yield return Tax;
          if (Net != null) yield return Net;
          foreach (var elem in BodySite) { if (elem != null) yield return elem; }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return elem; }
          if (ReviewOutcome != null) yield return ReviewOutcome;
          foreach (var elem in Adjudication) { if (elem != null) yield return elem; }
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in ItemSequenceElement) { if (elem != null) yield return new ElementValue("itemSequence", elem); }
          foreach (var elem in DetailSequenceElement) { if (elem != null) yield return new ElementValue("detailSequence", elem); }
          foreach (var elem in SubDetailSequenceElement) { if (elem != null) yield return new ElementValue("subDetailSequence", elem); }
          foreach (var elem in TraceNumber) { if (elem != null) yield return new ElementValue("traceNumber", elem); }
          foreach (var elem in Provider) { if (elem != null) yield return new ElementValue("provider", elem); }
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          if (ProductOrServiceEnd != null) yield return new ElementValue("productOrServiceEnd", ProductOrServiceEnd);
          foreach (var elem in Request) { if (elem != null) yield return new ElementValue("request", elem); }
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          foreach (var elem in ProgramCode) { if (elem != null) yield return new ElementValue("programCode", elem); }
          if (Serviced != null) yield return new ElementValue("serviced", Serviced);
          if (Location != null) yield return new ElementValue("location", Location);
          if (PatientPaid != null) yield return new ElementValue("patientPaid", PatientPaid);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Tax != null) yield return new ElementValue("tax", Tax);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in BodySite) { if (elem != null) yield return new ElementValue("bodySite", elem); }
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return new ElementValue("noteNumber", elem); }
          if (ReviewOutcome != null) yield return new ElementValue("reviewOutcome", ReviewOutcome);
          foreach (var elem in Adjudication) { if (elem != null) yield return new ElementValue("adjudication", elem); }
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "itemSequence":
            value = ItemSequenceElement;
            return ItemSequenceElement?.Any() == true;
          case "detailSequence":
            value = DetailSequenceElement;
            return DetailSequenceElement?.Any() == true;
          case "subDetailSequence":
            value = SubDetailSequenceElement;
            return SubDetailSequenceElement?.Any() == true;
          case "traceNumber":
            value = TraceNumber;
            return TraceNumber?.Any() == true;
          case "provider":
            value = Provider;
            return Provider?.Any() == true;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "productOrServiceEnd":
            value = ProductOrServiceEnd;
            return ProductOrServiceEnd is not null;
          case "request":
            value = Request;
            return Request?.Any() == true;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "programCode":
            value = ProgramCode;
            return ProgramCode?.Any() == true;
          case "serviced":
            value = Serviced;
            return Serviced is not null;
          case "location":
            value = Location;
            return Location is not null;
          case "patientPaid":
            value = PatientPaid;
            return PatientPaid is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "tax":
            value = Tax;
            return Tax is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "bodySite":
            value = BodySite;
            return BodySite?.Any() == true;
          case "noteNumber":
            value = NoteNumberElement;
            return NoteNumberElement?.Any() == true;
          case "reviewOutcome":
            value = ReviewOutcome;
            return ReviewOutcome is not null;
          case "adjudication":
            value = Adjudication;
            return Adjudication?.Any() == true;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ItemSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("itemSequence",ItemSequenceElement);
        if (DetailSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("detailSequence",DetailSequenceElement);
        if (SubDetailSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("subDetailSequence",SubDetailSequenceElement);
        if (TraceNumber?.Any() == true) yield return new KeyValuePair<string,object>("traceNumber",TraceNumber);
        if (Provider?.Any() == true) yield return new KeyValuePair<string,object>("provider",Provider);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (ProductOrServiceEnd is not null) yield return new KeyValuePair<string,object>("productOrServiceEnd",ProductOrServiceEnd);
        if (Request?.Any() == true) yield return new KeyValuePair<string,object>("request",Request);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (ProgramCode?.Any() == true) yield return new KeyValuePair<string,object>("programCode",ProgramCode);
        if (Serviced is not null) yield return new KeyValuePair<string,object>("serviced",Serviced);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
        if (PatientPaid is not null) yield return new KeyValuePair<string,object>("patientPaid",PatientPaid);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Tax is not null) yield return new KeyValuePair<string,object>("tax",Tax);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (BodySite?.Any() == true) yield return new KeyValuePair<string,object>("bodySite",BodySite);
        if (NoteNumberElement?.Any() == true) yield return new KeyValuePair<string,object>("noteNumber",NoteNumberElement);
        if (ReviewOutcome is not null) yield return new KeyValuePair<string,object>("reviewOutcome",ReviewOutcome);
        if (Adjudication?.Any() == true) yield return new KeyValuePair<string,object>("adjudication",Adjudication);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// Anatomical location
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#AddedItemBodySite", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.addItem.bodySite")]
    public partial class AddedItemBodySiteComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#AddedItemBodySite"; } }

      /// <summary>
      /// Location
      /// </summary>
      [FhirElement("site", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Site
      {
        get { if(_Site==null) _Site = new List<Hl7.Fhir.Model.CodeableReference>(); return _Site; }
        set { _Site = value; OnPropertyChanged("Site"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Site;

      /// <summary>
      /// Sub-location
      /// </summary>
      [FhirElement("subSite", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> SubSite
      {
        get { if(_SubSite==null) _SubSite = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SubSite; }
        set { _SubSite = value; OnPropertyChanged("SubSite"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _SubSite;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AddedItemBodySiteComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Site != null) dest.Site = new List<Hl7.Fhir.Model.CodeableReference>(Site.DeepCopy());
        if(SubSite != null) dest.SubSite = new List<Hl7.Fhir.Model.CodeableConcept>(SubSite.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AddedItemBodySiteComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AddedItemBodySiteComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Site, otherT.Site)) return false;
        if( !DeepComparable.Matches(SubSite, otherT.SubSite)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AddedItemBodySiteComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
        if( !DeepComparable.IsExactly(SubSite, otherT.SubSite)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Site) { if (elem != null) yield return elem; }
          foreach (var elem in SubSite) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Site) { if (elem != null) yield return new ElementValue("site", elem); }
          foreach (var elem in SubSite) { if (elem != null) yield return new ElementValue("subSite", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "site":
            value = Site;
            return Site?.Any() == true;
          case "subSite":
            value = SubSite;
            return SubSite?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Site?.Any() == true) yield return new KeyValuePair<string,object>("site",Site);
        if (SubSite?.Any() == true) yield return new KeyValuePair<string,object>("subSite",SubSite);
      }

    }

    /// <summary>
    /// Insurer added line items
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#AddedItemDetail", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.addItem.detail")]
    public partial class AddedItemDetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#AddedItemDetail"; } }

      /// <summary>
      /// Number for tracking
      /// </summary>
      [FhirElement("traceNumber", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> TraceNumber
      {
        get { if(_TraceNumber==null) _TraceNumber = new List<Hl7.Fhir.Model.Identifier>(); return _TraceNumber; }
        set { _TraceNumber = value; OnPropertyChanged("TraceNumber"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _TraceNumber;

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// End of a range of codes
      /// </summary>
      [FhirElement("productOrServiceEnd", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrServiceEnd
      {
        get { return _ProductOrServiceEnd; }
        set { _ProductOrServiceEnd = value; OnPropertyChanged("ProductOrServiceEnd"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrServiceEnd;

      /// <summary>
      /// Service/Product billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Paid by the patient
      /// </summary>
      [FhirElement("patientPaid", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Money PatientPaid
      {
        get { return _PatientPaid; }
        set { _PatientPaid = value; OnPropertyChanged("PatientPaid"); }
      }

      private Hl7.Fhir.Model.Money _PatientPaid;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total tax
      /// </summary>
      [FhirElement("tax", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Money Tax
      {
        get { return _Tax; }
        set { _Tax = value; OnPropertyChanged("Tax"); }
      }

      private Hl7.Fhir.Model.Money _Tax;

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      [FhirElement("noteNumber", Order=150)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> NoteNumberElement
      {
        get { if(_NoteNumberElement==null) _NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _NoteNumberElement; }
        set { _NoteNumberElement = value; OnPropertyChanged("NoteNumberElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _NoteNumberElement;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> NoteNumber
      {
        get { return NoteNumberElement != null ? NoteNumberElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            NoteNumberElement = null;
          else
            NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("NoteNumber");
        }
      }

      /// <summary>
      /// Additem detail level adjudication results
      /// </summary>
      [FhirElement("reviewOutcome", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent ReviewOutcome
      {
        get { return _ReviewOutcome; }
        set { _ReviewOutcome = value; OnPropertyChanged("ReviewOutcome"); }
      }

      private Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent _ReviewOutcome;

      /// <summary>
      /// Added items adjudication
      /// </summary>
      [FhirElement("adjudication", Order=170)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> Adjudication
      {
        get { if(_Adjudication==null) _Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(); return _Adjudication; }
        set { _Adjudication = value; OnPropertyChanged("Adjudication"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> _Adjudication;

      /// <summary>
      /// Insurer added line items
      /// </summary>
      [FhirElement("subDetail", Order=180)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent> SubDetail
      {
        get { if(_SubDetail==null) _SubDetail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent>(); return _SubDetail; }
        set { _SubDetail = value; OnPropertyChanged("SubDetail"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent> _SubDetail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AddedItemDetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TraceNumber != null) dest.TraceNumber = new List<Hl7.Fhir.Model.Identifier>(TraceNumber.DeepCopy());
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(ProductOrServiceEnd != null) dest.ProductOrServiceEnd = (Hl7.Fhir.Model.CodeableConcept)ProductOrServiceEnd.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(PatientPaid != null) dest.PatientPaid = (Hl7.Fhir.Model.Money)PatientPaid.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Tax != null) dest.Tax = (Hl7.Fhir.Model.Money)Tax.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(NoteNumberElement != null) dest.NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(NoteNumberElement.DeepCopy());
        if(ReviewOutcome != null) dest.ReviewOutcome = (Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent)ReviewOutcome.DeepCopy();
        if(Adjudication != null) dest.Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(Adjudication.DeepCopy());
        if(SubDetail != null) dest.SubDetail = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemDetailSubDetailComponent>(SubDetail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AddedItemDetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AddedItemDetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Tax, otherT.Tax)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.Matches(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.Matches(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.Matches(SubDetail, otherT.SubDetail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AddedItemDetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Tax, otherT.Tax)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.IsExactly(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.IsExactly(Adjudication, otherT.Adjudication)) return false;
        if( !DeepComparable.IsExactly(SubDetail, otherT.SubDetail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in TraceNumber) { if (elem != null) yield return elem; }
          if (Revenue != null) yield return Revenue;
          if (ProductOrService != null) yield return ProductOrService;
          if (ProductOrServiceEnd != null) yield return ProductOrServiceEnd;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          if (PatientPaid != null) yield return PatientPaid;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Tax != null) yield return Tax;
          if (Net != null) yield return Net;
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return elem; }
          if (ReviewOutcome != null) yield return ReviewOutcome;
          foreach (var elem in Adjudication) { if (elem != null) yield return elem; }
          foreach (var elem in SubDetail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in TraceNumber) { if (elem != null) yield return new ElementValue("traceNumber", elem); }
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          if (ProductOrServiceEnd != null) yield return new ElementValue("productOrServiceEnd", ProductOrServiceEnd);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          if (PatientPaid != null) yield return new ElementValue("patientPaid", PatientPaid);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Tax != null) yield return new ElementValue("tax", Tax);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return new ElementValue("noteNumber", elem); }
          if (ReviewOutcome != null) yield return new ElementValue("reviewOutcome", ReviewOutcome);
          foreach (var elem in Adjudication) { if (elem != null) yield return new ElementValue("adjudication", elem); }
          foreach (var elem in SubDetail) { if (elem != null) yield return new ElementValue("subDetail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "traceNumber":
            value = TraceNumber;
            return TraceNumber?.Any() == true;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "productOrServiceEnd":
            value = ProductOrServiceEnd;
            return ProductOrServiceEnd is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "patientPaid":
            value = PatientPaid;
            return PatientPaid is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "tax":
            value = Tax;
            return Tax is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "noteNumber":
            value = NoteNumberElement;
            return NoteNumberElement?.Any() == true;
          case "reviewOutcome":
            value = ReviewOutcome;
            return ReviewOutcome is not null;
          case "adjudication":
            value = Adjudication;
            return Adjudication?.Any() == true;
          case "subDetail":
            value = SubDetail;
            return SubDetail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TraceNumber?.Any() == true) yield return new KeyValuePair<string,object>("traceNumber",TraceNumber);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (ProductOrServiceEnd is not null) yield return new KeyValuePair<string,object>("productOrServiceEnd",ProductOrServiceEnd);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (PatientPaid is not null) yield return new KeyValuePair<string,object>("patientPaid",PatientPaid);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Tax is not null) yield return new KeyValuePair<string,object>("tax",Tax);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (NoteNumberElement?.Any() == true) yield return new KeyValuePair<string,object>("noteNumber",NoteNumberElement);
        if (ReviewOutcome is not null) yield return new KeyValuePair<string,object>("reviewOutcome",ReviewOutcome);
        if (Adjudication?.Any() == true) yield return new KeyValuePair<string,object>("adjudication",Adjudication);
        if (SubDetail?.Any() == true) yield return new KeyValuePair<string,object>("subDetail",SubDetail);
      }

    }

    /// <summary>
    /// Insurer added line items
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#AddedItemDetailSubDetail", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.addItem.detail.subDetail")]
    public partial class AddedItemDetailSubDetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#AddedItemDetailSubDetail"; } }

      /// <summary>
      /// Number for tracking
      /// </summary>
      [FhirElement("traceNumber", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> TraceNumber
      {
        get { if(_TraceNumber==null) _TraceNumber = new List<Hl7.Fhir.Model.Identifier>(); return _TraceNumber; }
        set { _TraceNumber = value; OnPropertyChanged("TraceNumber"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _TraceNumber;

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// End of a range of codes
      /// </summary>
      [FhirElement("productOrServiceEnd", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrServiceEnd
      {
        get { return _ProductOrServiceEnd; }
        set { _ProductOrServiceEnd = value; OnPropertyChanged("ProductOrServiceEnd"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrServiceEnd;

      /// <summary>
      /// Service/Product billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Paid by the patient
      /// </summary>
      [FhirElement("patientPaid", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Money PatientPaid
      {
        get { return _PatientPaid; }
        set { _PatientPaid = value; OnPropertyChanged("PatientPaid"); }
      }

      private Hl7.Fhir.Model.Money _PatientPaid;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total tax
      /// </summary>
      [FhirElement("tax", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Money Tax
      {
        get { return _Tax; }
        set { _Tax = value; OnPropertyChanged("Tax"); }
      }

      private Hl7.Fhir.Model.Money _Tax;

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      [FhirElement("noteNumber", Order=150)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> NoteNumberElement
      {
        get { if(_NoteNumberElement==null) _NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _NoteNumberElement; }
        set { _NoteNumberElement = value; OnPropertyChanged("NoteNumberElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _NoteNumberElement;

      /// <summary>
      /// Applicable note numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> NoteNumber
      {
        get { return NoteNumberElement != null ? NoteNumberElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            NoteNumberElement = null;
          else
            NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("NoteNumber");
        }
      }

      /// <summary>
      /// Additem subdetail level adjudication results
      /// </summary>
      [FhirElement("reviewOutcome", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent ReviewOutcome
      {
        get { return _ReviewOutcome; }
        set { _ReviewOutcome = value; OnPropertyChanged("ReviewOutcome"); }
      }

      private Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent _ReviewOutcome;

      /// <summary>
      /// Added items adjudication
      /// </summary>
      [FhirElement("adjudication", Order=170)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> Adjudication
      {
        get { if(_Adjudication==null) _Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(); return _Adjudication; }
        set { _Adjudication = value; OnPropertyChanged("Adjudication"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> _Adjudication;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AddedItemDetailSubDetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TraceNumber != null) dest.TraceNumber = new List<Hl7.Fhir.Model.Identifier>(TraceNumber.DeepCopy());
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(ProductOrServiceEnd != null) dest.ProductOrServiceEnd = (Hl7.Fhir.Model.CodeableConcept)ProductOrServiceEnd.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(PatientPaid != null) dest.PatientPaid = (Hl7.Fhir.Model.Money)PatientPaid.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Tax != null) dest.Tax = (Hl7.Fhir.Model.Money)Tax.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(NoteNumberElement != null) dest.NoteNumberElement = new List<Hl7.Fhir.Model.PositiveInt>(NoteNumberElement.DeepCopy());
        if(ReviewOutcome != null) dest.ReviewOutcome = (Hl7.Fhir.Model.ExplanationOfBenefit.ReviewOutcomeComponent)ReviewOutcome.DeepCopy();
        if(Adjudication != null) dest.Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(Adjudication.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AddedItemDetailSubDetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AddedItemDetailSubDetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Tax, otherT.Tax)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.Matches(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.Matches(Adjudication, otherT.Adjudication)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AddedItemDetailSubDetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TraceNumber, otherT.TraceNumber)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(ProductOrServiceEnd, otherT.ProductOrServiceEnd)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(PatientPaid, otherT.PatientPaid)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Tax, otherT.Tax)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(NoteNumberElement, otherT.NoteNumberElement)) return false;
        if( !DeepComparable.IsExactly(ReviewOutcome, otherT.ReviewOutcome)) return false;
        if( !DeepComparable.IsExactly(Adjudication, otherT.Adjudication)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in TraceNumber) { if (elem != null) yield return elem; }
          if (Revenue != null) yield return Revenue;
          if (ProductOrService != null) yield return ProductOrService;
          if (ProductOrServiceEnd != null) yield return ProductOrServiceEnd;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          if (PatientPaid != null) yield return PatientPaid;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Tax != null) yield return Tax;
          if (Net != null) yield return Net;
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return elem; }
          if (ReviewOutcome != null) yield return ReviewOutcome;
          foreach (var elem in Adjudication) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in TraceNumber) { if (elem != null) yield return new ElementValue("traceNumber", elem); }
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          if (ProductOrServiceEnd != null) yield return new ElementValue("productOrServiceEnd", ProductOrServiceEnd);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          if (PatientPaid != null) yield return new ElementValue("patientPaid", PatientPaid);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Tax != null) yield return new ElementValue("tax", Tax);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in NoteNumberElement) { if (elem != null) yield return new ElementValue("noteNumber", elem); }
          if (ReviewOutcome != null) yield return new ElementValue("reviewOutcome", ReviewOutcome);
          foreach (var elem in Adjudication) { if (elem != null) yield return new ElementValue("adjudication", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "traceNumber":
            value = TraceNumber;
            return TraceNumber?.Any() == true;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "productOrServiceEnd":
            value = ProductOrServiceEnd;
            return ProductOrServiceEnd is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "patientPaid":
            value = PatientPaid;
            return PatientPaid is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "tax":
            value = Tax;
            return Tax is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "noteNumber":
            value = NoteNumberElement;
            return NoteNumberElement?.Any() == true;
          case "reviewOutcome":
            value = ReviewOutcome;
            return ReviewOutcome is not null;
          case "adjudication":
            value = Adjudication;
            return Adjudication?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TraceNumber?.Any() == true) yield return new KeyValuePair<string,object>("traceNumber",TraceNumber);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (ProductOrServiceEnd is not null) yield return new KeyValuePair<string,object>("productOrServiceEnd",ProductOrServiceEnd);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (PatientPaid is not null) yield return new KeyValuePair<string,object>("patientPaid",PatientPaid);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Tax is not null) yield return new KeyValuePair<string,object>("tax",Tax);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (NoteNumberElement?.Any() == true) yield return new KeyValuePair<string,object>("noteNumber",NoteNumberElement);
        if (ReviewOutcome is not null) yield return new KeyValuePair<string,object>("reviewOutcome",ReviewOutcome);
        if (Adjudication?.Any() == true) yield return new KeyValuePair<string,object>("adjudication",Adjudication);
      }

    }

    /// <summary>
    /// Adjudication totals
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Total", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.total")]
    public partial class TotalComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Total"; } }

      /// <summary>
      /// Type of adjudication information
      /// </summary>
      [FhirElement("category", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Financial total for the category
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Money Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.Money _Amount;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TotalComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Money)Amount.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TotalComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TotalComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TotalComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Category != null) yield return Category;
          if (Amount != null) yield return Amount;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Category != null) yield return new ElementValue("category", Category);
          if (Amount != null) yield return new ElementValue("amount", Amount);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "category":
            value = Category;
            return Category is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
      }

    }

    /// <summary>
    /// Payment Details
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Payment", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.payment")]
    public partial class PaymentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Payment"; } }

      /// <summary>
      /// Partial or complete payment
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Payment adjustment for non-claim issues
      /// </summary>
      [FhirElement("adjustment", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Money Adjustment
      {
        get { return _Adjustment; }
        set { _Adjustment = value; OnPropertyChanged("Adjustment"); }
      }

      private Hl7.Fhir.Model.Money _Adjustment;

      /// <summary>
      /// Explanation for the variance
      /// </summary>
      [FhirElement("adjustmentReason", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept AdjustmentReason
      {
        get { return _AdjustmentReason; }
        set { _AdjustmentReason = value; OnPropertyChanged("AdjustmentReason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _AdjustmentReason;

      /// <summary>
      /// Expected date of payment
      /// </summary>
      [FhirElement("date", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.Date _DateElement;

      /// <summary>
      /// Expected date of payment
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// Payable amount after adjustment
      /// </summary>
      [FhirElement("amount", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Money Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.Money _Amount;

      /// <summary>
      /// Business identifier for the payment
      /// </summary>
      [FhirElement("identifier", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PaymentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Adjustment != null) dest.Adjustment = (Hl7.Fhir.Model.Money)Adjustment.DeepCopy();
        if(AdjustmentReason != null) dest.AdjustmentReason = (Hl7.Fhir.Model.CodeableConcept)AdjustmentReason.DeepCopy();
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Date)DateElement.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Money)Amount.DeepCopy();
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PaymentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PaymentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Adjustment, otherT.Adjustment)) return false;
        if( !DeepComparable.Matches(AdjustmentReason, otherT.AdjustmentReason)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PaymentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Adjustment, otherT.Adjustment)) return false;
        if( !DeepComparable.IsExactly(AdjustmentReason, otherT.AdjustmentReason)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Adjustment != null) yield return Adjustment;
          if (AdjustmentReason != null) yield return AdjustmentReason;
          if (DateElement != null) yield return DateElement;
          if (Amount != null) yield return Amount;
          if (Identifier != null) yield return Identifier;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Adjustment != null) yield return new ElementValue("adjustment", Adjustment);
          if (AdjustmentReason != null) yield return new ElementValue("adjustmentReason", AdjustmentReason);
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (Amount != null) yield return new ElementValue("amount", Amount);
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "adjustment":
            value = Adjustment;
            return Adjustment is not null;
          case "adjustmentReason":
            value = AdjustmentReason;
            return AdjustmentReason is not null;
          case "date":
            value = DateElement;
            return DateElement is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Adjustment is not null) yield return new KeyValuePair<string,object>("adjustment",Adjustment);
        if (AdjustmentReason is not null) yield return new KeyValuePair<string,object>("adjustmentReason",AdjustmentReason);
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      }

    }

    /// <summary>
    /// Note concerning adjudication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Note", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.processNote")]
    public partial class NoteComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Note"; } }

      /// <summary>
      /// Note instance identifier
      /// </summary>
      [FhirElement("number", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt NumberElement
      {
        get { return _NumberElement; }
        set { _NumberElement = value; OnPropertyChanged("NumberElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _NumberElement;

      /// <summary>
      /// Note instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Number
      {
        get { return NumberElement != null ? NumberElement.Value : null; }
        set
        {
          if (value == null)
            NumberElement = null;
          else
            NumberElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Number");
        }
      }

      /// <summary>
      /// Note purpose
      /// </summary>
      [FhirElement("type", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Note explanatory text
      /// </summary>
      [FhirElement("text", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextElement
      {
        get { return _TextElement; }
        set { _TextElement = value; OnPropertyChanged("TextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextElement;

      /// <summary>
      /// Note explanatory text
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Text
      {
        get { return TextElement != null ? TextElement.Value : null; }
        set
        {
          if (value == null)
            TextElement = null;
          else
            TextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Text");
        }
      }

      /// <summary>
      /// Language of the text
      /// </summary>
      [FhirElement("language", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Language
      {
        get { return _Language; }
        set { _Language = value; OnPropertyChanged("Language"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Language;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NoteComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NumberElement != null) dest.NumberElement = (Hl7.Fhir.Model.PositiveInt)NumberElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(TextElement != null) dest.TextElement = (Hl7.Fhir.Model.FhirString)TextElement.DeepCopy();
        if(Language != null) dest.Language = (Hl7.Fhir.Model.CodeableConcept)Language.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NoteComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NoteComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NumberElement, otherT.NumberElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.Matches(Language, otherT.Language)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NoteComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NumberElement, otherT.NumberElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.IsExactly(Language, otherT.Language)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NumberElement != null) yield return NumberElement;
          if (Type != null) yield return Type;
          if (TextElement != null) yield return TextElement;
          if (Language != null) yield return Language;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NumberElement != null) yield return new ElementValue("number", NumberElement);
          if (Type != null) yield return new ElementValue("type", Type);
          if (TextElement != null) yield return new ElementValue("text", TextElement);
          if (Language != null) yield return new ElementValue("language", Language);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "number":
            value = NumberElement;
            return NumberElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "text":
            value = TextElement;
            return TextElement is not null;
          case "language":
            value = Language;
            return Language is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NumberElement is not null) yield return new KeyValuePair<string,object>("number",NumberElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (TextElement is not null) yield return new KeyValuePair<string,object>("text",TextElement);
        if (Language is not null) yield return new KeyValuePair<string,object>("language",Language);
      }

    }

    /// <summary>
    /// Balance by Benefit Category
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#BenefitBalance", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.benefitBalance")]
    public partial class BenefitBalanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#BenefitBalance"; } }

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Excluded from the plan
      /// </summary>
      [FhirElement("excluded", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ExcludedElement
      {
        get { return _ExcludedElement; }
        set { _ExcludedElement = value; OnPropertyChanged("ExcludedElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ExcludedElement;

      /// <summary>
      /// Excluded from the plan
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Excluded
      {
        get { return ExcludedElement != null ? ExcludedElement.Value : null; }
        set
        {
          if (value == null)
            ExcludedElement = null;
          else
            ExcludedElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Excluded");
        }
      }

      /// <summary>
      /// Short name for the benefit
      /// </summary>
      [FhirElement("name", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Short name for the benefit
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Description of the benefit or services covered
      /// </summary>
      [FhirElement("description", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Description of the benefit or services covered
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// In or out of network
      /// </summary>
      [FhirElement("network", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Network
      {
        get { return _Network; }
        set { _Network = value; OnPropertyChanged("Network"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Network;

      /// <summary>
      /// Individual or family
      /// </summary>
      [FhirElement("unit", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Unit
      {
        get { return _Unit; }
        set { _Unit = value; OnPropertyChanged("Unit"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Unit;

      /// <summary>
      /// Annual or lifetime
      /// </summary>
      [FhirElement("term", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Term
      {
        get { return _Term; }
        set { _Term = value; OnPropertyChanged("Term"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Term;

      /// <summary>
      /// Benefit Summary
      /// </summary>
      [FhirElement("financial", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent> Financial
      {
        get { if(_Financial==null) _Financial = new List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent>(); return _Financial; }
        set { _Financial = value; OnPropertyChanged("Financial"); }
      }

      private List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent> _Financial;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as BenefitBalanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ExcludedElement != null) dest.ExcludedElement = (Hl7.Fhir.Model.FhirBoolean)ExcludedElement.DeepCopy();
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Network != null) dest.Network = (Hl7.Fhir.Model.CodeableConcept)Network.DeepCopy();
        if(Unit != null) dest.Unit = (Hl7.Fhir.Model.CodeableConcept)Unit.DeepCopy();
        if(Term != null) dest.Term = (Hl7.Fhir.Model.CodeableConcept)Term.DeepCopy();
        if(Financial != null) dest.Financial = new List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitComponent>(Financial.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new BenefitBalanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as BenefitBalanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ExcludedElement, otherT.ExcludedElement)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Network, otherT.Network)) return false;
        if( !DeepComparable.Matches(Unit, otherT.Unit)) return false;
        if( !DeepComparable.Matches(Term, otherT.Term)) return false;
        if( !DeepComparable.Matches(Financial, otherT.Financial)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as BenefitBalanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ExcludedElement, otherT.ExcludedElement)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Network, otherT.Network)) return false;
        if( !DeepComparable.IsExactly(Unit, otherT.Unit)) return false;
        if( !DeepComparable.IsExactly(Term, otherT.Term)) return false;
        if( !DeepComparable.IsExactly(Financial, otherT.Financial)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Category != null) yield return Category;
          if (ExcludedElement != null) yield return ExcludedElement;
          if (NameElement != null) yield return NameElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (Network != null) yield return Network;
          if (Unit != null) yield return Unit;
          if (Term != null) yield return Term;
          foreach (var elem in Financial) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Category != null) yield return new ElementValue("category", Category);
          if (ExcludedElement != null) yield return new ElementValue("excluded", ExcludedElement);
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (Network != null) yield return new ElementValue("network", Network);
          if (Unit != null) yield return new ElementValue("unit", Unit);
          if (Term != null) yield return new ElementValue("term", Term);
          foreach (var elem in Financial) { if (elem != null) yield return new ElementValue("financial", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "category":
            value = Category;
            return Category is not null;
          case "excluded":
            value = ExcludedElement;
            return ExcludedElement is not null;
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "network":
            value = Network;
            return Network is not null;
          case "unit":
            value = Unit;
            return Unit is not null;
          case "term":
            value = Term;
            return Term is not null;
          case "financial":
            value = Financial;
            return Financial?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ExcludedElement is not null) yield return new KeyValuePair<string,object>("excluded",ExcludedElement);
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Network is not null) yield return new KeyValuePair<string,object>("network",Network);
        if (Unit is not null) yield return new KeyValuePair<string,object>("unit",Unit);
        if (Term is not null) yield return new KeyValuePair<string,object>("term",Term);
        if (Financial?.Any() == true) yield return new KeyValuePair<string,object>("financial",Financial);
      }

    }

    /// <summary>
    /// Benefit Summary
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExplanationOfBenefit#Benefit", IsNestedType=true)]
    [BackboneType("ExplanationOfBenefit.benefitBalance.financial")]
    public partial class BenefitComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExplanationOfBenefit#Benefit"; } }

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Benefits allowed
      /// </summary>
      [FhirElement("allowed", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.UnsignedInt),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Money))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Allowed
      {
        get { return _Allowed; }
        set { _Allowed = value; OnPropertyChanged("Allowed"); }
      }

      private Hl7.Fhir.Model.DataType _Allowed;

      /// <summary>
      /// Benefits used
      /// </summary>
      [FhirElement("used", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.UnsignedInt),typeof(Hl7.Fhir.Model.Money))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Used
      {
        get { return _Used; }
        set { _Used = value; OnPropertyChanged("Used"); }
      }

      private Hl7.Fhir.Model.DataType _Used;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as BenefitComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Allowed != null) dest.Allowed = (Hl7.Fhir.Model.DataType)Allowed.DeepCopy();
        if(Used != null) dest.Used = (Hl7.Fhir.Model.DataType)Used.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new BenefitComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as BenefitComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Allowed, otherT.Allowed)) return false;
        if( !DeepComparable.Matches(Used, otherT.Used)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as BenefitComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Allowed, otherT.Allowed)) return false;
        if( !DeepComparable.IsExactly(Used, otherT.Used)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Allowed != null) yield return Allowed;
          if (Used != null) yield return Used;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Allowed != null) yield return new ElementValue("allowed", Allowed);
          if (Used != null) yield return new ElementValue("used", Used);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "allowed":
            value = Allowed;
            return Allowed is not null;
          case "used":
            value = Used;
            return Used is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Allowed is not null) yield return new KeyValuePair<string,object>("allowed",Allowed);
        if (Used is not null) yield return new KeyValuePair<string,object>("used",Used);
      }

    }

    /// <summary>
    /// Business Identifier for the resource
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Number for tracking
    /// </summary>
    [FhirElement("traceNumber", Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> TraceNumber
    {
      get { if(_TraceNumber==null) _TraceNumber = new List<Hl7.Fhir.Model.Identifier>(); return _TraceNumber; }
      set { _TraceNumber = value; OnPropertyChanged("TraceNumber"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _TraceNumber;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=110, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ExplanationOfBenefitStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus> _StatusElement;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Category or discipline
    /// </summary>
    [FhirElement("type", InSummary=true, Order=120, FiveWs="FiveWs.class")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// More granular claim type
    /// </summary>
    [FhirElement("subType", Order=130, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept SubType
    {
      get { return _SubType; }
      set { _SubType = value; OnPropertyChanged("SubType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _SubType;

    /// <summary>
    /// claim | preauthorization | predetermination
    /// </summary>
    [FhirElement("use", InSummary=true, Order=140, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("Use")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ClaimUseCode> UseElement
    {
      get { return _UseElement; }
      set { _UseElement = value; OnPropertyChanged("UseElement"); }
    }

    private Code<Hl7.Fhir.Model.ClaimUseCode> _UseElement;

    /// <summary>
    /// claim | preauthorization | predetermination
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ClaimUseCode? Use
    {
      get { return UseElement != null ? UseElement.Value : null; }
      set
      {
        if (value == null)
          UseElement = null;
        else
          UseElement = new Code<Hl7.Fhir.Model.ClaimUseCode>(value);
        OnPropertyChanged("Use");
      }
    }

    /// <summary>
    /// The recipient of the products and services
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=150, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// Relevant time frame for the claim
    /// </summary>
    [FhirElement("billablePeriod", InSummary=true, Order=160, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Period BillablePeriod
    {
      get { return _BillablePeriod; }
      set { _BillablePeriod = value; OnPropertyChanged("BillablePeriod"); }
    }

    private Hl7.Fhir.Model.Period _BillablePeriod;

    /// <summary>
    /// Response creation date
    /// </summary>
    [FhirElement("created", InSummary=true, Order=170, FiveWs="FiveWs.recorded")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CreatedElement
    {
      get { return _CreatedElement; }
      set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

    /// <summary>
    /// Response creation date
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Created
    {
      get { return CreatedElement != null ? CreatedElement.Value : null; }
      set
      {
        if (value == null)
          CreatedElement = null;
        else
          CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Created");
      }
    }

    /// <summary>
    /// Author of the claim
    /// </summary>
    [FhirElement("enterer", Order=180, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Patient","RelatedPerson")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Enterer
    {
      get { return _Enterer; }
      set { _Enterer = value; OnPropertyChanged("Enterer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Enterer;

    /// <summary>
    /// Party responsible for reimbursement
    /// </summary>
    [FhirElement("insurer", InSummary=true, Order=190, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Insurer
    {
      get { return _Insurer; }
      set { _Insurer = value; OnPropertyChanged("Insurer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Insurer;

    /// <summary>
    /// Party responsible for the claim
    /// </summary>
    [FhirElement("provider", InSummary=true, Order=200, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Provider
    {
      get { return _Provider; }
      set { _Provider = value; OnPropertyChanged("Provider"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Provider;

    /// <summary>
    /// Desired processing urgency
    /// </summary>
    [FhirElement("priority", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Priority
    {
      get { return _Priority; }
      set { _Priority = value; OnPropertyChanged("Priority"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Priority;

    /// <summary>
    /// For whom to reserve funds
    /// </summary>
    [FhirElement("fundsReserveRequested", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept FundsReserveRequested
    {
      get { return _FundsReserveRequested; }
      set { _FundsReserveRequested = value; OnPropertyChanged("FundsReserveRequested"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _FundsReserveRequested;

    /// <summary>
    /// Funds reserved status
    /// </summary>
    [FhirElement("fundsReserve", Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept FundsReserve
    {
      get { return _FundsReserve; }
      set { _FundsReserve = value; OnPropertyChanged("FundsReserve"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _FundsReserve;

    /// <summary>
    /// Prior or corollary claims
    /// </summary>
    [FhirElement("related", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent> Related
    {
      get { if(_Related==null) _Related = new List<Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent>(); return _Related; }
      set { _Related = value; OnPropertyChanged("Related"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent> _Related;

    /// <summary>
    /// Prescription authorizing services or products
    /// </summary>
    [FhirElement("prescription", Order=250)]
    [CLSCompliant(false)]
    [References("MedicationRequest","VisionPrescription")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Prescription
    {
      get { return _Prescription; }
      set { _Prescription = value; OnPropertyChanged("Prescription"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Prescription;

    /// <summary>
    /// Original prescription if superceded by fulfiller
    /// </summary>
    [FhirElement("originalPrescription", Order=260)]
    [CLSCompliant(false)]
    [References("MedicationRequest")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference OriginalPrescription
    {
      get { return _OriginalPrescription; }
      set { _OriginalPrescription = value; OnPropertyChanged("OriginalPrescription"); }
    }

    private Hl7.Fhir.Model.ResourceReference _OriginalPrescription;

    /// <summary>
    /// Event information
    /// </summary>
    [FhirElement("event", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.EventComponent> Event
    {
      get { if(_Event==null) _Event = new List<Hl7.Fhir.Model.ExplanationOfBenefit.EventComponent>(); return _Event; }
      set { _Event = value; OnPropertyChanged("Event"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.EventComponent> _Event;

    /// <summary>
    /// Recipient of benefits payable
    /// </summary>
    [FhirElement("payee", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent Payee
    {
      get { return _Payee; }
      set { _Payee = value; OnPropertyChanged("Payee"); }
    }

    private Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent _Payee;

    /// <summary>
    /// Treatment Referral
    /// </summary>
    [FhirElement("referral", Order=290, FiveWs="FiveWs.cause")]
    [CLSCompliant(false)]
    [References("ServiceRequest")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Referral
    {
      get { return _Referral; }
      set { _Referral = value; OnPropertyChanged("Referral"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Referral;

    /// <summary>
    /// Encounters associated with the listed treatments
    /// </summary>
    [FhirElement("encounter", Order=300)]
    [CLSCompliant(false)]
    [References("Encounter")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Encounter
    {
      get { if(_Encounter==null) _Encounter = new List<Hl7.Fhir.Model.ResourceReference>(); return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Encounter;

    /// <summary>
    /// Servicing Facility
    /// </summary>
    [FhirElement("facility", Order=310, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location","Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Facility
    {
      get { return _Facility; }
      set { _Facility = value; OnPropertyChanged("Facility"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Facility;

    /// <summary>
    /// Claim reference
    /// </summary>
    [FhirElement("claim", Order=320, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Claim")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Claim
    {
      get { return _Claim; }
      set { _Claim = value; OnPropertyChanged("Claim"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Claim;

    /// <summary>
    /// Claim response reference
    /// </summary>
    [FhirElement("claimResponse", Order=330)]
    [CLSCompliant(false)]
    [References("ClaimResponse")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ClaimResponse
    {
      get { return _ClaimResponse; }
      set { _ClaimResponse = value; OnPropertyChanged("ClaimResponse"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ClaimResponse;

    /// <summary>
    /// queued | complete | error | partial
    /// </summary>
    [FhirElement("outcome", InSummary=true, Order=340)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ClaimOutcome")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ClaimProcessingCodes> OutcomeElement
    {
      get { return _OutcomeElement; }
      set { _OutcomeElement = value; OnPropertyChanged("OutcomeElement"); }
    }

    private Code<Hl7.Fhir.Model.ClaimProcessingCodes> _OutcomeElement;

    /// <summary>
    /// queued | complete | error | partial
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ClaimProcessingCodes? Outcome
    {
      get { return OutcomeElement != null ? OutcomeElement.Value : null; }
      set
      {
        if (value == null)
          OutcomeElement = null;
        else
          OutcomeElement = new Code<Hl7.Fhir.Model.ClaimProcessingCodes>(value);
        OnPropertyChanged("Outcome");
      }
    }

    /// <summary>
    /// Result of the adjudication
    /// </summary>
    [FhirElement("decision", InSummary=true, Order=350)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Decision
    {
      get { return _Decision; }
      set { _Decision = value; OnPropertyChanged("Decision"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Decision;

    /// <summary>
    /// Disposition Message
    /// </summary>
    [FhirElement("disposition", Order=360)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DispositionElement
    {
      get { return _DispositionElement; }
      set { _DispositionElement = value; OnPropertyChanged("DispositionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DispositionElement;

    /// <summary>
    /// Disposition Message
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Disposition
    {
      get { return DispositionElement != null ? DispositionElement.Value : null; }
      set
      {
        if (value == null)
          DispositionElement = null;
        else
          DispositionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Disposition");
      }
    }

    /// <summary>
    /// Preauthorization reference
    /// </summary>
    [FhirElement("preAuthRef", Order=370)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirString> PreAuthRefElement
    {
      get { if(_PreAuthRefElement==null) _PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(); return _PreAuthRefElement; }
      set { _PreAuthRefElement = value; OnPropertyChanged("PreAuthRefElement"); }
    }

    private List<Hl7.Fhir.Model.FhirString> _PreAuthRefElement;

    /// <summary>
    /// Preauthorization reference
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> PreAuthRef
    {
      get { return PreAuthRefElement != null ? PreAuthRefElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          PreAuthRefElement = null;
        else
          PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
        OnPropertyChanged("PreAuthRef");
      }
    }

    /// <summary>
    /// Preauthorization in-effect period
    /// </summary>
    [FhirElement("preAuthRefPeriod", Order=380)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Period> PreAuthRefPeriod
    {
      get { if(_PreAuthRefPeriod==null) _PreAuthRefPeriod = new List<Hl7.Fhir.Model.Period>(); return _PreAuthRefPeriod; }
      set { _PreAuthRefPeriod = value; OnPropertyChanged("PreAuthRefPeriod"); }
    }

    private List<Hl7.Fhir.Model.Period> _PreAuthRefPeriod;

    /// <summary>
    /// Package billing code
    /// </summary>
    [FhirElement("diagnosisRelatedGroup", Order=390)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept DiagnosisRelatedGroup
    {
      get { return _DiagnosisRelatedGroup; }
      set { _DiagnosisRelatedGroup = value; OnPropertyChanged("DiagnosisRelatedGroup"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _DiagnosisRelatedGroup;

    /// <summary>
    /// Care Team members
    /// </summary>
    [FhirElement("careTeam", Order=400)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent> CareTeam
    {
      get { if(_CareTeam==null) _CareTeam = new List<Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent>(); return _CareTeam; }
      set { _CareTeam = value; OnPropertyChanged("CareTeam"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent> _CareTeam;

    /// <summary>
    /// Supporting information
    /// </summary>
    [FhirElement("supportingInfo", Order=410)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent> SupportingInfo
    {
      get { if(_SupportingInfo==null) _SupportingInfo = new List<Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent>(); return _SupportingInfo; }
      set { _SupportingInfo = value; OnPropertyChanged("SupportingInfo"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent> _SupportingInfo;

    /// <summary>
    /// Pertinent diagnosis information
    /// </summary>
    [FhirElement("diagnosis", Order=420)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent> Diagnosis
    {
      get { if(_Diagnosis==null) _Diagnosis = new List<Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent>(); return _Diagnosis; }
      set { _Diagnosis = value; OnPropertyChanged("Diagnosis"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent> _Diagnosis;

    /// <summary>
    /// Clinical procedures performed
    /// </summary>
    [FhirElement("procedure", Order=430)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent> Procedure
    {
      get { if(_Procedure==null) _Procedure = new List<Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent>(); return _Procedure; }
      set { _Procedure = value; OnPropertyChanged("Procedure"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent> _Procedure;

    /// <summary>
    /// Precedence (primary, secondary, etc.)
    /// </summary>
    [FhirElement("precedence", Order=440)]
    [DataMember]
    public Hl7.Fhir.Model.PositiveInt PrecedenceElement
    {
      get { return _PrecedenceElement; }
      set { _PrecedenceElement = value; OnPropertyChanged("PrecedenceElement"); }
    }

    private Hl7.Fhir.Model.PositiveInt _PrecedenceElement;

    /// <summary>
    /// Precedence (primary, secondary, etc.)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public int? Precedence
    {
      get { return PrecedenceElement != null ? PrecedenceElement.Value : null; }
      set
      {
        if (value == null)
          PrecedenceElement = null;
        else
          PrecedenceElement = new Hl7.Fhir.Model.PositiveInt(value);
        OnPropertyChanged("Precedence");
      }
    }

    /// <summary>
    /// Patient insurance information
    /// </summary>
    [FhirElement("insurance", InSummary=true, Order=450)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent> Insurance
    {
      get { if(_Insurance==null) _Insurance = new List<Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent>(); return _Insurance; }
      set { _Insurance = value; OnPropertyChanged("Insurance"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent> _Insurance;

    /// <summary>
    /// Details of the event
    /// </summary>
    [FhirElement("accident", Order=460)]
    [DataMember]
    public Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent Accident
    {
      get { return _Accident; }
      set { _Accident = value; OnPropertyChanged("Accident"); }
    }

    private Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent _Accident;

    /// <summary>
    /// Paid by the patient
    /// </summary>
    [FhirElement("patientPaid", Order=470)]
    [DataMember]
    public Hl7.Fhir.Model.Money PatientPaid
    {
      get { return _PatientPaid; }
      set { _PatientPaid = value; OnPropertyChanged("PatientPaid"); }
    }

    private Hl7.Fhir.Model.Money _PatientPaid;

    /// <summary>
    /// Product or service provided
    /// </summary>
    [FhirElement("item", Order=480)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent> Item
    {
      get { if(_Item==null) _Item = new List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent>(); return _Item; }
      set { _Item = value; OnPropertyChanged("Item"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent> _Item;

    /// <summary>
    /// Insurer added line items
    /// </summary>
    [FhirElement("addItem", Order=490)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent> AddItem
    {
      get { if(_AddItem==null) _AddItem = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent>(); return _AddItem; }
      set { _AddItem = value; OnPropertyChanged("AddItem"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent> _AddItem;

    /// <summary>
    /// Header-level adjudication
    /// </summary>
    [FhirElement("adjudication", Order=500)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> Adjudication
    {
      get { if(_Adjudication==null) _Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(); return _Adjudication; }
      set { _Adjudication = value; OnPropertyChanged("Adjudication"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent> _Adjudication;

    /// <summary>
    /// Adjudication totals
    /// </summary>
    [FhirElement("total", InSummary=true, Order=510)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent> Total
    {
      get { if(_Total==null) _Total = new List<Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent>(); return _Total; }
      set { _Total = value; OnPropertyChanged("Total"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent> _Total;

    /// <summary>
    /// Payment Details
    /// </summary>
    [FhirElement("payment", Order=520)]
    [DataMember]
    public Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent Payment
    {
      get { return _Payment; }
      set { _Payment = value; OnPropertyChanged("Payment"); }
    }

    private Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent _Payment;

    /// <summary>
    /// Printed form identifier
    /// </summary>
    [FhirElement("formCode", Order=530)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept FormCode
    {
      get { return _FormCode; }
      set { _FormCode = value; OnPropertyChanged("FormCode"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _FormCode;

    /// <summary>
    /// Printed reference or actual form
    /// </summary>
    [FhirElement("form", Order=540)]
    [DataMember]
    public Hl7.Fhir.Model.Attachment Form
    {
      get { return _Form; }
      set { _Form = value; OnPropertyChanged("Form"); }
    }

    private Hl7.Fhir.Model.Attachment _Form;

    /// <summary>
    /// Note concerning adjudication
    /// </summary>
    [FhirElement("processNote", Order=550)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent> ProcessNote
    {
      get { if(_ProcessNote==null) _ProcessNote = new List<Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent>(); return _ProcessNote; }
      set { _ProcessNote = value; OnPropertyChanged("ProcessNote"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent> _ProcessNote;

    /// <summary>
    /// When the benefits are applicable
    /// </summary>
    [FhirElement("benefitPeriod", Order=560)]
    [DataMember]
    public Hl7.Fhir.Model.Period BenefitPeriod
    {
      get { return _BenefitPeriod; }
      set { _BenefitPeriod = value; OnPropertyChanged("BenefitPeriod"); }
    }

    private Hl7.Fhir.Model.Period _BenefitPeriod;

    /// <summary>
    /// Balance by Benefit Category
    /// </summary>
    [FhirElement("benefitBalance", Order=570)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent> BenefitBalance
    {
      get { if(_BenefitBalance==null) _BenefitBalance = new List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent>(); return _BenefitBalance; }
      set { _BenefitBalance = value; OnPropertyChanged("BenefitBalance"); }
    }

    private List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent> _BenefitBalance;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ExplanationOfBenefit;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(TraceNumber != null) dest.TraceNumber = new List<Hl7.Fhir.Model.Identifier>(TraceNumber.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.ExplanationOfBenefit.ExplanationOfBenefitStatus>)StatusElement.DeepCopy();
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(SubType != null) dest.SubType = (Hl7.Fhir.Model.CodeableConcept)SubType.DeepCopy();
      if(UseElement != null) dest.UseElement = (Code<Hl7.Fhir.Model.ClaimUseCode>)UseElement.DeepCopy();
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(BillablePeriod != null) dest.BillablePeriod = (Hl7.Fhir.Model.Period)BillablePeriod.DeepCopy();
      if(CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
      if(Enterer != null) dest.Enterer = (Hl7.Fhir.Model.ResourceReference)Enterer.DeepCopy();
      if(Insurer != null) dest.Insurer = (Hl7.Fhir.Model.ResourceReference)Insurer.DeepCopy();
      if(Provider != null) dest.Provider = (Hl7.Fhir.Model.ResourceReference)Provider.DeepCopy();
      if(Priority != null) dest.Priority = (Hl7.Fhir.Model.CodeableConcept)Priority.DeepCopy();
      if(FundsReserveRequested != null) dest.FundsReserveRequested = (Hl7.Fhir.Model.CodeableConcept)FundsReserveRequested.DeepCopy();
      if(FundsReserve != null) dest.FundsReserve = (Hl7.Fhir.Model.CodeableConcept)FundsReserve.DeepCopy();
      if(Related != null) dest.Related = new List<Hl7.Fhir.Model.ExplanationOfBenefit.RelatedClaimComponent>(Related.DeepCopy());
      if(Prescription != null) dest.Prescription = (Hl7.Fhir.Model.ResourceReference)Prescription.DeepCopy();
      if(OriginalPrescription != null) dest.OriginalPrescription = (Hl7.Fhir.Model.ResourceReference)OriginalPrescription.DeepCopy();
      if(Event != null) dest.Event = new List<Hl7.Fhir.Model.ExplanationOfBenefit.EventComponent>(Event.DeepCopy());
      if(Payee != null) dest.Payee = (Hl7.Fhir.Model.ExplanationOfBenefit.PayeeComponent)Payee.DeepCopy();
      if(Referral != null) dest.Referral = (Hl7.Fhir.Model.ResourceReference)Referral.DeepCopy();
      if(Encounter != null) dest.Encounter = new List<Hl7.Fhir.Model.ResourceReference>(Encounter.DeepCopy());
      if(Facility != null) dest.Facility = (Hl7.Fhir.Model.ResourceReference)Facility.DeepCopy();
      if(Claim != null) dest.Claim = (Hl7.Fhir.Model.ResourceReference)Claim.DeepCopy();
      if(ClaimResponse != null) dest.ClaimResponse = (Hl7.Fhir.Model.ResourceReference)ClaimResponse.DeepCopy();
      if(OutcomeElement != null) dest.OutcomeElement = (Code<Hl7.Fhir.Model.ClaimProcessingCodes>)OutcomeElement.DeepCopy();
      if(Decision != null) dest.Decision = (Hl7.Fhir.Model.CodeableConcept)Decision.DeepCopy();
      if(DispositionElement != null) dest.DispositionElement = (Hl7.Fhir.Model.FhirString)DispositionElement.DeepCopy();
      if(PreAuthRefElement != null) dest.PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(PreAuthRefElement.DeepCopy());
      if(PreAuthRefPeriod != null) dest.PreAuthRefPeriod = new List<Hl7.Fhir.Model.Period>(PreAuthRefPeriod.DeepCopy());
      if(DiagnosisRelatedGroup != null) dest.DiagnosisRelatedGroup = (Hl7.Fhir.Model.CodeableConcept)DiagnosisRelatedGroup.DeepCopy();
      if(CareTeam != null) dest.CareTeam = new List<Hl7.Fhir.Model.ExplanationOfBenefit.CareTeamComponent>(CareTeam.DeepCopy());
      if(SupportingInfo != null) dest.SupportingInfo = new List<Hl7.Fhir.Model.ExplanationOfBenefit.SupportingInformationComponent>(SupportingInfo.DeepCopy());
      if(Diagnosis != null) dest.Diagnosis = new List<Hl7.Fhir.Model.ExplanationOfBenefit.DiagnosisComponent>(Diagnosis.DeepCopy());
      if(Procedure != null) dest.Procedure = new List<Hl7.Fhir.Model.ExplanationOfBenefit.ProcedureComponent>(Procedure.DeepCopy());
      if(PrecedenceElement != null) dest.PrecedenceElement = (Hl7.Fhir.Model.PositiveInt)PrecedenceElement.DeepCopy();
      if(Insurance != null) dest.Insurance = new List<Hl7.Fhir.Model.ExplanationOfBenefit.InsuranceComponent>(Insurance.DeepCopy());
      if(Accident != null) dest.Accident = (Hl7.Fhir.Model.ExplanationOfBenefit.AccidentComponent)Accident.DeepCopy();
      if(PatientPaid != null) dest.PatientPaid = (Hl7.Fhir.Model.Money)PatientPaid.DeepCopy();
      if(Item != null) dest.Item = new List<Hl7.Fhir.Model.ExplanationOfBenefit.ItemComponent>(Item.DeepCopy());
      if(AddItem != null) dest.AddItem = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AddedItemComponent>(AddItem.DeepCopy());
      if(Adjudication != null) dest.Adjudication = new List<Hl7.Fhir.Model.ExplanationOfBenefit.AdjudicationComponent>(Adjudication.DeepCopy());
      if(Total != null) dest.Total = new List<Hl7.Fhir.Model.ExplanationOfBenefit.TotalComponent>(Total.DeepCopy());
      if(Payment != null) dest.Payment = (Hl7.Fhir.Model.ExplanationOfBenefit.PaymentComponent)Payment.DeepCopy();
      if(FormCode != null) dest.FormCode = (Hl7.Fhir.Model.CodeableConcept)FormCode.DeepCopy();
      if(Form != null) dest.Form = (Hl7.Fhir.Model.Attachment)Form.DeepCopy();
      if(ProcessNote != null) dest.ProcessNote = new List<Hl7.Fhir.Model.ExplanationOfBenefit.NoteComponent>(ProcessNote.DeepCopy());
      if(BenefitPeriod != null) dest.BenefitPeriod = (Hl7.Fhir.Model.Period)BenefitPeriod.DeepCopy();
      if(BenefitBalance != null) dest.BenefitBalance = new List<Hl7.Fhir.Model.ExplanationOfBenefit.BenefitBalanceComponent>(BenefitBalance.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ExplanationOfBenefit());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ExplanationOfBenefit;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(TraceNumber, otherT.TraceNumber)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(SubType, otherT.SubType)) return false;
      if( !DeepComparable.Matches(UseElement, otherT.UseElement)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(BillablePeriod, otherT.BillablePeriod)) return false;
      if( !DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.Matches(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.Matches(Insurer, otherT.Insurer)) return false;
      if( !DeepComparable.Matches(Provider, otherT.Provider)) return false;
      if( !DeepComparable.Matches(Priority, otherT.Priority)) return false;
      if( !DeepComparable.Matches(FundsReserveRequested, otherT.FundsReserveRequested)) return false;
      if( !DeepComparable.Matches(FundsReserve, otherT.FundsReserve)) return false;
      if( !DeepComparable.Matches(Related, otherT.Related)) return false;
      if( !DeepComparable.Matches(Prescription, otherT.Prescription)) return false;
      if( !DeepComparable.Matches(OriginalPrescription, otherT.OriginalPrescription)) return false;
      if( !DeepComparable.Matches(Event, otherT.Event)) return false;
      if( !DeepComparable.Matches(Payee, otherT.Payee)) return false;
      if( !DeepComparable.Matches(Referral, otherT.Referral)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(Facility, otherT.Facility)) return false;
      if( !DeepComparable.Matches(Claim, otherT.Claim)) return false;
      if( !DeepComparable.Matches(ClaimResponse, otherT.ClaimResponse)) return false;
      if( !DeepComparable.Matches(OutcomeElement, otherT.OutcomeElement)) return false;
      if( !DeepComparable.Matches(Decision, otherT.Decision)) return false;
      if( !DeepComparable.Matches(DispositionElement, otherT.DispositionElement)) return false;
      if( !DeepComparable.Matches(PreAuthRefElement, otherT.PreAuthRefElement)) return false;
      if( !DeepComparable.Matches(PreAuthRefPeriod, otherT.PreAuthRefPeriod)) return false;
      if( !DeepComparable.Matches(DiagnosisRelatedGroup, otherT.DiagnosisRelatedGroup)) return false;
      if( !DeepComparable.Matches(CareTeam, otherT.CareTeam)) return false;
      if( !DeepComparable.Matches(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.Matches(Diagnosis, otherT.Diagnosis)) return false;
      if( !DeepComparable.Matches(Procedure, otherT.Procedure)) return false;
      if( !DeepComparable.Matches(PrecedenceElement, otherT.PrecedenceElement)) return false;
      if( !DeepComparable.Matches(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.Matches(Accident, otherT.Accident)) return false;
      if( !DeepComparable.Matches(PatientPaid, otherT.PatientPaid)) return false;
      if( !DeepComparable.Matches(Item, otherT.Item)) return false;
      if( !DeepComparable.Matches(AddItem, otherT.AddItem)) return false;
      if( !DeepComparable.Matches(Adjudication, otherT.Adjudication)) return false;
      if( !DeepComparable.Matches(Total, otherT.Total)) return false;
      if( !DeepComparable.Matches(Payment, otherT.Payment)) return false;
      if( !DeepComparable.Matches(FormCode, otherT.FormCode)) return false;
      if( !DeepComparable.Matches(Form, otherT.Form)) return false;
      if( !DeepComparable.Matches(ProcessNote, otherT.ProcessNote)) return false;
      if( !DeepComparable.Matches(BenefitPeriod, otherT.BenefitPeriod)) return false;
      if( !DeepComparable.Matches(BenefitBalance, otherT.BenefitBalance)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ExplanationOfBenefit;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(TraceNumber, otherT.TraceNumber)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(SubType, otherT.SubType)) return false;
      if( !DeepComparable.IsExactly(UseElement, otherT.UseElement)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(BillablePeriod, otherT.BillablePeriod)) return false;
      if( !DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.IsExactly(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.IsExactly(Insurer, otherT.Insurer)) return false;
      if( !DeepComparable.IsExactly(Provider, otherT.Provider)) return false;
      if( !DeepComparable.IsExactly(Priority, otherT.Priority)) return false;
      if( !DeepComparable.IsExactly(FundsReserveRequested, otherT.FundsReserveRequested)) return false;
      if( !DeepComparable.IsExactly(FundsReserve, otherT.FundsReserve)) return false;
      if( !DeepComparable.IsExactly(Related, otherT.Related)) return false;
      if( !DeepComparable.IsExactly(Prescription, otherT.Prescription)) return false;
      if( !DeepComparable.IsExactly(OriginalPrescription, otherT.OriginalPrescription)) return false;
      if( !DeepComparable.IsExactly(Event, otherT.Event)) return false;
      if( !DeepComparable.IsExactly(Payee, otherT.Payee)) return false;
      if( !DeepComparable.IsExactly(Referral, otherT.Referral)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(Facility, otherT.Facility)) return false;
      if( !DeepComparable.IsExactly(Claim, otherT.Claim)) return false;
      if( !DeepComparable.IsExactly(ClaimResponse, otherT.ClaimResponse)) return false;
      if( !DeepComparable.IsExactly(OutcomeElement, otherT.OutcomeElement)) return false;
      if( !DeepComparable.IsExactly(Decision, otherT.Decision)) return false;
      if( !DeepComparable.IsExactly(DispositionElement, otherT.DispositionElement)) return false;
      if( !DeepComparable.IsExactly(PreAuthRefElement, otherT.PreAuthRefElement)) return false;
      if( !DeepComparable.IsExactly(PreAuthRefPeriod, otherT.PreAuthRefPeriod)) return false;
      if( !DeepComparable.IsExactly(DiagnosisRelatedGroup, otherT.DiagnosisRelatedGroup)) return false;
      if( !DeepComparable.IsExactly(CareTeam, otherT.CareTeam)) return false;
      if( !DeepComparable.IsExactly(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.IsExactly(Diagnosis, otherT.Diagnosis)) return false;
      if( !DeepComparable.IsExactly(Procedure, otherT.Procedure)) return false;
      if( !DeepComparable.IsExactly(PrecedenceElement, otherT.PrecedenceElement)) return false;
      if( !DeepComparable.IsExactly(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.IsExactly(Accident, otherT.Accident)) return false;
      if( !DeepComparable.IsExactly(PatientPaid, otherT.PatientPaid)) return false;
      if( !DeepComparable.IsExactly(Item, otherT.Item)) return false;
      if( !DeepComparable.IsExactly(AddItem, otherT.AddItem)) return false;
      if( !DeepComparable.IsExactly(Adjudication, otherT.Adjudication)) return false;
      if( !DeepComparable.IsExactly(Total, otherT.Total)) return false;
      if( !DeepComparable.IsExactly(Payment, otherT.Payment)) return false;
      if( !DeepComparable.IsExactly(FormCode, otherT.FormCode)) return false;
      if( !DeepComparable.IsExactly(Form, otherT.Form)) return false;
      if( !DeepComparable.IsExactly(ProcessNote, otherT.ProcessNote)) return false;
      if( !DeepComparable.IsExactly(BenefitPeriod, otherT.BenefitPeriod)) return false;
      if( !DeepComparable.IsExactly(BenefitBalance, otherT.BenefitBalance)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in TraceNumber) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (Type != null) yield return Type;
        if (SubType != null) yield return SubType;
        if (UseElement != null) yield return UseElement;
        if (Patient != null) yield return Patient;
        if (BillablePeriod != null) yield return BillablePeriod;
        if (CreatedElement != null) yield return CreatedElement;
        if (Enterer != null) yield return Enterer;
        if (Insurer != null) yield return Insurer;
        if (Provider != null) yield return Provider;
        if (Priority != null) yield return Priority;
        if (FundsReserveRequested != null) yield return FundsReserveRequested;
        if (FundsReserve != null) yield return FundsReserve;
        foreach (var elem in Related) { if (elem != null) yield return elem; }
        if (Prescription != null) yield return Prescription;
        if (OriginalPrescription != null) yield return OriginalPrescription;
        foreach (var elem in Event) { if (elem != null) yield return elem; }
        if (Payee != null) yield return Payee;
        if (Referral != null) yield return Referral;
        foreach (var elem in Encounter) { if (elem != null) yield return elem; }
        if (Facility != null) yield return Facility;
        if (Claim != null) yield return Claim;
        if (ClaimResponse != null) yield return ClaimResponse;
        if (OutcomeElement != null) yield return OutcomeElement;
        if (Decision != null) yield return Decision;
        if (DispositionElement != null) yield return DispositionElement;
        foreach (var elem in PreAuthRefElement) { if (elem != null) yield return elem; }
        foreach (var elem in PreAuthRefPeriod) { if (elem != null) yield return elem; }
        if (DiagnosisRelatedGroup != null) yield return DiagnosisRelatedGroup;
        foreach (var elem in CareTeam) { if (elem != null) yield return elem; }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return elem; }
        foreach (var elem in Diagnosis) { if (elem != null) yield return elem; }
        foreach (var elem in Procedure) { if (elem != null) yield return elem; }
        if (PrecedenceElement != null) yield return PrecedenceElement;
        foreach (var elem in Insurance) { if (elem != null) yield return elem; }
        if (Accident != null) yield return Accident;
        if (PatientPaid != null) yield return PatientPaid;
        foreach (var elem in Item) { if (elem != null) yield return elem; }
        foreach (var elem in AddItem) { if (elem != null) yield return elem; }
        foreach (var elem in Adjudication) { if (elem != null) yield return elem; }
        foreach (var elem in Total) { if (elem != null) yield return elem; }
        if (Payment != null) yield return Payment;
        if (FormCode != null) yield return FormCode;
        if (Form != null) yield return Form;
        foreach (var elem in ProcessNote) { if (elem != null) yield return elem; }
        if (BenefitPeriod != null) yield return BenefitPeriod;
        foreach (var elem in BenefitBalance) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in TraceNumber) { if (elem != null) yield return new ElementValue("traceNumber", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Type != null) yield return new ElementValue("type", Type);
        if (SubType != null) yield return new ElementValue("subType", SubType);
        if (UseElement != null) yield return new ElementValue("use", UseElement);
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (BillablePeriod != null) yield return new ElementValue("billablePeriod", BillablePeriod);
        if (CreatedElement != null) yield return new ElementValue("created", CreatedElement);
        if (Enterer != null) yield return new ElementValue("enterer", Enterer);
        if (Insurer != null) yield return new ElementValue("insurer", Insurer);
        if (Provider != null) yield return new ElementValue("provider", Provider);
        if (Priority != null) yield return new ElementValue("priority", Priority);
        if (FundsReserveRequested != null) yield return new ElementValue("fundsReserveRequested", FundsReserveRequested);
        if (FundsReserve != null) yield return new ElementValue("fundsReserve", FundsReserve);
        foreach (var elem in Related) { if (elem != null) yield return new ElementValue("related", elem); }
        if (Prescription != null) yield return new ElementValue("prescription", Prescription);
        if (OriginalPrescription != null) yield return new ElementValue("originalPrescription", OriginalPrescription);
        foreach (var elem in Event) { if (elem != null) yield return new ElementValue("event", elem); }
        if (Payee != null) yield return new ElementValue("payee", Payee);
        if (Referral != null) yield return new ElementValue("referral", Referral);
        foreach (var elem in Encounter) { if (elem != null) yield return new ElementValue("encounter", elem); }
        if (Facility != null) yield return new ElementValue("facility", Facility);
        if (Claim != null) yield return new ElementValue("claim", Claim);
        if (ClaimResponse != null) yield return new ElementValue("claimResponse", ClaimResponse);
        if (OutcomeElement != null) yield return new ElementValue("outcome", OutcomeElement);
        if (Decision != null) yield return new ElementValue("decision", Decision);
        if (DispositionElement != null) yield return new ElementValue("disposition", DispositionElement);
        foreach (var elem in PreAuthRefElement) { if (elem != null) yield return new ElementValue("preAuthRef", elem); }
        foreach (var elem in PreAuthRefPeriod) { if (elem != null) yield return new ElementValue("preAuthRefPeriod", elem); }
        if (DiagnosisRelatedGroup != null) yield return new ElementValue("diagnosisRelatedGroup", DiagnosisRelatedGroup);
        foreach (var elem in CareTeam) { if (elem != null) yield return new ElementValue("careTeam", elem); }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return new ElementValue("supportingInfo", elem); }
        foreach (var elem in Diagnosis) { if (elem != null) yield return new ElementValue("diagnosis", elem); }
        foreach (var elem in Procedure) { if (elem != null) yield return new ElementValue("procedure", elem); }
        if (PrecedenceElement != null) yield return new ElementValue("precedence", PrecedenceElement);
        foreach (var elem in Insurance) { if (elem != null) yield return new ElementValue("insurance", elem); }
        if (Accident != null) yield return new ElementValue("accident", Accident);
        if (PatientPaid != null) yield return new ElementValue("patientPaid", PatientPaid);
        foreach (var elem in Item) { if (elem != null) yield return new ElementValue("item", elem); }
        foreach (var elem in AddItem) { if (elem != null) yield return new ElementValue("addItem", elem); }
        foreach (var elem in Adjudication) { if (elem != null) yield return new ElementValue("adjudication", elem); }
        foreach (var elem in Total) { if (elem != null) yield return new ElementValue("total", elem); }
        if (Payment != null) yield return new ElementValue("payment", Payment);
        if (FormCode != null) yield return new ElementValue("formCode", FormCode);
        if (Form != null) yield return new ElementValue("form", Form);
        foreach (var elem in ProcessNote) { if (elem != null) yield return new ElementValue("processNote", elem); }
        if (BenefitPeriod != null) yield return new ElementValue("benefitPeriod", BenefitPeriod);
        foreach (var elem in BenefitBalance) { if (elem != null) yield return new ElementValue("benefitBalance", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "traceNumber":
          value = TraceNumber;
          return TraceNumber?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "type":
          value = Type;
          return Type is not null;
        case "subType":
          value = SubType;
          return SubType is not null;
        case "use":
          value = UseElement;
          return UseElement is not null;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "billablePeriod":
          value = BillablePeriod;
          return BillablePeriod is not null;
        case "created":
          value = CreatedElement;
          return CreatedElement is not null;
        case "enterer":
          value = Enterer;
          return Enterer is not null;
        case "insurer":
          value = Insurer;
          return Insurer is not null;
        case "provider":
          value = Provider;
          return Provider is not null;
        case "priority":
          value = Priority;
          return Priority is not null;
        case "fundsReserveRequested":
          value = FundsReserveRequested;
          return FundsReserveRequested is not null;
        case "fundsReserve":
          value = FundsReserve;
          return FundsReserve is not null;
        case "related":
          value = Related;
          return Related?.Any() == true;
        case "prescription":
          value = Prescription;
          return Prescription is not null;
        case "originalPrescription":
          value = OriginalPrescription;
          return OriginalPrescription is not null;
        case "event":
          value = Event;
          return Event?.Any() == true;
        case "payee":
          value = Payee;
          return Payee is not null;
        case "referral":
          value = Referral;
          return Referral is not null;
        case "encounter":
          value = Encounter;
          return Encounter?.Any() == true;
        case "facility":
          value = Facility;
          return Facility is not null;
        case "claim":
          value = Claim;
          return Claim is not null;
        case "claimResponse":
          value = ClaimResponse;
          return ClaimResponse is not null;
        case "outcome":
          value = OutcomeElement;
          return OutcomeElement is not null;
        case "decision":
          value = Decision;
          return Decision is not null;
        case "disposition":
          value = DispositionElement;
          return DispositionElement is not null;
        case "preAuthRef":
          value = PreAuthRefElement;
          return PreAuthRefElement?.Any() == true;
        case "preAuthRefPeriod":
          value = PreAuthRefPeriod;
          return PreAuthRefPeriod?.Any() == true;
        case "diagnosisRelatedGroup":
          value = DiagnosisRelatedGroup;
          return DiagnosisRelatedGroup is not null;
        case "careTeam":
          value = CareTeam;
          return CareTeam?.Any() == true;
        case "supportingInfo":
          value = SupportingInfo;
          return SupportingInfo?.Any() == true;
        case "diagnosis":
          value = Diagnosis;
          return Diagnosis?.Any() == true;
        case "procedure":
          value = Procedure;
          return Procedure?.Any() == true;
        case "precedence":
          value = PrecedenceElement;
          return PrecedenceElement is not null;
        case "insurance":
          value = Insurance;
          return Insurance?.Any() == true;
        case "accident":
          value = Accident;
          return Accident is not null;
        case "patientPaid":
          value = PatientPaid;
          return PatientPaid is not null;
        case "item":
          value = Item;
          return Item?.Any() == true;
        case "addItem":
          value = AddItem;
          return AddItem?.Any() == true;
        case "adjudication":
          value = Adjudication;
          return Adjudication?.Any() == true;
        case "total":
          value = Total;
          return Total?.Any() == true;
        case "payment":
          value = Payment;
          return Payment is not null;
        case "formCode":
          value = FormCode;
          return FormCode is not null;
        case "form":
          value = Form;
          return Form is not null;
        case "processNote":
          value = ProcessNote;
          return ProcessNote?.Any() == true;
        case "benefitPeriod":
          value = BenefitPeriod;
          return BenefitPeriod is not null;
        case "benefitBalance":
          value = BenefitBalance;
          return BenefitBalance?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (TraceNumber?.Any() == true) yield return new KeyValuePair<string,object>("traceNumber",TraceNumber);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (SubType is not null) yield return new KeyValuePair<string,object>("subType",SubType);
      if (UseElement is not null) yield return new KeyValuePair<string,object>("use",UseElement);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (BillablePeriod is not null) yield return new KeyValuePair<string,object>("billablePeriod",BillablePeriod);
      if (CreatedElement is not null) yield return new KeyValuePair<string,object>("created",CreatedElement);
      if (Enterer is not null) yield return new KeyValuePair<string,object>("enterer",Enterer);
      if (Insurer is not null) yield return new KeyValuePair<string,object>("insurer",Insurer);
      if (Provider is not null) yield return new KeyValuePair<string,object>("provider",Provider);
      if (Priority is not null) yield return new KeyValuePair<string,object>("priority",Priority);
      if (FundsReserveRequested is not null) yield return new KeyValuePair<string,object>("fundsReserveRequested",FundsReserveRequested);
      if (FundsReserve is not null) yield return new KeyValuePair<string,object>("fundsReserve",FundsReserve);
      if (Related?.Any() == true) yield return new KeyValuePair<string,object>("related",Related);
      if (Prescription is not null) yield return new KeyValuePair<string,object>("prescription",Prescription);
      if (OriginalPrescription is not null) yield return new KeyValuePair<string,object>("originalPrescription",OriginalPrescription);
      if (Event?.Any() == true) yield return new KeyValuePair<string,object>("event",Event);
      if (Payee is not null) yield return new KeyValuePair<string,object>("payee",Payee);
      if (Referral is not null) yield return new KeyValuePair<string,object>("referral",Referral);
      if (Encounter?.Any() == true) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (Facility is not null) yield return new KeyValuePair<string,object>("facility",Facility);
      if (Claim is not null) yield return new KeyValuePair<string,object>("claim",Claim);
      if (ClaimResponse is not null) yield return new KeyValuePair<string,object>("claimResponse",ClaimResponse);
      if (OutcomeElement is not null) yield return new KeyValuePair<string,object>("outcome",OutcomeElement);
      if (Decision is not null) yield return new KeyValuePair<string,object>("decision",Decision);
      if (DispositionElement is not null) yield return new KeyValuePair<string,object>("disposition",DispositionElement);
      if (PreAuthRefElement?.Any() == true) yield return new KeyValuePair<string,object>("preAuthRef",PreAuthRefElement);
      if (PreAuthRefPeriod?.Any() == true) yield return new KeyValuePair<string,object>("preAuthRefPeriod",PreAuthRefPeriod);
      if (DiagnosisRelatedGroup is not null) yield return new KeyValuePair<string,object>("diagnosisRelatedGroup",DiagnosisRelatedGroup);
      if (CareTeam?.Any() == true) yield return new KeyValuePair<string,object>("careTeam",CareTeam);
      if (SupportingInfo?.Any() == true) yield return new KeyValuePair<string,object>("supportingInfo",SupportingInfo);
      if (Diagnosis?.Any() == true) yield return new KeyValuePair<string,object>("diagnosis",Diagnosis);
      if (Procedure?.Any() == true) yield return new KeyValuePair<string,object>("procedure",Procedure);
      if (PrecedenceElement is not null) yield return new KeyValuePair<string,object>("precedence",PrecedenceElement);
      if (Insurance?.Any() == true) yield return new KeyValuePair<string,object>("insurance",Insurance);
      if (Accident is not null) yield return new KeyValuePair<string,object>("accident",Accident);
      if (PatientPaid is not null) yield return new KeyValuePair<string,object>("patientPaid",PatientPaid);
      if (Item?.Any() == true) yield return new KeyValuePair<string,object>("item",Item);
      if (AddItem?.Any() == true) yield return new KeyValuePair<string,object>("addItem",AddItem);
      if (Adjudication?.Any() == true) yield return new KeyValuePair<string,object>("adjudication",Adjudication);
      if (Total?.Any() == true) yield return new KeyValuePair<string,object>("total",Total);
      if (Payment is not null) yield return new KeyValuePair<string,object>("payment",Payment);
      if (FormCode is not null) yield return new KeyValuePair<string,object>("formCode",FormCode);
      if (Form is not null) yield return new KeyValuePair<string,object>("form",Form);
      if (ProcessNote?.Any() == true) yield return new KeyValuePair<string,object>("processNote",ProcessNote);
      if (BenefitPeriod is not null) yield return new KeyValuePair<string,object>("benefitPeriod",BenefitPeriod);
      if (BenefitBalance?.Any() == true) yield return new KeyValuePair<string,object>("benefitBalance",BenefitBalance);
    }

  }

}

// end of file

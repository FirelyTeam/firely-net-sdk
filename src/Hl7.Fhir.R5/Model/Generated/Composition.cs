// <auto-generated/>
// Contents of: hl7.fhir.r5.expansions@5.0.0, hl7.fhir.r5.core@5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;
using SystemPrimitive = Hl7.Fhir.ElementModel.Types;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A set of resources composed into a single coherent clinical statement with clinical attestation
  /// </summary>
  /// <remarks>
  /// A set of healthcare-related information that is assembled together into a single logical package that provides a single coherent statement of meaning, establishes its own context and that has clinical attestation with regard to who is making the statement. A Composition defines the structure and narrative content necessary for a document. However, a Composition alone does not constitute a document. Rather, the Composition must be the first entry in a Bundle where Bundle.type=document, and any other resources referenced from Composition must be included as subsequent entries in the Bundle (for example Patient, Practitioner, Encounter, etc.).
  /// While the focus of this specification is on patient-specific clinical statements, this resource can also apply to other healthcare-related statements such as study protocol designs, healthcare invoices and other activities that are not necessarily patient-specific or clinical.
  /// </remarks>
  [Serializable]
  [DataContract]
  [FhirType("Composition","http://hl7.org/fhir/StructureDefinition/Composition")]
  public partial class Composition : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Composition"; } }

    /// <summary>
    /// Attests to accuracy of composition
    /// </summary>
    /// <remarks>
    /// A participant who has attested to the accuracy of the composition/document.
    /// Only list each attester once.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("Composition.attester", IsBackboneType=true)]
    public partial class AttesterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Composition.attester"; } }

      /// <summary>
      /// personal | professional | legal | official
      /// </summary>
      [FhirElement("mode", Order=40)]
      [Binding("CompositionAttestationMode")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Mode
      {
        get { return _Mode; }
        set { _Mode = value; OnPropertyChanged("Mode"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Mode;

      /// <summary>
      /// When the composition was attested
      /// </summary>
      [FhirElement("time", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime TimeElement
      {
        get { return _TimeElement; }
        set { _TimeElement = value; OnPropertyChanged("TimeElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _TimeElement;

      /// <summary>
      /// When the composition was attested
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Time
      {
        get { return TimeElement != null ? TimeElement.Value : null; }
        set
        {
          if (value == null)
            TimeElement = null;
          else
            TimeElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Time");
        }
      }

      /// <summary>
      /// Who attested the composition
      /// </summary>
      [FhirElement("party", Order=60, FiveWs="FiveWs.witness")]
      [CLSCompliant(false)]
      [References("Patient","RelatedPerson","Practitioner","PractitionerRole","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AttesterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Mode != null) dest.Mode = (Hl7.Fhir.Model.CodeableConcept)Mode.DeepCopy();
        if(TimeElement != null) dest.TimeElement = (Hl7.Fhir.Model.FhirDateTime)TimeElement.DeepCopy();
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AttesterComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AttesterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Mode, otherT.Mode)) return false;
        if( !DeepComparable.Matches(TimeElement, otherT.TimeElement)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AttesterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Mode, otherT.Mode)) return false;
        if( !DeepComparable.IsExactly(TimeElement, otherT.TimeElement)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Mode != null) yield return Mode;
          if (TimeElement != null) yield return TimeElement;
          if (Party != null) yield return Party;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Mode != null) yield return new ElementValue("mode", Mode);
          if (TimeElement != null) yield return new ElementValue("time", TimeElement);
          if (Party != null) yield return new ElementValue("party", Party);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = Mode;
            return Mode is not null;
          case "time":
            value = TimeElement;
            return TimeElement is not null;
          case "party":
            value = Party;
            return Party is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override Base SetValue(string key, object value)
      {
        switch (key)
        {
          case "mode":
            Mode = (Hl7.Fhir.Model.CodeableConcept)value;
            return this;
          case "time":
            TimeElement = (Hl7.Fhir.Model.FhirDateTime)value;
            return this;
          case "party":
            Party = (Hl7.Fhir.Model.ResourceReference)value;
            return this;
          default:
            return base.SetValue(key, value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Mode is not null) yield return new KeyValuePair<string,object>("mode",Mode);
        if (TimeElement is not null) yield return new KeyValuePair<string,object>("time",TimeElement);
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
      }

    }

    /// <summary>
    /// The clinical service(s) being documented
    /// </summary>
    /// <remarks>
    /// The clinical service, such as a colonoscopy or an appendectomy, being documented.
    /// The event needs to be consistent with the type element, though can provide further information if desired.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("Composition.event", IsBackboneType=true)]
    public partial class EventComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Composition.event"; } }

      /// <summary>
      /// The period covered by the documentation
      /// </summary>
      [FhirElement("period", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      /// <summary>
      /// The event(s) being documented, as code(s), reference(s), or both
      /// </summary>
      [FhirElement("detail", InSummary=true, Order=50)]
      [Binding("DocumentEventType")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.CodeableReference>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EventComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        if(Detail.Any()) dest.Detail = new List<Hl7.Fhir.Model.CodeableReference>(Detail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EventComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EventComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EventComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Period != null) yield return Period;
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Period != null) yield return new ElementValue("period", Period);
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "period":
            value = Period;
            return Period is not null;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override Base SetValue(string key, object value)
      {
        switch (key)
        {
          case "period":
            Period = (Hl7.Fhir.Model.Period)value;
            return this;
          case "detail":
            Detail = (List<Hl7.Fhir.Model.CodeableReference>)value;
            return this;
          default:
            return base.SetValue(key, value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// Composition is broken into sections
    /// </summary>
    /// <remarks>
    /// The root of the sections that make up the composition.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("Composition.section", IsBackboneType=true)]
    public partial class SectionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Composition.section"; } }

      /// <summary>
      /// Label for section (e.g. for ToC)
      /// </summary>
      [FhirElement("title", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for section (e.g. for ToC)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Classification of section (recommended)
      /// </summary>
      [FhirElement("code", Order=50)]
      [Binding("CompositionSectionType")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Who and/or what authored the section
      /// </summary>
      [FhirElement("author", Order=60, FiveWs="FiveWs.author")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Device","Patient","RelatedPerson","Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Author
      {
        get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ResourceReference>(); return _Author; }
        set { _Author = value; OnPropertyChanged("Author"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Author;

      /// <summary>
      /// Who/what the section is about, when it is not about the subject of composition
      /// </summary>
      [FhirElement("focus", Order=70)]
      [CLSCompliant(false)]
      [References("Resource")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Focus
      {
        get { return _Focus; }
        set { _Focus = value; OnPropertyChanged("Focus"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Focus;

      /// <summary>
      /// Text summary of the section, for human interpretation
      /// </summary>
      [FhirElement("text", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Narrative Text
      {
        get { return _Text; }
        set { _Text = value; OnPropertyChanged("Text"); }
      }

      private Hl7.Fhir.Model.Narrative _Text;

      /// <summary>
      /// Order of section entries
      /// </summary>
      [FhirElement("orderedBy", Order=90)]
      [Binding("SectionEntryOrder")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept OrderedBy
      {
        get { return _OrderedBy; }
        set { _OrderedBy = value; OnPropertyChanged("OrderedBy"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _OrderedBy;

      /// <summary>
      /// A reference to data that supports this section
      /// </summary>
      [FhirElement("entry", Order=100)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Entry
      {
        get { if(_Entry==null) _Entry = new List<Hl7.Fhir.Model.ResourceReference>(); return _Entry; }
        set { _Entry = value; OnPropertyChanged("Entry"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Entry;

      /// <summary>
      /// Why the section is empty
      /// </summary>
      [FhirElement("emptyReason", Order=110)]
      [Binding("SectionEmptyReason")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept EmptyReason
      {
        get { return _EmptyReason; }
        set { _EmptyReason = value; OnPropertyChanged("EmptyReason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _EmptyReason;

      /// <summary>
      /// Nested Section
      /// </summary>
      [FhirElement("section", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Composition.SectionComponent> Section
      {
        get { if(_Section==null) _Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(); return _Section; }
        set { _Section = value; OnPropertyChanged("Section"); }
      }

      private List<Hl7.Fhir.Model.Composition.SectionComponent> _Section;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SectionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Author.Any()) dest.Author = new List<Hl7.Fhir.Model.ResourceReference>(Author.DeepCopy());
        if(Focus != null) dest.Focus = (Hl7.Fhir.Model.ResourceReference)Focus.DeepCopy();
        if(Text != null) dest.Text = (Hl7.Fhir.Model.Narrative)Text.DeepCopy();
        if(OrderedBy != null) dest.OrderedBy = (Hl7.Fhir.Model.CodeableConcept)OrderedBy.DeepCopy();
        if(Entry.Any()) dest.Entry = new List<Hl7.Fhir.Model.ResourceReference>(Entry.DeepCopy());
        if(EmptyReason != null) dest.EmptyReason = (Hl7.Fhir.Model.CodeableConcept)EmptyReason.DeepCopy();
        if(Section.Any()) dest.Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(Section.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SectionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SectionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Author, otherT.Author)) return false;
        if( !DeepComparable.Matches(Focus, otherT.Focus)) return false;
        if( !DeepComparable.Matches(Text, otherT.Text)) return false;
        if( !DeepComparable.Matches(OrderedBy, otherT.OrderedBy)) return false;
        if( !DeepComparable.Matches(Entry, otherT.Entry)) return false;
        if( !DeepComparable.Matches(EmptyReason, otherT.EmptyReason)) return false;
        if( !DeepComparable.Matches(Section, otherT.Section)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SectionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
        if( !DeepComparable.IsExactly(Focus, otherT.Focus)) return false;
        if( !DeepComparable.IsExactly(Text, otherT.Text)) return false;
        if( !DeepComparable.IsExactly(OrderedBy, otherT.OrderedBy)) return false;
        if( !DeepComparable.IsExactly(Entry, otherT.Entry)) return false;
        if( !DeepComparable.IsExactly(EmptyReason, otherT.EmptyReason)) return false;
        if( !DeepComparable.IsExactly(Section, otherT.Section)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TitleElement != null) yield return TitleElement;
          if (Code != null) yield return Code;
          foreach (var elem in Author) { if (elem != null) yield return elem; }
          if (Focus != null) yield return Focus;
          if (Text != null) yield return Text;
          if (OrderedBy != null) yield return OrderedBy;
          foreach (var elem in Entry) { if (elem != null) yield return elem; }
          if (EmptyReason != null) yield return EmptyReason;
          foreach (var elem in Section) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
          if (Focus != null) yield return new ElementValue("focus", Focus);
          if (Text != null) yield return new ElementValue("text", Text);
          if (OrderedBy != null) yield return new ElementValue("orderedBy", OrderedBy);
          foreach (var elem in Entry) { if (elem != null) yield return new ElementValue("entry", elem); }
          if (EmptyReason != null) yield return new ElementValue("emptyReason", EmptyReason);
          foreach (var elem in Section) { if (elem != null) yield return new ElementValue("section", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "author":
            value = Author;
            return Author?.Any() == true;
          case "focus":
            value = Focus;
            return Focus is not null;
          case "text":
            value = Text;
            return Text is not null;
          case "orderedBy":
            value = OrderedBy;
            return OrderedBy is not null;
          case "entry":
            value = Entry;
            return Entry?.Any() == true;
          case "emptyReason":
            value = EmptyReason;
            return EmptyReason is not null;
          case "section":
            value = Section;
            return Section?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override Base SetValue(string key, object value)
      {
        switch (key)
        {
          case "title":
            TitleElement = (Hl7.Fhir.Model.FhirString)value;
            return this;
          case "code":
            Code = (Hl7.Fhir.Model.CodeableConcept)value;
            return this;
          case "author":
            Author = (List<Hl7.Fhir.Model.ResourceReference>)value;
            return this;
          case "focus":
            Focus = (Hl7.Fhir.Model.ResourceReference)value;
            return this;
          case "text":
            Text = (Hl7.Fhir.Model.Narrative)value;
            return this;
          case "orderedBy":
            OrderedBy = (Hl7.Fhir.Model.CodeableConcept)value;
            return this;
          case "entry":
            Entry = (List<Hl7.Fhir.Model.ResourceReference>)value;
            return this;
          case "emptyReason":
            EmptyReason = (Hl7.Fhir.Model.CodeableConcept)value;
            return this;
          case "section":
            Section = (List<Hl7.Fhir.Model.Composition.SectionComponent>)value;
            return this;
          default:
            return base.SetValue(key, value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
        if (Focus is not null) yield return new KeyValuePair<string,object>("focus",Focus);
        if (Text is not null) yield return new KeyValuePair<string,object>("text",Text);
        if (OrderedBy is not null) yield return new KeyValuePair<string,object>("orderedBy",OrderedBy);
        if (Entry?.Any() == true) yield return new KeyValuePair<string,object>("entry",Entry);
        if (EmptyReason is not null) yield return new KeyValuePair<string,object>("emptyReason",EmptyReason);
        if (Section?.Any() == true) yield return new KeyValuePair<string,object>("section",Section);
      }

    }

    /// <summary>
    /// Canonical identifier for this Composition, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this Composition, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Version-independent identifier for the Composition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// An explicitly assigned identifer of a variation of the content in the Composition
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// An explicitly assigned identifer of a variation of the content in the Composition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=120, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("CompositionStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.CompositionStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.CompositionStatus> _StatusElement;

    /// <summary>
    /// registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.CompositionStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.CompositionStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Kind of composition (LOINC if possible)
    /// </summary>
    [FhirElement("type", InSummary=true, Order=130, FiveWs="FiveWs.class")]
    [Binding("DocumentType")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// Categorization of Composition
    /// </summary>
    [FhirElement("category", InSummary=true, Order=140, FiveWs="FiveWs.class")]
    [Binding("DocumentCategory")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Who and/or what the composition is about
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=150, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Subject
    {
      get { if(_Subject==null) _Subject = new List<Hl7.Fhir.Model.ResourceReference>(); return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Subject;

    /// <summary>
    /// Context of the Composition
    /// </summary>
    [FhirElement("encounter", InSummary=true, Order=160, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Composition editing time
    /// </summary>
    [FhirElement("date", InSummary=true, Order=170, FiveWs="FiveWs.done[x]")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Composition editing time
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Who and/or what authored the composition
    /// </summary>
    [FhirElement("author", InSummary=true, Order=190, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Device","Patient","RelatedPerson","Organization")]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ResourceReference>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Author;

    /// <summary>
    /// Name for this Composition (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this Composition (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Human Readable name/title
    /// </summary>
    [FhirElement("title", InSummary=true, Order=210)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Human Readable name/title
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// For any additional notes
    /// </summary>
    [FhirElement("note", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Attests to accuracy of composition
    /// </summary>
    [FhirElement("attester", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Composition.AttesterComponent> Attester
    {
      get { if(_Attester==null) _Attester = new List<Hl7.Fhir.Model.Composition.AttesterComponent>(); return _Attester; }
      set { _Attester = value; OnPropertyChanged("Attester"); }
    }

    private List<Hl7.Fhir.Model.Composition.AttesterComponent> _Attester;

    /// <summary>
    /// Organization which maintains the composition
    /// </summary>
    [FhirElement("custodian", InSummary=true, Order=240)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Custodian
    {
      get { return _Custodian; }
      set { _Custodian = value; OnPropertyChanged("Custodian"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Custodian;

    /// <summary>
    /// Relationships to other compositions/documents
    /// </summary>
    [FhirElement("relatesTo", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatesTo
    {
      get { if(_RelatesTo==null) _RelatesTo = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatesTo; }
      set { _RelatesTo = value; OnPropertyChanged("RelatesTo"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatesTo;

    /// <summary>
    /// The clinical service(s) being documented
    /// </summary>
    [FhirElement("event", InSummary=true, Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Composition.EventComponent> Event
    {
      get { if(_Event==null) _Event = new List<Hl7.Fhir.Model.Composition.EventComponent>(); return _Event; }
      set { _Event = value; OnPropertyChanged("Event"); }
    }

    private List<Hl7.Fhir.Model.Composition.EventComponent> _Event;

    /// <summary>
    /// Composition is broken into sections
    /// </summary>
    [FhirElement("section", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Composition.SectionComponent> Section
    {
      get { if(_Section==null) _Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(); return _Section; }
      set { _Section = value; OnPropertyChanged("Section"); }
    }

    private List<Hl7.Fhir.Model.Composition.SectionComponent> _Section;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Composition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier.Any()) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.CompositionStatus>)StatusElement.DeepCopy();
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(Category.Any()) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Subject.Any()) dest.Subject = new List<Hl7.Fhir.Model.ResourceReference>(Subject.DeepCopy());
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(UseContext.Any()) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Author.Any()) dest.Author = new List<Hl7.Fhir.Model.ResourceReference>(Author.DeepCopy());
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(Note.Any()) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Attester.Any()) dest.Attester = new List<Hl7.Fhir.Model.Composition.AttesterComponent>(Attester.DeepCopy());
      if(Custodian != null) dest.Custodian = (Hl7.Fhir.Model.ResourceReference)Custodian.DeepCopy();
      if(RelatesTo.Any()) dest.RelatesTo = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatesTo.DeepCopy());
      if(Event.Any()) dest.Event = new List<Hl7.Fhir.Model.Composition.EventComponent>(Event.DeepCopy());
      if(Section.Any()) dest.Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(Section.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Composition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Composition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Attester, otherT.Attester)) return false;
      if( !DeepComparable.Matches(Custodian, otherT.Custodian)) return false;
      if( !DeepComparable.Matches(RelatesTo, otherT.RelatesTo)) return false;
      if( !DeepComparable.Matches(Event, otherT.Event)) return false;
      if( !DeepComparable.Matches(Section, otherT.Section)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Composition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Attester, otherT.Attester)) return false;
      if( !DeepComparable.IsExactly(Custodian, otherT.Custodian)) return false;
      if( !DeepComparable.IsExactly(RelatesTo, otherT.RelatesTo)) return false;
      if( !DeepComparable.IsExactly(Event, otherT.Event)) return false;
      if( !DeepComparable.IsExactly(Section, otherT.Section)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (StatusElement != null) yield return StatusElement;
        if (Type != null) yield return Type;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        foreach (var elem in Subject) { if (elem != null) yield return elem; }
        if (Encounter != null) yield return Encounter;
        if (DateElement != null) yield return DateElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Attester) { if (elem != null) yield return elem; }
        if (Custodian != null) yield return Custodian;
        foreach (var elem in RelatesTo) { if (elem != null) yield return elem; }
        foreach (var elem in Event) { if (elem != null) yield return elem; }
        foreach (var elem in Section) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Type != null) yield return new ElementValue("type", Type);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        foreach (var elem in Subject) { if (elem != null) yield return new ElementValue("subject", elem); }
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Attester) { if (elem != null) yield return new ElementValue("attester", elem); }
        if (Custodian != null) yield return new ElementValue("custodian", Custodian);
        foreach (var elem in RelatesTo) { if (elem != null) yield return new ElementValue("relatesTo", elem); }
        foreach (var elem in Event) { if (elem != null) yield return new ElementValue("event", elem); }
        foreach (var elem in Section) { if (elem != null) yield return new ElementValue("section", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "type":
          value = Type;
          return Type is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "subject":
          value = Subject;
          return Subject?.Any() == true;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "attester":
          value = Attester;
          return Attester?.Any() == true;
        case "custodian":
          value = Custodian;
          return Custodian is not null;
        case "relatesTo":
          value = RelatesTo;
          return RelatesTo?.Any() == true;
        case "event":
          value = Event;
          return Event?.Any() == true;
        case "section":
          value = Section;
          return Section?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override Base SetValue(string key, object value)
    {
      switch (key)
      {
        case "url":
          UrlElement = (Hl7.Fhir.Model.FhirUri)value;
          return this;
        case "identifier":
          Identifier = (List<Hl7.Fhir.Model.Identifier>)value;
          return this;
        case "version":
          VersionElement = (Hl7.Fhir.Model.FhirString)value;
          return this;
        case "status":
          StatusElement = (Code<Hl7.Fhir.Model.CompositionStatus>)value;
          return this;
        case "type":
          Type = (Hl7.Fhir.Model.CodeableConcept)value;
          return this;
        case "category":
          Category = (List<Hl7.Fhir.Model.CodeableConcept>)value;
          return this;
        case "subject":
          Subject = (List<Hl7.Fhir.Model.ResourceReference>)value;
          return this;
        case "encounter":
          Encounter = (Hl7.Fhir.Model.ResourceReference)value;
          return this;
        case "date":
          DateElement = (Hl7.Fhir.Model.FhirDateTime)value;
          return this;
        case "useContext":
          UseContext = (List<Hl7.Fhir.Model.UsageContext>)value;
          return this;
        case "author":
          Author = (List<Hl7.Fhir.Model.ResourceReference>)value;
          return this;
        case "name":
          NameElement = (Hl7.Fhir.Model.FhirString)value;
          return this;
        case "title":
          TitleElement = (Hl7.Fhir.Model.FhirString)value;
          return this;
        case "note":
          Note = (List<Hl7.Fhir.Model.Annotation>)value;
          return this;
        case "attester":
          Attester = (List<Hl7.Fhir.Model.Composition.AttesterComponent>)value;
          return this;
        case "custodian":
          Custodian = (Hl7.Fhir.Model.ResourceReference)value;
          return this;
        case "relatesTo":
          RelatesTo = (List<Hl7.Fhir.Model.RelatedArtifact>)value;
          return this;
        case "event":
          Event = (List<Hl7.Fhir.Model.Composition.EventComponent>)value;
          return this;
        case "section":
          Section = (List<Hl7.Fhir.Model.Composition.SectionComponent>)value;
          return this;
        default:
          return base.SetValue(key, value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Subject?.Any() == true) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Attester?.Any() == true) yield return new KeyValuePair<string,object>("attester",Attester);
      if (Custodian is not null) yield return new KeyValuePair<string,object>("custodian",Custodian);
      if (RelatesTo?.Any() == true) yield return new KeyValuePair<string,object>("relatesTo",RelatesTo);
      if (Event?.Any() == true) yield return new KeyValuePair<string,object>("event",Event);
      if (Section?.Any() == true) yield return new KeyValuePair<string,object>("section",Section);
    }

  }

}

// end of file

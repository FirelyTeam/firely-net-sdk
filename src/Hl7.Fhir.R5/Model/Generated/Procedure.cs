// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// An action that is being or was performed on an individual or entity
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Procedure","http://hl7.org/fhir/StructureDefinition/Procedure", IsResource=true)]
  public partial class Procedure : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Procedure"; } }

    /// <summary>
    /// The people who performed the procedure
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Procedure#Performer", IsNestedType=true)]
    public partial class PerformerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Procedure#Performer"; } }

      /// <summary>
      /// Type of performance
      /// </summary>
      [FhirElement("function", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Function
      {
        get { return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Function;

      /// <summary>
      /// Who performed the procedure
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=50, FiveWs="FiveWs.actor")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","Patient","RelatedPerson","Device","CareTeam","HealthcareService")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      /// <summary>
      /// Organization the device or practitioner was acting for
      /// </summary>
      [FhirElement("onBehalfOf", Order=60)]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference OnBehalfOf
      {
        get { return _OnBehalfOf; }
        set { _OnBehalfOf = value; OnPropertyChanged("OnBehalfOf"); }
      }

      private Hl7.Fhir.Model.ResourceReference _OnBehalfOf;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PerformerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Function != null) dest.Function = (Hl7.Fhir.Model.CodeableConcept)Function.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        if(OnBehalfOf != null) dest.OnBehalfOf = (Hl7.Fhir.Model.ResourceReference)OnBehalfOf.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PerformerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
        if( !DeepComparable.Matches(OnBehalfOf, otherT.OnBehalfOf)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
        if( !DeepComparable.IsExactly(OnBehalfOf, otherT.OnBehalfOf)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Function != null) yield return Function;
          if (Actor != null) yield return Actor;
          if (OnBehalfOf != null) yield return OnBehalfOf;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Function != null) yield return new ElementValue("function", Function);
          if (Actor != null) yield return new ElementValue("actor", Actor);
          if (OnBehalfOf != null) yield return new ElementValue("onBehalfOf", OnBehalfOf);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "function":
            value = Function;
            return Function is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          case "onBehalfOf":
            value = OnBehalfOf;
            return OnBehalfOf is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Function is not null) yield return new KeyValuePair<string,object>("function",Function);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
        if (OnBehalfOf is not null) yield return new KeyValuePair<string,object>("onBehalfOf",OnBehalfOf);
      }

    }

    /// <summary>
    /// Manipulated, implanted, or removed device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Procedure#FocalDevice", IsNestedType=true)]
    public partial class FocalDeviceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Procedure#FocalDevice"; } }

      /// <summary>
      /// Kind of change to device
      /// </summary>
      [FhirElement("action", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Action
      {
        get { return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Action;

      /// <summary>
      /// Device that was changed
      /// </summary>
      [FhirElement("manipulated", Order=50)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Manipulated
      {
        get { return _Manipulated; }
        set { _Manipulated = value; OnPropertyChanged("Manipulated"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Manipulated;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as FocalDeviceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Action != null) dest.Action = (Hl7.Fhir.Model.CodeableConcept)Action.DeepCopy();
        if(Manipulated != null) dest.Manipulated = (Hl7.Fhir.Model.ResourceReference)Manipulated.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new FocalDeviceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as FocalDeviceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;
        if( !DeepComparable.Matches(Manipulated, otherT.Manipulated)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as FocalDeviceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;
        if( !DeepComparable.IsExactly(Manipulated, otherT.Manipulated)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Action != null) yield return Action;
          if (Manipulated != null) yield return Manipulated;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Action != null) yield return new ElementValue("action", Action);
          if (Manipulated != null) yield return new ElementValue("manipulated", Manipulated);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "action":
            value = Action;
            return Action is not null;
          case "manipulated":
            value = Manipulated;
            return Manipulated is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Action is not null) yield return new KeyValuePair<string,object>("action",Action);
        if (Manipulated is not null) yield return new KeyValuePair<string,object>("manipulated",Manipulated);
      }

    }

    /// <summary>
    /// External Identifiers for this procedure
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [FhirElement("instantiatesCanonical", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> InstantiatesCanonicalElement
    {
      get { if(_InstantiatesCanonicalElement==null) _InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesCanonicalElement; }
      set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _InstantiatesCanonicalElement;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesCanonical
    {
      get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesCanonicalElement = null;
        else
          InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("InstantiatesCanonical");
      }
    }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [FhirElement("instantiatesUri", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirUri> InstantiatesUriElement
    {
      get { if(_InstantiatesUriElement==null) _InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _InstantiatesUriElement; }
      set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
    }

    private List<Hl7.Fhir.Model.FhirUri> _InstantiatesUriElement;

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesUri
    {
      get { return InstantiatesUriElement != null ? InstantiatesUriElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesUriElement = null;
        else
          InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
        OnPropertyChanged("InstantiatesUri");
      }
    }

    /// <summary>
    /// A request for this procedure
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("CarePlan","ServiceRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Part of referenced event
    /// </summary>
    [FhirElement("partOf", InSummary=true, Order=130)]
    [CLSCompliant(false)]
    [References("Procedure","Observation","MedicationAdministration")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=140, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.EventStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.EventStatus> _StatusElement;

    /// <summary>
    /// preparation | in-progress | not-done | on-hold | stopped | completed | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.EventStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.EventStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Reason for current status
    /// </summary>
    [FhirElement("statusReason", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept StatusReason
    {
      get { return _StatusReason; }
      set { _StatusReason = value; OnPropertyChanged("StatusReason"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _StatusReason;

    /// <summary>
    /// Classification of the procedure
    /// </summary>
    [FhirElement("category", InSummary=true, Order=160, FiveWs="FiveWs.class")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Identification of the procedure
    /// </summary>
    [FhirElement("code", InSummary=true, Order=170, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Individual or entity the procedure was performed on
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=180, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient","Group","Device","Practitioner","Organization","Location")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// The Encounter during which this Procedure was created
    /// </summary>
    [FhirElement("encounter", InSummary=true, Order=190, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// When the procedure occurred or is occurring
    /// </summary>
    [FhirElement("occurrence", InSummary=true, Order=200, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Timing))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Occurrence
    {
      get { return _Occurrence; }
      set { _Occurrence = value; OnPropertyChanged("Occurrence"); }
    }

    private Hl7.Fhir.Model.DataType _Occurrence;

    /// <summary>
    /// When the procedure was first captured in the subject's record
    /// </summary>
    [FhirElement("recorded", InSummary=true, Order=210, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime RecordedElement
    {
      get { return _RecordedElement; }
      set { _RecordedElement = value; OnPropertyChanged("RecordedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _RecordedElement;

    /// <summary>
    /// When the procedure was first captured in the subject's record
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Recorded
    {
      get { return RecordedElement != null ? RecordedElement.Value : null; }
      set
      {
        if (value == null)
          RecordedElement = null;
        else
          RecordedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Recorded");
      }
    }

    /// <summary>
    /// Who recorded the procedure
    /// </summary>
    [FhirElement("recorder", InSummary=true, Order=220, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Patient","RelatedPerson","Practitioner","PractitionerRole")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Recorder
    {
      get { return _Recorder; }
      set { _Recorder = value; OnPropertyChanged("Recorder"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Recorder;

    /// <summary>
    /// Reported rather than primary record
    /// </summary>
    [FhirElement("reported", InSummary=true, Order=230, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Patient","RelatedPerson","Practitioner","PractitionerRole","Organization")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Reported
    {
      get { return _Reported; }
      set { _Reported = value; OnPropertyChanged("Reported"); }
    }

    private Hl7.Fhir.Model.DataType _Reported;

    /// <summary>
    /// The people who performed the procedure
    /// </summary>
    [FhirElement("performer", InSummary=true, Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Procedure.PerformerComponent> Performer
    {
      get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.Procedure.PerformerComponent>(); return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private List<Hl7.Fhir.Model.Procedure.PerformerComponent> _Performer;

    /// <summary>
    /// Where the procedure happened
    /// </summary>
    [FhirElement("location", InSummary=true, Order=250, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// The justification that the procedure was performed
    /// </summary>
    [FhirElement("reason", InSummary=true, Order=260, FiveWs="FiveWs.why[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Reason
    {
      get { if(_Reason==null) _Reason = new List<Hl7.Fhir.Model.CodeableReference>(); return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Reason;

    /// <summary>
    /// Target body sites
    /// </summary>
    [FhirElement("bodySite", InSummary=true, Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> BodySite
    {
      get { if(_BodySite==null) _BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(); return _BodySite; }
      set { _BodySite = value; OnPropertyChanged("BodySite"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _BodySite;

    /// <summary>
    /// The result of procedure
    /// </summary>
    [FhirElement("outcome", InSummary=true, Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Outcome
    {
      get { return _Outcome; }
      set { _Outcome = value; OnPropertyChanged("Outcome"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Outcome;

    /// <summary>
    /// Any report resulting from the procedure
    /// </summary>
    [FhirElement("report", Order=290)]
    [CLSCompliant(false)]
    [References("DiagnosticReport","DocumentReference","Composition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Report
    {
      get { if(_Report==null) _Report = new List<Hl7.Fhir.Model.ResourceReference>(); return _Report; }
      set { _Report = value; OnPropertyChanged("Report"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Report;

    /// <summary>
    /// Complication following the procedure
    /// </summary>
    [FhirElement("complication", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Complication
    {
      get { if(_Complication==null) _Complication = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Complication; }
      set { _Complication = value; OnPropertyChanged("Complication"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Complication;

    /// <summary>
    /// A condition that is a result of the procedure
    /// </summary>
    [FhirElement("complicationDetail", Order=310)]
    [CLSCompliant(false)]
    [References("Condition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ComplicationDetail
    {
      get { if(_ComplicationDetail==null) _ComplicationDetail = new List<Hl7.Fhir.Model.ResourceReference>(); return _ComplicationDetail; }
      set { _ComplicationDetail = value; OnPropertyChanged("ComplicationDetail"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ComplicationDetail;

    /// <summary>
    /// Instructions for follow up
    /// </summary>
    [FhirElement("followUp", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> FollowUp
    {
      get { if(_FollowUp==null) _FollowUp = new List<Hl7.Fhir.Model.CodeableConcept>(); return _FollowUp; }
      set { _FollowUp = value; OnPropertyChanged("FollowUp"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _FollowUp;

    /// <summary>
    /// Additional information about the procedure
    /// </summary>
    [FhirElement("note", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Manipulated, implanted, or removed device
    /// </summary>
    [FhirElement("focalDevice", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Procedure.FocalDeviceComponent> FocalDevice
    {
      get { if(_FocalDevice==null) _FocalDevice = new List<Hl7.Fhir.Model.Procedure.FocalDeviceComponent>(); return _FocalDevice; }
      set { _FocalDevice = value; OnPropertyChanged("FocalDevice"); }
    }

    private List<Hl7.Fhir.Model.Procedure.FocalDeviceComponent> _FocalDevice;

    /// <summary>
    /// Items used during procedure
    /// </summary>
    [FhirElement("used", Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Used
    {
      get { if(_Used==null) _Used = new List<Hl7.Fhir.Model.CodeableReference>(); return _Used; }
      set { _Used = value; OnPropertyChanged("Used"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Used;

    /// <summary>
    /// Extra information relevant to the procedure
    /// </summary>
    [FhirElement("supportingInfo", Order=360)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInfo
    {
      get { if(_SupportingInfo==null) _SupportingInfo = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInfo; }
      set { _SupportingInfo = value; OnPropertyChanged("SupportingInfo"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInfo;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Procedure;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesCanonicalElement.DeepCopy());
      if(InstantiatesUriElement != null) dest.InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(InstantiatesUriElement.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.EventStatus>)StatusElement.DeepCopy();
      if(StatusReason != null) dest.StatusReason = (Hl7.Fhir.Model.CodeableConcept)StatusReason.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(Occurrence != null) dest.Occurrence = (Hl7.Fhir.Model.DataType)Occurrence.DeepCopy();
      if(RecordedElement != null) dest.RecordedElement = (Hl7.Fhir.Model.FhirDateTime)RecordedElement.DeepCopy();
      if(Recorder != null) dest.Recorder = (Hl7.Fhir.Model.ResourceReference)Recorder.DeepCopy();
      if(Reported != null) dest.Reported = (Hl7.Fhir.Model.DataType)Reported.DeepCopy();
      if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.Procedure.PerformerComponent>(Performer.DeepCopy());
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Reason != null) dest.Reason = new List<Hl7.Fhir.Model.CodeableReference>(Reason.DeepCopy());
      if(BodySite != null) dest.BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(BodySite.DeepCopy());
      if(Outcome != null) dest.Outcome = (Hl7.Fhir.Model.CodeableConcept)Outcome.DeepCopy();
      if(Report != null) dest.Report = new List<Hl7.Fhir.Model.ResourceReference>(Report.DeepCopy());
      if(Complication != null) dest.Complication = new List<Hl7.Fhir.Model.CodeableConcept>(Complication.DeepCopy());
      if(ComplicationDetail != null) dest.ComplicationDetail = new List<Hl7.Fhir.Model.ResourceReference>(ComplicationDetail.DeepCopy());
      if(FollowUp != null) dest.FollowUp = new List<Hl7.Fhir.Model.CodeableConcept>(FollowUp.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(FocalDevice != null) dest.FocalDevice = new List<Hl7.Fhir.Model.Procedure.FocalDeviceComponent>(FocalDevice.DeepCopy());
      if(Used != null) dest.Used = new List<Hl7.Fhir.Model.CodeableReference>(Used.DeepCopy());
      if(SupportingInfo != null) dest.SupportingInfo = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInfo.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Procedure());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Procedure;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(Occurrence, otherT.Occurrence)) return false;
      if( !DeepComparable.Matches(RecordedElement, otherT.RecordedElement)) return false;
      if( !DeepComparable.Matches(Recorder, otherT.Recorder)) return false;
      if( !DeepComparable.Matches(Reported, otherT.Reported)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.Matches(Outcome, otherT.Outcome)) return false;
      if( !DeepComparable.Matches(Report, otherT.Report)) return false;
      if( !DeepComparable.Matches(Complication, otherT.Complication)) return false;
      if( !DeepComparable.Matches(ComplicationDetail, otherT.ComplicationDetail)) return false;
      if( !DeepComparable.Matches(FollowUp, otherT.FollowUp)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(FocalDevice, otherT.FocalDevice)) return false;
      if( !DeepComparable.Matches(Used, otherT.Used)) return false;
      if( !DeepComparable.Matches(SupportingInfo, otherT.SupportingInfo)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Procedure;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(Occurrence, otherT.Occurrence)) return false;
      if( !DeepComparable.IsExactly(RecordedElement, otherT.RecordedElement)) return false;
      if( !DeepComparable.IsExactly(Recorder, otherT.Recorder)) return false;
      if( !DeepComparable.IsExactly(Reported, otherT.Reported)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.IsExactly(Outcome, otherT.Outcome)) return false;
      if( !DeepComparable.IsExactly(Report, otherT.Report)) return false;
      if( !DeepComparable.IsExactly(Complication, otherT.Complication)) return false;
      if( !DeepComparable.IsExactly(ComplicationDetail, otherT.ComplicationDetail)) return false;
      if( !DeepComparable.IsExactly(FollowUp, otherT.FollowUp)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(FocalDevice, otherT.FocalDevice)) return false;
      if( !DeepComparable.IsExactly(Used, otherT.Used)) return false;
      if( !DeepComparable.IsExactly(SupportingInfo, otherT.SupportingInfo)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (StatusReason != null) yield return StatusReason;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Code != null) yield return Code;
        if (Subject != null) yield return Subject;
        if (Encounter != null) yield return Encounter;
        if (Occurrence != null) yield return Occurrence;
        if (RecordedElement != null) yield return RecordedElement;
        if (Recorder != null) yield return Recorder;
        if (Reported != null) yield return Reported;
        foreach (var elem in Performer) { if (elem != null) yield return elem; }
        if (Location != null) yield return Location;
        foreach (var elem in Reason) { if (elem != null) yield return elem; }
        foreach (var elem in BodySite) { if (elem != null) yield return elem; }
        if (Outcome != null) yield return Outcome;
        foreach (var elem in Report) { if (elem != null) yield return elem; }
        foreach (var elem in Complication) { if (elem != null) yield return elem; }
        foreach (var elem in ComplicationDetail) { if (elem != null) yield return elem; }
        foreach (var elem in FollowUp) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in FocalDevice) { if (elem != null) yield return elem; }
        foreach (var elem in Used) { if (elem != null) yield return elem; }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return new ElementValue("instantiatesCanonical", elem); }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return new ElementValue("instantiatesUri", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (StatusReason != null) yield return new ElementValue("statusReason", StatusReason);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Code != null) yield return new ElementValue("code", Code);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (Occurrence != null) yield return new ElementValue("occurrence", Occurrence);
        if (RecordedElement != null) yield return new ElementValue("recorded", RecordedElement);
        if (Recorder != null) yield return new ElementValue("recorder", Recorder);
        if (Reported != null) yield return new ElementValue("reported", Reported);
        foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
        if (Location != null) yield return new ElementValue("location", Location);
        foreach (var elem in Reason) { if (elem != null) yield return new ElementValue("reason", elem); }
        foreach (var elem in BodySite) { if (elem != null) yield return new ElementValue("bodySite", elem); }
        if (Outcome != null) yield return new ElementValue("outcome", Outcome);
        foreach (var elem in Report) { if (elem != null) yield return new ElementValue("report", elem); }
        foreach (var elem in Complication) { if (elem != null) yield return new ElementValue("complication", elem); }
        foreach (var elem in ComplicationDetail) { if (elem != null) yield return new ElementValue("complicationDetail", elem); }
        foreach (var elem in FollowUp) { if (elem != null) yield return new ElementValue("followUp", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in FocalDevice) { if (elem != null) yield return new ElementValue("focalDevice", elem); }
        foreach (var elem in Used) { if (elem != null) yield return new ElementValue("used", elem); }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return new ElementValue("supportingInfo", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "instantiatesCanonical":
          value = InstantiatesCanonicalElement;
          return InstantiatesCanonicalElement?.Any() == true;
        case "instantiatesUri":
          value = InstantiatesUriElement;
          return InstantiatesUriElement?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "statusReason":
          value = StatusReason;
          return StatusReason is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "code":
          value = Code;
          return Code is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "occurrence":
          value = Occurrence;
          return Occurrence is not null;
        case "recorded":
          value = RecordedElement;
          return RecordedElement is not null;
        case "recorder":
          value = Recorder;
          return Recorder is not null;
        case "reported":
          value = Reported;
          return Reported is not null;
        case "performer":
          value = Performer;
          return Performer?.Any() == true;
        case "location":
          value = Location;
          return Location is not null;
        case "reason":
          value = Reason;
          return Reason?.Any() == true;
        case "bodySite":
          value = BodySite;
          return BodySite?.Any() == true;
        case "outcome":
          value = Outcome;
          return Outcome is not null;
        case "report":
          value = Report;
          return Report?.Any() == true;
        case "complication":
          value = Complication;
          return Complication?.Any() == true;
        case "complicationDetail":
          value = ComplicationDetail;
          return ComplicationDetail?.Any() == true;
        case "followUp":
          value = FollowUp;
          return FollowUp?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "focalDevice":
          value = FocalDevice;
          return FocalDevice?.Any() == true;
        case "used":
          value = Used;
          return Used?.Any() == true;
        case "supportingInfo":
          value = SupportingInfo;
          return SupportingInfo?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (InstantiatesCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
      if (InstantiatesUriElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (StatusReason is not null) yield return new KeyValuePair<string,object>("statusReason",StatusReason);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (Occurrence is not null) yield return new KeyValuePair<string,object>("occurrence",Occurrence);
      if (RecordedElement is not null) yield return new KeyValuePair<string,object>("recorded",RecordedElement);
      if (Recorder is not null) yield return new KeyValuePair<string,object>("recorder",Recorder);
      if (Reported is not null) yield return new KeyValuePair<string,object>("reported",Reported);
      if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Reason?.Any() == true) yield return new KeyValuePair<string,object>("reason",Reason);
      if (BodySite?.Any() == true) yield return new KeyValuePair<string,object>("bodySite",BodySite);
      if (Outcome is not null) yield return new KeyValuePair<string,object>("outcome",Outcome);
      if (Report?.Any() == true) yield return new KeyValuePair<string,object>("report",Report);
      if (Complication?.Any() == true) yield return new KeyValuePair<string,object>("complication",Complication);
      if (ComplicationDetail?.Any() == true) yield return new KeyValuePair<string,object>("complicationDetail",ComplicationDetail);
      if (FollowUp?.Any() == true) yield return new KeyValuePair<string,object>("followUp",FollowUp);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (FocalDevice?.Any() == true) yield return new KeyValuePair<string,object>("focalDevice",FocalDevice);
      if (Used?.Any() == true) yield return new KeyValuePair<string,object>("used",Used);
      if (SupportingInfo?.Any() == true) yield return new KeyValuePair<string,object>("supportingInfo",SupportingInfo);
    }

  }

}

// end of file

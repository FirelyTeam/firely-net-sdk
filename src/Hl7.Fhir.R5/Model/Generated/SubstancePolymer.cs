// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Properties of a substance specific to it being a polymer
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("SubstancePolymer","http://hl7.org/fhir/StructureDefinition/SubstancePolymer", IsResource=true)]
  public partial class SubstancePolymer : Hl7.Fhir.Model.DomainResource, IIdentifiable<Identifier>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "SubstancePolymer"; } }

    /// <summary>
    /// Todo
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstancePolymer#MonomerSet", IsNestedType=true)]
    [BackboneType("SubstancePolymer.monomerSet")]
    public partial class MonomerSetComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstancePolymer#MonomerSet"; } }

      /// <summary>
      /// Captures the type of ratio to the entire polymer, e.g. Monomer/Polymer ratio, SRU/Polymer Ratio
      /// </summary>
      [FhirElement("ratioType", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept RatioType
      {
        get { return _RatioType; }
        set { _RatioType = value; OnPropertyChanged("RatioType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _RatioType;

      /// <summary>
      /// The starting materials - monomer(s) used in the synthesis of the polymer
      /// </summary>
      [FhirElement("startingMaterial", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent> StartingMaterial
      {
        get { if(_StartingMaterial==null) _StartingMaterial = new List<Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent>(); return _StartingMaterial; }
        set { _StartingMaterial = value; OnPropertyChanged("StartingMaterial"); }
      }

      private List<Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent> _StartingMaterial;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MonomerSetComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RatioType != null) dest.RatioType = (Hl7.Fhir.Model.CodeableConcept)RatioType.DeepCopy();
        if(StartingMaterial != null) dest.StartingMaterial = new List<Hl7.Fhir.Model.SubstancePolymer.StartingMaterialComponent>(StartingMaterial.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MonomerSetComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MonomerSetComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RatioType, otherT.RatioType)) return false;
        if( !DeepComparable.Matches(StartingMaterial, otherT.StartingMaterial)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MonomerSetComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RatioType, otherT.RatioType)) return false;
        if( !DeepComparable.IsExactly(StartingMaterial, otherT.StartingMaterial)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RatioType != null) yield return RatioType;
          foreach (var elem in StartingMaterial) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RatioType != null) yield return new ElementValue("ratioType", RatioType);
          foreach (var elem in StartingMaterial) { if (elem != null) yield return new ElementValue("startingMaterial", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "ratioType":
            value = RatioType;
            return RatioType is not null;
          case "startingMaterial":
            value = StartingMaterial;
            return StartingMaterial?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RatioType is not null) yield return new KeyValuePair<string,object>("ratioType",RatioType);
        if (StartingMaterial?.Any() == true) yield return new KeyValuePair<string,object>("startingMaterial",StartingMaterial);
      }

    }

    /// <summary>
    /// The starting materials - monomer(s) used in the synthesis of the polymer
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstancePolymer#StartingMaterial", IsNestedType=true)]
    [BackboneType("SubstancePolymer.monomerSet.startingMaterial")]
    public partial class StartingMaterialComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstancePolymer#StartingMaterial"; } }

      /// <summary>
      /// The type of substance for this starting material
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Substance high level category, e.g. chemical substance
      /// </summary>
      [FhirElement("category", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Used to specify whether the attribute described is a defining element for the unique identification of the polymer
      /// </summary>
      [FhirElement("isDefining", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean IsDefiningElement
      {
        get { return _IsDefiningElement; }
        set { _IsDefiningElement = value; OnPropertyChanged("IsDefiningElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _IsDefiningElement;

      /// <summary>
      /// Used to specify whether the attribute described is a defining element for the unique identification of the polymer
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? IsDefining
      {
        get { return IsDefiningElement != null ? IsDefiningElement.Value : null; }
        set
        {
          if (value == null)
            IsDefiningElement = null;
          else
            IsDefiningElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("IsDefining");
        }
      }

      /// <summary>
      /// A percentage
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.Quantity _Amount;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StartingMaterialComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(IsDefiningElement != null) dest.IsDefiningElement = (Hl7.Fhir.Model.FhirBoolean)IsDefiningElement.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Quantity)Amount.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StartingMaterialComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StartingMaterialComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(IsDefiningElement, otherT.IsDefiningElement)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StartingMaterialComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(IsDefiningElement, otherT.IsDefiningElement)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          if (Category != null) yield return Category;
          if (IsDefiningElement != null) yield return IsDefiningElement;
          if (Amount != null) yield return Amount;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          if (Category != null) yield return new ElementValue("category", Category);
          if (IsDefiningElement != null) yield return new ElementValue("isDefining", IsDefiningElement);
          if (Amount != null) yield return new ElementValue("amount", Amount);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "isDefining":
            value = IsDefiningElement;
            return IsDefiningElement is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (IsDefiningElement is not null) yield return new KeyValuePair<string,object>("isDefining",IsDefiningElement);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
      }

    }

    /// <summary>
    /// Specifies and quantifies the repeated units and their configuration
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstancePolymer#Repeat", IsNestedType=true)]
    [BackboneType("SubstancePolymer.repeat")]
    public partial class RepeatComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstancePolymer#Repeat"; } }

      /// <summary>
      /// A representation of an (average) molecular formula from a polymer
      /// </summary>
      [FhirElement("averageMolecularFormula", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString AverageMolecularFormulaElement
      {
        get { return _AverageMolecularFormulaElement; }
        set { _AverageMolecularFormulaElement = value; OnPropertyChanged("AverageMolecularFormulaElement"); }
      }

      private Hl7.Fhir.Model.FhirString _AverageMolecularFormulaElement;

      /// <summary>
      /// A representation of an (average) molecular formula from a polymer
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string AverageMolecularFormula
      {
        get { return AverageMolecularFormulaElement != null ? AverageMolecularFormulaElement.Value : null; }
        set
        {
          if (value == null)
            AverageMolecularFormulaElement = null;
          else
            AverageMolecularFormulaElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("AverageMolecularFormula");
        }
      }

      /// <summary>
      /// How the quantitative amount of Structural Repeat Units is captured (e.g. Exact, Numeric, Average)
      /// </summary>
      [FhirElement("repeatUnitAmountType", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept RepeatUnitAmountType
      {
        get { return _RepeatUnitAmountType; }
        set { _RepeatUnitAmountType = value; OnPropertyChanged("RepeatUnitAmountType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _RepeatUnitAmountType;

      /// <summary>
      /// An SRU - Structural Repeat Unit
      /// </summary>
      [FhirElement("repeatUnit", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent> RepeatUnit
      {
        get { if(_RepeatUnit==null) _RepeatUnit = new List<Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent>(); return _RepeatUnit; }
        set { _RepeatUnit = value; OnPropertyChanged("RepeatUnit"); }
      }

      private List<Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent> _RepeatUnit;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RepeatComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(AverageMolecularFormulaElement != null) dest.AverageMolecularFormulaElement = (Hl7.Fhir.Model.FhirString)AverageMolecularFormulaElement.DeepCopy();
        if(RepeatUnitAmountType != null) dest.RepeatUnitAmountType = (Hl7.Fhir.Model.CodeableConcept)RepeatUnitAmountType.DeepCopy();
        if(RepeatUnit != null) dest.RepeatUnit = new List<Hl7.Fhir.Model.SubstancePolymer.RepeatUnitComponent>(RepeatUnit.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RepeatComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RepeatComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(AverageMolecularFormulaElement, otherT.AverageMolecularFormulaElement)) return false;
        if( !DeepComparable.Matches(RepeatUnitAmountType, otherT.RepeatUnitAmountType)) return false;
        if( !DeepComparable.Matches(RepeatUnit, otherT.RepeatUnit)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RepeatComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(AverageMolecularFormulaElement, otherT.AverageMolecularFormulaElement)) return false;
        if( !DeepComparable.IsExactly(RepeatUnitAmountType, otherT.RepeatUnitAmountType)) return false;
        if( !DeepComparable.IsExactly(RepeatUnit, otherT.RepeatUnit)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (AverageMolecularFormulaElement != null) yield return AverageMolecularFormulaElement;
          if (RepeatUnitAmountType != null) yield return RepeatUnitAmountType;
          foreach (var elem in RepeatUnit) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (AverageMolecularFormulaElement != null) yield return new ElementValue("averageMolecularFormula", AverageMolecularFormulaElement);
          if (RepeatUnitAmountType != null) yield return new ElementValue("repeatUnitAmountType", RepeatUnitAmountType);
          foreach (var elem in RepeatUnit) { if (elem != null) yield return new ElementValue("repeatUnit", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "averageMolecularFormula":
            value = AverageMolecularFormulaElement;
            return AverageMolecularFormulaElement is not null;
          case "repeatUnitAmountType":
            value = RepeatUnitAmountType;
            return RepeatUnitAmountType is not null;
          case "repeatUnit":
            value = RepeatUnit;
            return RepeatUnit?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (AverageMolecularFormulaElement is not null) yield return new KeyValuePair<string,object>("averageMolecularFormula",AverageMolecularFormulaElement);
        if (RepeatUnitAmountType is not null) yield return new KeyValuePair<string,object>("repeatUnitAmountType",RepeatUnitAmountType);
        if (RepeatUnit?.Any() == true) yield return new KeyValuePair<string,object>("repeatUnit",RepeatUnit);
      }

    }

    /// <summary>
    /// An SRU - Structural Repeat Unit
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstancePolymer#RepeatUnit", IsNestedType=true)]
    [BackboneType("SubstancePolymer.repeat.repeatUnit")]
    public partial class RepeatUnitComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstancePolymer#RepeatUnit"; } }

      /// <summary>
      /// Structural repeat units are essential elements for defining polymers
      /// </summary>
      [FhirElement("unit", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString UnitElement
      {
        get { return _UnitElement; }
        set { _UnitElement = value; OnPropertyChanged("UnitElement"); }
      }

      private Hl7.Fhir.Model.FhirString _UnitElement;

      /// <summary>
      /// Structural repeat units are essential elements for defining polymers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Unit
      {
        get { return UnitElement != null ? UnitElement.Value : null; }
        set
        {
          if (value == null)
            UnitElement = null;
          else
            UnitElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Unit");
        }
      }

      /// <summary>
      /// The orientation of the polymerisation, e.g. head-tail, head-head, random
      /// </summary>
      [FhirElement("orientation", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Orientation
      {
        get { return _Orientation; }
        set { _Orientation = value; OnPropertyChanged("Orientation"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Orientation;

      /// <summary>
      /// Number of repeats of this unit
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer AmountElement
      {
        get { return _AmountElement; }
        set { _AmountElement = value; OnPropertyChanged("AmountElement"); }
      }

      private Hl7.Fhir.Model.Integer _AmountElement;

      /// <summary>
      /// Number of repeats of this unit
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Amount
      {
        get { return AmountElement != null ? AmountElement.Value : null; }
        set
        {
          if (value == null)
            AmountElement = null;
          else
            AmountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Amount");
        }
      }

      /// <summary>
      /// Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described
      /// </summary>
      [FhirElement("degreeOfPolymerisation", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent> DegreeOfPolymerisation
      {
        get { if(_DegreeOfPolymerisation==null) _DegreeOfPolymerisation = new List<Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent>(); return _DegreeOfPolymerisation; }
        set { _DegreeOfPolymerisation = value; OnPropertyChanged("DegreeOfPolymerisation"); }
      }

      private List<Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent> _DegreeOfPolymerisation;

      /// <summary>
      /// A graphical structure for this SRU
      /// </summary>
      [FhirElement("structuralRepresentation", InSummary=true, Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent> StructuralRepresentation
      {
        get { if(_StructuralRepresentation==null) _StructuralRepresentation = new List<Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent>(); return _StructuralRepresentation; }
        set { _StructuralRepresentation = value; OnPropertyChanged("StructuralRepresentation"); }
      }

      private List<Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent> _StructuralRepresentation;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RepeatUnitComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(UnitElement != null) dest.UnitElement = (Hl7.Fhir.Model.FhirString)UnitElement.DeepCopy();
        if(Orientation != null) dest.Orientation = (Hl7.Fhir.Model.CodeableConcept)Orientation.DeepCopy();
        if(AmountElement != null) dest.AmountElement = (Hl7.Fhir.Model.Integer)AmountElement.DeepCopy();
        if(DegreeOfPolymerisation != null) dest.DegreeOfPolymerisation = new List<Hl7.Fhir.Model.SubstancePolymer.DegreeOfPolymerisationComponent>(DegreeOfPolymerisation.DeepCopy());
        if(StructuralRepresentation != null) dest.StructuralRepresentation = new List<Hl7.Fhir.Model.SubstancePolymer.StructuralRepresentationComponent>(StructuralRepresentation.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RepeatUnitComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RepeatUnitComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(UnitElement, otherT.UnitElement)) return false;
        if( !DeepComparable.Matches(Orientation, otherT.Orientation)) return false;
        if( !DeepComparable.Matches(AmountElement, otherT.AmountElement)) return false;
        if( !DeepComparable.Matches(DegreeOfPolymerisation, otherT.DegreeOfPolymerisation)) return false;
        if( !DeepComparable.Matches(StructuralRepresentation, otherT.StructuralRepresentation)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RepeatUnitComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(UnitElement, otherT.UnitElement)) return false;
        if( !DeepComparable.IsExactly(Orientation, otherT.Orientation)) return false;
        if( !DeepComparable.IsExactly(AmountElement, otherT.AmountElement)) return false;
        if( !DeepComparable.IsExactly(DegreeOfPolymerisation, otherT.DegreeOfPolymerisation)) return false;
        if( !DeepComparable.IsExactly(StructuralRepresentation, otherT.StructuralRepresentation)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (UnitElement != null) yield return UnitElement;
          if (Orientation != null) yield return Orientation;
          if (AmountElement != null) yield return AmountElement;
          foreach (var elem in DegreeOfPolymerisation) { if (elem != null) yield return elem; }
          foreach (var elem in StructuralRepresentation) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (UnitElement != null) yield return new ElementValue("unit", UnitElement);
          if (Orientation != null) yield return new ElementValue("orientation", Orientation);
          if (AmountElement != null) yield return new ElementValue("amount", AmountElement);
          foreach (var elem in DegreeOfPolymerisation) { if (elem != null) yield return new ElementValue("degreeOfPolymerisation", elem); }
          foreach (var elem in StructuralRepresentation) { if (elem != null) yield return new ElementValue("structuralRepresentation", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "unit":
            value = UnitElement;
            return UnitElement is not null;
          case "orientation":
            value = Orientation;
            return Orientation is not null;
          case "amount":
            value = AmountElement;
            return AmountElement is not null;
          case "degreeOfPolymerisation":
            value = DegreeOfPolymerisation;
            return DegreeOfPolymerisation?.Any() == true;
          case "structuralRepresentation":
            value = StructuralRepresentation;
            return StructuralRepresentation?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (UnitElement is not null) yield return new KeyValuePair<string,object>("unit",UnitElement);
        if (Orientation is not null) yield return new KeyValuePair<string,object>("orientation",Orientation);
        if (AmountElement is not null) yield return new KeyValuePair<string,object>("amount",AmountElement);
        if (DegreeOfPolymerisation?.Any() == true) yield return new KeyValuePair<string,object>("degreeOfPolymerisation",DegreeOfPolymerisation);
        if (StructuralRepresentation?.Any() == true) yield return new KeyValuePair<string,object>("structuralRepresentation",StructuralRepresentation);
      }

    }

    /// <summary>
    /// Applies to homopolymer and block co-polymers where the degree of polymerisation within a block can be described
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstancePolymer#DegreeOfPolymerisation", IsNestedType=true)]
    [BackboneType("SubstancePolymer.repeat.repeatUnit.degreeOfPolymerisation")]
    public partial class DegreeOfPolymerisationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstancePolymer#DegreeOfPolymerisation"; } }

      /// <summary>
      /// The type of the degree of polymerisation shall be described, e.g. SRU/Polymer Ratio
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// An average amount of polymerisation
      /// </summary>
      [FhirElement("average", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Integer AverageElement
      {
        get { return _AverageElement; }
        set { _AverageElement = value; OnPropertyChanged("AverageElement"); }
      }

      private Hl7.Fhir.Model.Integer _AverageElement;

      /// <summary>
      /// An average amount of polymerisation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Average
      {
        get { return AverageElement != null ? AverageElement.Value : null; }
        set
        {
          if (value == null)
            AverageElement = null;
          else
            AverageElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Average");
        }
      }

      /// <summary>
      /// A low expected limit of the amount
      /// </summary>
      [FhirElement("low", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer LowElement
      {
        get { return _LowElement; }
        set { _LowElement = value; OnPropertyChanged("LowElement"); }
      }

      private Hl7.Fhir.Model.Integer _LowElement;

      /// <summary>
      /// A low expected limit of the amount
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Low
      {
        get { return LowElement != null ? LowElement.Value : null; }
        set
        {
          if (value == null)
            LowElement = null;
          else
            LowElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Low");
        }
      }

      /// <summary>
      /// A high expected limit of the amount
      /// </summary>
      [FhirElement("high", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Integer HighElement
      {
        get { return _HighElement; }
        set { _HighElement = value; OnPropertyChanged("HighElement"); }
      }

      private Hl7.Fhir.Model.Integer _HighElement;

      /// <summary>
      /// A high expected limit of the amount
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? High
      {
        get { return HighElement != null ? HighElement.Value : null; }
        set
        {
          if (value == null)
            HighElement = null;
          else
            HighElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("High");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DegreeOfPolymerisationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(AverageElement != null) dest.AverageElement = (Hl7.Fhir.Model.Integer)AverageElement.DeepCopy();
        if(LowElement != null) dest.LowElement = (Hl7.Fhir.Model.Integer)LowElement.DeepCopy();
        if(HighElement != null) dest.HighElement = (Hl7.Fhir.Model.Integer)HighElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DegreeOfPolymerisationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DegreeOfPolymerisationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(AverageElement, otherT.AverageElement)) return false;
        if( !DeepComparable.Matches(LowElement, otherT.LowElement)) return false;
        if( !DeepComparable.Matches(HighElement, otherT.HighElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DegreeOfPolymerisationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(AverageElement, otherT.AverageElement)) return false;
        if( !DeepComparable.IsExactly(LowElement, otherT.LowElement)) return false;
        if( !DeepComparable.IsExactly(HighElement, otherT.HighElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (AverageElement != null) yield return AverageElement;
          if (LowElement != null) yield return LowElement;
          if (HighElement != null) yield return HighElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (AverageElement != null) yield return new ElementValue("average", AverageElement);
          if (LowElement != null) yield return new ElementValue("low", LowElement);
          if (HighElement != null) yield return new ElementValue("high", HighElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "average":
            value = AverageElement;
            return AverageElement is not null;
          case "low":
            value = LowElement;
            return LowElement is not null;
          case "high":
            value = HighElement;
            return HighElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (AverageElement is not null) yield return new KeyValuePair<string,object>("average",AverageElement);
        if (LowElement is not null) yield return new KeyValuePair<string,object>("low",LowElement);
        if (HighElement is not null) yield return new KeyValuePair<string,object>("high",HighElement);
      }

    }

    /// <summary>
    /// A graphical structure for this SRU
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstancePolymer#StructuralRepresentation", IsNestedType=true)]
    [BackboneType("SubstancePolymer.repeat.repeatUnit.structuralRepresentation")]
    public partial class StructuralRepresentationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstancePolymer#StructuralRepresentation"; } }

      /// <summary>
      /// The type of structure (e.g. Full, Partial, Representative)
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF
      /// </summary>
      [FhirElement("representation", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RepresentationElement
      {
        get { return _RepresentationElement; }
        set { _RepresentationElement = value; OnPropertyChanged("RepresentationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RepresentationElement;

      /// <summary>
      /// The structural representation as text string in a standard format e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Representation
      {
        get { return RepresentationElement != null ? RepresentationElement.Value : null; }
        set
        {
          if (value == null)
            RepresentationElement = null;
          else
            RepresentationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Representation");
        }
      }

      /// <summary>
      /// The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF
      /// </summary>
      [FhirElement("format", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Format
      {
        get { return _Format; }
        set { _Format = value; OnPropertyChanged("Format"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Format;

      /// <summary>
      /// An attached file with the structural representation
      /// </summary>
      [FhirElement("attachment", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Attachment Attachment
      {
        get { return _Attachment; }
        set { _Attachment = value; OnPropertyChanged("Attachment"); }
      }

      private Hl7.Fhir.Model.Attachment _Attachment;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StructuralRepresentationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(RepresentationElement != null) dest.RepresentationElement = (Hl7.Fhir.Model.FhirString)RepresentationElement.DeepCopy();
        if(Format != null) dest.Format = (Hl7.Fhir.Model.CodeableConcept)Format.DeepCopy();
        if(Attachment != null) dest.Attachment = (Hl7.Fhir.Model.Attachment)Attachment.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StructuralRepresentationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StructuralRepresentationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(RepresentationElement, otherT.RepresentationElement)) return false;
        if( !DeepComparable.Matches(Format, otherT.Format)) return false;
        if( !DeepComparable.Matches(Attachment, otherT.Attachment)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StructuralRepresentationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(RepresentationElement, otherT.RepresentationElement)) return false;
        if( !DeepComparable.IsExactly(Format, otherT.Format)) return false;
        if( !DeepComparable.IsExactly(Attachment, otherT.Attachment)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (RepresentationElement != null) yield return RepresentationElement;
          if (Format != null) yield return Format;
          if (Attachment != null) yield return Attachment;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (RepresentationElement != null) yield return new ElementValue("representation", RepresentationElement);
          if (Format != null) yield return new ElementValue("format", Format);
          if (Attachment != null) yield return new ElementValue("attachment", Attachment);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "representation":
            value = RepresentationElement;
            return RepresentationElement is not null;
          case "format":
            value = Format;
            return Format is not null;
          case "attachment":
            value = Attachment;
            return Attachment is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (RepresentationElement is not null) yield return new KeyValuePair<string,object>("representation",RepresentationElement);
        if (Format is not null) yield return new KeyValuePair<string,object>("format",Format);
        if (Attachment is not null) yield return new KeyValuePair<string,object>("attachment",Attachment);
      }

    }

    /// <summary>
    /// A business idenfier for this polymer, but typically this is handled by a SubstanceDefinition identifier
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// Overall type of the polymer
    /// </summary>
    [FhirElement("class", InSummary=true, Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Class
    {
      get { return _Class; }
      set { _Class = value; OnPropertyChanged("Class"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Class;

    /// <summary>
    /// Polymer geometry, e.g. linear, branched, cross-linked, network or dendritic
    /// </summary>
    [FhirElement("geometry", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Geometry
    {
      get { return _Geometry; }
      set { _Geometry = value; OnPropertyChanged("Geometry"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Geometry;

    /// <summary>
    /// Descrtibes the copolymer sequence type (polymer connectivity)
    /// </summary>
    [FhirElement("copolymerConnectivity", InSummary=true, Order=120)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> CopolymerConnectivity
    {
      get { if(_CopolymerConnectivity==null) _CopolymerConnectivity = new List<Hl7.Fhir.Model.CodeableConcept>(); return _CopolymerConnectivity; }
      set { _CopolymerConnectivity = value; OnPropertyChanged("CopolymerConnectivity"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _CopolymerConnectivity;

    /// <summary>
    /// Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder
    /// </summary>
    [FhirElement("modification", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ModificationElement
    {
      get { return _ModificationElement; }
      set { _ModificationElement = value; OnPropertyChanged("ModificationElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ModificationElement;

    /// <summary>
    /// Todo - this is intended to connect to a repeating full modification structure, also used by Protein and Nucleic Acid . String is just a placeholder
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Modification
    {
      get { return ModificationElement != null ? ModificationElement.Value : null; }
      set
      {
        if (value == null)
          ModificationElement = null;
        else
          ModificationElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Modification");
      }
    }

    /// <summary>
    /// Todo
    /// </summary>
    [FhirElement("monomerSet", InSummary=true, Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent> MonomerSet
    {
      get { if(_MonomerSet==null) _MonomerSet = new List<Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent>(); return _MonomerSet; }
      set { _MonomerSet = value; OnPropertyChanged("MonomerSet"); }
    }

    private List<Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent> _MonomerSet;

    /// <summary>
    /// Specifies and quantifies the repeated units and their configuration
    /// </summary>
    [FhirElement("repeat", InSummary=true, Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstancePolymer.RepeatComponent> Repeat
    {
      get { if(_Repeat==null) _Repeat = new List<Hl7.Fhir.Model.SubstancePolymer.RepeatComponent>(); return _Repeat; }
      set { _Repeat = value; OnPropertyChanged("Repeat"); }
    }

    private List<Hl7.Fhir.Model.SubstancePolymer.RepeatComponent> _Repeat;

    Identifier IIdentifiable<Identifier>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as SubstancePolymer;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(Class != null) dest.Class = (Hl7.Fhir.Model.CodeableConcept)Class.DeepCopy();
      if(Geometry != null) dest.Geometry = (Hl7.Fhir.Model.CodeableConcept)Geometry.DeepCopy();
      if(CopolymerConnectivity != null) dest.CopolymerConnectivity = new List<Hl7.Fhir.Model.CodeableConcept>(CopolymerConnectivity.DeepCopy());
      if(ModificationElement != null) dest.ModificationElement = (Hl7.Fhir.Model.FhirString)ModificationElement.DeepCopy();
      if(MonomerSet != null) dest.MonomerSet = new List<Hl7.Fhir.Model.SubstancePolymer.MonomerSetComponent>(MonomerSet.DeepCopy());
      if(Repeat != null) dest.Repeat = new List<Hl7.Fhir.Model.SubstancePolymer.RepeatComponent>(Repeat.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new SubstancePolymer());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as SubstancePolymer;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Class, otherT.Class)) return false;
      if( !DeepComparable.Matches(Geometry, otherT.Geometry)) return false;
      if( !DeepComparable.Matches(CopolymerConnectivity, otherT.CopolymerConnectivity)) return false;
      if( !DeepComparable.Matches(ModificationElement, otherT.ModificationElement)) return false;
      if( !DeepComparable.Matches(MonomerSet, otherT.MonomerSet)) return false;
      if( !DeepComparable.Matches(Repeat, otherT.Repeat)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as SubstancePolymer;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Class, otherT.Class)) return false;
      if( !DeepComparable.IsExactly(Geometry, otherT.Geometry)) return false;
      if( !DeepComparable.IsExactly(CopolymerConnectivity, otherT.CopolymerConnectivity)) return false;
      if( !DeepComparable.IsExactly(ModificationElement, otherT.ModificationElement)) return false;
      if( !DeepComparable.IsExactly(MonomerSet, otherT.MonomerSet)) return false;
      if( !DeepComparable.IsExactly(Repeat, otherT.Repeat)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (Class != null) yield return Class;
        if (Geometry != null) yield return Geometry;
        foreach (var elem in CopolymerConnectivity) { if (elem != null) yield return elem; }
        if (ModificationElement != null) yield return ModificationElement;
        foreach (var elem in MonomerSet) { if (elem != null) yield return elem; }
        foreach (var elem in Repeat) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (Class != null) yield return new ElementValue("class", Class);
        if (Geometry != null) yield return new ElementValue("geometry", Geometry);
        foreach (var elem in CopolymerConnectivity) { if (elem != null) yield return new ElementValue("copolymerConnectivity", elem); }
        if (ModificationElement != null) yield return new ElementValue("modification", ModificationElement);
        foreach (var elem in MonomerSet) { if (elem != null) yield return new ElementValue("monomerSet", elem); }
        foreach (var elem in Repeat) { if (elem != null) yield return new ElementValue("repeat", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "class":
          value = Class;
          return Class is not null;
        case "geometry":
          value = Geometry;
          return Geometry is not null;
        case "copolymerConnectivity":
          value = CopolymerConnectivity;
          return CopolymerConnectivity?.Any() == true;
        case "modification":
          value = ModificationElement;
          return ModificationElement is not null;
        case "monomerSet":
          value = MonomerSet;
          return MonomerSet?.Any() == true;
        case "repeat":
          value = Repeat;
          return Repeat?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Class is not null) yield return new KeyValuePair<string,object>("class",Class);
      if (Geometry is not null) yield return new KeyValuePair<string,object>("geometry",Geometry);
      if (CopolymerConnectivity?.Any() == true) yield return new KeyValuePair<string,object>("copolymerConnectivity",CopolymerConnectivity);
      if (ModificationElement is not null) yield return new KeyValuePair<string,object>("modification",ModificationElement);
      if (MonomerSet?.Any() == true) yield return new KeyValuePair<string,object>("monomerSet",MonomerSet);
      if (Repeat?.Any() == true) yield return new KeyValuePair<string,object>("repeat",Repeat);
    }

  }

}

// end of file

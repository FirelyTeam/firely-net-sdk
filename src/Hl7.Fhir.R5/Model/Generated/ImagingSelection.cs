// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A selection of DICOM SOP instances and/or frames
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ImagingSelection","http://hl7.org/fhir/StructureDefinition/ImagingSelection", IsResource=true)]
  public partial class ImagingSelection : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ImagingSelection"; } }

    /// <summary>
    /// The type of coordinates describing an image region.
    /// (url: http://hl7.org/fhir/ValueSet/imagingselection-graphictype)
    /// (system: http://hl7.org/fhir/imagingselection-graphictype)
    /// </summary>
    [FhirEnumeration("ImagingSelectionGraphicType")]
    public enum ImagingSelectionGraphicType
    {
      /// <summary>
      /// A single location denoted by a single (x,y,z) triplet.
      /// (system: http://hl7.org/fhir/imagingselection-graphictype)
      /// </summary>
      [EnumLiteral("POINT", "http://hl7.org/fhir/imagingselection-graphictype"), Description("POINT")]
      POINT,
      /// <summary>
      /// multiple locations each denoted by an (x,y,z) triplet; the points need not be coplanar.
      /// (system: http://hl7.org/fhir/imagingselection-graphictype)
      /// </summary>
      [EnumLiteral("MULTIPOINT", "http://hl7.org/fhir/imagingselection-graphictype"), Description("MULTIPOINT")]
      MULTIPOINT,
      /// <summary>
      /// a series of connected line segments with ordered vertices denoted by (x,y,z) triplets; the points need not be coplanar.
      /// (system: http://hl7.org/fhir/imagingselection-graphictype)
      /// </summary>
      [EnumLiteral("POLYLINE", "http://hl7.org/fhir/imagingselection-graphictype"), Description("POLYLINE")]
      POLYLINE,
      /// <summary>
      /// a series of connected line segments with ordered vertices denoted by (x,y,z) triplets, where the first and last vertices shall be the same forming a polygon; the points shall be coplanar.
      /// (system: http://hl7.org/fhir/imagingselection-graphictype)
      /// </summary>
      [EnumLiteral("POLYGON", "http://hl7.org/fhir/imagingselection-graphictype"), Description("POLYGON")]
      POLYGON,
      /// <summary>
      /// an ellipse defined by four (x,y,z) triplets, the first two triplets specifying the endpoints of the major axis and the second two triplets specifying the endpoints of the minor axis.
      /// (system: http://hl7.org/fhir/imagingselection-graphictype)
      /// </summary>
      [EnumLiteral("ELLIPSE", "http://hl7.org/fhir/imagingselection-graphictype"), Description("ELLIPSE")]
      ELLIPSE,
      /// <summary>
      /// a three-dimensional geometric surface whose plane sections are either ellipses or circles and contains three intersecting orthogonal axes, "a", "b", and "c"; the ellipsoid is defined by six (x,y,z) triplets, the first and second triplets specifying the endpoints of axis "a", the third and fourth triplets specifying the endpoints of axis "b", and the fifth and sixth triplets specifying the endpoints of axis "c".
      /// (system: http://hl7.org/fhir/imagingselection-graphictype)
      /// </summary>
      [EnumLiteral("ELLIPSOID", "http://hl7.org/fhir/imagingselection-graphictype"), Description("ELLIPSOID")]
      ELLIPSOID,
    }

    /// <summary>
    /// The type of coordinates describing an image region.
    /// (url: http://hl7.org/fhir/ValueSet/imagingselection-coordinatetype)
    /// (system: http://hl7.org/fhir/imagingselection-coordinatetype)
    /// </summary>
    [FhirEnumeration("ImagingSelectionCoordinateType")]
    public enum ImagingSelectionCoordinateType
    {
      /// <summary>
      /// The selected image region is defined in a 2D coordinate system.
      /// (system: http://hl7.org/fhir/imagingselection-coordinatetype)
      /// </summary>
      [EnumLiteral("2d", "http://hl7.org/fhir/imagingselection-coordinatetype"), Description("2D")]
      N2d,
      /// <summary>
      /// The selected image region is defined in a 3D coordinate system.
      /// (system: http://hl7.org/fhir/imagingselection-coordinatetype)
      /// </summary>
      [EnumLiteral("3d", "http://hl7.org/fhir/imagingselection-coordinatetype"), Description("3D")]
      N3d,
    }

    /// <summary>
    /// Author (human or machine)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ImagingSelection#Performer", IsNestedType=true)]
    public partial class PerformerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ImagingSelection#Performer"; } }

      /// <summary>
      /// Type of performer
      /// </summary>
      [FhirElement("function", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Function
      {
        get { return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Function;

      /// <summary>
      /// Author (human or machine)
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Device","Organization","CareTeam","Patient","RelatedPerson","HealthcareService")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PerformerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Function != null) dest.Function = (Hl7.Fhir.Model.CodeableConcept)Function.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PerformerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Function != null) yield return Function;
          if (Actor != null) yield return Actor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Function != null) yield return new ElementValue("function", Function);
          if (Actor != null) yield return new ElementValue("actor", Actor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "function":
            value = Function;
            return Function is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Function is not null) yield return new KeyValuePair<string,object>("function",Function);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
      }

    }

    /// <summary>
    /// The selected instances
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ImagingSelection#Instance", IsNestedType=true)]
    public partial class InstanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ImagingSelection#Instance"; } }

      /// <summary>
      /// DICOM SOP Instance UID
      /// </summary>
      [FhirElement("uid", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Oid UidElement
      {
        get { return _UidElement; }
        set { _UidElement = value; OnPropertyChanged("UidElement"); }
      }

      private Hl7.Fhir.Model.Oid _UidElement;

      /// <summary>
      /// DICOM SOP Instance UID
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Uid
      {
        get { return UidElement != null ? UidElement.Value : null; }
        set
        {
          if (value == null)
            UidElement = null;
          else
            UidElement = new Hl7.Fhir.Model.Oid(value);
          OnPropertyChanged("Uid");
        }
      }

      /// <summary>
      /// DICOM SOP Class UID
      /// </summary>
      [FhirElement("sopClass", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Coding SopClass
      {
        get { return _SopClass; }
        set { _SopClass = value; OnPropertyChanged("SopClass"); }
      }

      private Hl7.Fhir.Model.Coding _SopClass;

      /// <summary>
      /// List of selected frames encoded as a comma separated list of one or more non duplicate frame numbers
      /// </summary>
      [FhirElement("frameList", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString FrameListElement
      {
        get { return _FrameListElement; }
        set { _FrameListElement = value; OnPropertyChanged("FrameListElement"); }
      }

      private Hl7.Fhir.Model.FhirString _FrameListElement;

      /// <summary>
      /// List of selected frames encoded as a comma separated list of one or more non duplicate frame numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string FrameList
      {
        get { return FrameListElement != null ? FrameListElement.Value : null; }
        set
        {
          if (value == null)
            FrameListElement = null;
          else
            FrameListElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("FrameList");
        }
      }

      /// <summary>
      /// Selected observations in a DICOM SR
      /// </summary>
      [FhirElement("observationUid", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Oid> ObservationUidElement
      {
        get { if(_ObservationUidElement==null) _ObservationUidElement = new List<Hl7.Fhir.Model.Oid>(); return _ObservationUidElement; }
        set { _ObservationUidElement = value; OnPropertyChanged("ObservationUidElement"); }
      }

      private List<Hl7.Fhir.Model.Oid> _ObservationUidElement;

      /// <summary>
      /// Selected observations in a DICOM SR
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> ObservationUid
      {
        get { return ObservationUidElement != null ? ObservationUidElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ObservationUidElement = null;
          else
            ObservationUidElement = new List<Hl7.Fhir.Model.Oid>(value.Select(elem=>new Hl7.Fhir.Model.Oid(elem)));
          OnPropertyChanged("ObservationUid");
        }
      }

      /// <summary>
      /// List of selected segments encoded as a comma separated list of one or more non duplicate segnent numbers
      /// </summary>
      [FhirElement("segmentList", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString SegmentListElement
      {
        get { return _SegmentListElement; }
        set { _SegmentListElement = value; OnPropertyChanged("SegmentListElement"); }
      }

      private Hl7.Fhir.Model.FhirString _SegmentListElement;

      /// <summary>
      /// List of selected segments encoded as a comma separated list of one or more non duplicate segnent numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SegmentList
      {
        get { return SegmentListElement != null ? SegmentListElement.Value : null; }
        set
        {
          if (value == null)
            SegmentListElement = null;
          else
            SegmentListElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("SegmentList");
        }
      }

      /// <summary>
      /// List of selected regions of interest (ROI) encoded as a comma separated list of one or more non duplicate ROI numbers
      /// </summary>
      [FhirElement("roiList", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RoiListElement
      {
        get { return _RoiListElement; }
        set { _RoiListElement = value; OnPropertyChanged("RoiListElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RoiListElement;

      /// <summary>
      /// List of selected regions of interest (ROI) encoded as a comma separated list of one or more non duplicate ROI numbers
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RoiList
      {
        get { return RoiListElement != null ? RoiListElement.Value : null; }
        set
        {
          if (value == null)
            RoiListElement = null;
          else
            RoiListElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("RoiList");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InstanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(UidElement != null) dest.UidElement = (Hl7.Fhir.Model.Oid)UidElement.DeepCopy();
        if(SopClass != null) dest.SopClass = (Hl7.Fhir.Model.Coding)SopClass.DeepCopy();
        if(FrameListElement != null) dest.FrameListElement = (Hl7.Fhir.Model.FhirString)FrameListElement.DeepCopy();
        if(ObservationUidElement != null) dest.ObservationUidElement = new List<Hl7.Fhir.Model.Oid>(ObservationUidElement.DeepCopy());
        if(SegmentListElement != null) dest.SegmentListElement = (Hl7.Fhir.Model.FhirString)SegmentListElement.DeepCopy();
        if(RoiListElement != null) dest.RoiListElement = (Hl7.Fhir.Model.FhirString)RoiListElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InstanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InstanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(UidElement, otherT.UidElement)) return false;
        if( !DeepComparable.Matches(SopClass, otherT.SopClass)) return false;
        if( !DeepComparable.Matches(FrameListElement, otherT.FrameListElement)) return false;
        if( !DeepComparable.Matches(ObservationUidElement, otherT.ObservationUidElement)) return false;
        if( !DeepComparable.Matches(SegmentListElement, otherT.SegmentListElement)) return false;
        if( !DeepComparable.Matches(RoiListElement, otherT.RoiListElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InstanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(UidElement, otherT.UidElement)) return false;
        if( !DeepComparable.IsExactly(SopClass, otherT.SopClass)) return false;
        if( !DeepComparable.IsExactly(FrameListElement, otherT.FrameListElement)) return false;
        if( !DeepComparable.IsExactly(ObservationUidElement, otherT.ObservationUidElement)) return false;
        if( !DeepComparable.IsExactly(SegmentListElement, otherT.SegmentListElement)) return false;
        if( !DeepComparable.IsExactly(RoiListElement, otherT.RoiListElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (UidElement != null) yield return UidElement;
          if (SopClass != null) yield return SopClass;
          if (FrameListElement != null) yield return FrameListElement;
          foreach (var elem in ObservationUidElement) { if (elem != null) yield return elem; }
          if (SegmentListElement != null) yield return SegmentListElement;
          if (RoiListElement != null) yield return RoiListElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (UidElement != null) yield return new ElementValue("uid", UidElement);
          if (SopClass != null) yield return new ElementValue("sopClass", SopClass);
          if (FrameListElement != null) yield return new ElementValue("frameList", FrameListElement);
          foreach (var elem in ObservationUidElement) { if (elem != null) yield return new ElementValue("observationUid", elem); }
          if (SegmentListElement != null) yield return new ElementValue("segmentList", SegmentListElement);
          if (RoiListElement != null) yield return new ElementValue("roiList", RoiListElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "uid":
            value = UidElement;
            return UidElement is not null;
          case "sopClass":
            value = SopClass;
            return SopClass is not null;
          case "frameList":
            value = FrameListElement;
            return FrameListElement is not null;
          case "observationUid":
            value = ObservationUidElement;
            return ObservationUidElement?.Any() == true;
          case "segmentList":
            value = SegmentListElement;
            return SegmentListElement is not null;
          case "roiList":
            value = RoiListElement;
            return RoiListElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (UidElement is not null) yield return new KeyValuePair<string,object>("uid",UidElement);
        if (SopClass is not null) yield return new KeyValuePair<string,object>("sopClass",SopClass);
        if (FrameListElement is not null) yield return new KeyValuePair<string,object>("frameList",FrameListElement);
        if (ObservationUidElement?.Any() == true) yield return new KeyValuePair<string,object>("observationUid",ObservationUidElement);
        if (SegmentListElement is not null) yield return new KeyValuePair<string,object>("segmentList",SegmentListElement);
        if (RoiListElement is not null) yield return new KeyValuePair<string,object>("roiList",RoiListElement);
      }

    }

    /// <summary>
    /// A specific region in a DICOM image / frame
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ImagingSelection#ImageRegion", IsNestedType=true)]
    public partial class ImageRegionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ImagingSelection#ImageRegion"; } }

      /// <summary>
      /// POINT | MULTIPOINT | POLYLINE | POLYGON | ELLIPSE | ELLIPSOID
      /// </summary>
      [FhirElement("regionType", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionGraphicType> RegionTypeElement
      {
        get { return _RegionTypeElement; }
        set { _RegionTypeElement = value; OnPropertyChanged("RegionTypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionGraphicType> _RegionTypeElement;

      /// <summary>
      /// POINT | MULTIPOINT | POLYLINE | POLYGON | ELLIPSE | ELLIPSOID
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ImagingSelection.ImagingSelectionGraphicType? RegionType
      {
        get { return RegionTypeElement != null ? RegionTypeElement.Value : null; }
        set
        {
          if (value == null)
            RegionTypeElement = null;
          else
            RegionTypeElement = new Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionGraphicType>(value);
          OnPropertyChanged("RegionType");
        }
      }

      /// <summary>
      /// 2d | 3d
      /// </summary>
      [FhirElement("coordinateType", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionCoordinateType> CoordinateTypeElement
      {
        get { return _CoordinateTypeElement; }
        set { _CoordinateTypeElement = value; OnPropertyChanged("CoordinateTypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionCoordinateType> _CoordinateTypeElement;

      /// <summary>
      /// 2d | 3d
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ImagingSelection.ImagingSelectionCoordinateType? CoordinateType
      {
        get { return CoordinateTypeElement != null ? CoordinateTypeElement.Value : null; }
        set
        {
          if (value == null)
            CoordinateTypeElement = null;
          else
            CoordinateTypeElement = new Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionCoordinateType>(value);
          OnPropertyChanged("CoordinateType");
        }
      }

      /// <summary>
      /// Specifies the type of coordinates that define the image region 2d | 3d
      /// </summary>
      [FhirElement("coordinates", Order=60)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirDecimal> CoordinatesElement
      {
        get { if(_CoordinatesElement==null) _CoordinatesElement = new List<Hl7.Fhir.Model.FhirDecimal>(); return _CoordinatesElement; }
        set { _CoordinatesElement = value; OnPropertyChanged("CoordinatesElement"); }
      }

      private List<Hl7.Fhir.Model.FhirDecimal> _CoordinatesElement;

      /// <summary>
      /// Specifies the type of coordinates that define the image region 2d | 3d
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<decimal?> Coordinates
      {
        get { return CoordinatesElement != null ? CoordinatesElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            CoordinatesElement = null;
          else
            CoordinatesElement = new List<Hl7.Fhir.Model.FhirDecimal>(value.Select(elem=>new Hl7.Fhir.Model.FhirDecimal(elem)));
          OnPropertyChanged("Coordinates");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ImageRegionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RegionTypeElement != null) dest.RegionTypeElement = (Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionGraphicType>)RegionTypeElement.DeepCopy();
        if(CoordinateTypeElement != null) dest.CoordinateTypeElement = (Code<Hl7.Fhir.Model.ImagingSelection.ImagingSelectionCoordinateType>)CoordinateTypeElement.DeepCopy();
        if(CoordinatesElement != null) dest.CoordinatesElement = new List<Hl7.Fhir.Model.FhirDecimal>(CoordinatesElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ImageRegionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ImageRegionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RegionTypeElement, otherT.RegionTypeElement)) return false;
        if( !DeepComparable.Matches(CoordinateTypeElement, otherT.CoordinateTypeElement)) return false;
        if( !DeepComparable.Matches(CoordinatesElement, otherT.CoordinatesElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ImageRegionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RegionTypeElement, otherT.RegionTypeElement)) return false;
        if( !DeepComparable.IsExactly(CoordinateTypeElement, otherT.CoordinateTypeElement)) return false;
        if( !DeepComparable.IsExactly(CoordinatesElement, otherT.CoordinatesElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RegionTypeElement != null) yield return RegionTypeElement;
          if (CoordinateTypeElement != null) yield return CoordinateTypeElement;
          foreach (var elem in CoordinatesElement) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RegionTypeElement != null) yield return new ElementValue("regionType", RegionTypeElement);
          if (CoordinateTypeElement != null) yield return new ElementValue("coordinateType", CoordinateTypeElement);
          foreach (var elem in CoordinatesElement) { if (elem != null) yield return new ElementValue("coordinates", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "regionType":
            value = RegionTypeElement;
            return RegionTypeElement is not null;
          case "coordinateType":
            value = CoordinateTypeElement;
            return CoordinateTypeElement is not null;
          case "coordinates":
            value = CoordinatesElement;
            return CoordinatesElement?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RegionTypeElement is not null) yield return new KeyValuePair<string,object>("regionType",RegionTypeElement);
        if (CoordinateTypeElement is not null) yield return new KeyValuePair<string,object>("coordinateType",CoordinateTypeElement);
        if (CoordinatesElement?.Any() == true) yield return new KeyValuePair<string,object>("coordinates",CoordinatesElement);
      }

    }

    /// <summary>
    /// Business Identifier for Imaging Selection
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Associated request
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=100, FiveWs="FiveWs.cause")]
    [CLSCompliant(false)]
    [References("CarePlan","ServiceRequest","Appointment","AppointmentResponse","Task")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Subject of the selected instances and / or frames
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=110, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient","Group","Device","Location","Organization","Procedure","Practitioner","Medication","Substance","Specimen")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Date / Time when the selection of instances was made
    /// </summary>
    [FhirElement("issued", InSummary=true, Order=120, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.Instant IssuedElement
    {
      get { return _IssuedElement; }
      set { _IssuedElement = value; OnPropertyChanged("IssuedElement"); }
    }

    private Hl7.Fhir.Model.Instant _IssuedElement;

    /// <summary>
    /// Date / Time when the selection of instances was made
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public DateTimeOffset? Issued
    {
      get { return IssuedElement != null ? IssuedElement.Value : null; }
      set
      {
        if (value == null)
          IssuedElement = null;
        else
          IssuedElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("Issued");
      }
    }

    /// <summary>
    /// Author (human or machine)
    /// </summary>
    [FhirElement("performer", InSummary=true, Order=130, FiveWs="FiveWs.actor")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ImagingSelection.PerformerComponent> Performer
    {
      get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.ImagingSelection.PerformerComponent>(); return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private List<Hl7.Fhir.Model.ImagingSelection.PerformerComponent> _Performer;

    /// <summary>
    /// Imaging Selection description text or code
    /// </summary>
    [FhirElement("code", InSummary=true, Order=140)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// DICOM Study Instance UID
    /// </summary>
    [FhirElement("studyUid", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.Oid StudyUidElement
    {
      get { return _StudyUidElement; }
      set { _StudyUidElement = value; OnPropertyChanged("StudyUidElement"); }
    }

    private Hl7.Fhir.Model.Oid _StudyUidElement;

    /// <summary>
    /// DICOM Study Instance UID
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string StudyUid
    {
      get { return StudyUidElement != null ? StudyUidElement.Value : null; }
      set
      {
        if (value == null)
          StudyUidElement = null;
        else
          StudyUidElement = new Hl7.Fhir.Model.Oid(value);
        OnPropertyChanged("StudyUid");
      }
    }

    /// <summary>
    /// The imaging study from which the imaging selection is derived
    /// </summary>
    [FhirElement("derivedFrom", InSummary=true, Order=160)]
    [CLSCompliant(false)]
    [References("ImagingStudy")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> DerivedFrom
    {
      get { if(_DerivedFrom==null) _DerivedFrom = new List<Hl7.Fhir.Model.ResourceReference>(); return _DerivedFrom; }
      set { _DerivedFrom = value; OnPropertyChanged("DerivedFrom"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _DerivedFrom;

    /// <summary>
    /// The network service providing retrieval for the images referenced in the imaging selection
    /// </summary>
    [FhirElement("endpoint", InSummary=true, Order=170)]
    [CLSCompliant(false)]
    [References("Endpoint")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Endpoint
    {
      get { if(_Endpoint==null) _Endpoint = new List<Hl7.Fhir.Model.ResourceReference>(); return _Endpoint; }
      set { _Endpoint = value; OnPropertyChanged("Endpoint"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Endpoint;

    /// <summary>
    /// DICOM Series Instance UID
    /// </summary>
    [FhirElement("seriesUid", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.Oid SeriesUidElement
    {
      get { return _SeriesUidElement; }
      set { _SeriesUidElement = value; OnPropertyChanged("SeriesUidElement"); }
    }

    private Hl7.Fhir.Model.Oid _SeriesUidElement;

    /// <summary>
    /// DICOM Series Instance UID
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string SeriesUid
    {
      get { return SeriesUidElement != null ? SeriesUidElement.Value : null; }
      set
      {
        if (value == null)
          SeriesUidElement = null;
        else
          SeriesUidElement = new Hl7.Fhir.Model.Oid(value);
        OnPropertyChanged("SeriesUid");
      }
    }

    /// <summary>
    /// The Frame of Reference UID for the selected images
    /// </summary>
    [FhirElement("frameOfReferenceUid", InSummary=true, Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.Oid FrameOfReferenceUidElement
    {
      get { return _FrameOfReferenceUidElement; }
      set { _FrameOfReferenceUidElement = value; OnPropertyChanged("FrameOfReferenceUidElement"); }
    }

    private Hl7.Fhir.Model.Oid _FrameOfReferenceUidElement;

    /// <summary>
    /// The Frame of Reference UID for the selected images
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string FrameOfReferenceUid
    {
      get { return FrameOfReferenceUidElement != null ? FrameOfReferenceUidElement.Value : null; }
      set
      {
        if (value == null)
          FrameOfReferenceUidElement = null;
        else
          FrameOfReferenceUidElement = new Hl7.Fhir.Model.Oid(value);
        OnPropertyChanged("FrameOfReferenceUid");
      }
    }

    /// <summary>
    /// Body part examined
    /// </summary>
    [FhirElement("bodySite", InSummary=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.Coding BodySite
    {
      get { return _BodySite; }
      set { _BodySite = value; OnPropertyChanged("BodySite"); }
    }

    private Hl7.Fhir.Model.Coding _BodySite;

    /// <summary>
    /// The selected instances
    /// </summary>
    [FhirElement("instance", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ImagingSelection.InstanceComponent> Instance
    {
      get { if(_Instance==null) _Instance = new List<Hl7.Fhir.Model.ImagingSelection.InstanceComponent>(); return _Instance; }
      set { _Instance = value; OnPropertyChanged("Instance"); }
    }

    private List<Hl7.Fhir.Model.ImagingSelection.InstanceComponent> _Instance;

    /// <summary>
    /// A specific region in a DICOM image / frame
    /// </summary>
    [FhirElement("imageRegion", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.ImagingSelection.ImageRegionComponent ImageRegion
    {
      get { return _ImageRegion; }
      set { _ImageRegion = value; OnPropertyChanged("ImageRegion"); }
    }

    private Hl7.Fhir.Model.ImagingSelection.ImageRegionComponent _ImageRegion;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ImagingSelection;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(IssuedElement != null) dest.IssuedElement = (Hl7.Fhir.Model.Instant)IssuedElement.DeepCopy();
      if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.ImagingSelection.PerformerComponent>(Performer.DeepCopy());
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(StudyUidElement != null) dest.StudyUidElement = (Hl7.Fhir.Model.Oid)StudyUidElement.DeepCopy();
      if(DerivedFrom != null) dest.DerivedFrom = new List<Hl7.Fhir.Model.ResourceReference>(DerivedFrom.DeepCopy());
      if(Endpoint != null) dest.Endpoint = new List<Hl7.Fhir.Model.ResourceReference>(Endpoint.DeepCopy());
      if(SeriesUidElement != null) dest.SeriesUidElement = (Hl7.Fhir.Model.Oid)SeriesUidElement.DeepCopy();
      if(FrameOfReferenceUidElement != null) dest.FrameOfReferenceUidElement = (Hl7.Fhir.Model.Oid)FrameOfReferenceUidElement.DeepCopy();
      if(BodySite != null) dest.BodySite = (Hl7.Fhir.Model.Coding)BodySite.DeepCopy();
      if(Instance != null) dest.Instance = new List<Hl7.Fhir.Model.ImagingSelection.InstanceComponent>(Instance.DeepCopy());
      if(ImageRegion != null) dest.ImageRegion = (Hl7.Fhir.Model.ImagingSelection.ImageRegionComponent)ImageRegion.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ImagingSelection());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ImagingSelection;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(IssuedElement, otherT.IssuedElement)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(StudyUidElement, otherT.StudyUidElement)) return false;
      if( !DeepComparable.Matches(DerivedFrom, otherT.DerivedFrom)) return false;
      if( !DeepComparable.Matches(Endpoint, otherT.Endpoint)) return false;
      if( !DeepComparable.Matches(SeriesUidElement, otherT.SeriesUidElement)) return false;
      if( !DeepComparable.Matches(FrameOfReferenceUidElement, otherT.FrameOfReferenceUidElement)) return false;
      if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.Matches(Instance, otherT.Instance)) return false;
      if( !DeepComparable.Matches(ImageRegion, otherT.ImageRegion)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ImagingSelection;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(IssuedElement, otherT.IssuedElement)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(StudyUidElement, otherT.StudyUidElement)) return false;
      if( !DeepComparable.IsExactly(DerivedFrom, otherT.DerivedFrom)) return false;
      if( !DeepComparable.IsExactly(Endpoint, otherT.Endpoint)) return false;
      if( !DeepComparable.IsExactly(SeriesUidElement, otherT.SeriesUidElement)) return false;
      if( !DeepComparable.IsExactly(FrameOfReferenceUidElement, otherT.FrameOfReferenceUidElement)) return false;
      if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.IsExactly(Instance, otherT.Instance)) return false;
      if( !DeepComparable.IsExactly(ImageRegion, otherT.ImageRegion)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (Subject != null) yield return Subject;
        if (IssuedElement != null) yield return IssuedElement;
        foreach (var elem in Performer) { if (elem != null) yield return elem; }
        if (Code != null) yield return Code;
        if (StudyUidElement != null) yield return StudyUidElement;
        foreach (var elem in DerivedFrom) { if (elem != null) yield return elem; }
        foreach (var elem in Endpoint) { if (elem != null) yield return elem; }
        if (SeriesUidElement != null) yield return SeriesUidElement;
        if (FrameOfReferenceUidElement != null) yield return FrameOfReferenceUidElement;
        if (BodySite != null) yield return BodySite;
        foreach (var elem in Instance) { if (elem != null) yield return elem; }
        if (ImageRegion != null) yield return ImageRegion;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (IssuedElement != null) yield return new ElementValue("issued", IssuedElement);
        foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
        if (Code != null) yield return new ElementValue("code", Code);
        if (StudyUidElement != null) yield return new ElementValue("studyUid", StudyUidElement);
        foreach (var elem in DerivedFrom) { if (elem != null) yield return new ElementValue("derivedFrom", elem); }
        foreach (var elem in Endpoint) { if (elem != null) yield return new ElementValue("endpoint", elem); }
        if (SeriesUidElement != null) yield return new ElementValue("seriesUid", SeriesUidElement);
        if (FrameOfReferenceUidElement != null) yield return new ElementValue("frameOfReferenceUid", FrameOfReferenceUidElement);
        if (BodySite != null) yield return new ElementValue("bodySite", BodySite);
        foreach (var elem in Instance) { if (elem != null) yield return new ElementValue("instance", elem); }
        if (ImageRegion != null) yield return new ElementValue("imageRegion", ImageRegion);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "issued":
          value = IssuedElement;
          return IssuedElement is not null;
        case "performer":
          value = Performer;
          return Performer?.Any() == true;
        case "code":
          value = Code;
          return Code is not null;
        case "studyUid":
          value = StudyUidElement;
          return StudyUidElement is not null;
        case "derivedFrom":
          value = DerivedFrom;
          return DerivedFrom?.Any() == true;
        case "endpoint":
          value = Endpoint;
          return Endpoint?.Any() == true;
        case "seriesUid":
          value = SeriesUidElement;
          return SeriesUidElement is not null;
        case "frameOfReferenceUid":
          value = FrameOfReferenceUidElement;
          return FrameOfReferenceUidElement is not null;
        case "bodySite":
          value = BodySite;
          return BodySite is not null;
        case "instance":
          value = Instance;
          return Instance?.Any() == true;
        case "imageRegion":
          value = ImageRegion;
          return ImageRegion is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (IssuedElement is not null) yield return new KeyValuePair<string,object>("issued",IssuedElement);
      if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (StudyUidElement is not null) yield return new KeyValuePair<string,object>("studyUid",StudyUidElement);
      if (DerivedFrom?.Any() == true) yield return new KeyValuePair<string,object>("derivedFrom",DerivedFrom);
      if (Endpoint?.Any() == true) yield return new KeyValuePair<string,object>("endpoint",Endpoint);
      if (SeriesUidElement is not null) yield return new KeyValuePair<string,object>("seriesUid",SeriesUidElement);
      if (FrameOfReferenceUidElement is not null) yield return new KeyValuePair<string,object>("frameOfReferenceUid",FrameOfReferenceUidElement);
      if (BodySite is not null) yield return new KeyValuePair<string,object>("bodySite",BodySite);
      if (Instance?.Any() == true) yield return new KeyValuePair<string,object>("instance",Instance);
      if (ImageRegion is not null) yield return new KeyValuePair<string,object>("imageRegion",ImageRegion);
    }

  }

}

// end of file

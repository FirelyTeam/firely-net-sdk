// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Record of an event
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("AuditEvent","http://hl7.org/fhir/StructureDefinition/AuditEvent", IsResource=true)]
  public partial class AuditEvent : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "AuditEvent"; } }

    /// <summary>
    /// Indicator for type of action performed during the event that generated the event.
    /// (url: http://hl7.org/fhir/ValueSet/audit-event-action)
    /// (system: http://hl7.org/fhir/audit-event-action)
    /// </summary>
    [FhirEnumeration("AuditEventAction")]
    public enum AuditEventAction
    {
      /// <summary>
      /// Create a new database object, such as placing an order.
      /// (system: http://hl7.org/fhir/audit-event-action)
      /// </summary>
      [EnumLiteral("C", "http://hl7.org/fhir/audit-event-action"), Description("Create")]
      C,
      /// <summary>
      /// Display or print data, such as a doctor census.
      /// (system: http://hl7.org/fhir/audit-event-action)
      /// </summary>
      [EnumLiteral("R", "http://hl7.org/fhir/audit-event-action"), Description("Read/View/Print")]
      R,
      /// <summary>
      /// Update data, such as revise patient information.
      /// (system: http://hl7.org/fhir/audit-event-action)
      /// </summary>
      [EnumLiteral("U", "http://hl7.org/fhir/audit-event-action"), Description("Update")]
      U,
      /// <summary>
      /// Delete items, such as a doctor master file record.
      /// (system: http://hl7.org/fhir/audit-event-action)
      /// </summary>
      [EnumLiteral("D", "http://hl7.org/fhir/audit-event-action"), Description("Delete")]
      D,
      /// <summary>
      /// Perform a system or application function such as log-on, program execution or use of an object's method, or perform a query/search operation.
      /// (system: http://hl7.org/fhir/audit-event-action)
      /// </summary>
      [EnumLiteral("E", "http://hl7.org/fhir/audit-event-action"), Description("Execute")]
      E,
    }

    /// <summary>
    /// The severity of the audit entry.
    /// (url: http://hl7.org/fhir/ValueSet/audit-event-severity)
    /// (system: http://hl7.org/fhir/audit-event-severity)
    /// </summary>
    [FhirEnumeration("AuditEventSeverity")]
    public enum AuditEventSeverity
    {
      /// <summary>
      /// System is unusable.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("emergency", "http://hl7.org/fhir/audit-event-severity"), Description("Emergency")]
      Emergency,
      /// <summary>
      /// Action must be taken immediately.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("alert", "http://hl7.org/fhir/audit-event-severity"), Description("Alert")]
      Alert,
      /// <summary>
      /// Critical conditions.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("critical", "http://hl7.org/fhir/audit-event-severity"), Description("Critical")]
      Critical,
      /// <summary>
      /// Error conditions.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("error", "http://hl7.org/fhir/audit-event-severity"), Description("Error")]
      Error,
      /// <summary>
      /// Warning conditions.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("warning", "http://hl7.org/fhir/audit-event-severity"), Description("Warning")]
      Warning,
      /// <summary>
      /// Normal but significant condition.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("notice", "http://hl7.org/fhir/audit-event-severity"), Description("Notice")]
      Notice,
      /// <summary>
      /// Informational messages.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("informational", "http://hl7.org/fhir/audit-event-severity"), Description("Informational")]
      Informational,
      /// <summary>
      /// Debug-level messages.
      /// (system: http://hl7.org/fhir/audit-event-severity)
      /// </summary>
      [EnumLiteral("debug", "http://hl7.org/fhir/audit-event-severity"), Description("Debug")]
      Debug,
    }

    /// <summary>
    /// Whether the event succeeded or failed
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("AuditEvent#Outcome", IsNestedType=true)]
    public partial class OutcomeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "AuditEvent#Outcome"; } }

      /// <summary>
      /// Whether the event succeeded or failed
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40, FiveWs="FiveWs.what[x]")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.Coding _Code;

      /// <summary>
      /// Additional outcome detail
      /// </summary>
      [FhirElement("detail", InSummary=true, Order=50, FiveWs="FiveWs.what[x]")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OutcomeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.Coding)Code.DeepCopy();
        if(Detail != null) dest.Detail = new List<Hl7.Fhir.Model.CodeableConcept>(Detail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OutcomeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OutcomeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OutcomeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// Actor involved in the event
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("AuditEvent#Agent", IsNestedType=true)]
    public partial class AgentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "AuditEvent#Agent"; } }

      /// <summary>
      /// How agent participated
      /// </summary>
      [FhirElement("type", Order=40, FiveWs="FiveWs.who")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Agent role in the event
      /// </summary>
      [FhirElement("role", Order=50, FiveWs="FiveWs.who")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Role
      {
        get { if(_Role==null) _Role = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Role;

      /// <summary>
      /// Identifier of who
      /// </summary>
      [FhirElement("who", InSummary=true, Order=60, FiveWs="FiveWs.who")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","CareTeam","Patient","Device","RelatedPerson")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Who
      {
        get { return _Who; }
        set { _Who = value; OnPropertyChanged("Who"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Who;

      /// <summary>
      /// Whether user is initiator
      /// </summary>
      [FhirElement("requestor", InSummary=true, Order=70, FiveWs="FiveWs.who")]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean RequestorElement
      {
        get { return _RequestorElement; }
        set { _RequestorElement = value; OnPropertyChanged("RequestorElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _RequestorElement;

      /// <summary>
      /// Whether user is initiator
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Requestor
      {
        get { return RequestorElement != null ? RequestorElement.Value : null; }
        set
        {
          if (value == null)
            RequestorElement = null;
          else
            RequestorElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Requestor");
        }
      }

      /// <summary>
      /// The agent location when the event occurred
      /// </summary>
      [FhirElement("location", Order=80, FiveWs="FiveWs.where[x]")]
      [CLSCompliant(false)]
      [References("Location")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Location;

      /// <summary>
      /// Policy that authorized the agent participation in the event
      /// </summary>
      [FhirElement("policy", Order=90, FiveWs="FiveWs.why[x]")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirUri> PolicyElement
      {
        get { if(_PolicyElement==null) _PolicyElement = new List<Hl7.Fhir.Model.FhirUri>(); return _PolicyElement; }
        set { _PolicyElement = value; OnPropertyChanged("PolicyElement"); }
      }

      private List<Hl7.Fhir.Model.FhirUri> _PolicyElement;

      /// <summary>
      /// Policy that authorized the agent participation in the event
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> Policy
      {
        get { return PolicyElement != null ? PolicyElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            PolicyElement = null;
          else
            PolicyElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
          OnPropertyChanged("Policy");
        }
      }

      /// <summary>
      /// This agent network location for the activity
      /// </summary>
      [FhirElement("network", Order=100, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.where[x]")]
      [CLSCompliant(false)]
      [References("Endpoint")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.FhirString))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Network
      {
        get { return _Network; }
        set { _Network = value; OnPropertyChanged("Network"); }
      }

      private Hl7.Fhir.Model.DataType _Network;

      /// <summary>
      /// Allowable authorization for this agent
      /// </summary>
      [FhirElement("authorization", Order=110, FiveWs="FiveWs.why[x]")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Authorization
      {
        get { if(_Authorization==null) _Authorization = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Authorization; }
        set { _Authorization = value; OnPropertyChanged("Authorization"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Authorization;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AgentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Role != null) dest.Role = new List<Hl7.Fhir.Model.CodeableConcept>(Role.DeepCopy());
        if(Who != null) dest.Who = (Hl7.Fhir.Model.ResourceReference)Who.DeepCopy();
        if(RequestorElement != null) dest.RequestorElement = (Hl7.Fhir.Model.FhirBoolean)RequestorElement.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
        if(PolicyElement != null) dest.PolicyElement = new List<Hl7.Fhir.Model.FhirUri>(PolicyElement.DeepCopy());
        if(Network != null) dest.Network = (Hl7.Fhir.Model.DataType)Network.DeepCopy();
        if(Authorization != null) dest.Authorization = new List<Hl7.Fhir.Model.CodeableConcept>(Authorization.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AgentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AgentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Who, otherT.Who)) return false;
        if( !DeepComparable.Matches(RequestorElement, otherT.RequestorElement)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;
        if( !DeepComparable.Matches(PolicyElement, otherT.PolicyElement)) return false;
        if( !DeepComparable.Matches(Network, otherT.Network)) return false;
        if( !DeepComparable.Matches(Authorization, otherT.Authorization)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AgentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Who, otherT.Who)) return false;
        if( !DeepComparable.IsExactly(RequestorElement, otherT.RequestorElement)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
        if( !DeepComparable.IsExactly(PolicyElement, otherT.PolicyElement)) return false;
        if( !DeepComparable.IsExactly(Network, otherT.Network)) return false;
        if( !DeepComparable.IsExactly(Authorization, otherT.Authorization)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Role) { if (elem != null) yield return elem; }
          if (Who != null) yield return Who;
          if (RequestorElement != null) yield return RequestorElement;
          if (Location != null) yield return Location;
          foreach (var elem in PolicyElement) { if (elem != null) yield return elem; }
          if (Network != null) yield return Network;
          foreach (var elem in Authorization) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Role) { if (elem != null) yield return new ElementValue("role", elem); }
          if (Who != null) yield return new ElementValue("who", Who);
          if (RequestorElement != null) yield return new ElementValue("requestor", RequestorElement);
          if (Location != null) yield return new ElementValue("location", Location);
          foreach (var elem in PolicyElement) { if (elem != null) yield return new ElementValue("policy", elem); }
          if (Network != null) yield return new ElementValue("network", Network);
          foreach (var elem in Authorization) { if (elem != null) yield return new ElementValue("authorization", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "role":
            value = Role;
            return Role?.Any() == true;
          case "who":
            value = Who;
            return Who is not null;
          case "requestor":
            value = RequestorElement;
            return RequestorElement is not null;
          case "location":
            value = Location;
            return Location is not null;
          case "policy":
            value = PolicyElement;
            return PolicyElement?.Any() == true;
          case "network":
            value = Network;
            return Network is not null;
          case "authorization":
            value = Authorization;
            return Authorization?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Role?.Any() == true) yield return new KeyValuePair<string,object>("role",Role);
        if (Who is not null) yield return new KeyValuePair<string,object>("who",Who);
        if (RequestorElement is not null) yield return new KeyValuePair<string,object>("requestor",RequestorElement);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
        if (PolicyElement?.Any() == true) yield return new KeyValuePair<string,object>("policy",PolicyElement);
        if (Network is not null) yield return new KeyValuePair<string,object>("network",Network);
        if (Authorization?.Any() == true) yield return new KeyValuePair<string,object>("authorization",Authorization);
      }

    }

    /// <summary>
    /// Audit Event Reporter
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("AuditEvent#Source", IsNestedType=true)]
    public partial class SourceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "AuditEvent#Source"; } }

      /// <summary>
      /// Logical source location within the enterprise
      /// </summary>
      [FhirElement("site", Order=40, FiveWs="FiveWs.witness")]
      [CLSCompliant(false)]
      [References("Location")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Site
      {
        get { return _Site; }
        set { _Site = value; OnPropertyChanged("Site"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Site;

      /// <summary>
      /// The identity of source detecting the event
      /// </summary>
      [FhirElement("observer", InSummary=true, Order=50, FiveWs="FiveWs.witness")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","CareTeam","Patient","Device","RelatedPerson")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Observer
      {
        get { return _Observer; }
        set { _Observer = value; OnPropertyChanged("Observer"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Observer;

      /// <summary>
      /// The type of source where event originated
      /// </summary>
      [FhirElement("type", Order=60, FiveWs="FiveWs.witness")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SourceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Site != null) dest.Site = (Hl7.Fhir.Model.ResourceReference)Site.DeepCopy();
        if(Observer != null) dest.Observer = (Hl7.Fhir.Model.ResourceReference)Observer.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SourceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SourceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Site, otherT.Site)) return false;
        if( !DeepComparable.Matches(Observer, otherT.Observer)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SourceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
        if( !DeepComparable.IsExactly(Observer, otherT.Observer)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Site != null) yield return Site;
          if (Observer != null) yield return Observer;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Site != null) yield return new ElementValue("site", Site);
          if (Observer != null) yield return new ElementValue("observer", Observer);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "site":
            value = Site;
            return Site is not null;
          case "observer":
            value = Observer;
            return Observer is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Site is not null) yield return new KeyValuePair<string,object>("site",Site);
        if (Observer is not null) yield return new KeyValuePair<string,object>("observer",Observer);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
      }

    }

    /// <summary>
    /// Data or objects used
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("AuditEvent#Entity", IsNestedType=true)]
    public partial class EntityComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "AuditEvent#Entity"; } }

      /// <summary>
      /// Specific instance of resource
      /// </summary>
      [FhirElement("what", InSummary=true, Order=40, FiveWs="FiveWs.what[x]")]
      [CLSCompliant(false)]
      [References("Resource")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference What
      {
        get { return _What; }
        set { _What = value; OnPropertyChanged("What"); }
      }

      private Hl7.Fhir.Model.ResourceReference _What;

      /// <summary>
      /// What role the entity played
      /// </summary>
      [FhirElement("role", Order=50, FiveWs="FiveWs.context")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// Security labels on the entity
      /// </summary>
      [FhirElement("securityLabel", Order=60, FiveWs="FiveWs.context")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> SecurityLabel
      {
        get { if(_SecurityLabel==null) _SecurityLabel = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SecurityLabel; }
        set { _SecurityLabel = value; OnPropertyChanged("SecurityLabel"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _SecurityLabel;

      /// <summary>
      /// Query parameters
      /// </summary>
      [FhirElement("query", InSummary=true, Order=70, FiveWs="FiveWs.context")]
      [DataMember]
      public Hl7.Fhir.Model.Base64Binary QueryElement
      {
        get { return _QueryElement; }
        set { _QueryElement = value; OnPropertyChanged("QueryElement"); }
      }

      private Hl7.Fhir.Model.Base64Binary _QueryElement;

      /// <summary>
      /// Query parameters
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public byte[] Query
      {
        get { return QueryElement != null ? QueryElement.Value : null; }
        set
        {
          if (value == null)
            QueryElement = null;
          else
            QueryElement = new Hl7.Fhir.Model.Base64Binary(value);
          OnPropertyChanged("Query");
        }
      }

      /// <summary>
      /// Additional Information about the entity
      /// </summary>
      [FhirElement("detail", Order=80, FiveWs="FiveWs.context")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.AuditEvent.DetailComponent> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.AuditEvent.DetailComponent>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.AuditEvent.DetailComponent> _Detail;

      /// <summary>
      /// Entity is attributed to this agent
      /// </summary>
      [FhirElement("agent", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.AuditEvent.AgentComponent> Agent
      {
        get { if(_Agent==null) _Agent = new List<Hl7.Fhir.Model.AuditEvent.AgentComponent>(); return _Agent; }
        set { _Agent = value; OnPropertyChanged("Agent"); }
      }

      private List<Hl7.Fhir.Model.AuditEvent.AgentComponent> _Agent;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EntityComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(What != null) dest.What = (Hl7.Fhir.Model.ResourceReference)What.DeepCopy();
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(SecurityLabel != null) dest.SecurityLabel = new List<Hl7.Fhir.Model.CodeableConcept>(SecurityLabel.DeepCopy());
        if(QueryElement != null) dest.QueryElement = (Hl7.Fhir.Model.Base64Binary)QueryElement.DeepCopy();
        if(Detail != null) dest.Detail = new List<Hl7.Fhir.Model.AuditEvent.DetailComponent>(Detail.DeepCopy());
        if(Agent != null) dest.Agent = new List<Hl7.Fhir.Model.AuditEvent.AgentComponent>(Agent.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EntityComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EntityComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(What, otherT.What)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(SecurityLabel, otherT.SecurityLabel)) return false;
        if( !DeepComparable.Matches(QueryElement, otherT.QueryElement)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;
        if( !DeepComparable.Matches(Agent, otherT.Agent)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EntityComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(What, otherT.What)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(SecurityLabel, otherT.SecurityLabel)) return false;
        if( !DeepComparable.IsExactly(QueryElement, otherT.QueryElement)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;
        if( !DeepComparable.IsExactly(Agent, otherT.Agent)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (What != null) yield return What;
          if (Role != null) yield return Role;
          foreach (var elem in SecurityLabel) { if (elem != null) yield return elem; }
          if (QueryElement != null) yield return QueryElement;
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
          foreach (var elem in Agent) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (What != null) yield return new ElementValue("what", What);
          if (Role != null) yield return new ElementValue("role", Role);
          foreach (var elem in SecurityLabel) { if (elem != null) yield return new ElementValue("securityLabel", elem); }
          if (QueryElement != null) yield return new ElementValue("query", QueryElement);
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
          foreach (var elem in Agent) { if (elem != null) yield return new ElementValue("agent", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "what":
            value = What;
            return What is not null;
          case "role":
            value = Role;
            return Role is not null;
          case "securityLabel":
            value = SecurityLabel;
            return SecurityLabel?.Any() == true;
          case "query":
            value = QueryElement;
            return QueryElement is not null;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          case "agent":
            value = Agent;
            return Agent?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (What is not null) yield return new KeyValuePair<string,object>("what",What);
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (SecurityLabel?.Any() == true) yield return new KeyValuePair<string,object>("securityLabel",SecurityLabel);
        if (QueryElement is not null) yield return new KeyValuePair<string,object>("query",QueryElement);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
        if (Agent?.Any() == true) yield return new KeyValuePair<string,object>("agent",Agent);
      }

    }

    /// <summary>
    /// Additional Information about the entity
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("AuditEvent#Detail", IsNestedType=true)]
    public partial class DetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "AuditEvent#Detail"; } }

      /// <summary>
      /// Name of the property
      /// </summary>
      [FhirElement("type", Order=40, FiveWs="FiveWs.context")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Property value
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.context")]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.Time),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Base64Binary))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Type/identifier of event
    /// </summary>
    [FhirElement("category", InSummary=true, Order=90, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Specific type of event
    /// </summary>
    [FhirElement("code", InSummary=true, Order=100, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Type of action performed during the event
    /// </summary>
    [FhirElement("action", InSummary=true, Order=110, FiveWs="FiveWs.what[x]")]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction> ActionElement
    {
      get { return _ActionElement; }
      set { _ActionElement = value; OnPropertyChanged("ActionElement"); }
    }

    private Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction> _ActionElement;

    /// <summary>
    /// Type of action performed during the event
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.AuditEvent.AuditEventAction? Action
    {
      get { return ActionElement != null ? ActionElement.Value : null; }
      set
      {
        if (value == null)
          ActionElement = null;
        else
          ActionElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>(value);
        OnPropertyChanged("Action");
      }
    }

    /// <summary>
    /// emergency | alert | critical | error | warning | notice | informational | debug
    /// </summary>
    [FhirElement("severity", InSummary=true, Order=120)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.AuditEvent.AuditEventSeverity> SeverityElement
    {
      get { return _SeverityElement; }
      set { _SeverityElement = value; OnPropertyChanged("SeverityElement"); }
    }

    private Code<Hl7.Fhir.Model.AuditEvent.AuditEventSeverity> _SeverityElement;

    /// <summary>
    /// emergency | alert | critical | error | warning | notice | informational | debug
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.AuditEvent.AuditEventSeverity? Severity
    {
      get { return SeverityElement != null ? SeverityElement.Value : null; }
      set
      {
        if (value == null)
          SeverityElement = null;
        else
          SeverityElement = new Code<Hl7.Fhir.Model.AuditEvent.AuditEventSeverity>(value);
        OnPropertyChanged("Severity");
      }
    }

    /// <summary>
    /// When the activity occurred
    /// </summary>
    [FhirElement("occurred", Order=130, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.FhirDateTime))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Occurred
    {
      get { return _Occurred; }
      set { _Occurred = value; OnPropertyChanged("Occurred"); }
    }

    private Hl7.Fhir.Model.DataType _Occurred;

    /// <summary>
    /// Time when the event was recorded
    /// </summary>
    [FhirElement("recorded", InSummary=true, Order=140, FiveWs="FiveWs.recorded")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Instant RecordedElement
    {
      get { return _RecordedElement; }
      set { _RecordedElement = value; OnPropertyChanged("RecordedElement"); }
    }

    private Hl7.Fhir.Model.Instant _RecordedElement;

    /// <summary>
    /// Time when the event was recorded
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public DateTimeOffset? Recorded
    {
      get { return RecordedElement != null ? RecordedElement.Value : null; }
      set
      {
        if (value == null)
          RecordedElement = null;
        else
          RecordedElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("Recorded");
      }
    }

    /// <summary>
    /// Whether the event succeeded or failed
    /// </summary>
    [FhirElement("outcome", InSummary=true, Order=150, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.AuditEvent.OutcomeComponent Outcome
    {
      get { return _Outcome; }
      set { _Outcome = value; OnPropertyChanged("Outcome"); }
    }

    private Hl7.Fhir.Model.AuditEvent.OutcomeComponent _Outcome;

    /// <summary>
    /// Authorization related to the event
    /// </summary>
    [FhirElement("authorization", InSummary=true, Order=160, FiveWs="FiveWs.why[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Authorization
    {
      get { if(_Authorization==null) _Authorization = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Authorization; }
      set { _Authorization = value; OnPropertyChanged("Authorization"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Authorization;

    /// <summary>
    /// Workflow authorization within which this event occurred
    /// </summary>
    [FhirElement("basedOn", Order=170, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("CarePlan","DeviceRequest","ImmunizationRecommendation","MedicationRequest","NutritionOrder","ServiceRequest","Task")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Encounter within which this event occurred or which the event is tightly associated
    /// </summary>
    [FhirElement("encounter", Order=180, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Actor involved in the event
    /// </summary>
    [FhirElement("agent", Order=190, FiveWs="FiveWs.who")]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.AuditEvent.AgentComponent> Agent
    {
      get { if(_Agent==null) _Agent = new List<Hl7.Fhir.Model.AuditEvent.AgentComponent>(); return _Agent; }
      set { _Agent = value; OnPropertyChanged("Agent"); }
    }

    private List<Hl7.Fhir.Model.AuditEvent.AgentComponent> _Agent;

    /// <summary>
    /// Audit Event Reporter
    /// </summary>
    [FhirElement("source", Order=200, FiveWs="FiveWs.witness")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.AuditEvent.SourceComponent Source
    {
      get { return _Source; }
      set { _Source = value; OnPropertyChanged("Source"); }
    }

    private Hl7.Fhir.Model.AuditEvent.SourceComponent _Source;

    /// <summary>
    /// Data or objects used
    /// </summary>
    [FhirElement("entity", Order=210, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.AuditEvent.EntityComponent> Entity
    {
      get { if(_Entity==null) _Entity = new List<Hl7.Fhir.Model.AuditEvent.EntityComponent>(); return _Entity; }
      set { _Entity = value; OnPropertyChanged("Entity"); }
    }

    private List<Hl7.Fhir.Model.AuditEvent.EntityComponent> _Entity;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as AuditEvent;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(ActionElement != null) dest.ActionElement = (Code<Hl7.Fhir.Model.AuditEvent.AuditEventAction>)ActionElement.DeepCopy();
      if(SeverityElement != null) dest.SeverityElement = (Code<Hl7.Fhir.Model.AuditEvent.AuditEventSeverity>)SeverityElement.DeepCopy();
      if(Occurred != null) dest.Occurred = (Hl7.Fhir.Model.DataType)Occurred.DeepCopy();
      if(RecordedElement != null) dest.RecordedElement = (Hl7.Fhir.Model.Instant)RecordedElement.DeepCopy();
      if(Outcome != null) dest.Outcome = (Hl7.Fhir.Model.AuditEvent.OutcomeComponent)Outcome.DeepCopy();
      if(Authorization != null) dest.Authorization = new List<Hl7.Fhir.Model.CodeableConcept>(Authorization.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(Agent != null) dest.Agent = new List<Hl7.Fhir.Model.AuditEvent.AgentComponent>(Agent.DeepCopy());
      if(Source != null) dest.Source = (Hl7.Fhir.Model.AuditEvent.SourceComponent)Source.DeepCopy();
      if(Entity != null) dest.Entity = new List<Hl7.Fhir.Model.AuditEvent.EntityComponent>(Entity.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new AuditEvent());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as AuditEvent;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(ActionElement, otherT.ActionElement)) return false;
      if( !DeepComparable.Matches(SeverityElement, otherT.SeverityElement)) return false;
      if( !DeepComparable.Matches(Occurred, otherT.Occurred)) return false;
      if( !DeepComparable.Matches(RecordedElement, otherT.RecordedElement)) return false;
      if( !DeepComparable.Matches(Outcome, otherT.Outcome)) return false;
      if( !DeepComparable.Matches(Authorization, otherT.Authorization)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(Agent, otherT.Agent)) return false;
      if( !DeepComparable.Matches(Source, otherT.Source)) return false;
      if( !DeepComparable.Matches(Entity, otherT.Entity)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as AuditEvent;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(ActionElement, otherT.ActionElement)) return false;
      if( !DeepComparable.IsExactly(SeverityElement, otherT.SeverityElement)) return false;
      if( !DeepComparable.IsExactly(Occurred, otherT.Occurred)) return false;
      if( !DeepComparable.IsExactly(RecordedElement, otherT.RecordedElement)) return false;
      if( !DeepComparable.IsExactly(Outcome, otherT.Outcome)) return false;
      if( !DeepComparable.IsExactly(Authorization, otherT.Authorization)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(Agent, otherT.Agent)) return false;
      if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;
      if( !DeepComparable.IsExactly(Entity, otherT.Entity)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Code != null) yield return Code;
        if (ActionElement != null) yield return ActionElement;
        if (SeverityElement != null) yield return SeverityElement;
        if (Occurred != null) yield return Occurred;
        if (RecordedElement != null) yield return RecordedElement;
        if (Outcome != null) yield return Outcome;
        foreach (var elem in Authorization) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (Encounter != null) yield return Encounter;
        foreach (var elem in Agent) { if (elem != null) yield return elem; }
        if (Source != null) yield return Source;
        foreach (var elem in Entity) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Code != null) yield return new ElementValue("code", Code);
        if (ActionElement != null) yield return new ElementValue("action", ActionElement);
        if (SeverityElement != null) yield return new ElementValue("severity", SeverityElement);
        if (Occurred != null) yield return new ElementValue("occurred", Occurred);
        if (RecordedElement != null) yield return new ElementValue("recorded", RecordedElement);
        if (Outcome != null) yield return new ElementValue("outcome", Outcome);
        foreach (var elem in Authorization) { if (elem != null) yield return new ElementValue("authorization", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        foreach (var elem in Agent) { if (elem != null) yield return new ElementValue("agent", elem); }
        if (Source != null) yield return new ElementValue("source", Source);
        foreach (var elem in Entity) { if (elem != null) yield return new ElementValue("entity", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "code":
          value = Code;
          return Code is not null;
        case "action":
          value = ActionElement;
          return ActionElement is not null;
        case "severity":
          value = SeverityElement;
          return SeverityElement is not null;
        case "occurred":
          value = Occurred;
          return Occurred is not null;
        case "recorded":
          value = RecordedElement;
          return RecordedElement is not null;
        case "outcome":
          value = Outcome;
          return Outcome is not null;
        case "authorization":
          value = Authorization;
          return Authorization?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "agent":
          value = Agent;
          return Agent?.Any() == true;
        case "source":
          value = Source;
          return Source is not null;
        case "entity":
          value = Entity;
          return Entity?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (ActionElement is not null) yield return new KeyValuePair<string,object>("action",ActionElement);
      if (SeverityElement is not null) yield return new KeyValuePair<string,object>("severity",SeverityElement);
      if (Occurred is not null) yield return new KeyValuePair<string,object>("occurred",Occurred);
      if (RecordedElement is not null) yield return new KeyValuePair<string,object>("recorded",RecordedElement);
      if (Outcome is not null) yield return new KeyValuePair<string,object>("outcome",Outcome);
      if (Authorization?.Any() == true) yield return new KeyValuePair<string,object>("authorization",Authorization);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (Agent?.Any() == true) yield return new KeyValuePair<string,object>("agent",Agent);
      if (Source is not null) yield return new KeyValuePair<string,object>("source",Source);
      if (Entity?.Any() == true) yield return new KeyValuePair<string,object>("entity",Entity);
    }

  }

}

// end of file

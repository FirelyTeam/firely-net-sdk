// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Description of intented testing
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("TestPlan","http://hl7.org/fhir/StructureDefinition/TestPlan", IsResource=true)]
  public partial class TestPlan : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "TestPlan"; } }

    /// <summary>
    /// The required criteria to execute the test plan - e.g. preconditions, previous tests
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestPlan#Dependency", IsNestedType=true)]
    [BackboneType("TestPlan.dependency")]
    public partial class DependencyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestPlan#Dependency"; } }

      /// <summary>
      /// Description of the dependency criterium
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Description of the dependency criterium
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Link to predecessor test plans
      /// </summary>
      [FhirElement("predecessor", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Predecessor
      {
        get { return _Predecessor; }
        set { _Predecessor = value; OnPropertyChanged("Predecessor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Predecessor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DependencyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Predecessor != null) dest.Predecessor = (Hl7.Fhir.Model.ResourceReference)Predecessor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DependencyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DependencyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Predecessor, otherT.Predecessor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DependencyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Predecessor, otherT.Predecessor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (Predecessor != null) yield return Predecessor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (Predecessor != null) yield return new ElementValue("predecessor", Predecessor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "predecessor":
            value = Predecessor;
            return Predecessor is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Predecessor is not null) yield return new KeyValuePair<string,object>("predecessor",Predecessor);
      }

    }

    /// <summary>
    /// The test cases that constitute this plan
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestPlan#TestCase", IsNestedType=true)]
    [BackboneType("TestPlan.testCase")]
    public partial class TestCaseComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestPlan#TestCase"; } }

      /// <summary>
      /// Sequence of test case in the test plan
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Integer SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.Integer _SequenceElement;

      /// <summary>
      /// Sequence of test case in the test plan
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// The scope or artifact covered by the case
      /// </summary>
      [FhirElement("scope", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Scope
      {
        get { if(_Scope==null) _Scope = new List<Hl7.Fhir.Model.ResourceReference>(); return _Scope; }
        set { _Scope = value; OnPropertyChanged("Scope"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Scope;

      /// <summary>
      /// Required criteria to execute the test case
      /// </summary>
      [FhirElement("dependency", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestPlan.TestCaseDependencyComponent> Dependency
      {
        get { if(_Dependency==null) _Dependency = new List<Hl7.Fhir.Model.TestPlan.TestCaseDependencyComponent>(); return _Dependency; }
        set { _Dependency = value; OnPropertyChanged("Dependency"); }
      }

      private List<Hl7.Fhir.Model.TestPlan.TestCaseDependencyComponent> _Dependency;

      /// <summary>
      /// The actual test to be executed
      /// </summary>
      [FhirElement("testRun", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestPlan.TestRunComponent> TestRun
      {
        get { if(_TestRun==null) _TestRun = new List<Hl7.Fhir.Model.TestPlan.TestRunComponent>(); return _TestRun; }
        set { _TestRun = value; OnPropertyChanged("TestRun"); }
      }

      private List<Hl7.Fhir.Model.TestPlan.TestRunComponent> _TestRun;

      /// <summary>
      /// The test data used in the test case
      /// </summary>
      [FhirElement("testData", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestPlan.TestDataComponent> TestData
      {
        get { if(_TestData==null) _TestData = new List<Hl7.Fhir.Model.TestPlan.TestDataComponent>(); return _TestData; }
        set { _TestData = value; OnPropertyChanged("TestData"); }
      }

      private List<Hl7.Fhir.Model.TestPlan.TestDataComponent> _TestData;

      /// <summary>
      /// Test assertions or expectations
      /// </summary>
      [FhirElement("assertion", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestPlan.AssertionComponent> Assertion
      {
        get { if(_Assertion==null) _Assertion = new List<Hl7.Fhir.Model.TestPlan.AssertionComponent>(); return _Assertion; }
        set { _Assertion = value; OnPropertyChanged("Assertion"); }
      }

      private List<Hl7.Fhir.Model.TestPlan.AssertionComponent> _Assertion;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TestCaseComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.Integer)SequenceElement.DeepCopy();
        if(Scope != null) dest.Scope = new List<Hl7.Fhir.Model.ResourceReference>(Scope.DeepCopy());
        if(Dependency != null) dest.Dependency = new List<Hl7.Fhir.Model.TestPlan.TestCaseDependencyComponent>(Dependency.DeepCopy());
        if(TestRun != null) dest.TestRun = new List<Hl7.Fhir.Model.TestPlan.TestRunComponent>(TestRun.DeepCopy());
        if(TestData != null) dest.TestData = new List<Hl7.Fhir.Model.TestPlan.TestDataComponent>(TestData.DeepCopy());
        if(Assertion != null) dest.Assertion = new List<Hl7.Fhir.Model.TestPlan.AssertionComponent>(Assertion.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TestCaseComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TestCaseComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Scope, otherT.Scope)) return false;
        if( !DeepComparable.Matches(Dependency, otherT.Dependency)) return false;
        if( !DeepComparable.Matches(TestRun, otherT.TestRun)) return false;
        if( !DeepComparable.Matches(TestData, otherT.TestData)) return false;
        if( !DeepComparable.Matches(Assertion, otherT.Assertion)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TestCaseComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Scope, otherT.Scope)) return false;
        if( !DeepComparable.IsExactly(Dependency, otherT.Dependency)) return false;
        if( !DeepComparable.IsExactly(TestRun, otherT.TestRun)) return false;
        if( !DeepComparable.IsExactly(TestData, otherT.TestData)) return false;
        if( !DeepComparable.IsExactly(Assertion, otherT.Assertion)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          foreach (var elem in Scope) { if (elem != null) yield return elem; }
          foreach (var elem in Dependency) { if (elem != null) yield return elem; }
          foreach (var elem in TestRun) { if (elem != null) yield return elem; }
          foreach (var elem in TestData) { if (elem != null) yield return elem; }
          foreach (var elem in Assertion) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          foreach (var elem in Scope) { if (elem != null) yield return new ElementValue("scope", elem); }
          foreach (var elem in Dependency) { if (elem != null) yield return new ElementValue("dependency", elem); }
          foreach (var elem in TestRun) { if (elem != null) yield return new ElementValue("testRun", elem); }
          foreach (var elem in TestData) { if (elem != null) yield return new ElementValue("testData", elem); }
          foreach (var elem in Assertion) { if (elem != null) yield return new ElementValue("assertion", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "scope":
            value = Scope;
            return Scope?.Any() == true;
          case "dependency":
            value = Dependency;
            return Dependency?.Any() == true;
          case "testRun":
            value = TestRun;
            return TestRun?.Any() == true;
          case "testData":
            value = TestData;
            return TestData?.Any() == true;
          case "assertion":
            value = Assertion;
            return Assertion?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Scope?.Any() == true) yield return new KeyValuePair<string,object>("scope",Scope);
        if (Dependency?.Any() == true) yield return new KeyValuePair<string,object>("dependency",Dependency);
        if (TestRun?.Any() == true) yield return new KeyValuePair<string,object>("testRun",TestRun);
        if (TestData?.Any() == true) yield return new KeyValuePair<string,object>("testData",TestData);
        if (Assertion?.Any() == true) yield return new KeyValuePair<string,object>("assertion",Assertion);
      }

    }

    /// <summary>
    /// Required criteria to execute the test case
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestPlan#TestCaseDependency", IsNestedType=true)]
    [BackboneType("TestPlan.testCase.dependency")]
    public partial class TestCaseDependencyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestPlan#TestCaseDependency"; } }

      /// <summary>
      /// Description of the criteria
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Description of the criteria
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Link to predecessor test plans
      /// </summary>
      [FhirElement("predecessor", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Predecessor
      {
        get { return _Predecessor; }
        set { _Predecessor = value; OnPropertyChanged("Predecessor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Predecessor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TestCaseDependencyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Predecessor != null) dest.Predecessor = (Hl7.Fhir.Model.ResourceReference)Predecessor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TestCaseDependencyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TestCaseDependencyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Predecessor, otherT.Predecessor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TestCaseDependencyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Predecessor, otherT.Predecessor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (Predecessor != null) yield return Predecessor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (Predecessor != null) yield return new ElementValue("predecessor", Predecessor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "predecessor":
            value = Predecessor;
            return Predecessor is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Predecessor is not null) yield return new KeyValuePair<string,object>("predecessor",Predecessor);
      }

    }

    /// <summary>
    /// The actual test to be executed
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestPlan#TestRun", IsNestedType=true)]
    [BackboneType("TestPlan.testCase.testRun")]
    public partial class TestRunComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestPlan#TestRun"; } }

      /// <summary>
      /// The narrative description of the tests
      /// </summary>
      [FhirElement("narrative", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown NarrativeElement
      {
        get { return _NarrativeElement; }
        set { _NarrativeElement = value; OnPropertyChanged("NarrativeElement"); }
      }

      private Hl7.Fhir.Model.Markdown _NarrativeElement;

      /// <summary>
      /// The narrative description of the tests
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Narrative
      {
        get { return NarrativeElement != null ? NarrativeElement.Value : null; }
        set
        {
          if (value == null)
            NarrativeElement = null;
          else
            NarrativeElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Narrative");
        }
      }

      /// <summary>
      /// The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript
      /// </summary>
      [FhirElement("script", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.TestPlan.ScriptComponent Script
      {
        get { return _Script; }
        set { _Script = value; OnPropertyChanged("Script"); }
      }

      private Hl7.Fhir.Model.TestPlan.ScriptComponent _Script;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TestRunComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NarrativeElement != null) dest.NarrativeElement = (Hl7.Fhir.Model.Markdown)NarrativeElement.DeepCopy();
        if(Script != null) dest.Script = (Hl7.Fhir.Model.TestPlan.ScriptComponent)Script.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TestRunComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TestRunComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NarrativeElement, otherT.NarrativeElement)) return false;
        if( !DeepComparable.Matches(Script, otherT.Script)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TestRunComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NarrativeElement, otherT.NarrativeElement)) return false;
        if( !DeepComparable.IsExactly(Script, otherT.Script)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NarrativeElement != null) yield return NarrativeElement;
          if (Script != null) yield return Script;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NarrativeElement != null) yield return new ElementValue("narrative", NarrativeElement);
          if (Script != null) yield return new ElementValue("script", Script);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "narrative":
            value = NarrativeElement;
            return NarrativeElement is not null;
          case "script":
            value = Script;
            return Script is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NarrativeElement is not null) yield return new KeyValuePair<string,object>("narrative",NarrativeElement);
        if (Script is not null) yield return new KeyValuePair<string,object>("script",Script);
      }

    }

    /// <summary>
    /// The test cases in a structured language e.g. gherkin, Postman, or FHIR TestScript
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestPlan#Script", IsNestedType=true)]
    [BackboneType("TestPlan.testCase.testRun.script")]
    public partial class ScriptComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestPlan#Script"; } }

      /// <summary>
      /// The language for the test cases e.g. 'gherkin', 'testscript'
      /// </summary>
      [FhirElement("language", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Language
      {
        get { return _Language; }
        set { _Language = value; OnPropertyChanged("Language"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Language;

      /// <summary>
      /// The actual content of the cases - references to TestScripts or externally defined content
      /// </summary>
      [FhirElement("source", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Source
      {
        get { return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private Hl7.Fhir.Model.DataType _Source;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ScriptComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Language != null) dest.Language = (Hl7.Fhir.Model.CodeableConcept)Language.DeepCopy();
        if(Source != null) dest.Source = (Hl7.Fhir.Model.DataType)Source.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ScriptComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ScriptComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Language, otherT.Language)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ScriptComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Language, otherT.Language)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Language != null) yield return Language;
          if (Source != null) yield return Source;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Language != null) yield return new ElementValue("language", Language);
          if (Source != null) yield return new ElementValue("source", Source);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "language":
            value = Language;
            return Language is not null;
          case "source":
            value = Source;
            return Source is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Language is not null) yield return new KeyValuePair<string,object>("language",Language);
        if (Source is not null) yield return new KeyValuePair<string,object>("source",Source);
      }

    }

    /// <summary>
    /// The test data used in the test case
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestPlan#TestData", IsNestedType=true)]
    [BackboneType("TestPlan.testCase.testData")]
    public partial class TestDataComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestPlan#TestData"; } }

      /// <summary>
      /// The type of test data description, e.g. 'synthea'
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.Coding _Type;

      /// <summary>
      /// The actual test resources when they exist
      /// </summary>
      [FhirElement("content", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Content
      {
        get { return _Content; }
        set { _Content = value; OnPropertyChanged("Content"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Content;

      /// <summary>
      /// Pointer to a definition of test resources - narrative or structured e.g. synthetic data generation, etc
      /// </summary>
      [FhirElement("source", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Source
      {
        get { return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private Hl7.Fhir.Model.DataType _Source;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TestDataComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.Coding)Type.DeepCopy();
        if(Content != null) dest.Content = (Hl7.Fhir.Model.ResourceReference)Content.DeepCopy();
        if(Source != null) dest.Source = (Hl7.Fhir.Model.DataType)Source.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TestDataComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TestDataComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Content, otherT.Content)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TestDataComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Content != null) yield return Content;
          if (Source != null) yield return Source;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Content != null) yield return new ElementValue("content", Content);
          if (Source != null) yield return new ElementValue("source", Source);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "content":
            value = Content;
            return Content is not null;
          case "source":
            value = Source;
            return Source is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Content is not null) yield return new KeyValuePair<string,object>("content",Content);
        if (Source is not null) yield return new KeyValuePair<string,object>("source",Source);
      }

    }

    /// <summary>
    /// Test assertions or expectations
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestPlan#Assertion", IsNestedType=true)]
    [BackboneType("TestPlan.testCase.assertion")]
    public partial class AssertionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestPlan#Assertion"; } }

      /// <summary>
      /// Assertion type - for example 'informative' or 'required' 
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// The focus or object of the assertion
      /// </summary>
      [FhirElement("object", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Object
      {
        get { if(_Object==null) _Object = new List<Hl7.Fhir.Model.CodeableReference>(); return _Object; }
        set { _Object = value; OnPropertyChanged("Object"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Object;

      /// <summary>
      /// The actual result assertion
      /// </summary>
      [FhirElement("result", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Result
      {
        get { if(_Result==null) _Result = new List<Hl7.Fhir.Model.CodeableReference>(); return _Result; }
        set { _Result = value; OnPropertyChanged("Result"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Result;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AssertionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(Object != null) dest.Object = new List<Hl7.Fhir.Model.CodeableReference>(Object.DeepCopy());
        if(Result != null) dest.Result = new List<Hl7.Fhir.Model.CodeableReference>(Result.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AssertionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AssertionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Object, otherT.Object)) return false;
        if( !DeepComparable.Matches(Result, otherT.Result)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AssertionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Object, otherT.Object)) return false;
        if( !DeepComparable.IsExactly(Result, otherT.Result)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          foreach (var elem in Object) { if (elem != null) yield return elem; }
          foreach (var elem in Result) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          foreach (var elem in Object) { if (elem != null) yield return new ElementValue("object", elem); }
          foreach (var elem in Result) { if (elem != null) yield return new ElementValue("result", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "object":
            value = Object;
            return Object?.Any() == true;
          case "result":
            value = Result;
            return Result?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (Object?.Any() == true) yield return new KeyValuePair<string,object>("object",Object);
        if (Result?.Any() == true) yield return new KeyValuePair<string,object>("result",Result);
      }

    }

    /// <summary>
    /// Canonical identifier for this test plan, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this test plan, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Business identifier identifier for the test plan
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the test plan
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the test plan
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// How to compare versions
    /// </summary>
    [FhirElement("versionAlgorithm", InSummary=true, Order=120, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Coding))]
    [DataMember]
    public Hl7.Fhir.Model.DataType VersionAlgorithm
    {
      get { return _VersionAlgorithm; }
      set { _VersionAlgorithm = value; OnPropertyChanged("VersionAlgorithm"); }
    }

    private Hl7.Fhir.Model.DataType _VersionAlgorithm;

    /// <summary>
    /// Name for this test plan (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this test plan (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this test plan (human friendly)
    /// </summary>
    [FhirElement("title", Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this test plan (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=160, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=170, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=180, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the test plan
    /// </summary>
    [FhirElement("description", Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the test plan
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction where the test plan applies (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=220)]
    [Binding("Jurisdiction")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this test plan is defined
    /// </summary>
    [FhirElement("purpose", Order=230, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this test plan is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    [FhirElement("copyrightLabel", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightLabelElement
    {
      get { return _CopyrightLabelElement; }
      set { _CopyrightLabelElement = value; OnPropertyChanged("CopyrightLabelElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightLabelElement;

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CopyrightLabel
    {
      get { return CopyrightLabelElement != null ? CopyrightLabelElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightLabelElement = null;
        else
          CopyrightLabelElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CopyrightLabel");
      }
    }

    /// <summary>
    /// The category of the Test Plan - can be acceptance, unit, performance
    /// </summary>
    [FhirElement("category", Order=260)]
    [Binding("TestPlanCategory")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// What is being tested with this Test Plan - a conformance resource, or narrative criteria, or an external reference
    /// </summary>
    [FhirElement("scope", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Scope
    {
      get { if(_Scope==null) _Scope = new List<Hl7.Fhir.Model.ResourceReference>(); return _Scope; }
      set { _Scope = value; OnPropertyChanged("Scope"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Scope;

    /// <summary>
    /// A description of test tools to be used in the test plan - narrative for now
    /// </summary>
    [FhirElement("testTools", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown TestToolsElement
    {
      get { return _TestToolsElement; }
      set { _TestToolsElement = value; OnPropertyChanged("TestToolsElement"); }
    }

    private Hl7.Fhir.Model.Markdown _TestToolsElement;

    /// <summary>
    /// A description of test tools to be used in the test plan - narrative for now
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string TestTools
    {
      get { return TestToolsElement != null ? TestToolsElement.Value : null; }
      set
      {
        if (value == null)
          TestToolsElement = null;
        else
          TestToolsElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("TestTools");
      }
    }

    /// <summary>
    /// The required criteria to execute the test plan - e.g. preconditions, previous tests
    /// </summary>
    [FhirElement("dependency", Order=290)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestPlan.DependencyComponent> Dependency
    {
      get { if(_Dependency==null) _Dependency = new List<Hl7.Fhir.Model.TestPlan.DependencyComponent>(); return _Dependency; }
      set { _Dependency = value; OnPropertyChanged("Dependency"); }
    }

    private List<Hl7.Fhir.Model.TestPlan.DependencyComponent> _Dependency;

    /// <summary>
    /// The threshold or criteria for the test plan to be considered successfully executed - narrative
    /// </summary>
    [FhirElement("exitCriteria", Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown ExitCriteriaElement
    {
      get { return _ExitCriteriaElement; }
      set { _ExitCriteriaElement = value; OnPropertyChanged("ExitCriteriaElement"); }
    }

    private Hl7.Fhir.Model.Markdown _ExitCriteriaElement;

    /// <summary>
    /// The threshold or criteria for the test plan to be considered successfully executed - narrative
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ExitCriteria
    {
      get { return ExitCriteriaElement != null ? ExitCriteriaElement.Value : null; }
      set
      {
        if (value == null)
          ExitCriteriaElement = null;
        else
          ExitCriteriaElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("ExitCriteria");
      }
    }

    /// <summary>
    /// The test cases that constitute this plan
    /// </summary>
    [FhirElement("testCase", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestPlan.TestCaseComponent> TestCase
    {
      get { if(_TestCase==null) _TestCase = new List<Hl7.Fhir.Model.TestPlan.TestCaseComponent>(); return _TestCase; }
      set { _TestCase = value; OnPropertyChanged("TestCase"); }
    }

    private List<Hl7.Fhir.Model.TestPlan.TestCaseComponent> _TestCase;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as TestPlan;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(VersionAlgorithm != null) dest.VersionAlgorithm = (Hl7.Fhir.Model.DataType)VersionAlgorithm.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(CopyrightLabelElement != null) dest.CopyrightLabelElement = (Hl7.Fhir.Model.FhirString)CopyrightLabelElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Scope != null) dest.Scope = new List<Hl7.Fhir.Model.ResourceReference>(Scope.DeepCopy());
      if(TestToolsElement != null) dest.TestToolsElement = (Hl7.Fhir.Model.Markdown)TestToolsElement.DeepCopy();
      if(Dependency != null) dest.Dependency = new List<Hl7.Fhir.Model.TestPlan.DependencyComponent>(Dependency.DeepCopy());
      if(ExitCriteriaElement != null) dest.ExitCriteriaElement = (Hl7.Fhir.Model.Markdown)ExitCriteriaElement.DeepCopy();
      if(TestCase != null) dest.TestCase = new List<Hl7.Fhir.Model.TestPlan.TestCaseComponent>(TestCase.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new TestPlan());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as TestPlan;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Scope, otherT.Scope)) return false;
      if( !DeepComparable.Matches(TestToolsElement, otherT.TestToolsElement)) return false;
      if( !DeepComparable.Matches(Dependency, otherT.Dependency)) return false;
      if( !DeepComparable.Matches(ExitCriteriaElement, otherT.ExitCriteriaElement)) return false;
      if( !DeepComparable.Matches(TestCase, otherT.TestCase)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as TestPlan;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Scope, otherT.Scope)) return false;
      if( !DeepComparable.IsExactly(TestToolsElement, otherT.TestToolsElement)) return false;
      if( !DeepComparable.IsExactly(Dependency, otherT.Dependency)) return false;
      if( !DeepComparable.IsExactly(ExitCriteriaElement, otherT.ExitCriteriaElement)) return false;
      if( !DeepComparable.IsExactly(TestCase, otherT.TestCase)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (VersionAlgorithm != null) yield return VersionAlgorithm;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (CopyrightLabelElement != null) yield return CopyrightLabelElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        foreach (var elem in Scope) { if (elem != null) yield return elem; }
        if (TestToolsElement != null) yield return TestToolsElement;
        foreach (var elem in Dependency) { if (elem != null) yield return elem; }
        if (ExitCriteriaElement != null) yield return ExitCriteriaElement;
        foreach (var elem in TestCase) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (VersionAlgorithm != null) yield return new ElementValue("versionAlgorithm", VersionAlgorithm);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (CopyrightLabelElement != null) yield return new ElementValue("copyrightLabel", CopyrightLabelElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        foreach (var elem in Scope) { if (elem != null) yield return new ElementValue("scope", elem); }
        if (TestToolsElement != null) yield return new ElementValue("testTools", TestToolsElement);
        foreach (var elem in Dependency) { if (elem != null) yield return new ElementValue("dependency", elem); }
        if (ExitCriteriaElement != null) yield return new ElementValue("exitCriteria", ExitCriteriaElement);
        foreach (var elem in TestCase) { if (elem != null) yield return new ElementValue("testCase", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "versionAlgorithm":
          value = VersionAlgorithm;
          return VersionAlgorithm is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "copyrightLabel":
          value = CopyrightLabelElement;
          return CopyrightLabelElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "scope":
          value = Scope;
          return Scope?.Any() == true;
        case "testTools":
          value = TestToolsElement;
          return TestToolsElement is not null;
        case "dependency":
          value = Dependency;
          return Dependency?.Any() == true;
        case "exitCriteria":
          value = ExitCriteriaElement;
          return ExitCriteriaElement is not null;
        case "testCase":
          value = TestCase;
          return TestCase?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (VersionAlgorithm is not null) yield return new KeyValuePair<string,object>("versionAlgorithm",VersionAlgorithm);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (CopyrightLabelElement is not null) yield return new KeyValuePair<string,object>("copyrightLabel",CopyrightLabelElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Scope?.Any() == true) yield return new KeyValuePair<string,object>("scope",Scope);
      if (TestToolsElement is not null) yield return new KeyValuePair<string,object>("testTools",TestToolsElement);
      if (Dependency?.Any() == true) yield return new KeyValuePair<string,object>("dependency",Dependency);
      if (ExitCriteriaElement is not null) yield return new KeyValuePair<string,object>("exitCriteria",ExitCriteriaElement);
      if (TestCase?.Any() == true) yield return new KeyValuePair<string,object>("testCase",TestCase);
    }

  }

}

// end of file

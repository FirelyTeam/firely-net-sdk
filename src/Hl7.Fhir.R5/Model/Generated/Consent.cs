// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A healthcare consumer's  or third party's choices to permit or deny recipients or roles to perform actions for specific purposes and periods of time
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Consent","http://hl7.org/fhir/StructureDefinition/Consent", IsResource=true)]
  public partial class Consent : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Consent"; } }

    /// <summary>
    /// Indicates the state of the consent.
    /// (url: http://hl7.org/fhir/ValueSet/consent-state-codes)
    /// (system: http://hl7.org/fhir/consent-state-codes)
    /// </summary>
    [FhirEnumeration("ConsentState", "http://hl7.org/fhir/ValueSet/consent-state-codes")]
    public enum ConsentState
    {
      /// <summary>
      /// The consent is in development or awaiting use but is not yet intended to be acted upon.
      /// (system: http://hl7.org/fhir/consent-state-codes)
      /// </summary>
      [EnumLiteral("draft", "http://hl7.org/fhir/consent-state-codes"), Description("Pending")]
      Draft,
      /// <summary>
      /// The consent is to be followed and enforced.
      /// (system: http://hl7.org/fhir/consent-state-codes)
      /// </summary>
      [EnumLiteral("active", "http://hl7.org/fhir/consent-state-codes"), Description("Active")]
      Active,
      /// <summary>
      /// The consent is terminated or replaced.
      /// (system: http://hl7.org/fhir/consent-state-codes)
      /// </summary>
      [EnumLiteral("inactive", "http://hl7.org/fhir/consent-state-codes"), Description("Inactive")]
      Inactive,
      /// <summary>
      /// The consent development has been terminated prior to completion.
      /// (system: http://hl7.org/fhir/consent-state-codes)
      /// </summary>
      [EnumLiteral("not-done", "http://hl7.org/fhir/consent-state-codes"), Description("Abandoned")]
      NotDone,
      /// <summary>
      /// The consent was created wrongly (e.g. wrong patient) and should be ignored.
      /// (system: http://hl7.org/fhir/consent-state-codes)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/consent-state-codes"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// The resource is in an indeterminate state.
      /// (system: http://hl7.org/fhir/consent-state-codes)
      /// </summary>
      [EnumLiteral("unknown", "http://hl7.org/fhir/consent-state-codes"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// Computable version of the backing policy
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Consent#PolicyBasis", IsNestedType=true)]
    [BackboneType("Consent.policyBasis")]
    public partial class PolicyBasisComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Consent#PolicyBasis"; } }

      /// <summary>
      /// Reference backing policy resource
      /// </summary>
      [FhirElement("reference", Order=40)]
      [CLSCompliant(false)]
      [References("Resource")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Reference;

      /// <summary>
      /// URL to a computable backing policy
      /// </summary>
      [FhirElement("url", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUrl UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUrl _UrlElement;

      /// <summary>
      /// URL to a computable backing policy
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUrl(value);
          OnPropertyChanged("Url");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PolicyBasisComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.ResourceReference)Reference.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUrl)UrlElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PolicyBasisComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PolicyBasisComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PolicyBasisComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Reference != null) yield return Reference;
          if (UrlElement != null) yield return UrlElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Reference != null) yield return new ElementValue("reference", Reference);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "reference":
            value = Reference;
            return Reference is not null;
          case "url":
            value = UrlElement;
            return UrlElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
        if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      }

    }

    /// <summary>
    /// Consent Verified by patient or family
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Consent#Verification", IsNestedType=true)]
    [BackboneType("Consent.verification")]
    public partial class VerificationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Consent#Verification"; } }

      /// <summary>
      /// Has been verified
      /// </summary>
      [FhirElement("verified", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean VerifiedElement
      {
        get { return _VerifiedElement; }
        set { _VerifiedElement = value; OnPropertyChanged("VerifiedElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _VerifiedElement;

      /// <summary>
      /// Has been verified
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Verified
      {
        get { return VerifiedElement != null ? VerifiedElement.Value : null; }
        set
        {
          if (value == null)
            VerifiedElement = null;
          else
            VerifiedElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Verified");
        }
      }

      /// <summary>
      /// Business case of verification
      /// </summary>
      [FhirElement("verificationType", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept VerificationType
      {
        get { return _VerificationType; }
        set { _VerificationType = value; OnPropertyChanged("VerificationType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _VerificationType;

      /// <summary>
      /// Person conducting verification
      /// </summary>
      [FhirElement("verifiedBy", Order=60)]
      [CLSCompliant(false)]
      [References("Organization","Practitioner","PractitionerRole")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference VerifiedBy
      {
        get { return _VerifiedBy; }
        set { _VerifiedBy = value; OnPropertyChanged("VerifiedBy"); }
      }

      private Hl7.Fhir.Model.ResourceReference _VerifiedBy;

      /// <summary>
      /// Person who verified
      /// </summary>
      [FhirElement("verifiedWith", Order=70)]
      [CLSCompliant(false)]
      [References("Patient","RelatedPerson")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference VerifiedWith
      {
        get { return _VerifiedWith; }
        set { _VerifiedWith = value; OnPropertyChanged("VerifiedWith"); }
      }

      private Hl7.Fhir.Model.ResourceReference _VerifiedWith;

      /// <summary>
      /// When consent verified
      /// </summary>
      [FhirElement("verificationDate", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirDateTime> VerificationDateElement
      {
        get { if(_VerificationDateElement==null) _VerificationDateElement = new List<Hl7.Fhir.Model.FhirDateTime>(); return _VerificationDateElement; }
        set { _VerificationDateElement = value; OnPropertyChanged("VerificationDateElement"); }
      }

      private List<Hl7.Fhir.Model.FhirDateTime> _VerificationDateElement;

      /// <summary>
      /// When consent verified
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> VerificationDate
      {
        get { return VerificationDateElement != null ? VerificationDateElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            VerificationDateElement = null;
          else
            VerificationDateElement = new List<Hl7.Fhir.Model.FhirDateTime>(value.Select(elem=>new Hl7.Fhir.Model.FhirDateTime(elem)));
          OnPropertyChanged("VerificationDate");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VerificationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(VerifiedElement != null) dest.VerifiedElement = (Hl7.Fhir.Model.FhirBoolean)VerifiedElement.DeepCopy();
        if(VerificationType != null) dest.VerificationType = (Hl7.Fhir.Model.CodeableConcept)VerificationType.DeepCopy();
        if(VerifiedBy != null) dest.VerifiedBy = (Hl7.Fhir.Model.ResourceReference)VerifiedBy.DeepCopy();
        if(VerifiedWith != null) dest.VerifiedWith = (Hl7.Fhir.Model.ResourceReference)VerifiedWith.DeepCopy();
        if(VerificationDateElement != null) dest.VerificationDateElement = new List<Hl7.Fhir.Model.FhirDateTime>(VerificationDateElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VerificationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VerificationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(VerifiedElement, otherT.VerifiedElement)) return false;
        if( !DeepComparable.Matches(VerificationType, otherT.VerificationType)) return false;
        if( !DeepComparable.Matches(VerifiedBy, otherT.VerifiedBy)) return false;
        if( !DeepComparable.Matches(VerifiedWith, otherT.VerifiedWith)) return false;
        if( !DeepComparable.Matches(VerificationDateElement, otherT.VerificationDateElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VerificationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(VerifiedElement, otherT.VerifiedElement)) return false;
        if( !DeepComparable.IsExactly(VerificationType, otherT.VerificationType)) return false;
        if( !DeepComparable.IsExactly(VerifiedBy, otherT.VerifiedBy)) return false;
        if( !DeepComparable.IsExactly(VerifiedWith, otherT.VerifiedWith)) return false;
        if( !DeepComparable.IsExactly(VerificationDateElement, otherT.VerificationDateElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (VerifiedElement != null) yield return VerifiedElement;
          if (VerificationType != null) yield return VerificationType;
          if (VerifiedBy != null) yield return VerifiedBy;
          if (VerifiedWith != null) yield return VerifiedWith;
          foreach (var elem in VerificationDateElement) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (VerifiedElement != null) yield return new ElementValue("verified", VerifiedElement);
          if (VerificationType != null) yield return new ElementValue("verificationType", VerificationType);
          if (VerifiedBy != null) yield return new ElementValue("verifiedBy", VerifiedBy);
          if (VerifiedWith != null) yield return new ElementValue("verifiedWith", VerifiedWith);
          foreach (var elem in VerificationDateElement) { if (elem != null) yield return new ElementValue("verificationDate", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "verified":
            value = VerifiedElement;
            return VerifiedElement is not null;
          case "verificationType":
            value = VerificationType;
            return VerificationType is not null;
          case "verifiedBy":
            value = VerifiedBy;
            return VerifiedBy is not null;
          case "verifiedWith":
            value = VerifiedWith;
            return VerifiedWith is not null;
          case "verificationDate":
            value = VerificationDateElement;
            return VerificationDateElement?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (VerifiedElement is not null) yield return new KeyValuePair<string,object>("verified",VerifiedElement);
        if (VerificationType is not null) yield return new KeyValuePair<string,object>("verificationType",VerificationType);
        if (VerifiedBy is not null) yield return new KeyValuePair<string,object>("verifiedBy",VerifiedBy);
        if (VerifiedWith is not null) yield return new KeyValuePair<string,object>("verifiedWith",VerifiedWith);
        if (VerificationDateElement?.Any() == true) yield return new KeyValuePair<string,object>("verificationDate",VerificationDateElement);
      }

    }

    /// <summary>
    /// Constraints to the base Consent.policyRule/Consent.policy
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Consent#provision", IsNestedType=true)]
    [BackboneType("Consent.provision")]
    public partial class provisionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Consent#provision"; } }

      /// <summary>
      /// Timeframe for this provision
      /// </summary>
      [FhirElement("period", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      /// <summary>
      /// Who|what controlled by this provision (or group, by role)
      /// </summary>
      [FhirElement("actor", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Consent.provisionActorComponent> Actor
      {
        get { if(_Actor==null) _Actor = new List<Hl7.Fhir.Model.Consent.provisionActorComponent>(); return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private List<Hl7.Fhir.Model.Consent.provisionActorComponent> _Actor;

      /// <summary>
      /// Actions controlled by this provision
      /// </summary>
      [FhirElement("action", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Action
      {
        get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Action;

      /// <summary>
      /// Security Labels that define affected resources
      /// </summary>
      [FhirElement("securityLabel", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Coding> SecurityLabel
      {
        get { if(_SecurityLabel==null) _SecurityLabel = new List<Hl7.Fhir.Model.Coding>(); return _SecurityLabel; }
        set { _SecurityLabel = value; OnPropertyChanged("SecurityLabel"); }
      }

      private List<Hl7.Fhir.Model.Coding> _SecurityLabel;

      /// <summary>
      /// Context of activities covered by this provision
      /// </summary>
      [FhirElement("purpose", InSummary=true, Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Coding> Purpose
      {
        get { if(_Purpose==null) _Purpose = new List<Hl7.Fhir.Model.Coding>(); return _Purpose; }
        set { _Purpose = value; OnPropertyChanged("Purpose"); }
      }

      private List<Hl7.Fhir.Model.Coding> _Purpose;

      /// <summary>
      /// e.g. Resource Type, Profile, CDA, etc
      /// </summary>
      [FhirElement("documentType", InSummary=true, Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Coding> DocumentType
      {
        get { if(_DocumentType==null) _DocumentType = new List<Hl7.Fhir.Model.Coding>(); return _DocumentType; }
        set { _DocumentType = value; OnPropertyChanged("DocumentType"); }
      }

      private List<Hl7.Fhir.Model.Coding> _DocumentType;

      /// <summary>
      /// e.g. Resource Type, Profile, etc
      /// </summary>
      [FhirElement("resourceType", InSummary=true, Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Coding> ResourceType
      {
        get { if(_ResourceType==null) _ResourceType = new List<Hl7.Fhir.Model.Coding>(); return _ResourceType; }
        set { _ResourceType = value; OnPropertyChanged("ResourceType"); }
      }

      private List<Hl7.Fhir.Model.Coding> _ResourceType;

      /// <summary>
      /// e.g. LOINC or SNOMED CT code, etc. in the content
      /// </summary>
      [FhirElement("code", InSummary=true, Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Code
      {
        get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Code;

      /// <summary>
      /// Timeframe for data controlled by this provision
      /// </summary>
      [FhirElement("dataPeriod", InSummary=true, Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.Period DataPeriod
      {
        get { return _DataPeriod; }
        set { _DataPeriod = value; OnPropertyChanged("DataPeriod"); }
      }

      private Hl7.Fhir.Model.Period _DataPeriod;

      /// <summary>
      /// Data controlled by this provision
      /// </summary>
      [FhirElement("data", InSummary=true, Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Consent.provisionDataComponent> Data
      {
        get { if(_Data==null) _Data = new List<Hl7.Fhir.Model.Consent.provisionDataComponent>(); return _Data; }
        set { _Data = value; OnPropertyChanged("Data"); }
      }

      private List<Hl7.Fhir.Model.Consent.provisionDataComponent> _Data;

      /// <summary>
      /// A computable expression of the consent
      /// </summary>
      [FhirElement("expression", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.Expression Expression
      {
        get { return _Expression; }
        set { _Expression = value; OnPropertyChanged("Expression"); }
      }

      private Hl7.Fhir.Model.Expression _Expression;

      /// <summary>
      /// Nested Exception Provisions
      /// </summary>
      [FhirElement("provision", Order=150)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Consent.provisionComponent> Provision
      {
        get { if(_Provision==null) _Provision = new List<Hl7.Fhir.Model.Consent.provisionComponent>(); return _Provision; }
        set { _Provision = value; OnPropertyChanged("Provision"); }
      }

      private List<Hl7.Fhir.Model.Consent.provisionComponent> _Provision;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as provisionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        if(Actor != null) dest.Actor = new List<Hl7.Fhir.Model.Consent.provisionActorComponent>(Actor.DeepCopy());
        if(Action != null) dest.Action = new List<Hl7.Fhir.Model.CodeableConcept>(Action.DeepCopy());
        if(SecurityLabel != null) dest.SecurityLabel = new List<Hl7.Fhir.Model.Coding>(SecurityLabel.DeepCopy());
        if(Purpose != null) dest.Purpose = new List<Hl7.Fhir.Model.Coding>(Purpose.DeepCopy());
        if(DocumentType != null) dest.DocumentType = new List<Hl7.Fhir.Model.Coding>(DocumentType.DeepCopy());
        if(ResourceType != null) dest.ResourceType = new List<Hl7.Fhir.Model.Coding>(ResourceType.DeepCopy());
        if(Code != null) dest.Code = new List<Hl7.Fhir.Model.CodeableConcept>(Code.DeepCopy());
        if(DataPeriod != null) dest.DataPeriod = (Hl7.Fhir.Model.Period)DataPeriod.DeepCopy();
        if(Data != null) dest.Data = new List<Hl7.Fhir.Model.Consent.provisionDataComponent>(Data.DeepCopy());
        if(Expression != null) dest.Expression = (Hl7.Fhir.Model.Expression)Expression.DeepCopy();
        if(Provision != null) dest.Provision = new List<Hl7.Fhir.Model.Consent.provisionComponent>(Provision.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new provisionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as provisionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;
        if( !DeepComparable.Matches(SecurityLabel, otherT.SecurityLabel)) return false;
        if( !DeepComparable.Matches(Purpose, otherT.Purpose)) return false;
        if( !DeepComparable.Matches(DocumentType, otherT.DocumentType)) return false;
        if( !DeepComparable.Matches(ResourceType, otherT.ResourceType)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(DataPeriod, otherT.DataPeriod)) return false;
        if( !DeepComparable.Matches(Data, otherT.Data)) return false;
        if( !DeepComparable.Matches(Expression, otherT.Expression)) return false;
        if( !DeepComparable.Matches(Provision, otherT.Provision)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as provisionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;
        if( !DeepComparable.IsExactly(SecurityLabel, otherT.SecurityLabel)) return false;
        if( !DeepComparable.IsExactly(Purpose, otherT.Purpose)) return false;
        if( !DeepComparable.IsExactly(DocumentType, otherT.DocumentType)) return false;
        if( !DeepComparable.IsExactly(ResourceType, otherT.ResourceType)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(DataPeriod, otherT.DataPeriod)) return false;
        if( !DeepComparable.IsExactly(Data, otherT.Data)) return false;
        if( !DeepComparable.IsExactly(Expression, otherT.Expression)) return false;
        if( !DeepComparable.IsExactly(Provision, otherT.Provision)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Period != null) yield return Period;
          foreach (var elem in Actor) { if (elem != null) yield return elem; }
          foreach (var elem in Action) { if (elem != null) yield return elem; }
          foreach (var elem in SecurityLabel) { if (elem != null) yield return elem; }
          foreach (var elem in Purpose) { if (elem != null) yield return elem; }
          foreach (var elem in DocumentType) { if (elem != null) yield return elem; }
          foreach (var elem in ResourceType) { if (elem != null) yield return elem; }
          foreach (var elem in Code) { if (elem != null) yield return elem; }
          if (DataPeriod != null) yield return DataPeriod;
          foreach (var elem in Data) { if (elem != null) yield return elem; }
          if (Expression != null) yield return Expression;
          foreach (var elem in Provision) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Period != null) yield return new ElementValue("period", Period);
          foreach (var elem in Actor) { if (elem != null) yield return new ElementValue("actor", elem); }
          foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
          foreach (var elem in SecurityLabel) { if (elem != null) yield return new ElementValue("securityLabel", elem); }
          foreach (var elem in Purpose) { if (elem != null) yield return new ElementValue("purpose", elem); }
          foreach (var elem in DocumentType) { if (elem != null) yield return new ElementValue("documentType", elem); }
          foreach (var elem in ResourceType) { if (elem != null) yield return new ElementValue("resourceType", elem); }
          foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
          if (DataPeriod != null) yield return new ElementValue("dataPeriod", DataPeriod);
          foreach (var elem in Data) { if (elem != null) yield return new ElementValue("data", elem); }
          if (Expression != null) yield return new ElementValue("expression", Expression);
          foreach (var elem in Provision) { if (elem != null) yield return new ElementValue("provision", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "period":
            value = Period;
            return Period is not null;
          case "actor":
            value = Actor;
            return Actor?.Any() == true;
          case "action":
            value = Action;
            return Action?.Any() == true;
          case "securityLabel":
            value = SecurityLabel;
            return SecurityLabel?.Any() == true;
          case "purpose":
            value = Purpose;
            return Purpose?.Any() == true;
          case "documentType":
            value = DocumentType;
            return DocumentType?.Any() == true;
          case "resourceType":
            value = ResourceType;
            return ResourceType?.Any() == true;
          case "code":
            value = Code;
            return Code?.Any() == true;
          case "dataPeriod":
            value = DataPeriod;
            return DataPeriod is not null;
          case "data":
            value = Data;
            return Data?.Any() == true;
          case "expression":
            value = Expression;
            return Expression is not null;
          case "provision":
            value = Provision;
            return Provision?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
        if (Actor?.Any() == true) yield return new KeyValuePair<string,object>("actor",Actor);
        if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
        if (SecurityLabel?.Any() == true) yield return new KeyValuePair<string,object>("securityLabel",SecurityLabel);
        if (Purpose?.Any() == true) yield return new KeyValuePair<string,object>("purpose",Purpose);
        if (DocumentType?.Any() == true) yield return new KeyValuePair<string,object>("documentType",DocumentType);
        if (ResourceType?.Any() == true) yield return new KeyValuePair<string,object>("resourceType",ResourceType);
        if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
        if (DataPeriod is not null) yield return new KeyValuePair<string,object>("dataPeriod",DataPeriod);
        if (Data?.Any() == true) yield return new KeyValuePair<string,object>("data",Data);
        if (Expression is not null) yield return new KeyValuePair<string,object>("expression",Expression);
        if (Provision?.Any() == true) yield return new KeyValuePair<string,object>("provision",Provision);
      }

    }

    /// <summary>
    /// Who|what controlled by this provision (or group, by role)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Consent#provisionActor", IsNestedType=true)]
    [BackboneType("Consent.provision.actor")]
    public partial class provisionActorComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Consent#provisionActor"; } }

      /// <summary>
      /// How the actor is involved
      /// </summary>
      [FhirElement("role", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// Resource for the actor (or group, by role)
      /// </summary>
      [FhirElement("reference", Order=50)]
      [CLSCompliant(false)]
      [References("Device","Group","CareTeam","Organization","Patient","Practitioner","RelatedPerson","PractitionerRole")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Reference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as provisionActorComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.ResourceReference)Reference.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new provisionActorComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as provisionActorComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as provisionActorComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Role != null) yield return Role;
          if (Reference != null) yield return Reference;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Role != null) yield return new ElementValue("role", Role);
          if (Reference != null) yield return new ElementValue("reference", Reference);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "role":
            value = Role;
            return Role is not null;
          case "reference":
            value = Reference;
            return Reference is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
      }

    }

    /// <summary>
    /// Data controlled by this provision
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Consent#provisionData", IsNestedType=true)]
    [BackboneType("Consent.provision.data")]
    public partial class provisionDataComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Consent#provisionData"; } }

      /// <summary>
      /// instance | related | dependents | authoredby
      /// </summary>
      [FhirElement("meaning", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ConsentDataMeaning")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ConsentDataMeaning> MeaningElement
      {
        get { return _MeaningElement; }
        set { _MeaningElement = value; OnPropertyChanged("MeaningElement"); }
      }

      private Code<Hl7.Fhir.Model.ConsentDataMeaning> _MeaningElement;

      /// <summary>
      /// instance | related | dependents | authoredby
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ConsentDataMeaning? Meaning
      {
        get { return MeaningElement != null ? MeaningElement.Value : null; }
        set
        {
          if (value == null)
            MeaningElement = null;
          else
            MeaningElement = new Code<Hl7.Fhir.Model.ConsentDataMeaning>(value);
          OnPropertyChanged("Meaning");
        }
      }

      /// <summary>
      /// The actual data reference
      /// </summary>
      [FhirElement("reference", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Reference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as provisionDataComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(MeaningElement != null) dest.MeaningElement = (Code<Hl7.Fhir.Model.ConsentDataMeaning>)MeaningElement.DeepCopy();
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.ResourceReference)Reference.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new provisionDataComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as provisionDataComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(MeaningElement, otherT.MeaningElement)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as provisionDataComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(MeaningElement, otherT.MeaningElement)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (MeaningElement != null) yield return MeaningElement;
          if (Reference != null) yield return Reference;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (MeaningElement != null) yield return new ElementValue("meaning", MeaningElement);
          if (Reference != null) yield return new ElementValue("reference", Reference);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "meaning":
            value = MeaningElement;
            return MeaningElement is not null;
          case "reference":
            value = Reference;
            return Reference is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (MeaningElement is not null) yield return new KeyValuePair<string,object>("meaning",MeaningElement);
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
      }

    }

    /// <summary>
    /// Identifier for this record (external references)
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// draft | active | inactive | not-done | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ConsentState")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Consent.ConsentState> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Consent.ConsentState> _StatusElement;

    /// <summary>
    /// draft | active | inactive | not-done | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Consent.ConsentState? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Consent.ConsentState>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Classification of the consent statement - for indexing/retrieval
    /// </summary>
    [FhirElement("category", InSummary=true, Order=110, FiveWs="FiveWs.class")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Who the consent applies to
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=120, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("Patient","Practitioner","Group")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Fully executed date of the consent
    /// </summary>
    [FhirElement("date", InSummary=true, Order=130, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.Date DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.Date _DateElement;

    /// <summary>
    /// Fully executed date of the consent
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Effective period for this Consent
    /// </summary>
    [FhirElement("period", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// Who is granting rights according to the policy and rules
    /// </summary>
    [FhirElement("grantor", InSummary=true, Order=150)]
    [CLSCompliant(false)]
    [References("CareTeam","HealthcareService","Organization","Patient","Practitioner","RelatedPerson","PractitionerRole")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Grantor
    {
      get { if(_Grantor==null) _Grantor = new List<Hl7.Fhir.Model.ResourceReference>(); return _Grantor; }
      set { _Grantor = value; OnPropertyChanged("Grantor"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Grantor;

    /// <summary>
    /// Who is agreeing to the policy and rules
    /// </summary>
    [FhirElement("grantee", InSummary=true, Order=160)]
    [CLSCompliant(false)]
    [References("CareTeam","HealthcareService","Organization","Patient","Practitioner","RelatedPerson","PractitionerRole")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Grantee
    {
      get { if(_Grantee==null) _Grantee = new List<Hl7.Fhir.Model.ResourceReference>(); return _Grantee; }
      set { _Grantee = value; OnPropertyChanged("Grantee"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Grantee;

    /// <summary>
    /// Consent workflow management
    /// </summary>
    [FhirElement("manager", Order=170, FiveWs="FiveWs.witness")]
    [CLSCompliant(false)]
    [References("HealthcareService","Organization","Patient","Practitioner")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Manager
    {
      get { if(_Manager==null) _Manager = new List<Hl7.Fhir.Model.ResourceReference>(); return _Manager; }
      set { _Manager = value; OnPropertyChanged("Manager"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Manager;

    /// <summary>
    /// Consent Enforcer
    /// </summary>
    [FhirElement("controller", Order=180)]
    [CLSCompliant(false)]
    [References("HealthcareService","Organization","Patient","Practitioner")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Controller
    {
      get { if(_Controller==null) _Controller = new List<Hl7.Fhir.Model.ResourceReference>(); return _Controller; }
      set { _Controller = value; OnPropertyChanged("Controller"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Controller;

    /// <summary>
    /// Source from which this consent is taken
    /// </summary>
    [FhirElement("sourceAttachment", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Attachment> SourceAttachment
    {
      get { if(_SourceAttachment==null) _SourceAttachment = new List<Hl7.Fhir.Model.Attachment>(); return _SourceAttachment; }
      set { _SourceAttachment = value; OnPropertyChanged("SourceAttachment"); }
    }

    private List<Hl7.Fhir.Model.Attachment> _SourceAttachment;

    /// <summary>
    /// Source from which this consent is taken
    /// </summary>
    [FhirElement("sourceReference", Order=200)]
    [CLSCompliant(false)]
    [References("Consent","DocumentReference","Contract","QuestionnaireResponse")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SourceReference
    {
      get { if(_SourceReference==null) _SourceReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _SourceReference; }
      set { _SourceReference = value; OnPropertyChanged("SourceReference"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SourceReference;

    /// <summary>
    /// Regulations establishing base Consent
    /// </summary>
    [FhirElement("regulatoryBasis", Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> RegulatoryBasis
    {
      get { if(_RegulatoryBasis==null) _RegulatoryBasis = new List<Hl7.Fhir.Model.CodeableConcept>(); return _RegulatoryBasis; }
      set { _RegulatoryBasis = value; OnPropertyChanged("RegulatoryBasis"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _RegulatoryBasis;

    /// <summary>
    /// Computable version of the backing policy
    /// </summary>
    [FhirElement("policyBasis", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.Consent.PolicyBasisComponent PolicyBasis
    {
      get { return _PolicyBasis; }
      set { _PolicyBasis = value; OnPropertyChanged("PolicyBasis"); }
    }

    private Hl7.Fhir.Model.Consent.PolicyBasisComponent _PolicyBasis;

    /// <summary>
    /// Human Readable Policy
    /// </summary>
    [FhirElement("policyText", Order=230)]
    [CLSCompliant(false)]
    [References("DocumentReference")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PolicyText
    {
      get { if(_PolicyText==null) _PolicyText = new List<Hl7.Fhir.Model.ResourceReference>(); return _PolicyText; }
      set { _PolicyText = value; OnPropertyChanged("PolicyText"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PolicyText;

    /// <summary>
    /// Consent Verified by patient or family
    /// </summary>
    [FhirElement("verification", InSummary=true, Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Consent.VerificationComponent> Verification
    {
      get { if(_Verification==null) _Verification = new List<Hl7.Fhir.Model.Consent.VerificationComponent>(); return _Verification; }
      set { _Verification = value; OnPropertyChanged("Verification"); }
    }

    private List<Hl7.Fhir.Model.Consent.VerificationComponent> _Verification;

    /// <summary>
    /// deny | permit
    /// </summary>
    [FhirElement("decision", InSummary=true, IsModifier=true, Order=250)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ConsentProvisionType")]
    [DataMember]
    public Code<Hl7.Fhir.Model.ConsentProvisionType> DecisionElement
    {
      get { return _DecisionElement; }
      set { _DecisionElement = value; OnPropertyChanged("DecisionElement"); }
    }

    private Code<Hl7.Fhir.Model.ConsentProvisionType> _DecisionElement;

    /// <summary>
    /// deny | permit
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ConsentProvisionType? Decision
    {
      get { return DecisionElement != null ? DecisionElement.Value : null; }
      set
      {
        if (value == null)
          DecisionElement = null;
        else
          DecisionElement = new Code<Hl7.Fhir.Model.ConsentProvisionType>(value);
        OnPropertyChanged("Decision");
      }
    }

    /// <summary>
    /// Constraints to the base Consent.policyRule/Consent.policy
    /// </summary>
    [FhirElement("provision", InSummary=true, Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Consent.provisionComponent> Provision
    {
      get { if(_Provision==null) _Provision = new List<Hl7.Fhir.Model.Consent.provisionComponent>(); return _Provision; }
      set { _Provision = value; OnPropertyChanged("Provision"); }
    }

    private List<Hl7.Fhir.Model.Consent.provisionComponent> _Provision;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Consent;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Consent.ConsentState>)StatusElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Date)DateElement.DeepCopy();
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(Grantor != null) dest.Grantor = new List<Hl7.Fhir.Model.ResourceReference>(Grantor.DeepCopy());
      if(Grantee != null) dest.Grantee = new List<Hl7.Fhir.Model.ResourceReference>(Grantee.DeepCopy());
      if(Manager != null) dest.Manager = new List<Hl7.Fhir.Model.ResourceReference>(Manager.DeepCopy());
      if(Controller != null) dest.Controller = new List<Hl7.Fhir.Model.ResourceReference>(Controller.DeepCopy());
      if(SourceAttachment != null) dest.SourceAttachment = new List<Hl7.Fhir.Model.Attachment>(SourceAttachment.DeepCopy());
      if(SourceReference != null) dest.SourceReference = new List<Hl7.Fhir.Model.ResourceReference>(SourceReference.DeepCopy());
      if(RegulatoryBasis != null) dest.RegulatoryBasis = new List<Hl7.Fhir.Model.CodeableConcept>(RegulatoryBasis.DeepCopy());
      if(PolicyBasis != null) dest.PolicyBasis = (Hl7.Fhir.Model.Consent.PolicyBasisComponent)PolicyBasis.DeepCopy();
      if(PolicyText != null) dest.PolicyText = new List<Hl7.Fhir.Model.ResourceReference>(PolicyText.DeepCopy());
      if(Verification != null) dest.Verification = new List<Hl7.Fhir.Model.Consent.VerificationComponent>(Verification.DeepCopy());
      if(DecisionElement != null) dest.DecisionElement = (Code<Hl7.Fhir.Model.ConsentProvisionType>)DecisionElement.DeepCopy();
      if(Provision != null) dest.Provision = new List<Hl7.Fhir.Model.Consent.provisionComponent>(Provision.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Consent());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Consent;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(Grantor, otherT.Grantor)) return false;
      if( !DeepComparable.Matches(Grantee, otherT.Grantee)) return false;
      if( !DeepComparable.Matches(Manager, otherT.Manager)) return false;
      if( !DeepComparable.Matches(Controller, otherT.Controller)) return false;
      if( !DeepComparable.Matches(SourceAttachment, otherT.SourceAttachment)) return false;
      if( !DeepComparable.Matches(SourceReference, otherT.SourceReference)) return false;
      if( !DeepComparable.Matches(RegulatoryBasis, otherT.RegulatoryBasis)) return false;
      if( !DeepComparable.Matches(PolicyBasis, otherT.PolicyBasis)) return false;
      if( !DeepComparable.Matches(PolicyText, otherT.PolicyText)) return false;
      if( !DeepComparable.Matches(Verification, otherT.Verification)) return false;
      if( !DeepComparable.Matches(DecisionElement, otherT.DecisionElement)) return false;
      if( !DeepComparable.Matches(Provision, otherT.Provision)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Consent;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(Grantor, otherT.Grantor)) return false;
      if( !DeepComparable.IsExactly(Grantee, otherT.Grantee)) return false;
      if( !DeepComparable.IsExactly(Manager, otherT.Manager)) return false;
      if( !DeepComparable.IsExactly(Controller, otherT.Controller)) return false;
      if( !DeepComparable.IsExactly(SourceAttachment, otherT.SourceAttachment)) return false;
      if( !DeepComparable.IsExactly(SourceReference, otherT.SourceReference)) return false;
      if( !DeepComparable.IsExactly(RegulatoryBasis, otherT.RegulatoryBasis)) return false;
      if( !DeepComparable.IsExactly(PolicyBasis, otherT.PolicyBasis)) return false;
      if( !DeepComparable.IsExactly(PolicyText, otherT.PolicyText)) return false;
      if( !DeepComparable.IsExactly(Verification, otherT.Verification)) return false;
      if( !DeepComparable.IsExactly(DecisionElement, otherT.DecisionElement)) return false;
      if( !DeepComparable.IsExactly(Provision, otherT.Provision)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Subject != null) yield return Subject;
        if (DateElement != null) yield return DateElement;
        if (Period != null) yield return Period;
        foreach (var elem in Grantor) { if (elem != null) yield return elem; }
        foreach (var elem in Grantee) { if (elem != null) yield return elem; }
        foreach (var elem in Manager) { if (elem != null) yield return elem; }
        foreach (var elem in Controller) { if (elem != null) yield return elem; }
        foreach (var elem in SourceAttachment) { if (elem != null) yield return elem; }
        foreach (var elem in SourceReference) { if (elem != null) yield return elem; }
        foreach (var elem in RegulatoryBasis) { if (elem != null) yield return elem; }
        if (PolicyBasis != null) yield return PolicyBasis;
        foreach (var elem in PolicyText) { if (elem != null) yield return elem; }
        foreach (var elem in Verification) { if (elem != null) yield return elem; }
        if (DecisionElement != null) yield return DecisionElement;
        foreach (var elem in Provision) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (Period != null) yield return new ElementValue("period", Period);
        foreach (var elem in Grantor) { if (elem != null) yield return new ElementValue("grantor", elem); }
        foreach (var elem in Grantee) { if (elem != null) yield return new ElementValue("grantee", elem); }
        foreach (var elem in Manager) { if (elem != null) yield return new ElementValue("manager", elem); }
        foreach (var elem in Controller) { if (elem != null) yield return new ElementValue("controller", elem); }
        foreach (var elem in SourceAttachment) { if (elem != null) yield return new ElementValue("sourceAttachment", elem); }
        foreach (var elem in SourceReference) { if (elem != null) yield return new ElementValue("sourceReference", elem); }
        foreach (var elem in RegulatoryBasis) { if (elem != null) yield return new ElementValue("regulatoryBasis", elem); }
        if (PolicyBasis != null) yield return new ElementValue("policyBasis", PolicyBasis);
        foreach (var elem in PolicyText) { if (elem != null) yield return new ElementValue("policyText", elem); }
        foreach (var elem in Verification) { if (elem != null) yield return new ElementValue("verification", elem); }
        if (DecisionElement != null) yield return new ElementValue("decision", DecisionElement);
        foreach (var elem in Provision) { if (elem != null) yield return new ElementValue("provision", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "period":
          value = Period;
          return Period is not null;
        case "grantor":
          value = Grantor;
          return Grantor?.Any() == true;
        case "grantee":
          value = Grantee;
          return Grantee?.Any() == true;
        case "manager":
          value = Manager;
          return Manager?.Any() == true;
        case "controller":
          value = Controller;
          return Controller?.Any() == true;
        case "sourceAttachment":
          value = SourceAttachment;
          return SourceAttachment?.Any() == true;
        case "sourceReference":
          value = SourceReference;
          return SourceReference?.Any() == true;
        case "regulatoryBasis":
          value = RegulatoryBasis;
          return RegulatoryBasis?.Any() == true;
        case "policyBasis":
          value = PolicyBasis;
          return PolicyBasis is not null;
        case "policyText":
          value = PolicyText;
          return PolicyText?.Any() == true;
        case "verification":
          value = Verification;
          return Verification?.Any() == true;
        case "decision":
          value = DecisionElement;
          return DecisionElement is not null;
        case "provision":
          value = Provision;
          return Provision?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (Grantor?.Any() == true) yield return new KeyValuePair<string,object>("grantor",Grantor);
      if (Grantee?.Any() == true) yield return new KeyValuePair<string,object>("grantee",Grantee);
      if (Manager?.Any() == true) yield return new KeyValuePair<string,object>("manager",Manager);
      if (Controller?.Any() == true) yield return new KeyValuePair<string,object>("controller",Controller);
      if (SourceAttachment?.Any() == true) yield return new KeyValuePair<string,object>("sourceAttachment",SourceAttachment);
      if (SourceReference?.Any() == true) yield return new KeyValuePair<string,object>("sourceReference",SourceReference);
      if (RegulatoryBasis?.Any() == true) yield return new KeyValuePair<string,object>("regulatoryBasis",RegulatoryBasis);
      if (PolicyBasis is not null) yield return new KeyValuePair<string,object>("policyBasis",PolicyBasis);
      if (PolicyText?.Any() == true) yield return new KeyValuePair<string,object>("policyText",PolicyText);
      if (Verification?.Any() == true) yield return new KeyValuePair<string,object>("verification",Verification);
      if (DecisionElement is not null) yield return new KeyValuePair<string,object>("decision",DecisionElement);
      if (Provision?.Any() == true) yield return new KeyValuePair<string,object>("provision",Provision);
    }

  }

}

// end of file

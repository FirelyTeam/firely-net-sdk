// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// PaymentReconciliation resource
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("PaymentReconciliation","http://hl7.org/fhir/StructureDefinition/PaymentReconciliation", IsResource=true)]
  public partial class PaymentReconciliation : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "PaymentReconciliation"; } }

    /// <summary>
    /// The outcome of the processing.
    /// (url: http://hl7.org/fhir/ValueSet/payment-outcome)
    /// (system: http://hl7.org/fhir/payment-outcome)
    /// </summary>
    [FhirEnumeration("PaymentOutcome", "http://hl7.org/fhir/ValueSet/payment-outcome", "http://hl7.org/fhir/payment-outcome")]
    public enum PaymentOutcome
    {
      /// <summary>
      /// The Claim/Pre-authorization/Pre-determination has been received but processing has not begun.
      /// (system: http://hl7.org/fhir/payment-outcome)
      /// </summary>
      [EnumLiteral("queued"), Description("Queued")]
      Queued,
      /// <summary>
      /// The processing has completed without errors
      /// (system: http://hl7.org/fhir/payment-outcome)
      /// </summary>
      [EnumLiteral("complete"), Description("Processing Complete")]
      Complete,
      /// <summary>
      /// One or more errors have been detected in the Claim
      /// (system: http://hl7.org/fhir/payment-outcome)
      /// </summary>
      [EnumLiteral("error"), Description("Error")]
      Error,
      /// <summary>
      /// No errors have been detected in the Claim and some of the adjudication has been performed.
      /// (system: http://hl7.org/fhir/payment-outcome)
      /// </summary>
      [EnumLiteral("partial"), Description("Partial Processing")]
      Partial,
    }

    /// <summary>
    /// Settlement particulars
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("PaymentReconciliation#Allocation", IsNestedType=true)]
    [BackboneType("PaymentReconciliation.allocation")]
    public partial class AllocationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "PaymentReconciliation#Allocation"; } }

      /// <summary>
      /// Business identifier of the payment detail
      /// </summary>
      [FhirElement("identifier", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// Business identifier of the prior payment detail
      /// </summary>
      [FhirElement("predecessor", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Predecessor
      {
        get { return _Predecessor; }
        set { _Predecessor = value; OnPropertyChanged("Predecessor"); }
      }

      private Hl7.Fhir.Model.Identifier _Predecessor;

      /// <summary>
      /// Subject of the payment
      /// </summary>
      [FhirElement("target", Order=60)]
      [CLSCompliant(false)]
      [References("Claim","Account","Invoice","ChargeItem","Encounter","Contract")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Target
      {
        get { return _Target; }
        set { _Target = value; OnPropertyChanged("Target"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Target;

      /// <summary>
      /// Sub-element of the subject
      /// </summary>
      [FhirElement("targetItem", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Identifier),typeof(Hl7.Fhir.Model.PositiveInt))]
      [DataMember]
      public Hl7.Fhir.Model.DataType TargetItem
      {
        get { return _TargetItem; }
        set { _TargetItem = value; OnPropertyChanged("TargetItem"); }
      }

      private Hl7.Fhir.Model.DataType _TargetItem;

      /// <summary>
      /// Applied-to encounter
      /// </summary>
      [FhirElement("encounter", Order=80)]
      [CLSCompliant(false)]
      [References("Encounter")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Encounter
      {
        get { return _Encounter; }
        set { _Encounter = value; OnPropertyChanged("Encounter"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Encounter;

      /// <summary>
      /// Applied-to account
      /// </summary>
      [FhirElement("account", Order=90)]
      [CLSCompliant(false)]
      [References("Account")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Account
      {
        get { return _Account; }
        set { _Account = value; OnPropertyChanged("Account"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Account;

      /// <summary>
      /// Category of payment
      /// </summary>
      [FhirElement("type", Order=100)]
      [Binding("PaymentType")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Submitter of the request
      /// </summary>
      [FhirElement("submitter", Order=110)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Submitter
      {
        get { return _Submitter; }
        set { _Submitter = value; OnPropertyChanged("Submitter"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Submitter;

      /// <summary>
      /// Response committing to a payment
      /// </summary>
      [FhirElement("response", Order=120)]
      [CLSCompliant(false)]
      [References("ClaimResponse")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Response
      {
        get { return _Response; }
        set { _Response = value; OnPropertyChanged("Response"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Response;

      /// <summary>
      /// Date of commitment to pay
      /// </summary>
      [FhirElement("date", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.Date _DateElement;

      /// <summary>
      /// Date of commitment to pay
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// Contact for the response
      /// </summary>
      [FhirElement("responsible", Order=140)]
      [CLSCompliant(false)]
      [References("PractitionerRole")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Responsible
      {
        get { return _Responsible; }
        set { _Responsible = value; OnPropertyChanged("Responsible"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Responsible;

      /// <summary>
      /// Recipient of the payment
      /// </summary>
      [FhirElement("payee", Order=150)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Payee
      {
        get { return _Payee; }
        set { _Payee = value; OnPropertyChanged("Payee"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Payee;

      /// <summary>
      /// Amount allocated to this payable
      /// </summary>
      [FhirElement("amount", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.Money Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.Money _Amount;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AllocationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Predecessor != null) dest.Predecessor = (Hl7.Fhir.Model.Identifier)Predecessor.DeepCopy();
        if(Target != null) dest.Target = (Hl7.Fhir.Model.ResourceReference)Target.DeepCopy();
        if(TargetItem != null) dest.TargetItem = (Hl7.Fhir.Model.DataType)TargetItem.DeepCopy();
        if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
        if(Account != null) dest.Account = (Hl7.Fhir.Model.ResourceReference)Account.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Submitter != null) dest.Submitter = (Hl7.Fhir.Model.ResourceReference)Submitter.DeepCopy();
        if(Response != null) dest.Response = (Hl7.Fhir.Model.ResourceReference)Response.DeepCopy();
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Date)DateElement.DeepCopy();
        if(Responsible != null) dest.Responsible = (Hl7.Fhir.Model.ResourceReference)Responsible.DeepCopy();
        if(Payee != null) dest.Payee = (Hl7.Fhir.Model.ResourceReference)Payee.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Money)Amount.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AllocationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AllocationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Predecessor, otherT.Predecessor)) return false;
        if( !DeepComparable.Matches(Target, otherT.Target)) return false;
        if( !DeepComparable.Matches(TargetItem, otherT.TargetItem)) return false;
        if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
        if( !DeepComparable.Matches(Account, otherT.Account)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Submitter, otherT.Submitter)) return false;
        if( !DeepComparable.Matches(Response, otherT.Response)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(Responsible, otherT.Responsible)) return false;
        if( !DeepComparable.Matches(Payee, otherT.Payee)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AllocationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Predecessor, otherT.Predecessor)) return false;
        if( !DeepComparable.IsExactly(Target, otherT.Target)) return false;
        if( !DeepComparable.IsExactly(TargetItem, otherT.TargetItem)) return false;
        if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
        if( !DeepComparable.IsExactly(Account, otherT.Account)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Submitter, otherT.Submitter)) return false;
        if( !DeepComparable.IsExactly(Response, otherT.Response)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(Responsible, otherT.Responsible)) return false;
        if( !DeepComparable.IsExactly(Payee, otherT.Payee)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          if (Predecessor != null) yield return Predecessor;
          if (Target != null) yield return Target;
          if (TargetItem != null) yield return TargetItem;
          if (Encounter != null) yield return Encounter;
          if (Account != null) yield return Account;
          if (Type != null) yield return Type;
          if (Submitter != null) yield return Submitter;
          if (Response != null) yield return Response;
          if (DateElement != null) yield return DateElement;
          if (Responsible != null) yield return Responsible;
          if (Payee != null) yield return Payee;
          if (Amount != null) yield return Amount;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (Predecessor != null) yield return new ElementValue("predecessor", Predecessor);
          if (Target != null) yield return new ElementValue("target", Target);
          if (TargetItem != null) yield return new ElementValue("targetItem", TargetItem);
          if (Encounter != null) yield return new ElementValue("encounter", Encounter);
          if (Account != null) yield return new ElementValue("account", Account);
          if (Type != null) yield return new ElementValue("type", Type);
          if (Submitter != null) yield return new ElementValue("submitter", Submitter);
          if (Response != null) yield return new ElementValue("response", Response);
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (Responsible != null) yield return new ElementValue("responsible", Responsible);
          if (Payee != null) yield return new ElementValue("payee", Payee);
          if (Amount != null) yield return new ElementValue("amount", Amount);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "predecessor":
            value = Predecessor;
            return Predecessor is not null;
          case "target":
            value = Target;
            return Target is not null;
          case "targetItem":
            value = TargetItem;
            return TargetItem is not null;
          case "encounter":
            value = Encounter;
            return Encounter is not null;
          case "account":
            value = Account;
            return Account is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "submitter":
            value = Submitter;
            return Submitter is not null;
          case "response":
            value = Response;
            return Response is not null;
          case "date":
            value = DateElement;
            return DateElement is not null;
          case "responsible":
            value = Responsible;
            return Responsible is not null;
          case "payee":
            value = Payee;
            return Payee is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (Predecessor is not null) yield return new KeyValuePair<string,object>("predecessor",Predecessor);
        if (Target is not null) yield return new KeyValuePair<string,object>("target",Target);
        if (TargetItem is not null) yield return new KeyValuePair<string,object>("targetItem",TargetItem);
        if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
        if (Account is not null) yield return new KeyValuePair<string,object>("account",Account);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Submitter is not null) yield return new KeyValuePair<string,object>("submitter",Submitter);
        if (Response is not null) yield return new KeyValuePair<string,object>("response",Response);
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
        if (Responsible is not null) yield return new KeyValuePair<string,object>("responsible",Responsible);
        if (Payee is not null) yield return new KeyValuePair<string,object>("payee",Payee);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
      }

    }

    /// <summary>
    /// Note concerning processing
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("PaymentReconciliation#Notes", IsNestedType=true)]
    [BackboneType("PaymentReconciliation.processNote")]
    public partial class NotesComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "PaymentReconciliation#Notes"; } }

      /// <summary>
      /// display | print | printoper
      /// </summary>
      [FhirElement("type", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("NoteType")]
      [DataMember]
      public Code<Hl7.Fhir.Model.NoteType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.NoteType> _TypeElement;

      /// <summary>
      /// display | print | printoper
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.NoteType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.NoteType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// Note explanatory text
      /// </summary>
      [FhirElement("text", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextElement
      {
        get { return _TextElement; }
        set { _TextElement = value; OnPropertyChanged("TextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextElement;

      /// <summary>
      /// Note explanatory text
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Text
      {
        get { return TextElement != null ? TextElement.Value : null; }
        set
        {
          if (value == null)
            TextElement = null;
          else
            TextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Text");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NotesComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.NoteType>)TypeElement.DeepCopy();
        if(TextElement != null) dest.TextElement = (Hl7.Fhir.Model.FhirString)TextElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NotesComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NotesComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(TextElement, otherT.TextElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NotesComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(TextElement, otherT.TextElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TypeElement != null) yield return TypeElement;
          if (TextElement != null) yield return TextElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (TextElement != null) yield return new ElementValue("text", TextElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "text":
            value = TextElement;
            return TextElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (TextElement is not null) yield return new KeyValuePair<string,object>("text",TextElement);
      }

    }

    /// <summary>
    /// Business Identifier for a payment reconciliation
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Category of payment
    /// </summary>
    [FhirElement("type", InSummary=true, Order=100)]
    [Binding("PaymentType")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=110, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PaymentReconciliationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.FinancialResourceStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.FinancialResourceStatusCodes> _StatusElement;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.FinancialResourceStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Workflow originating payment
    /// </summary>
    [FhirElement("kind", Order=120)]
    [Binding("PaymentKind")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Kind
    {
      get { return _Kind; }
      set { _Kind = value; OnPropertyChanged("Kind"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Kind;

    /// <summary>
    /// Period covered
    /// </summary>
    [FhirElement("period", InSummary=true, Order=130, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// Creation date
    /// </summary>
    [FhirElement("created", InSummary=true, Order=140, FiveWs="FiveWs.recorded")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CreatedElement
    {
      get { return _CreatedElement; }
      set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

    /// <summary>
    /// Creation date
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Created
    {
      get { return CreatedElement != null ? CreatedElement.Value : null; }
      set
      {
        if (value == null)
          CreatedElement = null;
        else
          CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Created");
      }
    }

    /// <summary>
    /// Who entered the payment
    /// </summary>
    [FhirElement("enterer", Order=150)]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Enterer
    {
      get { return _Enterer; }
      set { _Enterer = value; OnPropertyChanged("Enterer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Enterer;

    /// <summary>
    /// Nature of the source
    /// </summary>
    [FhirElement("issuerType", Order=160)]
    [Binding("PaymentIssuerType")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept IssuerType
    {
      get { return _IssuerType; }
      set { _IssuerType = value; OnPropertyChanged("IssuerType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _IssuerType;

    /// <summary>
    /// Party generating payment
    /// </summary>
    [FhirElement("paymentIssuer", InSummary=true, Order=170, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Organization","Patient","RelatedPerson")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference PaymentIssuer
    {
      get { return _PaymentIssuer; }
      set { _PaymentIssuer = value; OnPropertyChanged("PaymentIssuer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _PaymentIssuer;

    /// <summary>
    /// Reference to requesting resource
    /// </summary>
    [FhirElement("request", Order=180, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Task")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Request
    {
      get { return _Request; }
      set { _Request = value; OnPropertyChanged("Request"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Request;

    /// <summary>
    /// Responsible practitioner
    /// </summary>
    [FhirElement("requestor", Order=190)]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Requestor
    {
      get { return _Requestor; }
      set { _Requestor = value; OnPropertyChanged("Requestor"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Requestor;

    /// <summary>
    /// queued | complete | error | partial
    /// </summary>
    [FhirElement("outcome", Order=200)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PaymentOutcome")]
    [DataMember]
    public Code<Hl7.Fhir.Model.PaymentReconciliation.PaymentOutcome> OutcomeElement
    {
      get { return _OutcomeElement; }
      set { _OutcomeElement = value; OnPropertyChanged("OutcomeElement"); }
    }

    private Code<Hl7.Fhir.Model.PaymentReconciliation.PaymentOutcome> _OutcomeElement;

    /// <summary>
    /// queued | complete | error | partial
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PaymentReconciliation.PaymentOutcome? Outcome
    {
      get { return OutcomeElement != null ? OutcomeElement.Value : null; }
      set
      {
        if (value == null)
          OutcomeElement = null;
        else
          OutcomeElement = new Code<Hl7.Fhir.Model.PaymentReconciliation.PaymentOutcome>(value);
        OnPropertyChanged("Outcome");
      }
    }

    /// <summary>
    /// Disposition message
    /// </summary>
    [FhirElement("disposition", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DispositionElement
    {
      get { return _DispositionElement; }
      set { _DispositionElement = value; OnPropertyChanged("DispositionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DispositionElement;

    /// <summary>
    /// Disposition message
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Disposition
    {
      get { return DispositionElement != null ? DispositionElement.Value : null; }
      set
      {
        if (value == null)
          DispositionElement = null;
        else
          DispositionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Disposition");
      }
    }

    /// <summary>
    /// When payment issued
    /// </summary>
    [FhirElement("date", InSummary=true, Order=220)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Date DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.Date _DateElement;

    /// <summary>
    /// When payment issued
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Where payment collected
    /// </summary>
    [FhirElement("location", Order=230)]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// Payment instrument
    /// </summary>
    [FhirElement("method", Order=240)]
    [Binding("PaymentMethod")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Method
    {
      get { return _Method; }
      set { _Method = value; OnPropertyChanged("Method"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Method;

    /// <summary>
    /// Type of card
    /// </summary>
    [FhirElement("cardBrand", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CardBrandElement
    {
      get { return _CardBrandElement; }
      set { _CardBrandElement = value; OnPropertyChanged("CardBrandElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CardBrandElement;

    /// <summary>
    /// Type of card
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CardBrand
    {
      get { return CardBrandElement != null ? CardBrandElement.Value : null; }
      set
      {
        if (value == null)
          CardBrandElement = null;
        else
          CardBrandElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CardBrand");
      }
    }

    /// <summary>
    /// Digits for verification
    /// </summary>
    [FhirElement("accountNumber", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString AccountNumberElement
    {
      get { return _AccountNumberElement; }
      set { _AccountNumberElement = value; OnPropertyChanged("AccountNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _AccountNumberElement;

    /// <summary>
    /// Digits for verification
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string AccountNumber
    {
      get { return AccountNumberElement != null ? AccountNumberElement.Value : null; }
      set
      {
        if (value == null)
          AccountNumberElement = null;
        else
          AccountNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("AccountNumber");
      }
    }

    /// <summary>
    /// Expiration year-month
    /// </summary>
    [FhirElement("expirationDate", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Date ExpirationDateElement
    {
      get { return _ExpirationDateElement; }
      set { _ExpirationDateElement = value; OnPropertyChanged("ExpirationDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ExpirationDateElement;

    /// <summary>
    /// Expiration year-month
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ExpirationDate
    {
      get { return ExpirationDateElement != null ? ExpirationDateElement.Value : null; }
      set
      {
        if (value == null)
          ExpirationDateElement = null;
        else
          ExpirationDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ExpirationDate");
      }
    }

    /// <summary>
    /// Processor name
    /// </summary>
    [FhirElement("processor", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ProcessorElement
    {
      get { return _ProcessorElement; }
      set { _ProcessorElement = value; OnPropertyChanged("ProcessorElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ProcessorElement;

    /// <summary>
    /// Processor name
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Processor
    {
      get { return ProcessorElement != null ? ProcessorElement.Value : null; }
      set
      {
        if (value == null)
          ProcessorElement = null;
        else
          ProcessorElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Processor");
      }
    }

    /// <summary>
    /// Check number or payment reference
    /// </summary>
    [FhirElement("referenceNumber", Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ReferenceNumberElement
    {
      get { return _ReferenceNumberElement; }
      set { _ReferenceNumberElement = value; OnPropertyChanged("ReferenceNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ReferenceNumberElement;

    /// <summary>
    /// Check number or payment reference
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ReferenceNumber
    {
      get { return ReferenceNumberElement != null ? ReferenceNumberElement.Value : null; }
      set
      {
        if (value == null)
          ReferenceNumberElement = null;
        else
          ReferenceNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("ReferenceNumber");
      }
    }

    /// <summary>
    /// Authorization number
    /// </summary>
    [FhirElement("authorization", Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString AuthorizationElement
    {
      get { return _AuthorizationElement; }
      set { _AuthorizationElement = value; OnPropertyChanged("AuthorizationElement"); }
    }

    private Hl7.Fhir.Model.FhirString _AuthorizationElement;

    /// <summary>
    /// Authorization number
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Authorization
    {
      get { return AuthorizationElement != null ? AuthorizationElement.Value : null; }
      set
      {
        if (value == null)
          AuthorizationElement = null;
        else
          AuthorizationElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Authorization");
      }
    }

    /// <summary>
    /// Amount offered by the issuer
    /// </summary>
    [FhirElement("tenderedAmount", Order=310)]
    [DataMember]
    public Hl7.Fhir.Model.Money TenderedAmount
    {
      get { return _TenderedAmount; }
      set { _TenderedAmount = value; OnPropertyChanged("TenderedAmount"); }
    }

    private Hl7.Fhir.Model.Money _TenderedAmount;

    /// <summary>
    /// Amount returned by the receiver
    /// </summary>
    [FhirElement("returnedAmount", Order=320)]
    [DataMember]
    public Hl7.Fhir.Model.Money ReturnedAmount
    {
      get { return _ReturnedAmount; }
      set { _ReturnedAmount = value; OnPropertyChanged("ReturnedAmount"); }
    }

    private Hl7.Fhir.Model.Money _ReturnedAmount;

    /// <summary>
    /// Total amount of Payment
    /// </summary>
    [FhirElement("amount", InSummary=true, Order=330)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Money Amount
    {
      get { return _Amount; }
      set { _Amount = value; OnPropertyChanged("Amount"); }
    }

    private Hl7.Fhir.Model.Money _Amount;

    /// <summary>
    /// Business identifier for the payment
    /// </summary>
    [FhirElement("paymentIdentifier", Order=340)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier PaymentIdentifier
    {
      get { return _PaymentIdentifier; }
      set { _PaymentIdentifier = value; OnPropertyChanged("PaymentIdentifier"); }
    }

    private Hl7.Fhir.Model.Identifier _PaymentIdentifier;

    /// <summary>
    /// Settlement particulars
    /// </summary>
    [FhirElement("allocation", Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.PaymentReconciliation.AllocationComponent> Allocation
    {
      get { if(_Allocation==null) _Allocation = new List<Hl7.Fhir.Model.PaymentReconciliation.AllocationComponent>(); return _Allocation; }
      set { _Allocation = value; OnPropertyChanged("Allocation"); }
    }

    private List<Hl7.Fhir.Model.PaymentReconciliation.AllocationComponent> _Allocation;

    /// <summary>
    /// Printed form identifier
    /// </summary>
    [FhirElement("formCode", Order=360)]
    [Binding("Forms")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept FormCode
    {
      get { return _FormCode; }
      set { _FormCode = value; OnPropertyChanged("FormCode"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _FormCode;

    /// <summary>
    /// Note concerning processing
    /// </summary>
    [FhirElement("processNote", Order=370)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.PaymentReconciliation.NotesComponent> ProcessNote
    {
      get { if(_ProcessNote==null) _ProcessNote = new List<Hl7.Fhir.Model.PaymentReconciliation.NotesComponent>(); return _ProcessNote; }
      set { _ProcessNote = value; OnPropertyChanged("ProcessNote"); }
    }

    private List<Hl7.Fhir.Model.PaymentReconciliation.NotesComponent> _ProcessNote;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as PaymentReconciliation;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>)StatusElement.DeepCopy();
      if(Kind != null) dest.Kind = (Hl7.Fhir.Model.CodeableConcept)Kind.DeepCopy();
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
      if(Enterer != null) dest.Enterer = (Hl7.Fhir.Model.ResourceReference)Enterer.DeepCopy();
      if(IssuerType != null) dest.IssuerType = (Hl7.Fhir.Model.CodeableConcept)IssuerType.DeepCopy();
      if(PaymentIssuer != null) dest.PaymentIssuer = (Hl7.Fhir.Model.ResourceReference)PaymentIssuer.DeepCopy();
      if(Request != null) dest.Request = (Hl7.Fhir.Model.ResourceReference)Request.DeepCopy();
      if(Requestor != null) dest.Requestor = (Hl7.Fhir.Model.ResourceReference)Requestor.DeepCopy();
      if(OutcomeElement != null) dest.OutcomeElement = (Code<Hl7.Fhir.Model.PaymentReconciliation.PaymentOutcome>)OutcomeElement.DeepCopy();
      if(DispositionElement != null) dest.DispositionElement = (Hl7.Fhir.Model.FhirString)DispositionElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Date)DateElement.DeepCopy();
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Method != null) dest.Method = (Hl7.Fhir.Model.CodeableConcept)Method.DeepCopy();
      if(CardBrandElement != null) dest.CardBrandElement = (Hl7.Fhir.Model.FhirString)CardBrandElement.DeepCopy();
      if(AccountNumberElement != null) dest.AccountNumberElement = (Hl7.Fhir.Model.FhirString)AccountNumberElement.DeepCopy();
      if(ExpirationDateElement != null) dest.ExpirationDateElement = (Hl7.Fhir.Model.Date)ExpirationDateElement.DeepCopy();
      if(ProcessorElement != null) dest.ProcessorElement = (Hl7.Fhir.Model.FhirString)ProcessorElement.DeepCopy();
      if(ReferenceNumberElement != null) dest.ReferenceNumberElement = (Hl7.Fhir.Model.FhirString)ReferenceNumberElement.DeepCopy();
      if(AuthorizationElement != null) dest.AuthorizationElement = (Hl7.Fhir.Model.FhirString)AuthorizationElement.DeepCopy();
      if(TenderedAmount != null) dest.TenderedAmount = (Hl7.Fhir.Model.Money)TenderedAmount.DeepCopy();
      if(ReturnedAmount != null) dest.ReturnedAmount = (Hl7.Fhir.Model.Money)ReturnedAmount.DeepCopy();
      if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Money)Amount.DeepCopy();
      if(PaymentIdentifier != null) dest.PaymentIdentifier = (Hl7.Fhir.Model.Identifier)PaymentIdentifier.DeepCopy();
      if(Allocation != null) dest.Allocation = new List<Hl7.Fhir.Model.PaymentReconciliation.AllocationComponent>(Allocation.DeepCopy());
      if(FormCode != null) dest.FormCode = (Hl7.Fhir.Model.CodeableConcept)FormCode.DeepCopy();
      if(ProcessNote != null) dest.ProcessNote = new List<Hl7.Fhir.Model.PaymentReconciliation.NotesComponent>(ProcessNote.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new PaymentReconciliation());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as PaymentReconciliation;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Kind, otherT.Kind)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.Matches(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.Matches(IssuerType, otherT.IssuerType)) return false;
      if( !DeepComparable.Matches(PaymentIssuer, otherT.PaymentIssuer)) return false;
      if( !DeepComparable.Matches(Request, otherT.Request)) return false;
      if( !DeepComparable.Matches(Requestor, otherT.Requestor)) return false;
      if( !DeepComparable.Matches(OutcomeElement, otherT.OutcomeElement)) return false;
      if( !DeepComparable.Matches(DispositionElement, otherT.DispositionElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Method, otherT.Method)) return false;
      if( !DeepComparable.Matches(CardBrandElement, otherT.CardBrandElement)) return false;
      if( !DeepComparable.Matches(AccountNumberElement, otherT.AccountNumberElement)) return false;
      if( !DeepComparable.Matches(ExpirationDateElement, otherT.ExpirationDateElement)) return false;
      if( !DeepComparable.Matches(ProcessorElement, otherT.ProcessorElement)) return false;
      if( !DeepComparable.Matches(ReferenceNumberElement, otherT.ReferenceNumberElement)) return false;
      if( !DeepComparable.Matches(AuthorizationElement, otherT.AuthorizationElement)) return false;
      if( !DeepComparable.Matches(TenderedAmount, otherT.TenderedAmount)) return false;
      if( !DeepComparable.Matches(ReturnedAmount, otherT.ReturnedAmount)) return false;
      if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;
      if( !DeepComparable.Matches(PaymentIdentifier, otherT.PaymentIdentifier)) return false;
      if( !DeepComparable.Matches(Allocation, otherT.Allocation)) return false;
      if( !DeepComparable.Matches(FormCode, otherT.FormCode)) return false;
      if( !DeepComparable.Matches(ProcessNote, otherT.ProcessNote)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as PaymentReconciliation;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Kind, otherT.Kind)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.IsExactly(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.IsExactly(IssuerType, otherT.IssuerType)) return false;
      if( !DeepComparable.IsExactly(PaymentIssuer, otherT.PaymentIssuer)) return false;
      if( !DeepComparable.IsExactly(Request, otherT.Request)) return false;
      if( !DeepComparable.IsExactly(Requestor, otherT.Requestor)) return false;
      if( !DeepComparable.IsExactly(OutcomeElement, otherT.OutcomeElement)) return false;
      if( !DeepComparable.IsExactly(DispositionElement, otherT.DispositionElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Method, otherT.Method)) return false;
      if( !DeepComparable.IsExactly(CardBrandElement, otherT.CardBrandElement)) return false;
      if( !DeepComparable.IsExactly(AccountNumberElement, otherT.AccountNumberElement)) return false;
      if( !DeepComparable.IsExactly(ExpirationDateElement, otherT.ExpirationDateElement)) return false;
      if( !DeepComparable.IsExactly(ProcessorElement, otherT.ProcessorElement)) return false;
      if( !DeepComparable.IsExactly(ReferenceNumberElement, otherT.ReferenceNumberElement)) return false;
      if( !DeepComparable.IsExactly(AuthorizationElement, otherT.AuthorizationElement)) return false;
      if( !DeepComparable.IsExactly(TenderedAmount, otherT.TenderedAmount)) return false;
      if( !DeepComparable.IsExactly(ReturnedAmount, otherT.ReturnedAmount)) return false;
      if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;
      if( !DeepComparable.IsExactly(PaymentIdentifier, otherT.PaymentIdentifier)) return false;
      if( !DeepComparable.IsExactly(Allocation, otherT.Allocation)) return false;
      if( !DeepComparable.IsExactly(FormCode, otherT.FormCode)) return false;
      if( !DeepComparable.IsExactly(ProcessNote, otherT.ProcessNote)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (Type != null) yield return Type;
        if (StatusElement != null) yield return StatusElement;
        if (Kind != null) yield return Kind;
        if (Period != null) yield return Period;
        if (CreatedElement != null) yield return CreatedElement;
        if (Enterer != null) yield return Enterer;
        if (IssuerType != null) yield return IssuerType;
        if (PaymentIssuer != null) yield return PaymentIssuer;
        if (Request != null) yield return Request;
        if (Requestor != null) yield return Requestor;
        if (OutcomeElement != null) yield return OutcomeElement;
        if (DispositionElement != null) yield return DispositionElement;
        if (DateElement != null) yield return DateElement;
        if (Location != null) yield return Location;
        if (Method != null) yield return Method;
        if (CardBrandElement != null) yield return CardBrandElement;
        if (AccountNumberElement != null) yield return AccountNumberElement;
        if (ExpirationDateElement != null) yield return ExpirationDateElement;
        if (ProcessorElement != null) yield return ProcessorElement;
        if (ReferenceNumberElement != null) yield return ReferenceNumberElement;
        if (AuthorizationElement != null) yield return AuthorizationElement;
        if (TenderedAmount != null) yield return TenderedAmount;
        if (ReturnedAmount != null) yield return ReturnedAmount;
        if (Amount != null) yield return Amount;
        if (PaymentIdentifier != null) yield return PaymentIdentifier;
        foreach (var elem in Allocation) { if (elem != null) yield return elem; }
        if (FormCode != null) yield return FormCode;
        foreach (var elem in ProcessNote) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (Type != null) yield return new ElementValue("type", Type);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Kind != null) yield return new ElementValue("kind", Kind);
        if (Period != null) yield return new ElementValue("period", Period);
        if (CreatedElement != null) yield return new ElementValue("created", CreatedElement);
        if (Enterer != null) yield return new ElementValue("enterer", Enterer);
        if (IssuerType != null) yield return new ElementValue("issuerType", IssuerType);
        if (PaymentIssuer != null) yield return new ElementValue("paymentIssuer", PaymentIssuer);
        if (Request != null) yield return new ElementValue("request", Request);
        if (Requestor != null) yield return new ElementValue("requestor", Requestor);
        if (OutcomeElement != null) yield return new ElementValue("outcome", OutcomeElement);
        if (DispositionElement != null) yield return new ElementValue("disposition", DispositionElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (Location != null) yield return new ElementValue("location", Location);
        if (Method != null) yield return new ElementValue("method", Method);
        if (CardBrandElement != null) yield return new ElementValue("cardBrand", CardBrandElement);
        if (AccountNumberElement != null) yield return new ElementValue("accountNumber", AccountNumberElement);
        if (ExpirationDateElement != null) yield return new ElementValue("expirationDate", ExpirationDateElement);
        if (ProcessorElement != null) yield return new ElementValue("processor", ProcessorElement);
        if (ReferenceNumberElement != null) yield return new ElementValue("referenceNumber", ReferenceNumberElement);
        if (AuthorizationElement != null) yield return new ElementValue("authorization", AuthorizationElement);
        if (TenderedAmount != null) yield return new ElementValue("tenderedAmount", TenderedAmount);
        if (ReturnedAmount != null) yield return new ElementValue("returnedAmount", ReturnedAmount);
        if (Amount != null) yield return new ElementValue("amount", Amount);
        if (PaymentIdentifier != null) yield return new ElementValue("paymentIdentifier", PaymentIdentifier);
        foreach (var elem in Allocation) { if (elem != null) yield return new ElementValue("allocation", elem); }
        if (FormCode != null) yield return new ElementValue("formCode", FormCode);
        foreach (var elem in ProcessNote) { if (elem != null) yield return new ElementValue("processNote", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "type":
          value = Type;
          return Type is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "kind":
          value = Kind;
          return Kind is not null;
        case "period":
          value = Period;
          return Period is not null;
        case "created":
          value = CreatedElement;
          return CreatedElement is not null;
        case "enterer":
          value = Enterer;
          return Enterer is not null;
        case "issuerType":
          value = IssuerType;
          return IssuerType is not null;
        case "paymentIssuer":
          value = PaymentIssuer;
          return PaymentIssuer is not null;
        case "request":
          value = Request;
          return Request is not null;
        case "requestor":
          value = Requestor;
          return Requestor is not null;
        case "outcome":
          value = OutcomeElement;
          return OutcomeElement is not null;
        case "disposition":
          value = DispositionElement;
          return DispositionElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "location":
          value = Location;
          return Location is not null;
        case "method":
          value = Method;
          return Method is not null;
        case "cardBrand":
          value = CardBrandElement;
          return CardBrandElement is not null;
        case "accountNumber":
          value = AccountNumberElement;
          return AccountNumberElement is not null;
        case "expirationDate":
          value = ExpirationDateElement;
          return ExpirationDateElement is not null;
        case "processor":
          value = ProcessorElement;
          return ProcessorElement is not null;
        case "referenceNumber":
          value = ReferenceNumberElement;
          return ReferenceNumberElement is not null;
        case "authorization":
          value = AuthorizationElement;
          return AuthorizationElement is not null;
        case "tenderedAmount":
          value = TenderedAmount;
          return TenderedAmount is not null;
        case "returnedAmount":
          value = ReturnedAmount;
          return ReturnedAmount is not null;
        case "amount":
          value = Amount;
          return Amount is not null;
        case "paymentIdentifier":
          value = PaymentIdentifier;
          return PaymentIdentifier is not null;
        case "allocation":
          value = Allocation;
          return Allocation?.Any() == true;
        case "formCode":
          value = FormCode;
          return FormCode is not null;
        case "processNote":
          value = ProcessNote;
          return ProcessNote?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Kind is not null) yield return new KeyValuePair<string,object>("kind",Kind);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (CreatedElement is not null) yield return new KeyValuePair<string,object>("created",CreatedElement);
      if (Enterer is not null) yield return new KeyValuePair<string,object>("enterer",Enterer);
      if (IssuerType is not null) yield return new KeyValuePair<string,object>("issuerType",IssuerType);
      if (PaymentIssuer is not null) yield return new KeyValuePair<string,object>("paymentIssuer",PaymentIssuer);
      if (Request is not null) yield return new KeyValuePair<string,object>("request",Request);
      if (Requestor is not null) yield return new KeyValuePair<string,object>("requestor",Requestor);
      if (OutcomeElement is not null) yield return new KeyValuePair<string,object>("outcome",OutcomeElement);
      if (DispositionElement is not null) yield return new KeyValuePair<string,object>("disposition",DispositionElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Method is not null) yield return new KeyValuePair<string,object>("method",Method);
      if (CardBrandElement is not null) yield return new KeyValuePair<string,object>("cardBrand",CardBrandElement);
      if (AccountNumberElement is not null) yield return new KeyValuePair<string,object>("accountNumber",AccountNumberElement);
      if (ExpirationDateElement is not null) yield return new KeyValuePair<string,object>("expirationDate",ExpirationDateElement);
      if (ProcessorElement is not null) yield return new KeyValuePair<string,object>("processor",ProcessorElement);
      if (ReferenceNumberElement is not null) yield return new KeyValuePair<string,object>("referenceNumber",ReferenceNumberElement);
      if (AuthorizationElement is not null) yield return new KeyValuePair<string,object>("authorization",AuthorizationElement);
      if (TenderedAmount is not null) yield return new KeyValuePair<string,object>("tenderedAmount",TenderedAmount);
      if (ReturnedAmount is not null) yield return new KeyValuePair<string,object>("returnedAmount",ReturnedAmount);
      if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
      if (PaymentIdentifier is not null) yield return new KeyValuePair<string,object>("paymentIdentifier",PaymentIdentifier);
      if (Allocation?.Any() == true) yield return new KeyValuePair<string,object>("allocation",Allocation);
      if (FormCode is not null) yield return new KeyValuePair<string,object>("formCode",FormCode);
      if (ProcessNote?.Any() == true) yield return new KeyValuePair<string,object>("processNote",ProcessNote);
    }

  }

}

// end of file

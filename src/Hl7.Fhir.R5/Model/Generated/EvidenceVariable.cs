// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A definition of an exposure, outcome, or other variable
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("EvidenceVariable","http://hl7.org/fhir/StructureDefinition/EvidenceVariable", IsResource=true)]
  public partial class EvidenceVariable : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "EvidenceVariable"; } }

    /// <summary>
    /// Logical grouping of characteristics.
    /// (url: http://hl7.org/fhir/ValueSet/characteristic-combination)
    /// (system: http://hl7.org/fhir/characteristic-combination)
    /// </summary>
    [FhirEnumeration("CharacteristicCombination", "http://hl7.org/fhir/ValueSet/characteristic-combination")]
    public enum CharacteristicCombinationCode
    {
      /// <summary>
      /// Combine characteristics with AND.
      /// (system: http://hl7.org/fhir/characteristic-combination)
      /// </summary>
      [EnumLiteral("all-of", "http://hl7.org/fhir/characteristic-combination"), Description("All of")]
      AllOf,
      /// <summary>
      /// Combine characteristics with OR.
      /// (system: http://hl7.org/fhir/characteristic-combination)
      /// </summary>
      [EnumLiteral("any-of", "http://hl7.org/fhir/characteristic-combination"), Description("Any of")]
      AnyOf,
      /// <summary>
      /// Meet at least the threshold number of characteristics for definition.
      /// (system: http://hl7.org/fhir/characteristic-combination)
      /// </summary>
      [EnumLiteral("at-least", "http://hl7.org/fhir/characteristic-combination"), Description("At least")]
      AtLeast,
      /// <summary>
      /// Meet at most the threshold number of characteristics for definition.
      /// (system: http://hl7.org/fhir/characteristic-combination)
      /// </summary>
      [EnumLiteral("at-most", "http://hl7.org/fhir/characteristic-combination"), Description("At most")]
      AtMost,
      /// <summary>
      /// Combine characteristics statistically. Use method to specify the statistical method.
      /// (system: http://hl7.org/fhir/characteristic-combination)
      /// </summary>
      [EnumLiteral("statistical", "http://hl7.org/fhir/characteristic-combination"), Description("Statistical")]
      Statistical,
      /// <summary>
      /// Combine characteristics by addition of benefits and subtraction of harms.
      /// (system: http://hl7.org/fhir/characteristic-combination)
      /// </summary>
      [EnumLiteral("net-effect", "http://hl7.org/fhir/characteristic-combination"), Description("Net effect")]
      NetEffect,
      /// <summary>
      /// Combine characteristics as a collection used as the dataset.
      /// (system: http://hl7.org/fhir/characteristic-combination)
      /// </summary>
      [EnumLiteral("dataset", "http://hl7.org/fhir/characteristic-combination"), Description("Dataset")]
      Dataset,
    }

    /// <summary>
    /// A defining factor of the EvidenceVariable
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("EvidenceVariable#Characteristic", IsNestedType=true)]
    [BackboneType("EvidenceVariable.characteristic")]
    public partial class CharacteristicComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "EvidenceVariable#Characteristic"; } }

      /// <summary>
      /// Label for internal linking
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Id LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.Id _LinkIdElement;

      /// <summary>
      /// Label for internal linking
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// Natural language description of the characteristic
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Natural language description of the characteristic
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Used for footnotes or explanatory notes
      /// </summary>
      [FhirElement("note", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// Whether the characteristic is an inclusion criterion or exclusion criterion
      /// </summary>
      [FhirElement("exclude", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ExcludeElement
      {
        get { return _ExcludeElement; }
        set { _ExcludeElement = value; OnPropertyChanged("ExcludeElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ExcludeElement;

      /// <summary>
      /// Whether the characteristic is an inclusion criterion or exclusion criterion
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Exclude
      {
        get { return ExcludeElement != null ? ExcludeElement.Value : null; }
        set
        {
          if (value == null)
            ExcludeElement = null;
          else
            ExcludeElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Exclude");
        }
      }

      /// <summary>
      /// Defines the characteristic (without using type and value) by a Reference
      /// </summary>
      [FhirElement("definitionReference", InSummary=true, Order=80)]
      [CLSCompliant(false)]
      [References("EvidenceVariable","Group","Evidence")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference DefinitionReference
      {
        get { return _DefinitionReference; }
        set { _DefinitionReference = value; OnPropertyChanged("DefinitionReference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _DefinitionReference;

      /// <summary>
      /// Defines the characteristic (without using type and value) by a Canonical
      /// </summary>
      [FhirElement("definitionCanonical", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical DefinitionCanonicalElement
      {
        get { return _DefinitionCanonicalElement; }
        set { _DefinitionCanonicalElement = value; OnPropertyChanged("DefinitionCanonicalElement"); }
      }

      private Hl7.Fhir.Model.Canonical _DefinitionCanonicalElement;

      /// <summary>
      /// Defines the characteristic (without using type and value) by a Canonical
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DefinitionCanonical
      {
        get { return DefinitionCanonicalElement != null ? DefinitionCanonicalElement.Value : null; }
        set
        {
          if (value == null)
            DefinitionCanonicalElement = null;
          else
            DefinitionCanonicalElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("DefinitionCanonical");
        }
      }

      /// <summary>
      /// Defines the characteristic (without using type and value) by a CodeableConcept
      /// </summary>
      [FhirElement("definitionCodeableConcept", InSummary=true, Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept DefinitionCodeableConcept
      {
        get { return _DefinitionCodeableConcept; }
        set { _DefinitionCodeableConcept = value; OnPropertyChanged("DefinitionCodeableConcept"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _DefinitionCodeableConcept;

      /// <summary>
      /// Defines the characteristic (without using type and value) by an expression
      /// </summary>
      [FhirElement("definitionExpression", InSummary=true, Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Expression DefinitionExpression
      {
        get { return _DefinitionExpression; }
        set { _DefinitionExpression = value; OnPropertyChanged("DefinitionExpression"); }
      }

      private Hl7.Fhir.Model.Expression _DefinitionExpression;

      /// <summary>
      /// Defines the characteristic (without using type and value) by an id
      /// </summary>
      [FhirElement("definitionId", InSummary=true, Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.Id DefinitionIdElement
      {
        get { return _DefinitionIdElement; }
        set { _DefinitionIdElement = value; OnPropertyChanged("DefinitionIdElement"); }
      }

      private Hl7.Fhir.Model.Id _DefinitionIdElement;

      /// <summary>
      /// Defines the characteristic (without using type and value) by an id
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DefinitionId
      {
        get { return DefinitionIdElement != null ? DefinitionIdElement.Value : null; }
        set
        {
          if (value == null)
            DefinitionIdElement = null;
          else
            DefinitionIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("DefinitionId");
        }
      }

      /// <summary>
      /// Defines the characteristic using type and value
      /// </summary>
      [FhirElement("definitionByTypeAndValue", InSummary=true, Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.EvidenceVariable.DefinitionByTypeAndValueComponent DefinitionByTypeAndValue
      {
        get { return _DefinitionByTypeAndValue; }
        set { _DefinitionByTypeAndValue = value; OnPropertyChanged("DefinitionByTypeAndValue"); }
      }

      private Hl7.Fhir.Model.EvidenceVariable.DefinitionByTypeAndValueComponent _DefinitionByTypeAndValue;

      /// <summary>
      /// Used to specify how two or more characteristics are combined
      /// </summary>
      [FhirElement("definitionByCombination", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.EvidenceVariable.DefinitionByCombinationComponent DefinitionByCombination
      {
        get { return _DefinitionByCombination; }
        set { _DefinitionByCombination = value; OnPropertyChanged("DefinitionByCombination"); }
      }

      private Hl7.Fhir.Model.EvidenceVariable.DefinitionByCombinationComponent _DefinitionByCombination;

      /// <summary>
      /// Number of occurrences meeting the characteristic
      /// </summary>
      [FhirElement("instances", Order=150, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Instances
      {
        get { return _Instances; }
        set { _Instances = value; OnPropertyChanged("Instances"); }
      }

      private Hl7.Fhir.Model.DataType _Instances;

      /// <summary>
      /// Length of time in which the characteristic is met
      /// </summary>
      [FhirElement("duration", Order=160, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Duration
      {
        get { return _Duration; }
        set { _Duration = value; OnPropertyChanged("Duration"); }
      }

      private Hl7.Fhir.Model.DataType _Duration;

      /// <summary>
      /// Timing in which the characteristic is determined
      /// </summary>
      [FhirElement("timeFromEvent", Order=170)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.EvidenceVariable.TimeFromEventComponent> TimeFromEvent
      {
        get { if(_TimeFromEvent==null) _TimeFromEvent = new List<Hl7.Fhir.Model.EvidenceVariable.TimeFromEventComponent>(); return _TimeFromEvent; }
        set { _TimeFromEvent = value; OnPropertyChanged("TimeFromEvent"); }
      }

      private List<Hl7.Fhir.Model.EvidenceVariable.TimeFromEventComponent> _TimeFromEvent;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CharacteristicComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.Id)LinkIdElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(ExcludeElement != null) dest.ExcludeElement = (Hl7.Fhir.Model.FhirBoolean)ExcludeElement.DeepCopy();
        if(DefinitionReference != null) dest.DefinitionReference = (Hl7.Fhir.Model.ResourceReference)DefinitionReference.DeepCopy();
        if(DefinitionCanonicalElement != null) dest.DefinitionCanonicalElement = (Hl7.Fhir.Model.Canonical)DefinitionCanonicalElement.DeepCopy();
        if(DefinitionCodeableConcept != null) dest.DefinitionCodeableConcept = (Hl7.Fhir.Model.CodeableConcept)DefinitionCodeableConcept.DeepCopy();
        if(DefinitionExpression != null) dest.DefinitionExpression = (Hl7.Fhir.Model.Expression)DefinitionExpression.DeepCopy();
        if(DefinitionIdElement != null) dest.DefinitionIdElement = (Hl7.Fhir.Model.Id)DefinitionIdElement.DeepCopy();
        if(DefinitionByTypeAndValue != null) dest.DefinitionByTypeAndValue = (Hl7.Fhir.Model.EvidenceVariable.DefinitionByTypeAndValueComponent)DefinitionByTypeAndValue.DeepCopy();
        if(DefinitionByCombination != null) dest.DefinitionByCombination = (Hl7.Fhir.Model.EvidenceVariable.DefinitionByCombinationComponent)DefinitionByCombination.DeepCopy();
        if(Instances != null) dest.Instances = (Hl7.Fhir.Model.DataType)Instances.DeepCopy();
        if(Duration != null) dest.Duration = (Hl7.Fhir.Model.DataType)Duration.DeepCopy();
        if(TimeFromEvent != null) dest.TimeFromEvent = new List<Hl7.Fhir.Model.EvidenceVariable.TimeFromEventComponent>(TimeFromEvent.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CharacteristicComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CharacteristicComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(ExcludeElement, otherT.ExcludeElement)) return false;
        if( !DeepComparable.Matches(DefinitionReference, otherT.DefinitionReference)) return false;
        if( !DeepComparable.Matches(DefinitionCanonicalElement, otherT.DefinitionCanonicalElement)) return false;
        if( !DeepComparable.Matches(DefinitionCodeableConcept, otherT.DefinitionCodeableConcept)) return false;
        if( !DeepComparable.Matches(DefinitionExpression, otherT.DefinitionExpression)) return false;
        if( !DeepComparable.Matches(DefinitionIdElement, otherT.DefinitionIdElement)) return false;
        if( !DeepComparable.Matches(DefinitionByTypeAndValue, otherT.DefinitionByTypeAndValue)) return false;
        if( !DeepComparable.Matches(DefinitionByCombination, otherT.DefinitionByCombination)) return false;
        if( !DeepComparable.Matches(Instances, otherT.Instances)) return false;
        if( !DeepComparable.Matches(Duration, otherT.Duration)) return false;
        if( !DeepComparable.Matches(TimeFromEvent, otherT.TimeFromEvent)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CharacteristicComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(ExcludeElement, otherT.ExcludeElement)) return false;
        if( !DeepComparable.IsExactly(DefinitionReference, otherT.DefinitionReference)) return false;
        if( !DeepComparable.IsExactly(DefinitionCanonicalElement, otherT.DefinitionCanonicalElement)) return false;
        if( !DeepComparable.IsExactly(DefinitionCodeableConcept, otherT.DefinitionCodeableConcept)) return false;
        if( !DeepComparable.IsExactly(DefinitionExpression, otherT.DefinitionExpression)) return false;
        if( !DeepComparable.IsExactly(DefinitionIdElement, otherT.DefinitionIdElement)) return false;
        if( !DeepComparable.IsExactly(DefinitionByTypeAndValue, otherT.DefinitionByTypeAndValue)) return false;
        if( !DeepComparable.IsExactly(DefinitionByCombination, otherT.DefinitionByCombination)) return false;
        if( !DeepComparable.IsExactly(Instances, otherT.Instances)) return false;
        if( !DeepComparable.IsExactly(Duration, otherT.Duration)) return false;
        if( !DeepComparable.IsExactly(TimeFromEvent, otherT.TimeFromEvent)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (ExcludeElement != null) yield return ExcludeElement;
          if (DefinitionReference != null) yield return DefinitionReference;
          if (DefinitionCanonicalElement != null) yield return DefinitionCanonicalElement;
          if (DefinitionCodeableConcept != null) yield return DefinitionCodeableConcept;
          if (DefinitionExpression != null) yield return DefinitionExpression;
          if (DefinitionIdElement != null) yield return DefinitionIdElement;
          if (DefinitionByTypeAndValue != null) yield return DefinitionByTypeAndValue;
          if (DefinitionByCombination != null) yield return DefinitionByCombination;
          if (Instances != null) yield return Instances;
          if (Duration != null) yield return Duration;
          foreach (var elem in TimeFromEvent) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (ExcludeElement != null) yield return new ElementValue("exclude", ExcludeElement);
          if (DefinitionReference != null) yield return new ElementValue("definitionReference", DefinitionReference);
          if (DefinitionCanonicalElement != null) yield return new ElementValue("definitionCanonical", DefinitionCanonicalElement);
          if (DefinitionCodeableConcept != null) yield return new ElementValue("definitionCodeableConcept", DefinitionCodeableConcept);
          if (DefinitionExpression != null) yield return new ElementValue("definitionExpression", DefinitionExpression);
          if (DefinitionIdElement != null) yield return new ElementValue("definitionId", DefinitionIdElement);
          if (DefinitionByTypeAndValue != null) yield return new ElementValue("definitionByTypeAndValue", DefinitionByTypeAndValue);
          if (DefinitionByCombination != null) yield return new ElementValue("definitionByCombination", DefinitionByCombination);
          if (Instances != null) yield return new ElementValue("instances", Instances);
          if (Duration != null) yield return new ElementValue("duration", Duration);
          foreach (var elem in TimeFromEvent) { if (elem != null) yield return new ElementValue("timeFromEvent", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "exclude":
            value = ExcludeElement;
            return ExcludeElement is not null;
          case "definitionReference":
            value = DefinitionReference;
            return DefinitionReference is not null;
          case "definitionCanonical":
            value = DefinitionCanonicalElement;
            return DefinitionCanonicalElement is not null;
          case "definitionCodeableConcept":
            value = DefinitionCodeableConcept;
            return DefinitionCodeableConcept is not null;
          case "definitionExpression":
            value = DefinitionExpression;
            return DefinitionExpression is not null;
          case "definitionId":
            value = DefinitionIdElement;
            return DefinitionIdElement is not null;
          case "definitionByTypeAndValue":
            value = DefinitionByTypeAndValue;
            return DefinitionByTypeAndValue is not null;
          case "definitionByCombination":
            value = DefinitionByCombination;
            return DefinitionByCombination is not null;
          case "instances":
            value = Instances;
            return Instances is not null;
          case "duration":
            value = Duration;
            return Duration is not null;
          case "timeFromEvent":
            value = TimeFromEvent;
            return TimeFromEvent?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (ExcludeElement is not null) yield return new KeyValuePair<string,object>("exclude",ExcludeElement);
        if (DefinitionReference is not null) yield return new KeyValuePair<string,object>("definitionReference",DefinitionReference);
        if (DefinitionCanonicalElement is not null) yield return new KeyValuePair<string,object>("definitionCanonical",DefinitionCanonicalElement);
        if (DefinitionCodeableConcept is not null) yield return new KeyValuePair<string,object>("definitionCodeableConcept",DefinitionCodeableConcept);
        if (DefinitionExpression is not null) yield return new KeyValuePair<string,object>("definitionExpression",DefinitionExpression);
        if (DefinitionIdElement is not null) yield return new KeyValuePair<string,object>("definitionId",DefinitionIdElement);
        if (DefinitionByTypeAndValue is not null) yield return new KeyValuePair<string,object>("definitionByTypeAndValue",DefinitionByTypeAndValue);
        if (DefinitionByCombination is not null) yield return new KeyValuePair<string,object>("definitionByCombination",DefinitionByCombination);
        if (Instances is not null) yield return new KeyValuePair<string,object>("instances",Instances);
        if (Duration is not null) yield return new KeyValuePair<string,object>("duration",Duration);
        if (TimeFromEvent?.Any() == true) yield return new KeyValuePair<string,object>("timeFromEvent",TimeFromEvent);
      }

    }

    /// <summary>
    /// Defines the characteristic using type and value
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("EvidenceVariable#DefinitionByTypeAndValue", IsNestedType=true)]
    [BackboneType("EvidenceVariable.characteristic.definitionByTypeAndValue")]
    public partial class DefinitionByTypeAndValueComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "EvidenceVariable#DefinitionByTypeAndValue"; } }

      /// <summary>
      /// Expresses the type of characteristic
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Method for how the characteristic value was determined
      /// </summary>
      [FhirElement("method", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Method
      {
        get { if(_Method==null) _Method = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Method; }
        set { _Method = value; OnPropertyChanged("Method"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Method;

      /// <summary>
      /// Device used for determining characteristic
      /// </summary>
      [FhirElement("device", Order=60)]
      [CLSCompliant(false)]
      [References("Device","DeviceMetric")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Device
      {
        get { return _Device; }
        set { _Device = value; OnPropertyChanged("Device"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Device;

      /// <summary>
      /// Defines the characteristic when coupled with characteristic.type
      /// </summary>
      [FhirElement("value", InSummary=true, Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.Id))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      /// <summary>
      /// Reference point for valueQuantity or valueRange
      /// </summary>
      [FhirElement("offset", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Offset
      {
        get { return _Offset; }
        set { _Offset = value; OnPropertyChanged("Offset"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Offset;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DefinitionByTypeAndValueComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Method != null) dest.Method = new List<Hl7.Fhir.Model.CodeableConcept>(Method.DeepCopy());
        if(Device != null) dest.Device = (Hl7.Fhir.Model.ResourceReference)Device.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        if(Offset != null) dest.Offset = (Hl7.Fhir.Model.CodeableConcept)Offset.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DefinitionByTypeAndValueComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DefinitionByTypeAndValueComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Method, otherT.Method)) return false;
        if( !DeepComparable.Matches(Device, otherT.Device)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(Offset, otherT.Offset)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DefinitionByTypeAndValueComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Method, otherT.Method)) return false;
        if( !DeepComparable.IsExactly(Device, otherT.Device)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(Offset, otherT.Offset)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Method) { if (elem != null) yield return elem; }
          if (Device != null) yield return Device;
          if (Value != null) yield return Value;
          if (Offset != null) yield return Offset;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Method) { if (elem != null) yield return new ElementValue("method", elem); }
          if (Device != null) yield return new ElementValue("device", Device);
          if (Value != null) yield return new ElementValue("value", Value);
          if (Offset != null) yield return new ElementValue("offset", Offset);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "method":
            value = Method;
            return Method?.Any() == true;
          case "device":
            value = Device;
            return Device is not null;
          case "value":
            value = Value;
            return Value is not null;
          case "offset":
            value = Offset;
            return Offset is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Method?.Any() == true) yield return new KeyValuePair<string,object>("method",Method);
        if (Device is not null) yield return new KeyValuePair<string,object>("device",Device);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
        if (Offset is not null) yield return new KeyValuePair<string,object>("offset",Offset);
      }

    }

    /// <summary>
    /// Used to specify how two or more characteristics are combined
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("EvidenceVariable#DefinitionByCombination", IsNestedType=true)]
    [BackboneType("EvidenceVariable.characteristic.definitionByCombination")]
    public partial class DefinitionByCombinationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "EvidenceVariable#DefinitionByCombination"; } }

      /// <summary>
      /// all-of | any-of | at-least | at-most | statistical | net-effect | dataset
      /// </summary>
      [FhirElement("code", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("CharacteristicCombination")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.EvidenceVariable.CharacteristicCombinationCode> CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Code<Hl7.Fhir.Model.EvidenceVariable.CharacteristicCombinationCode> _CodeElement;

      /// <summary>
      /// all-of | any-of | at-least | at-most | statistical | net-effect | dataset
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.EvidenceVariable.CharacteristicCombinationCode? Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Code<Hl7.Fhir.Model.EvidenceVariable.CharacteristicCombinationCode>(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Provides the value of "n" when "at-least" or "at-most" codes are used
      /// </summary>
      [FhirElement("threshold", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt ThresholdElement
      {
        get { return _ThresholdElement; }
        set { _ThresholdElement = value; OnPropertyChanged("ThresholdElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _ThresholdElement;

      /// <summary>
      /// Provides the value of "n" when "at-least" or "at-most" codes are used
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Threshold
      {
        get { return ThresholdElement != null ? ThresholdElement.Value : null; }
        set
        {
          if (value == null)
            ThresholdElement = null;
          else
            ThresholdElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Threshold");
        }
      }

      /// <summary>
      /// A defining factor of the characteristic
      /// </summary>
      [FhirElement("characteristic", Order=60)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent> Characteristic
      {
        get { if(_Characteristic==null) _Characteristic = new List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent>(); return _Characteristic; }
        set { _Characteristic = value; OnPropertyChanged("Characteristic"); }
      }

      private List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent> _Characteristic;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DefinitionByCombinationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Code<Hl7.Fhir.Model.EvidenceVariable.CharacteristicCombinationCode>)CodeElement.DeepCopy();
        if(ThresholdElement != null) dest.ThresholdElement = (Hl7.Fhir.Model.PositiveInt)ThresholdElement.DeepCopy();
        if(Characteristic != null) dest.Characteristic = new List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent>(Characteristic.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DefinitionByCombinationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DefinitionByCombinationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(ThresholdElement, otherT.ThresholdElement)) return false;
        if( !DeepComparable.Matches(Characteristic, otherT.Characteristic)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DefinitionByCombinationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(ThresholdElement, otherT.ThresholdElement)) return false;
        if( !DeepComparable.IsExactly(Characteristic, otherT.Characteristic)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (ThresholdElement != null) yield return ThresholdElement;
          foreach (var elem in Characteristic) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (ThresholdElement != null) yield return new ElementValue("threshold", ThresholdElement);
          foreach (var elem in Characteristic) { if (elem != null) yield return new ElementValue("characteristic", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "threshold":
            value = ThresholdElement;
            return ThresholdElement is not null;
          case "characteristic":
            value = Characteristic;
            return Characteristic?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (ThresholdElement is not null) yield return new KeyValuePair<string,object>("threshold",ThresholdElement);
        if (Characteristic?.Any() == true) yield return new KeyValuePair<string,object>("characteristic",Characteristic);
      }

    }

    /// <summary>
    /// Timing in which the characteristic is determined
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("EvidenceVariable#TimeFromEvent", IsNestedType=true)]
    [BackboneType("EvidenceVariable.characteristic.timeFromEvent")]
    public partial class TimeFromEventComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "EvidenceVariable#TimeFromEvent"; } }

      /// <summary>
      /// Human readable description
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Human readable description
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Used for footnotes or explanatory notes
      /// </summary>
      [FhirElement("note", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// The event used as a base point (reference point) in time
      /// </summary>
      [FhirElement("event", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Id))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Event
      {
        get { return _Event; }
        set { _Event = value; OnPropertyChanged("Event"); }
      }

      private Hl7.Fhir.Model.DataType _Event;

      /// <summary>
      /// Used to express the observation at a defined amount of time before or after the event
      /// </summary>
      [FhirElement("quantity", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Used to express the observation within a period before and/or after the event
      /// </summary>
      [FhirElement("range", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Range Range
      {
        get { return _Range; }
        set { _Range = value; OnPropertyChanged("Range"); }
      }

      private Hl7.Fhir.Model.Range _Range;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TimeFromEventComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(Event != null) dest.Event = (Hl7.Fhir.Model.DataType)Event.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(Range != null) dest.Range = (Hl7.Fhir.Model.Range)Range.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TimeFromEventComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TimeFromEventComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(Event, otherT.Event)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(Range, otherT.Range)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TimeFromEventComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(Event, otherT.Event)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(Range, otherT.Range)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (Event != null) yield return Event;
          if (Quantity != null) yield return Quantity;
          if (Range != null) yield return Range;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (Event != null) yield return new ElementValue("event", Event);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (Range != null) yield return new ElementValue("range", Range);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "event":
            value = Event;
            return Event is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "range":
            value = Range;
            return Range is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (Event is not null) yield return new KeyValuePair<string,object>("event",Event);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (Range is not null) yield return new KeyValuePair<string,object>("range",Range);
      }

    }

    /// <summary>
    /// A grouping for ordinal or polychotomous variables
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("EvidenceVariable#Category", IsNestedType=true)]
    [BackboneType("EvidenceVariable.category")]
    public partial class CategoryComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "EvidenceVariable#Category"; } }

      /// <summary>
      /// Description of the grouping
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Description of the grouping
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Definition of the grouping
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CategoryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CategoryComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CategoryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CategoryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Canonical identifier for this evidence variable, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this evidence variable, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the evidence variable
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the evidence variable
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the evidence variable
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// How to compare versions
    /// </summary>
    [FhirElement("versionAlgorithm", InSummary=true, Order=120, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Coding))]
    [DataMember]
    public Hl7.Fhir.Model.DataType VersionAlgorithm
    {
      get { return _VersionAlgorithm; }
      set { _VersionAlgorithm = value; OnPropertyChanged("VersionAlgorithm"); }
    }

    private Hl7.Fhir.Model.DataType _VersionAlgorithm;

    /// <summary>
    /// Name for this evidence variable (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this evidence variable (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this evidence variable (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this evidence variable (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Title for use in informal contexts
    /// </summary>
    [FhirElement("shortTitle", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ShortTitleElement
    {
      get { return _ShortTitleElement; }
      set { _ShortTitleElement = value; OnPropertyChanged("ShortTitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ShortTitleElement;

    /// <summary>
    /// Title for use in informal contexts
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ShortTitle
    {
      get { return ShortTitleElement != null ? ShortTitleElement.Value : null; }
      set
      {
        if (value == null)
          ShortTitleElement = null;
        else
          ShortTitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("ShortTitle");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=160, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=180, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=190, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the evidence variable
    /// </summary>
    [FhirElement("description", InSummary=true, Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the evidence variable
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Used for footnotes or explanatory notes
    /// </summary>
    [FhirElement("note", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Why this EvidenceVariable is defined
    /// </summary>
    [FhirElement("purpose", Order=240, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this EvidenceVariable is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    [FhirElement("copyrightLabel", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightLabelElement
    {
      get { return _CopyrightLabelElement; }
      set { _CopyrightLabelElement = value; OnPropertyChanged("CopyrightLabelElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightLabelElement;

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CopyrightLabel
    {
      get { return CopyrightLabelElement != null ? CopyrightLabelElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightLabelElement = null;
        else
          CopyrightLabelElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CopyrightLabel");
      }
    }

    /// <summary>
    /// When the resource was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When the resource was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// When the resource was last reviewed by the publisher
    /// </summary>
    [FhirElement("lastReviewDate", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// When the resource was last reviewed by the publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// When the resource is expected to be used
    /// </summary>
    [FhirElement("effectivePeriod", Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.Period EffectivePeriod
    {
      get { return _EffectivePeriod; }
      set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
    }

    private Hl7.Fhir.Model.Period _EffectivePeriod;

    /// <summary>
    /// Who authored the content
    /// </summary>
    [FhirElement("author", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ContactDetail>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Author;

    /// <summary>
    /// Who edited the content
    /// </summary>
    [FhirElement("editor", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Editor
    {
      get { if(_Editor==null) _Editor = new List<Hl7.Fhir.Model.ContactDetail>(); return _Editor; }
      set { _Editor = value; OnPropertyChanged("Editor"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Editor;

    /// <summary>
    /// Who reviewed the content
    /// </summary>
    [FhirElement("reviewer", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Reviewer
    {
      get { if(_Reviewer==null) _Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(); return _Reviewer; }
      set { _Reviewer = value; OnPropertyChanged("Reviewer"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Reviewer;

    /// <summary>
    /// Who endorsed the content
    /// </summary>
    [FhirElement("endorser", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Endorser
    {
      get { if(_Endorser==null) _Endorser = new List<Hl7.Fhir.Model.ContactDetail>(); return _Endorser; }
      set { _Endorser = value; OnPropertyChanged("Endorser"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Endorser;

    /// <summary>
    /// Additional documentation, citations, etc
    /// </summary>
    [FhirElement("relatedArtifact", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Actual or conceptual
    /// </summary>
    [FhirElement("actual", Order=350)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ActualElement
    {
      get { return _ActualElement; }
      set { _ActualElement = value; OnPropertyChanged("ActualElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ActualElement;

    /// <summary>
    /// Actual or conceptual
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Actual
    {
      get { return ActualElement != null ? ActualElement.Value : null; }
      set
      {
        if (value == null)
          ActualElement = null;
        else
          ActualElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Actual");
      }
    }

    /// <summary>
    /// A defining factor of the EvidenceVariable
    /// </summary>
    [FhirElement("characteristic", InSummary=true, Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent> Characteristic
    {
      get { if(_Characteristic==null) _Characteristic = new List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent>(); return _Characteristic; }
      set { _Characteristic = value; OnPropertyChanged("Characteristic"); }
    }

    private List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent> _Characteristic;

    /// <summary>
    /// continuous | dichotomous | ordinal | polychotomous
    /// </summary>
    [FhirElement("handling", Order=370)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("EvidenceVariableHandling")]
    [DataMember]
    public Code<Hl7.Fhir.Model.EvidenceVariableHandling> HandlingElement
    {
      get { return _HandlingElement; }
      set { _HandlingElement = value; OnPropertyChanged("HandlingElement"); }
    }

    private Code<Hl7.Fhir.Model.EvidenceVariableHandling> _HandlingElement;

    /// <summary>
    /// continuous | dichotomous | ordinal | polychotomous
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.EvidenceVariableHandling? Handling
    {
      get { return HandlingElement != null ? HandlingElement.Value : null; }
      set
      {
        if (value == null)
          HandlingElement = null;
        else
          HandlingElement = new Code<Hl7.Fhir.Model.EvidenceVariableHandling>(value);
        OnPropertyChanged("Handling");
      }
    }

    /// <summary>
    /// A grouping for ordinal or polychotomous variables
    /// </summary>
    [FhirElement("category", Order=380)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.EvidenceVariable.CategoryComponent> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.EvidenceVariable.CategoryComponent>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.EvidenceVariable.CategoryComponent> _Category;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as EvidenceVariable;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(VersionAlgorithm != null) dest.VersionAlgorithm = (Hl7.Fhir.Model.DataType)VersionAlgorithm.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(ShortTitleElement != null) dest.ShortTitleElement = (Hl7.Fhir.Model.FhirString)ShortTitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(CopyrightLabelElement != null) dest.CopyrightLabelElement = (Hl7.Fhir.Model.FhirString)CopyrightLabelElement.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
      if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ContactDetail>(Author.DeepCopy());
      if(Editor != null) dest.Editor = new List<Hl7.Fhir.Model.ContactDetail>(Editor.DeepCopy());
      if(Reviewer != null) dest.Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(Reviewer.DeepCopy());
      if(Endorser != null) dest.Endorser = new List<Hl7.Fhir.Model.ContactDetail>(Endorser.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(ActualElement != null) dest.ActualElement = (Hl7.Fhir.Model.FhirBoolean)ActualElement.DeepCopy();
      if(Characteristic != null) dest.Characteristic = new List<Hl7.Fhir.Model.EvidenceVariable.CharacteristicComponent>(Characteristic.DeepCopy());
      if(HandlingElement != null) dest.HandlingElement = (Code<Hl7.Fhir.Model.EvidenceVariableHandling>)HandlingElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.EvidenceVariable.CategoryComponent>(Category.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new EvidenceVariable());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as EvidenceVariable;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(ShortTitleElement, otherT.ShortTitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Editor, otherT.Editor)) return false;
      if( !DeepComparable.Matches(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.Matches(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(ActualElement, otherT.ActualElement)) return false;
      if( !DeepComparable.Matches(Characteristic, otherT.Characteristic)) return false;
      if( !DeepComparable.Matches(HandlingElement, otherT.HandlingElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as EvidenceVariable;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(ShortTitleElement, otherT.ShortTitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Editor, otherT.Editor)) return false;
      if( !DeepComparable.IsExactly(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.IsExactly(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(ActualElement, otherT.ActualElement)) return false;
      if( !DeepComparable.IsExactly(Characteristic, otherT.Characteristic)) return false;
      if( !DeepComparable.IsExactly(HandlingElement, otherT.HandlingElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (VersionAlgorithm != null) yield return VersionAlgorithm;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (ShortTitleElement != null) yield return ShortTitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (CopyrightLabelElement != null) yield return CopyrightLabelElement;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (EffectivePeriod != null) yield return EffectivePeriod;
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        foreach (var elem in Editor) { if (elem != null) yield return elem; }
        foreach (var elem in Reviewer) { if (elem != null) yield return elem; }
        foreach (var elem in Endorser) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        if (ActualElement != null) yield return ActualElement;
        foreach (var elem in Characteristic) { if (elem != null) yield return elem; }
        if (HandlingElement != null) yield return HandlingElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (VersionAlgorithm != null) yield return new ElementValue("versionAlgorithm", VersionAlgorithm);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (ShortTitleElement != null) yield return new ElementValue("shortTitle", ShortTitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (CopyrightLabelElement != null) yield return new ElementValue("copyrightLabel", CopyrightLabelElement);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        foreach (var elem in Editor) { if (elem != null) yield return new ElementValue("editor", elem); }
        foreach (var elem in Reviewer) { if (elem != null) yield return new ElementValue("reviewer", elem); }
        foreach (var elem in Endorser) { if (elem != null) yield return new ElementValue("endorser", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        if (ActualElement != null) yield return new ElementValue("actual", ActualElement);
        foreach (var elem in Characteristic) { if (elem != null) yield return new ElementValue("characteristic", elem); }
        if (HandlingElement != null) yield return new ElementValue("handling", HandlingElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "versionAlgorithm":
          value = VersionAlgorithm;
          return VersionAlgorithm is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "shortTitle":
          value = ShortTitleElement;
          return ShortTitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "copyrightLabel":
          value = CopyrightLabelElement;
          return CopyrightLabelElement is not null;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "effectivePeriod":
          value = EffectivePeriod;
          return EffectivePeriod is not null;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "editor":
          value = Editor;
          return Editor?.Any() == true;
        case "reviewer":
          value = Reviewer;
          return Reviewer?.Any() == true;
        case "endorser":
          value = Endorser;
          return Endorser?.Any() == true;
        case "relatedArtifact":
          value = RelatedArtifact;
          return RelatedArtifact?.Any() == true;
        case "actual":
          value = ActualElement;
          return ActualElement is not null;
        case "characteristic":
          value = Characteristic;
          return Characteristic?.Any() == true;
        case "handling":
          value = HandlingElement;
          return HandlingElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (VersionAlgorithm is not null) yield return new KeyValuePair<string,object>("versionAlgorithm",VersionAlgorithm);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (ShortTitleElement is not null) yield return new KeyValuePair<string,object>("shortTitle",ShortTitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (CopyrightLabelElement is not null) yield return new KeyValuePair<string,object>("copyrightLabel",CopyrightLabelElement);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (EffectivePeriod is not null) yield return new KeyValuePair<string,object>("effectivePeriod",EffectivePeriod);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (Editor?.Any() == true) yield return new KeyValuePair<string,object>("editor",Editor);
      if (Reviewer?.Any() == true) yield return new KeyValuePair<string,object>("reviewer",Reviewer);
      if (Endorser?.Any() == true) yield return new KeyValuePair<string,object>("endorser",Endorser);
      if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
      if (ActualElement is not null) yield return new KeyValuePair<string,object>("actual",ActualElement);
      if (Characteristic?.Any() == true) yield return new KeyValuePair<string,object>("characteristic",Characteristic);
      if (HandlingElement is not null) yield return new KeyValuePair<string,object>("handling",HandlingElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
    }

  }

}

// end of file

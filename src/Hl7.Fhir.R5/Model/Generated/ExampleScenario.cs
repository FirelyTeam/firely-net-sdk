// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Example of workflow instance
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ExampleScenario","http://hl7.org/fhir/StructureDefinition/ExampleScenario", IsResource=true)]
  public partial class ExampleScenario : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ExampleScenario"; } }

    /// <summary>
    /// Individual involved in exchange
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#Actor", IsNestedType=true)]
    [BackboneType("ExampleScenario.actor")]
    public partial class ActorComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#Actor"; } }

      /// <summary>
      /// ID or acronym of the actor
      /// </summary>
      [FhirElement("key", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString KeyElement
      {
        get { return _KeyElement; }
        set { _KeyElement = value; OnPropertyChanged("KeyElement"); }
      }

      private Hl7.Fhir.Model.FhirString _KeyElement;

      /// <summary>
      /// ID or acronym of the actor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Key
      {
        get { return KeyElement != null ? KeyElement.Value : null; }
        set
        {
          if (value == null)
            KeyElement = null;
          else
            KeyElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Key");
        }
      }

      /// <summary>
      /// person | system
      /// </summary>
      [FhirElement("type", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ExampleScenarioActorType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ExampleScenarioActorType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ExampleScenarioActorType> _TypeElement;

      /// <summary>
      /// person | system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ExampleScenarioActorType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.ExampleScenarioActorType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// Label for actor when rendering
      /// </summary>
      [FhirElement("title", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for actor when rendering
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Details about actor
      /// </summary>
      [FhirElement("description", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Details about actor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActorComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(KeyElement != null) dest.KeyElement = (Hl7.Fhir.Model.FhirString)KeyElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.ExampleScenarioActorType>)TypeElement.DeepCopy();
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActorComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActorComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(KeyElement, otherT.KeyElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActorComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(KeyElement, otherT.KeyElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (KeyElement != null) yield return KeyElement;
          if (TypeElement != null) yield return TypeElement;
          if (TitleElement != null) yield return TitleElement;
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (KeyElement != null) yield return new ElementValue("key", KeyElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "key":
            value = KeyElement;
            return KeyElement is not null;
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (KeyElement is not null) yield return new KeyValuePair<string,object>("key",KeyElement);
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// Data used in the scenario
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#Instance", IsNestedType=true)]
    [BackboneType("ExampleScenario.instance")]
    public partial class InstanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#Instance"; } }

      /// <summary>
      /// ID or acronym of the instance
      /// </summary>
      [FhirElement("key", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString KeyElement
      {
        get { return _KeyElement; }
        set { _KeyElement = value; OnPropertyChanged("KeyElement"); }
      }

      private Hl7.Fhir.Model.FhirString _KeyElement;

      /// <summary>
      /// ID or acronym of the instance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Key
      {
        get { return KeyElement != null ? KeyElement.Value : null; }
        set
        {
          if (value == null)
            KeyElement = null;
          else
            KeyElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Key");
        }
      }

      /// <summary>
      /// Data structure for example
      /// </summary>
      [FhirElement("structureType", Order=50)]
      [Binding("InstanceType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding StructureType
      {
        get { return _StructureType; }
        set { _StructureType = value; OnPropertyChanged("StructureType"); }
      }

      private Hl7.Fhir.Model.Coding _StructureType;

      /// <summary>
      /// E.g. 4.0.1
      /// </summary>
      [FhirElement("structureVersion", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString StructureVersionElement
      {
        get { return _StructureVersionElement; }
        set { _StructureVersionElement = value; OnPropertyChanged("StructureVersionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _StructureVersionElement;

      /// <summary>
      /// E.g. 4.0.1
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string StructureVersion
      {
        get { return StructureVersionElement != null ? StructureVersionElement.Value : null; }
        set
        {
          if (value == null)
            StructureVersionElement = null;
          else
            StructureVersionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("StructureVersion");
        }
      }

      /// <summary>
      /// Rules instance adheres to
      /// </summary>
      [FhirElement("structureProfile", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Canonical),typeof(Hl7.Fhir.Model.FhirUri))]
      [DataMember]
      public Hl7.Fhir.Model.DataType StructureProfile
      {
        get { return _StructureProfile; }
        set { _StructureProfile = value; OnPropertyChanged("StructureProfile"); }
      }

      private Hl7.Fhir.Model.DataType _StructureProfile;

      /// <summary>
      /// Label for instance
      /// </summary>
      [FhirElement("title", Order=80)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for instance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Human-friendly description of the instance
      /// </summary>
      [FhirElement("description", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Human-friendly description of the instance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Example instance data
      /// </summary>
      [FhirElement("content", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Content
      {
        get { return _Content; }
        set { _Content = value; OnPropertyChanged("Content"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Content;

      /// <summary>
      /// Snapshot of instance that changes
      /// </summary>
      [FhirElement("version", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExampleScenario.VersionComponent> Version
      {
        get { if(_Version==null) _Version = new List<Hl7.Fhir.Model.ExampleScenario.VersionComponent>(); return _Version; }
        set { _Version = value; OnPropertyChanged("Version"); }
      }

      private List<Hl7.Fhir.Model.ExampleScenario.VersionComponent> _Version;

      /// <summary>
      /// Resources contained in the instance
      /// </summary>
      [FhirElement("containedInstance", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent> ContainedInstance
      {
        get { if(_ContainedInstance==null) _ContainedInstance = new List<Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent>(); return _ContainedInstance; }
        set { _ContainedInstance = value; OnPropertyChanged("ContainedInstance"); }
      }

      private List<Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent> _ContainedInstance;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InstanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(KeyElement != null) dest.KeyElement = (Hl7.Fhir.Model.FhirString)KeyElement.DeepCopy();
        if(StructureType != null) dest.StructureType = (Hl7.Fhir.Model.Coding)StructureType.DeepCopy();
        if(StructureVersionElement != null) dest.StructureVersionElement = (Hl7.Fhir.Model.FhirString)StructureVersionElement.DeepCopy();
        if(StructureProfile != null) dest.StructureProfile = (Hl7.Fhir.Model.DataType)StructureProfile.DeepCopy();
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Content != null) dest.Content = (Hl7.Fhir.Model.ResourceReference)Content.DeepCopy();
        if(Version != null) dest.Version = new List<Hl7.Fhir.Model.ExampleScenario.VersionComponent>(Version.DeepCopy());
        if(ContainedInstance != null) dest.ContainedInstance = new List<Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent>(ContainedInstance.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InstanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InstanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(KeyElement, otherT.KeyElement)) return false;
        if( !DeepComparable.Matches(StructureType, otherT.StructureType)) return false;
        if( !DeepComparable.Matches(StructureVersionElement, otherT.StructureVersionElement)) return false;
        if( !DeepComparable.Matches(StructureProfile, otherT.StructureProfile)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Content, otherT.Content)) return false;
        if( !DeepComparable.Matches(Version, otherT.Version)) return false;
        if( !DeepComparable.Matches(ContainedInstance, otherT.ContainedInstance)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InstanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(KeyElement, otherT.KeyElement)) return false;
        if( !DeepComparable.IsExactly(StructureType, otherT.StructureType)) return false;
        if( !DeepComparable.IsExactly(StructureVersionElement, otherT.StructureVersionElement)) return false;
        if( !DeepComparable.IsExactly(StructureProfile, otherT.StructureProfile)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;
        if( !DeepComparable.IsExactly(Version, otherT.Version)) return false;
        if( !DeepComparable.IsExactly(ContainedInstance, otherT.ContainedInstance)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (KeyElement != null) yield return KeyElement;
          if (StructureType != null) yield return StructureType;
          if (StructureVersionElement != null) yield return StructureVersionElement;
          if (StructureProfile != null) yield return StructureProfile;
          if (TitleElement != null) yield return TitleElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (Content != null) yield return Content;
          foreach (var elem in Version) { if (elem != null) yield return elem; }
          foreach (var elem in ContainedInstance) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (KeyElement != null) yield return new ElementValue("key", KeyElement);
          if (StructureType != null) yield return new ElementValue("structureType", StructureType);
          if (StructureVersionElement != null) yield return new ElementValue("structureVersion", StructureVersionElement);
          if (StructureProfile != null) yield return new ElementValue("structureProfile", StructureProfile);
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (Content != null) yield return new ElementValue("content", Content);
          foreach (var elem in Version) { if (elem != null) yield return new ElementValue("version", elem); }
          foreach (var elem in ContainedInstance) { if (elem != null) yield return new ElementValue("containedInstance", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "key":
            value = KeyElement;
            return KeyElement is not null;
          case "structureType":
            value = StructureType;
            return StructureType is not null;
          case "structureVersion":
            value = StructureVersionElement;
            return StructureVersionElement is not null;
          case "structureProfile":
            value = StructureProfile;
            return StructureProfile is not null;
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "content":
            value = Content;
            return Content is not null;
          case "version":
            value = Version;
            return Version?.Any() == true;
          case "containedInstance":
            value = ContainedInstance;
            return ContainedInstance?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (KeyElement is not null) yield return new KeyValuePair<string,object>("key",KeyElement);
        if (StructureType is not null) yield return new KeyValuePair<string,object>("structureType",StructureType);
        if (StructureVersionElement is not null) yield return new KeyValuePair<string,object>("structureVersion",StructureVersionElement);
        if (StructureProfile is not null) yield return new KeyValuePair<string,object>("structureProfile",StructureProfile);
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Content is not null) yield return new KeyValuePair<string,object>("content",Content);
        if (Version?.Any() == true) yield return new KeyValuePair<string,object>("version",Version);
        if (ContainedInstance?.Any() == true) yield return new KeyValuePair<string,object>("containedInstance",ContainedInstance);
      }

    }

    /// <summary>
    /// Snapshot of instance that changes
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#Version", IsNestedType=true)]
    [BackboneType("ExampleScenario.instance.version")]
    public partial class VersionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#Version"; } }

      /// <summary>
      /// ID or acronym of the version
      /// </summary>
      [FhirElement("key", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString KeyElement
      {
        get { return _KeyElement; }
        set { _KeyElement = value; OnPropertyChanged("KeyElement"); }
      }

      private Hl7.Fhir.Model.FhirString _KeyElement;

      /// <summary>
      /// ID or acronym of the version
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Key
      {
        get { return KeyElement != null ? KeyElement.Value : null; }
        set
        {
          if (value == null)
            KeyElement = null;
          else
            KeyElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Key");
        }
      }

      /// <summary>
      /// Label for instance version
      /// </summary>
      [FhirElement("title", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for instance version
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Details about version
      /// </summary>
      [FhirElement("description", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Details about version
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Example instance version data
      /// </summary>
      [FhirElement("content", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Content
      {
        get { return _Content; }
        set { _Content = value; OnPropertyChanged("Content"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Content;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VersionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(KeyElement != null) dest.KeyElement = (Hl7.Fhir.Model.FhirString)KeyElement.DeepCopy();
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Content != null) dest.Content = (Hl7.Fhir.Model.ResourceReference)Content.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VersionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(KeyElement, otherT.KeyElement)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Content, otherT.Content)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(KeyElement, otherT.KeyElement)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (KeyElement != null) yield return KeyElement;
          if (TitleElement != null) yield return TitleElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (Content != null) yield return Content;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (KeyElement != null) yield return new ElementValue("key", KeyElement);
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (Content != null) yield return new ElementValue("content", Content);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "key":
            value = KeyElement;
            return KeyElement is not null;
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "content":
            value = Content;
            return Content is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (KeyElement is not null) yield return new KeyValuePair<string,object>("key",KeyElement);
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Content is not null) yield return new KeyValuePair<string,object>("content",Content);
      }

    }

    /// <summary>
    /// Resources contained in the instance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#ContainedInstance", IsNestedType=true)]
    [BackboneType("ExampleScenario.instance.containedInstance")]
    public partial class ContainedInstanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#ContainedInstance"; } }

      /// <summary>
      /// Key of contained instance
      /// </summary>
      [FhirElement("instanceReference", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString InstanceReferenceElement
      {
        get { return _InstanceReferenceElement; }
        set { _InstanceReferenceElement = value; OnPropertyChanged("InstanceReferenceElement"); }
      }

      private Hl7.Fhir.Model.FhirString _InstanceReferenceElement;

      /// <summary>
      /// Key of contained instance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string InstanceReference
      {
        get { return InstanceReferenceElement != null ? InstanceReferenceElement.Value : null; }
        set
        {
          if (value == null)
            InstanceReferenceElement = null;
          else
            InstanceReferenceElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("InstanceReference");
        }
      }

      /// <summary>
      /// Key of contained instance version
      /// </summary>
      [FhirElement("versionReference", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString VersionReferenceElement
      {
        get { return _VersionReferenceElement; }
        set { _VersionReferenceElement = value; OnPropertyChanged("VersionReferenceElement"); }
      }

      private Hl7.Fhir.Model.FhirString _VersionReferenceElement;

      /// <summary>
      /// Key of contained instance version
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string VersionReference
      {
        get { return VersionReferenceElement != null ? VersionReferenceElement.Value : null; }
        set
        {
          if (value == null)
            VersionReferenceElement = null;
          else
            VersionReferenceElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("VersionReference");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContainedInstanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(InstanceReferenceElement != null) dest.InstanceReferenceElement = (Hl7.Fhir.Model.FhirString)InstanceReferenceElement.DeepCopy();
        if(VersionReferenceElement != null) dest.VersionReferenceElement = (Hl7.Fhir.Model.FhirString)VersionReferenceElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContainedInstanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContainedInstanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(InstanceReferenceElement, otherT.InstanceReferenceElement)) return false;
        if( !DeepComparable.Matches(VersionReferenceElement, otherT.VersionReferenceElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContainedInstanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(InstanceReferenceElement, otherT.InstanceReferenceElement)) return false;
        if( !DeepComparable.IsExactly(VersionReferenceElement, otherT.VersionReferenceElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (InstanceReferenceElement != null) yield return InstanceReferenceElement;
          if (VersionReferenceElement != null) yield return VersionReferenceElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (InstanceReferenceElement != null) yield return new ElementValue("instanceReference", InstanceReferenceElement);
          if (VersionReferenceElement != null) yield return new ElementValue("versionReference", VersionReferenceElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "instanceReference":
            value = InstanceReferenceElement;
            return InstanceReferenceElement is not null;
          case "versionReference":
            value = VersionReferenceElement;
            return VersionReferenceElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (InstanceReferenceElement is not null) yield return new KeyValuePair<string,object>("instanceReference",InstanceReferenceElement);
        if (VersionReferenceElement is not null) yield return new KeyValuePair<string,object>("versionReference",VersionReferenceElement);
      }

    }

    /// <summary>
    /// Major process within scenario
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#Process", IsNestedType=true)]
    [BackboneType("ExampleScenario.process")]
    public partial class ProcessComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#Process"; } }

      /// <summary>
      /// Label for procss
      /// </summary>
      [FhirElement("title", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for procss
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Human-friendly description of the process
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Human-friendly description of the process
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Status before process starts
      /// </summary>
      [FhirElement("preConditions", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown PreConditionsElement
      {
        get { return _PreConditionsElement; }
        set { _PreConditionsElement = value; OnPropertyChanged("PreConditionsElement"); }
      }

      private Hl7.Fhir.Model.Markdown _PreConditionsElement;

      /// <summary>
      /// Status before process starts
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string PreConditions
      {
        get { return PreConditionsElement != null ? PreConditionsElement.Value : null; }
        set
        {
          if (value == null)
            PreConditionsElement = null;
          else
            PreConditionsElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("PreConditions");
        }
      }

      /// <summary>
      /// Status after successful completion
      /// </summary>
      [FhirElement("postConditions", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown PostConditionsElement
      {
        get { return _PostConditionsElement; }
        set { _PostConditionsElement = value; OnPropertyChanged("PostConditionsElement"); }
      }

      private Hl7.Fhir.Model.Markdown _PostConditionsElement;

      /// <summary>
      /// Status after successful completion
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string PostConditions
      {
        get { return PostConditionsElement != null ? PostConditionsElement.Value : null; }
        set
        {
          if (value == null)
            PostConditionsElement = null;
          else
            PostConditionsElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("PostConditions");
        }
      }

      /// <summary>
      /// Event within of the process
      /// </summary>
      [FhirElement("step", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExampleScenario.StepComponent> Step
      {
        get { if(_Step==null) _Step = new List<Hl7.Fhir.Model.ExampleScenario.StepComponent>(); return _Step; }
        set { _Step = value; OnPropertyChanged("Step"); }
      }

      private List<Hl7.Fhir.Model.ExampleScenario.StepComponent> _Step;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProcessComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(PreConditionsElement != null) dest.PreConditionsElement = (Hl7.Fhir.Model.Markdown)PreConditionsElement.DeepCopy();
        if(PostConditionsElement != null) dest.PostConditionsElement = (Hl7.Fhir.Model.Markdown)PostConditionsElement.DeepCopy();
        if(Step != null) dest.Step = new List<Hl7.Fhir.Model.ExampleScenario.StepComponent>(Step.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProcessComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProcessComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(PreConditionsElement, otherT.PreConditionsElement)) return false;
        if( !DeepComparable.Matches(PostConditionsElement, otherT.PostConditionsElement)) return false;
        if( !DeepComparable.Matches(Step, otherT.Step)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProcessComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(PreConditionsElement, otherT.PreConditionsElement)) return false;
        if( !DeepComparable.IsExactly(PostConditionsElement, otherT.PostConditionsElement)) return false;
        if( !DeepComparable.IsExactly(Step, otherT.Step)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TitleElement != null) yield return TitleElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (PreConditionsElement != null) yield return PreConditionsElement;
          if (PostConditionsElement != null) yield return PostConditionsElement;
          foreach (var elem in Step) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (PreConditionsElement != null) yield return new ElementValue("preConditions", PreConditionsElement);
          if (PostConditionsElement != null) yield return new ElementValue("postConditions", PostConditionsElement);
          foreach (var elem in Step) { if (elem != null) yield return new ElementValue("step", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "preConditions":
            value = PreConditionsElement;
            return PreConditionsElement is not null;
          case "postConditions":
            value = PostConditionsElement;
            return PostConditionsElement is not null;
          case "step":
            value = Step;
            return Step?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (PreConditionsElement is not null) yield return new KeyValuePair<string,object>("preConditions",PreConditionsElement);
        if (PostConditionsElement is not null) yield return new KeyValuePair<string,object>("postConditions",PostConditionsElement);
        if (Step?.Any() == true) yield return new KeyValuePair<string,object>("step",Step);
      }

    }

    /// <summary>
    /// Event within of the process
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#Step", IsNestedType=true)]
    [BackboneType("ExampleScenario.process.step")]
    public partial class StepComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#Step"; } }

      /// <summary>
      /// Sequential number of the step
      /// </summary>
      [FhirElement("number", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NumberElement
      {
        get { return _NumberElement; }
        set { _NumberElement = value; OnPropertyChanged("NumberElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NumberElement;

      /// <summary>
      /// Sequential number of the step
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Number
      {
        get { return NumberElement != null ? NumberElement.Value : null; }
        set
        {
          if (value == null)
            NumberElement = null;
          else
            NumberElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Number");
        }
      }

      /// <summary>
      /// Step is nested process
      /// </summary>
      [FhirElement("process", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.ExampleScenario.ProcessComponent Process
      {
        get { return _Process; }
        set { _Process = value; OnPropertyChanged("Process"); }
      }

      private Hl7.Fhir.Model.ExampleScenario.ProcessComponent _Process;

      /// <summary>
      /// Step is nested workflow
      /// </summary>
      [FhirElement("workflow", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical WorkflowElement
      {
        get { return _WorkflowElement; }
        set { _WorkflowElement = value; OnPropertyChanged("WorkflowElement"); }
      }

      private Hl7.Fhir.Model.Canonical _WorkflowElement;

      /// <summary>
      /// Step is nested workflow
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Workflow
      {
        get { return WorkflowElement != null ? WorkflowElement.Value : null; }
        set
        {
          if (value == null)
            WorkflowElement = null;
          else
            WorkflowElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Workflow");
        }
      }

      /// <summary>
      /// Step is simple action
      /// </summary>
      [FhirElement("operation", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.ExampleScenario.OperationComponent Operation
      {
        get { return _Operation; }
        set { _Operation = value; OnPropertyChanged("Operation"); }
      }

      private Hl7.Fhir.Model.ExampleScenario.OperationComponent _Operation;

      /// <summary>
      /// Alternate non-typical step action
      /// </summary>
      [FhirElement("alternative", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExampleScenario.AlternativeComponent> Alternative
      {
        get { if(_Alternative==null) _Alternative = new List<Hl7.Fhir.Model.ExampleScenario.AlternativeComponent>(); return _Alternative; }
        set { _Alternative = value; OnPropertyChanged("Alternative"); }
      }

      private List<Hl7.Fhir.Model.ExampleScenario.AlternativeComponent> _Alternative;

      /// <summary>
      /// Pause in the flow?
      /// </summary>
      [FhirElement("pause", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean PauseElement
      {
        get { return _PauseElement; }
        set { _PauseElement = value; OnPropertyChanged("PauseElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _PauseElement;

      /// <summary>
      /// Pause in the flow?
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Pause
      {
        get { return PauseElement != null ? PauseElement.Value : null; }
        set
        {
          if (value == null)
            PauseElement = null;
          else
            PauseElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Pause");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StepComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NumberElement != null) dest.NumberElement = (Hl7.Fhir.Model.FhirString)NumberElement.DeepCopy();
        if(Process != null) dest.Process = (Hl7.Fhir.Model.ExampleScenario.ProcessComponent)Process.DeepCopy();
        if(WorkflowElement != null) dest.WorkflowElement = (Hl7.Fhir.Model.Canonical)WorkflowElement.DeepCopy();
        if(Operation != null) dest.Operation = (Hl7.Fhir.Model.ExampleScenario.OperationComponent)Operation.DeepCopy();
        if(Alternative != null) dest.Alternative = new List<Hl7.Fhir.Model.ExampleScenario.AlternativeComponent>(Alternative.DeepCopy());
        if(PauseElement != null) dest.PauseElement = (Hl7.Fhir.Model.FhirBoolean)PauseElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StepComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StepComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NumberElement, otherT.NumberElement)) return false;
        if( !DeepComparable.Matches(Process, otherT.Process)) return false;
        if( !DeepComparable.Matches(WorkflowElement, otherT.WorkflowElement)) return false;
        if( !DeepComparable.Matches(Operation, otherT.Operation)) return false;
        if( !DeepComparable.Matches(Alternative, otherT.Alternative)) return false;
        if( !DeepComparable.Matches(PauseElement, otherT.PauseElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StepComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NumberElement, otherT.NumberElement)) return false;
        if( !DeepComparable.IsExactly(Process, otherT.Process)) return false;
        if( !DeepComparable.IsExactly(WorkflowElement, otherT.WorkflowElement)) return false;
        if( !DeepComparable.IsExactly(Operation, otherT.Operation)) return false;
        if( !DeepComparable.IsExactly(Alternative, otherT.Alternative)) return false;
        if( !DeepComparable.IsExactly(PauseElement, otherT.PauseElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NumberElement != null) yield return NumberElement;
          if (Process != null) yield return Process;
          if (WorkflowElement != null) yield return WorkflowElement;
          if (Operation != null) yield return Operation;
          foreach (var elem in Alternative) { if (elem != null) yield return elem; }
          if (PauseElement != null) yield return PauseElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NumberElement != null) yield return new ElementValue("number", NumberElement);
          if (Process != null) yield return new ElementValue("process", Process);
          if (WorkflowElement != null) yield return new ElementValue("workflow", WorkflowElement);
          if (Operation != null) yield return new ElementValue("operation", Operation);
          foreach (var elem in Alternative) { if (elem != null) yield return new ElementValue("alternative", elem); }
          if (PauseElement != null) yield return new ElementValue("pause", PauseElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "number":
            value = NumberElement;
            return NumberElement is not null;
          case "process":
            value = Process;
            return Process is not null;
          case "workflow":
            value = WorkflowElement;
            return WorkflowElement is not null;
          case "operation":
            value = Operation;
            return Operation is not null;
          case "alternative":
            value = Alternative;
            return Alternative?.Any() == true;
          case "pause":
            value = PauseElement;
            return PauseElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NumberElement is not null) yield return new KeyValuePair<string,object>("number",NumberElement);
        if (Process is not null) yield return new KeyValuePair<string,object>("process",Process);
        if (WorkflowElement is not null) yield return new KeyValuePair<string,object>("workflow",WorkflowElement);
        if (Operation is not null) yield return new KeyValuePair<string,object>("operation",Operation);
        if (Alternative?.Any() == true) yield return new KeyValuePair<string,object>("alternative",Alternative);
        if (PauseElement is not null) yield return new KeyValuePair<string,object>("pause",PauseElement);
      }

    }

    /// <summary>
    /// Step is simple action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#Operation", IsNestedType=true)]
    [BackboneType("ExampleScenario.process.step.operation")]
    public partial class OperationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#Operation"; } }

      /// <summary>
      /// Kind of action
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.Coding _Type;

      /// <summary>
      /// Label for step
      /// </summary>
      [FhirElement("title", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for step
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Who starts the operation
      /// </summary>
      [FhirElement("initiator", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString InitiatorElement
      {
        get { return _InitiatorElement; }
        set { _InitiatorElement = value; OnPropertyChanged("InitiatorElement"); }
      }

      private Hl7.Fhir.Model.FhirString _InitiatorElement;

      /// <summary>
      /// Who starts the operation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Initiator
      {
        get { return InitiatorElement != null ? InitiatorElement.Value : null; }
        set
        {
          if (value == null)
            InitiatorElement = null;
          else
            InitiatorElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Initiator");
        }
      }

      /// <summary>
      /// Who receives the operation
      /// </summary>
      [FhirElement("receiver", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ReceiverElement
      {
        get { return _ReceiverElement; }
        set { _ReceiverElement = value; OnPropertyChanged("ReceiverElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ReceiverElement;

      /// <summary>
      /// Who receives the operation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Receiver
      {
        get { return ReceiverElement != null ? ReceiverElement.Value : null; }
        set
        {
          if (value == null)
            ReceiverElement = null;
          else
            ReceiverElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Receiver");
        }
      }

      /// <summary>
      /// Human-friendly description of the operation
      /// </summary>
      [FhirElement("description", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Human-friendly description of the operation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Initiator stays active?
      /// </summary>
      [FhirElement("initiatorActive", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean InitiatorActiveElement
      {
        get { return _InitiatorActiveElement; }
        set { _InitiatorActiveElement = value; OnPropertyChanged("InitiatorActiveElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _InitiatorActiveElement;

      /// <summary>
      /// Initiator stays active?
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? InitiatorActive
      {
        get { return InitiatorActiveElement != null ? InitiatorActiveElement.Value : null; }
        set
        {
          if (value == null)
            InitiatorActiveElement = null;
          else
            InitiatorActiveElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("InitiatorActive");
        }
      }

      /// <summary>
      /// Receiver stays active?
      /// </summary>
      [FhirElement("receiverActive", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ReceiverActiveElement
      {
        get { return _ReceiverActiveElement; }
        set { _ReceiverActiveElement = value; OnPropertyChanged("ReceiverActiveElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ReceiverActiveElement;

      /// <summary>
      /// Receiver stays active?
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? ReceiverActive
      {
        get { return ReceiverActiveElement != null ? ReceiverActiveElement.Value : null; }
        set
        {
          if (value == null)
            ReceiverActiveElement = null;
          else
            ReceiverActiveElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("ReceiverActive");
        }
      }

      /// <summary>
      /// Instance transmitted on invocation
      /// </summary>
      [FhirElement("request", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent Request
      {
        get { return _Request; }
        set { _Request = value; OnPropertyChanged("Request"); }
      }

      private Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent _Request;

      /// <summary>
      /// Instance transmitted on invocation response
      /// </summary>
      [FhirElement("response", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent Response
      {
        get { return _Response; }
        set { _Response = value; OnPropertyChanged("Response"); }
      }

      private Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent _Response;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OperationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.Coding)Type.DeepCopy();
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(InitiatorElement != null) dest.InitiatorElement = (Hl7.Fhir.Model.FhirString)InitiatorElement.DeepCopy();
        if(ReceiverElement != null) dest.ReceiverElement = (Hl7.Fhir.Model.FhirString)ReceiverElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(InitiatorActiveElement != null) dest.InitiatorActiveElement = (Hl7.Fhir.Model.FhirBoolean)InitiatorActiveElement.DeepCopy();
        if(ReceiverActiveElement != null) dest.ReceiverActiveElement = (Hl7.Fhir.Model.FhirBoolean)ReceiverActiveElement.DeepCopy();
        if(Request != null) dest.Request = (Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent)Request.DeepCopy();
        if(Response != null) dest.Response = (Hl7.Fhir.Model.ExampleScenario.ContainedInstanceComponent)Response.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OperationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(InitiatorElement, otherT.InitiatorElement)) return false;
        if( !DeepComparable.Matches(ReceiverElement, otherT.ReceiverElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(InitiatorActiveElement, otherT.InitiatorActiveElement)) return false;
        if( !DeepComparable.Matches(ReceiverActiveElement, otherT.ReceiverActiveElement)) return false;
        if( !DeepComparable.Matches(Request, otherT.Request)) return false;
        if( !DeepComparable.Matches(Response, otherT.Response)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(InitiatorElement, otherT.InitiatorElement)) return false;
        if( !DeepComparable.IsExactly(ReceiverElement, otherT.ReceiverElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(InitiatorActiveElement, otherT.InitiatorActiveElement)) return false;
        if( !DeepComparable.IsExactly(ReceiverActiveElement, otherT.ReceiverActiveElement)) return false;
        if( !DeepComparable.IsExactly(Request, otherT.Request)) return false;
        if( !DeepComparable.IsExactly(Response, otherT.Response)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (TitleElement != null) yield return TitleElement;
          if (InitiatorElement != null) yield return InitiatorElement;
          if (ReceiverElement != null) yield return ReceiverElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (InitiatorActiveElement != null) yield return InitiatorActiveElement;
          if (ReceiverActiveElement != null) yield return ReceiverActiveElement;
          if (Request != null) yield return Request;
          if (Response != null) yield return Response;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (InitiatorElement != null) yield return new ElementValue("initiator", InitiatorElement);
          if (ReceiverElement != null) yield return new ElementValue("receiver", ReceiverElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (InitiatorActiveElement != null) yield return new ElementValue("initiatorActive", InitiatorActiveElement);
          if (ReceiverActiveElement != null) yield return new ElementValue("receiverActive", ReceiverActiveElement);
          if (Request != null) yield return new ElementValue("request", Request);
          if (Response != null) yield return new ElementValue("response", Response);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "initiator":
            value = InitiatorElement;
            return InitiatorElement is not null;
          case "receiver":
            value = ReceiverElement;
            return ReceiverElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "initiatorActive":
            value = InitiatorActiveElement;
            return InitiatorActiveElement is not null;
          case "receiverActive":
            value = ReceiverActiveElement;
            return ReceiverActiveElement is not null;
          case "request":
            value = Request;
            return Request is not null;
          case "response":
            value = Response;
            return Response is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (InitiatorElement is not null) yield return new KeyValuePair<string,object>("initiator",InitiatorElement);
        if (ReceiverElement is not null) yield return new KeyValuePair<string,object>("receiver",ReceiverElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (InitiatorActiveElement is not null) yield return new KeyValuePair<string,object>("initiatorActive",InitiatorActiveElement);
        if (ReceiverActiveElement is not null) yield return new KeyValuePair<string,object>("receiverActive",ReceiverActiveElement);
        if (Request is not null) yield return new KeyValuePair<string,object>("request",Request);
        if (Response is not null) yield return new KeyValuePair<string,object>("response",Response);
      }

    }

    /// <summary>
    /// Alternate non-typical step action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ExampleScenario#Alternative", IsNestedType=true)]
    [BackboneType("ExampleScenario.process.step.alternative")]
    public partial class AlternativeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ExampleScenario#Alternative"; } }

      /// <summary>
      /// Label for alternative
      /// </summary>
      [FhirElement("title", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for alternative
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Human-readable description of option
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Human-readable description of option
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Alternative action(s)
      /// </summary>
      [FhirElement("step", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ExampleScenario.StepComponent> Step
      {
        get { if(_Step==null) _Step = new List<Hl7.Fhir.Model.ExampleScenario.StepComponent>(); return _Step; }
        set { _Step = value; OnPropertyChanged("Step"); }
      }

      private List<Hl7.Fhir.Model.ExampleScenario.StepComponent> _Step;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AlternativeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Step != null) dest.Step = new List<Hl7.Fhir.Model.ExampleScenario.StepComponent>(Step.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AlternativeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AlternativeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Step, otherT.Step)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AlternativeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Step, otherT.Step)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TitleElement != null) yield return TitleElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Step) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Step) { if (elem != null) yield return new ElementValue("step", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "step":
            value = Step;
            return Step?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Step?.Any() == true) yield return new KeyValuePair<string,object>("step",Step);
      }

    }

    /// <summary>
    /// Canonical identifier for this example scenario, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this example scenario, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the example scenario
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the example scenario
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the example scenario
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// How to compare versions
    /// </summary>
    [FhirElement("versionAlgorithm", InSummary=true, Order=120, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Coding))]
    [DataMember]
    public Hl7.Fhir.Model.DataType VersionAlgorithm
    {
      get { return _VersionAlgorithm; }
      set { _VersionAlgorithm = value; OnPropertyChanged("VersionAlgorithm"); }
    }

    private Hl7.Fhir.Model.DataType _VersionAlgorithm;

    /// <summary>
    /// To be removed?
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// To be removed?
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this example scenario (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this example scenario (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=160, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=170, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=180, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the ExampleScenario
    /// </summary>
    [FhirElement("description", InSummary=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the ExampleScenario
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for example scenario (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=220)]
    [Binding("Jurisdiction")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// The purpose of the example, e.g. to illustrate a scenario
    /// </summary>
    [FhirElement("purpose", Order=230, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// The purpose of the example, e.g. to illustrate a scenario
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    [FhirElement("copyrightLabel", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightLabelElement
    {
      get { return _CopyrightLabelElement; }
      set { _CopyrightLabelElement = value; OnPropertyChanged("CopyrightLabelElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightLabelElement;

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CopyrightLabel
    {
      get { return CopyrightLabelElement != null ? CopyrightLabelElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightLabelElement = null;
        else
          CopyrightLabelElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CopyrightLabel");
      }
    }

    /// <summary>
    /// Individual involved in exchange
    /// </summary>
    [FhirElement("actor", Order=260, FiveWs="FiveWs.who")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExampleScenario.ActorComponent> Actor
    {
      get { if(_Actor==null) _Actor = new List<Hl7.Fhir.Model.ExampleScenario.ActorComponent>(); return _Actor; }
      set { _Actor = value; OnPropertyChanged("Actor"); }
    }

    private List<Hl7.Fhir.Model.ExampleScenario.ActorComponent> _Actor;

    /// <summary>
    /// Data used in the scenario
    /// </summary>
    [FhirElement("instance", Order=270, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExampleScenario.InstanceComponent> Instance
    {
      get { if(_Instance==null) _Instance = new List<Hl7.Fhir.Model.ExampleScenario.InstanceComponent>(); return _Instance; }
      set { _Instance = value; OnPropertyChanged("Instance"); }
    }

    private List<Hl7.Fhir.Model.ExampleScenario.InstanceComponent> _Instance;

    /// <summary>
    /// Major process within scenario
    /// </summary>
    [FhirElement("process", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExampleScenario.ProcessComponent> Process
    {
      get { if(_Process==null) _Process = new List<Hl7.Fhir.Model.ExampleScenario.ProcessComponent>(); return _Process; }
      set { _Process = value; OnPropertyChanged("Process"); }
    }

    private List<Hl7.Fhir.Model.ExampleScenario.ProcessComponent> _Process;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ExampleScenario;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(VersionAlgorithm != null) dest.VersionAlgorithm = (Hl7.Fhir.Model.DataType)VersionAlgorithm.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(CopyrightLabelElement != null) dest.CopyrightLabelElement = (Hl7.Fhir.Model.FhirString)CopyrightLabelElement.DeepCopy();
      if(Actor != null) dest.Actor = new List<Hl7.Fhir.Model.ExampleScenario.ActorComponent>(Actor.DeepCopy());
      if(Instance != null) dest.Instance = new List<Hl7.Fhir.Model.ExampleScenario.InstanceComponent>(Instance.DeepCopy());
      if(Process != null) dest.Process = new List<Hl7.Fhir.Model.ExampleScenario.ProcessComponent>(Process.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ExampleScenario());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ExampleScenario;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
      if( !DeepComparable.Matches(Instance, otherT.Instance)) return false;
      if( !DeepComparable.Matches(Process, otherT.Process)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ExampleScenario;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
      if( !DeepComparable.IsExactly(Instance, otherT.Instance)) return false;
      if( !DeepComparable.IsExactly(Process, otherT.Process)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (VersionAlgorithm != null) yield return VersionAlgorithm;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (CopyrightLabelElement != null) yield return CopyrightLabelElement;
        foreach (var elem in Actor) { if (elem != null) yield return elem; }
        foreach (var elem in Instance) { if (elem != null) yield return elem; }
        foreach (var elem in Process) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (VersionAlgorithm != null) yield return new ElementValue("versionAlgorithm", VersionAlgorithm);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (CopyrightLabelElement != null) yield return new ElementValue("copyrightLabel", CopyrightLabelElement);
        foreach (var elem in Actor) { if (elem != null) yield return new ElementValue("actor", elem); }
        foreach (var elem in Instance) { if (elem != null) yield return new ElementValue("instance", elem); }
        foreach (var elem in Process) { if (elem != null) yield return new ElementValue("process", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "versionAlgorithm":
          value = VersionAlgorithm;
          return VersionAlgorithm is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "copyrightLabel":
          value = CopyrightLabelElement;
          return CopyrightLabelElement is not null;
        case "actor":
          value = Actor;
          return Actor?.Any() == true;
        case "instance":
          value = Instance;
          return Instance?.Any() == true;
        case "process":
          value = Process;
          return Process?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (VersionAlgorithm is not null) yield return new KeyValuePair<string,object>("versionAlgorithm",VersionAlgorithm);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (CopyrightLabelElement is not null) yield return new KeyValuePair<string,object>("copyrightLabel",CopyrightLabelElement);
      if (Actor?.Any() == true) yield return new KeyValuePair<string,object>("actor",Actor);
      if (Instance?.Any() == true) yield return new KeyValuePair<string,object>("instance",Instance);
      if (Process?.Any() == true) yield return new KeyValuePair<string,object>("process",Process);
    }

  }

}

// end of file

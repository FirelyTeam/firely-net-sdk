// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Item used in healthcare
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Device","http://hl7.org/fhir/StructureDefinition/Device", IsResource=true)]
  public partial class Device : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Device"; } }

    /// <summary>
    /// The status of the Device record.
    /// (url: http://hl7.org/fhir/ValueSet/device-status)
    /// (system: http://hl7.org/fhir/device-status)
    /// </summary>
    [FhirEnumeration("FHIRDeviceStatus", "http://hl7.org/fhir/ValueSet/device-status", "http://hl7.org/fhir/device-status")]
    public enum FHIRDeviceStatus
    {
      /// <summary>
      /// The device record is current and is appropriate for reference in new instances.
      /// (system: http://hl7.org/fhir/device-status)
      /// </summary>
      [EnumLiteral("active"), Description("Active")]
      Active,
      /// <summary>
      /// The device record is not current and is not appropriate for reference in new instances.
      /// (system: http://hl7.org/fhir/device-status)
      /// </summary>
      [EnumLiteral("inactive"), Description("Inactive")]
      Inactive,
      /// <summary>
      /// The device record is not current and is not appropriate for reference in new instances.
      /// (system: http://hl7.org/fhir/device-status)
      /// </summary>
      [EnumLiteral("entered-in-error"), Description("Entered in Error")]
      EnteredInError,
    }

    /// <summary>
    /// Codes to identify how UDI data was entered.
    /// (url: http://hl7.org/fhir/ValueSet/udi-entry-type)
    /// (system: http://hl7.org/fhir/udi-entry-type)
    /// </summary>
    [FhirEnumeration("UDIEntryType", "http://hl7.org/fhir/ValueSet/udi-entry-type", "http://hl7.org/fhir/udi-entry-type")]
    public enum UDIEntryType
    {
      /// <summary>
      /// a barcodescanner captured the data from the device label.
      /// (system: http://hl7.org/fhir/udi-entry-type)
      /// </summary>
      [EnumLiteral("barcode"), Description("Barcode")]
      Barcode,
      /// <summary>
      /// An RFID chip reader captured the data from the device label.
      /// (system: http://hl7.org/fhir/udi-entry-type)
      /// </summary>
      [EnumLiteral("rfid"), Description("RFID")]
      Rfid,
      /// <summary>
      /// The data was read from the label by a person and manually entered. (e.g.  via a keyboard).
      /// (system: http://hl7.org/fhir/udi-entry-type)
      /// </summary>
      [EnumLiteral("manual"), Description("Manual")]
      Manual,
      /// <summary>
      /// The data originated from a patient's implant card and was read by an operator.
      /// (system: http://hl7.org/fhir/udi-entry-type)
      /// </summary>
      [EnumLiteral("card"), Description("Card")]
      Card,
      /// <summary>
      /// The data originated from a patient source and was not directly scanned or read from a label or card.
      /// (system: http://hl7.org/fhir/udi-entry-type)
      /// </summary>
      [EnumLiteral("self-reported"), Description("Self Reported")]
      SelfReported,
      /// <summary>
      /// The UDI information was received electronically from the device through a communication protocol, such as the IEEE 11073 20601 version 4 exchange protocol over Bluetooth or USB.
      /// (system: http://hl7.org/fhir/udi-entry-type)
      /// </summary>
      [EnumLiteral("electronic-transmission"), Description("Electronic Transmission")]
      ElectronicTransmission,
      /// <summary>
      /// The method of data capture has not been determined.
      /// (system: http://hl7.org/fhir/udi-entry-type)
      /// </summary>
      [EnumLiteral("unknown"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Device#UdiCarrier", IsNestedType=true)]
    [BackboneType("Device.udiCarrier")]
    public partial class UdiCarrierComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Device#UdiCarrier"; } }

      /// <summary>
      /// Mandatory fixed portion of UDI
      /// </summary>
      [FhirElement("deviceIdentifier", InSummary=true, Order=40, FiveWs="FiveWs.what[x]")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DeviceIdentifierElement
      {
        get { return _DeviceIdentifierElement; }
        set { _DeviceIdentifierElement = value; OnPropertyChanged("DeviceIdentifierElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DeviceIdentifierElement;

      /// <summary>
      /// Mandatory fixed portion of UDI
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DeviceIdentifier
      {
        get { return DeviceIdentifierElement != null ? DeviceIdentifierElement.Value : null; }
        set
        {
          if (value == null)
            DeviceIdentifierElement = null;
          else
            DeviceIdentifierElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("DeviceIdentifier");
        }
      }

      /// <summary>
      /// UDI Issuing Organization
      /// </summary>
      [FhirElement("issuer", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri IssuerElement
      {
        get { return _IssuerElement; }
        set { _IssuerElement = value; OnPropertyChanged("IssuerElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _IssuerElement;

      /// <summary>
      /// UDI Issuing Organization
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Issuer
      {
        get { return IssuerElement != null ? IssuerElement.Value : null; }
        set
        {
          if (value == null)
            IssuerElement = null;
          else
            IssuerElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Issuer");
        }
      }

      /// <summary>
      /// Regional UDI authority
      /// </summary>
      [FhirElement("jurisdiction", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri JurisdictionElement
      {
        get { return _JurisdictionElement; }
        set { _JurisdictionElement = value; OnPropertyChanged("JurisdictionElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _JurisdictionElement;

      /// <summary>
      /// Regional UDI authority
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Jurisdiction
      {
        get { return JurisdictionElement != null ? JurisdictionElement.Value : null; }
        set
        {
          if (value == null)
            JurisdictionElement = null;
          else
            JurisdictionElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Jurisdiction");
        }
      }

      /// <summary>
      /// UDI Machine Readable Barcode String
      /// </summary>
      [FhirElement("carrierAIDC", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Base64Binary CarrierAIDCElement
      {
        get { return _CarrierAIDCElement; }
        set { _CarrierAIDCElement = value; OnPropertyChanged("CarrierAIDCElement"); }
      }

      private Hl7.Fhir.Model.Base64Binary _CarrierAIDCElement;

      /// <summary>
      /// UDI Machine Readable Barcode String
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public byte[] CarrierAIDC
      {
        get { return CarrierAIDCElement != null ? CarrierAIDCElement.Value : null; }
        set
        {
          if (value == null)
            CarrierAIDCElement = null;
          else
            CarrierAIDCElement = new Hl7.Fhir.Model.Base64Binary(value);
          OnPropertyChanged("CarrierAIDC");
        }
      }

      /// <summary>
      /// UDI Human Readable Barcode String
      /// </summary>
      [FhirElement("carrierHRF", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CarrierHRFElement
      {
        get { return _CarrierHRFElement; }
        set { _CarrierHRFElement = value; OnPropertyChanged("CarrierHRFElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CarrierHRFElement;

      /// <summary>
      /// UDI Human Readable Barcode String
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string CarrierHRF
      {
        get { return CarrierHRFElement != null ? CarrierHRFElement.Value : null; }
        set
        {
          if (value == null)
            CarrierHRFElement = null;
          else
            CarrierHRFElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("CarrierHRF");
        }
      }

      /// <summary>
      /// barcode | rfid | manual | card | self-reported | electronic-transmission | unknown
      /// </summary>
      [FhirElement("entryType", Order=90)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("UDIEntryType")]
      [DataMember]
      public Code<Hl7.Fhir.Model.Device.UDIEntryType> EntryTypeElement
      {
        get { return _EntryTypeElement; }
        set { _EntryTypeElement = value; OnPropertyChanged("EntryTypeElement"); }
      }

      private Code<Hl7.Fhir.Model.Device.UDIEntryType> _EntryTypeElement;

      /// <summary>
      /// barcode | rfid | manual | card | self-reported | electronic-transmission | unknown
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Device.UDIEntryType? EntryType
      {
        get { return EntryTypeElement != null ? EntryTypeElement.Value : null; }
        set
        {
          if (value == null)
            EntryTypeElement = null;
          else
            EntryTypeElement = new Code<Hl7.Fhir.Model.Device.UDIEntryType>(value);
          OnPropertyChanged("EntryType");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as UdiCarrierComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DeviceIdentifierElement != null) dest.DeviceIdentifierElement = (Hl7.Fhir.Model.FhirString)DeviceIdentifierElement.DeepCopy();
        if(IssuerElement != null) dest.IssuerElement = (Hl7.Fhir.Model.FhirUri)IssuerElement.DeepCopy();
        if(JurisdictionElement != null) dest.JurisdictionElement = (Hl7.Fhir.Model.FhirUri)JurisdictionElement.DeepCopy();
        if(CarrierAIDCElement != null) dest.CarrierAIDCElement = (Hl7.Fhir.Model.Base64Binary)CarrierAIDCElement.DeepCopy();
        if(CarrierHRFElement != null) dest.CarrierHRFElement = (Hl7.Fhir.Model.FhirString)CarrierHRFElement.DeepCopy();
        if(EntryTypeElement != null) dest.EntryTypeElement = (Code<Hl7.Fhir.Model.Device.UDIEntryType>)EntryTypeElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new UdiCarrierComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as UdiCarrierComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.Matches(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.Matches(JurisdictionElement, otherT.JurisdictionElement)) return false;
        if( !DeepComparable.Matches(CarrierAIDCElement, otherT.CarrierAIDCElement)) return false;
        if( !DeepComparable.Matches(CarrierHRFElement, otherT.CarrierHRFElement)) return false;
        if( !DeepComparable.Matches(EntryTypeElement, otherT.EntryTypeElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as UdiCarrierComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DeviceIdentifierElement, otherT.DeviceIdentifierElement)) return false;
        if( !DeepComparable.IsExactly(IssuerElement, otherT.IssuerElement)) return false;
        if( !DeepComparable.IsExactly(JurisdictionElement, otherT.JurisdictionElement)) return false;
        if( !DeepComparable.IsExactly(CarrierAIDCElement, otherT.CarrierAIDCElement)) return false;
        if( !DeepComparable.IsExactly(CarrierHRFElement, otherT.CarrierHRFElement)) return false;
        if( !DeepComparable.IsExactly(EntryTypeElement, otherT.EntryTypeElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DeviceIdentifierElement != null) yield return DeviceIdentifierElement;
          if (IssuerElement != null) yield return IssuerElement;
          if (JurisdictionElement != null) yield return JurisdictionElement;
          if (CarrierAIDCElement != null) yield return CarrierAIDCElement;
          if (CarrierHRFElement != null) yield return CarrierHRFElement;
          if (EntryTypeElement != null) yield return EntryTypeElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DeviceIdentifierElement != null) yield return new ElementValue("deviceIdentifier", DeviceIdentifierElement);
          if (IssuerElement != null) yield return new ElementValue("issuer", IssuerElement);
          if (JurisdictionElement != null) yield return new ElementValue("jurisdiction", JurisdictionElement);
          if (CarrierAIDCElement != null) yield return new ElementValue("carrierAIDC", CarrierAIDCElement);
          if (CarrierHRFElement != null) yield return new ElementValue("carrierHRF", CarrierHRFElement);
          if (EntryTypeElement != null) yield return new ElementValue("entryType", EntryTypeElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "deviceIdentifier":
            value = DeviceIdentifierElement;
            return DeviceIdentifierElement is not null;
          case "issuer":
            value = IssuerElement;
            return IssuerElement is not null;
          case "jurisdiction":
            value = JurisdictionElement;
            return JurisdictionElement is not null;
          case "carrierAIDC":
            value = CarrierAIDCElement;
            return CarrierAIDCElement is not null;
          case "carrierHRF":
            value = CarrierHRFElement;
            return CarrierHRFElement is not null;
          case "entryType":
            value = EntryTypeElement;
            return EntryTypeElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DeviceIdentifierElement is not null) yield return new KeyValuePair<string,object>("deviceIdentifier",DeviceIdentifierElement);
        if (IssuerElement is not null) yield return new KeyValuePair<string,object>("issuer",IssuerElement);
        if (JurisdictionElement is not null) yield return new KeyValuePair<string,object>("jurisdiction",JurisdictionElement);
        if (CarrierAIDCElement is not null) yield return new KeyValuePair<string,object>("carrierAIDC",CarrierAIDCElement);
        if (CarrierHRFElement is not null) yield return new KeyValuePair<string,object>("carrierHRF",CarrierHRFElement);
        if (EntryTypeElement is not null) yield return new KeyValuePair<string,object>("entryType",EntryTypeElement);
      }

    }

    /// <summary>
    /// The name or names of the device as known to the manufacturer and/or patient
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Device#Name", IsNestedType=true)]
    [BackboneType("Device.name")]
    public partial class NameComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Device#Name"; } }

      /// <summary>
      /// The term that names the device
      /// </summary>
      [FhirElement("value", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The term that names the device
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      /// <summary>
      /// registered-name | user-friendly-name | patient-reported-name
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50, FiveWs="FiveWs.what[x]")]
      [DeclaredType(Type = typeof(Code))]
      [Binding("DeviceNameType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.DeviceNameType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.DeviceNameType> _TypeElement;

      /// <summary>
      /// registered-name | user-friendly-name | patient-reported-name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.DeviceNameType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.DeviceNameType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// The preferred device name
      /// </summary>
      [FhirElement("display", InSummary=true, IsModifier=true, Order=60, FiveWs="FiveWs.status")]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean DisplayElement
      {
        get { return _DisplayElement; }
        set { _DisplayElement = value; OnPropertyChanged("DisplayElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _DisplayElement;

      /// <summary>
      /// The preferred device name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Display
      {
        get { return DisplayElement != null ? DisplayElement.Value : null; }
        set
        {
          if (value == null)
            DisplayElement = null;
          else
            DisplayElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Display");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NameComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.DeviceNameType>)TypeElement.DeepCopy();
        if(DisplayElement != null) dest.DisplayElement = (Hl7.Fhir.Model.FhirBoolean)DisplayElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NameComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(DisplayElement, otherT.DisplayElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(DisplayElement, otherT.DisplayElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ValueElement != null) yield return ValueElement;
          if (TypeElement != null) yield return TypeElement;
          if (DisplayElement != null) yield return DisplayElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (DisplayElement != null) yield return new ElementValue("display", DisplayElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "display":
            value = DisplayElement;
            return DisplayElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (DisplayElement is not null) yield return new KeyValuePair<string,object>("display",DisplayElement);
      }

    }

    /// <summary>
    /// The actual design of the device or software version running on the device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Device#Version", IsNestedType=true)]
    [BackboneType("Device.version")]
    public partial class VersionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Device#Version"; } }

      /// <summary>
      /// The type of the device version, e.g. manufacturer, approved, internal
      /// </summary>
      [FhirElement("type", Order=40)]
      [Binding("FHIRDeviceVersionType")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The hardware or software module of the device to which the version applies
      /// </summary>
      [FhirElement("component", Order=50, FiveWs="FiveWs.what[x]")]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Component
      {
        get { return _Component; }
        set { _Component = value; OnPropertyChanged("Component"); }
      }

      private Hl7.Fhir.Model.Identifier _Component;

      /// <summary>
      /// The date the version was installed on the device
      /// </summary>
      [FhirElement("installDate", Order=60, FiveWs="FiveWs.what[x]")]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime InstallDateElement
      {
        get { return _InstallDateElement; }
        set { _InstallDateElement = value; OnPropertyChanged("InstallDateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _InstallDateElement;

      /// <summary>
      /// The date the version was installed on the device
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string InstallDate
      {
        get { return InstallDateElement != null ? InstallDateElement.Value : null; }
        set
        {
          if (value == null)
            InstallDateElement = null;
          else
            InstallDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("InstallDate");
        }
      }

      /// <summary>
      /// The version text
      /// </summary>
      [FhirElement("value", Order=70)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The version text
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VersionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Component != null) dest.Component = (Hl7.Fhir.Model.Identifier)Component.DeepCopy();
        if(InstallDateElement != null) dest.InstallDateElement = (Hl7.Fhir.Model.FhirDateTime)InstallDateElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VersionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Component, otherT.Component)) return false;
        if( !DeepComparable.Matches(InstallDateElement, otherT.InstallDateElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VersionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;
        if( !DeepComparable.IsExactly(InstallDateElement, otherT.InstallDateElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Component != null) yield return Component;
          if (InstallDateElement != null) yield return InstallDateElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Component != null) yield return new ElementValue("component", Component);
          if (InstallDateElement != null) yield return new ElementValue("installDate", InstallDateElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "component":
            value = Component;
            return Component is not null;
          case "installDate":
            value = InstallDateElement;
            return InstallDateElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Component is not null) yield return new KeyValuePair<string,object>("component",Component);
        if (InstallDateElement is not null) yield return new KeyValuePair<string,object>("installDate",InstallDateElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Device#ConformsTo", IsNestedType=true)]
    [BackboneType("Device.conformsTo")]
    public partial class ConformsToComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Device#ConformsTo"; } }

      /// <summary>
      /// Describes the common type of the standard, specification, or formal guidance.  communication | performance | measurement
      /// </summary>
      [FhirElement("category", Order=40)]
      [Binding("DeviceSpecificationCategory")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Identifies the standard, specification, or formal guidance that the device adheres to
      /// </summary>
      [FhirElement("specification", Order=50)]
      [Binding("DeviceSpecification-type")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Specification
      {
        get { return _Specification; }
        set { _Specification = value; OnPropertyChanged("Specification"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Specification;

      /// <summary>
      /// Specific form or variant of the standard
      /// </summary>
      [FhirElement("version", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString VersionElement
      {
        get { return _VersionElement; }
        set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _VersionElement;

      /// <summary>
      /// Specific form or variant of the standard
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Version
      {
        get { return VersionElement != null ? VersionElement.Value : null; }
        set
        {
          if (value == null)
            VersionElement = null;
          else
            VersionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Version");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConformsToComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(Specification != null) dest.Specification = (Hl7.Fhir.Model.CodeableConcept)Specification.DeepCopy();
        if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConformsToComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConformsToComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(Specification, otherT.Specification)) return false;
        if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConformsToComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(Specification, otherT.Specification)) return false;
        if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Category != null) yield return Category;
          if (Specification != null) yield return Specification;
          if (VersionElement != null) yield return VersionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Category != null) yield return new ElementValue("category", Category);
          if (Specification != null) yield return new ElementValue("specification", Specification);
          if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "category":
            value = Category;
            return Category is not null;
          case "specification":
            value = Specification;
            return Specification is not null;
          case "version":
            value = VersionElement;
            return VersionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (Specification is not null) yield return new KeyValuePair<string,object>("specification",Specification);
        if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      }

    }

    /// <summary>
    /// Inherent, essentially fixed, characteristics of the device.  e.g., time properties, size, material, etc.
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Device#Property", IsNestedType=true)]
    [BackboneType("Device.property")]
    public partial class PropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Device#Property"; } }

      /// <summary>
      /// Code that specifies the property being represented
      /// </summary>
      [FhirElement("type", Order=40)]
      [Binding("DevicePropertyType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Value of the property
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Attachment))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Instance identifier
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// The name used to display by default when the device is referenced
    /// </summary>
    [FhirElement("displayName", Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DisplayNameElement
    {
      get { return _DisplayNameElement; }
      set { _DisplayNameElement = value; OnPropertyChanged("DisplayNameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DisplayNameElement;

    /// <summary>
    /// The name used to display by default when the device is referenced
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string DisplayName
    {
      get { return DisplayNameElement != null ? DisplayNameElement.Value : null; }
      set
      {
        if (value == null)
          DisplayNameElement = null;
        else
          DisplayNameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("DisplayName");
      }
    }

    /// <summary>
    /// The reference to the definition for the device
    /// </summary>
    [FhirElement("definition", Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference Definition
    {
      get { return _Definition; }
      set { _Definition = value; OnPropertyChanged("Definition"); }
    }

    private Hl7.Fhir.Model.CodeableReference _Definition;

    /// <summary>
    /// Unique Device Identifier (UDI) Barcode string
    /// </summary>
    [FhirElement("udiCarrier", InSummary=true, Order=120, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Device.UdiCarrierComponent> UdiCarrier
    {
      get { if(_UdiCarrier==null) _UdiCarrier = new List<Hl7.Fhir.Model.Device.UdiCarrierComponent>(); return _UdiCarrier; }
      set { _UdiCarrier = value; OnPropertyChanged("UdiCarrier"); }
    }

    private List<Hl7.Fhir.Model.Device.UdiCarrierComponent> _UdiCarrier;

    /// <summary>
    /// active | inactive | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=130, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("FHIRDeviceStatus")]
    [DataMember]
    public Code<Hl7.Fhir.Model.Device.FHIRDeviceStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Device.FHIRDeviceStatus> _StatusElement;

    /// <summary>
    /// active | inactive | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Device.FHIRDeviceStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Device.FHIRDeviceStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// lost | damaged | destroyed | available
    /// </summary>
    [FhirElement("availabilityStatus", Order=140, FiveWs="FiveWs.status")]
    [Binding("FHIRDeviceAvailabilityStatus")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept AvailabilityStatus
    {
      get { return _AvailabilityStatus; }
      set { _AvailabilityStatus = value; OnPropertyChanged("AvailabilityStatus"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _AvailabilityStatus;

    /// <summary>
    /// An identifier that supports traceability to the event during which material in this product from one or more biological entities was obtained or pooled
    /// </summary>
    [FhirElement("biologicalSourceEvent", Order=150, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Identifier BiologicalSourceEvent
    {
      get { return _BiologicalSourceEvent; }
      set { _BiologicalSourceEvent = value; OnPropertyChanged("BiologicalSourceEvent"); }
    }

    private Hl7.Fhir.Model.Identifier _BiologicalSourceEvent;

    /// <summary>
    /// Name of device manufacturer
    /// </summary>
    [FhirElement("manufacturer", Order=160, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ManufacturerElement
    {
      get { return _ManufacturerElement; }
      set { _ManufacturerElement = value; OnPropertyChanged("ManufacturerElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ManufacturerElement;

    /// <summary>
    /// Name of device manufacturer
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Manufacturer
    {
      get { return ManufacturerElement != null ? ManufacturerElement.Value : null; }
      set
      {
        if (value == null)
          ManufacturerElement = null;
        else
          ManufacturerElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Manufacturer");
      }
    }

    /// <summary>
    /// Date when the device was made
    /// </summary>
    [FhirElement("manufactureDate", Order=170, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime ManufactureDateElement
    {
      get { return _ManufactureDateElement; }
      set { _ManufactureDateElement = value; OnPropertyChanged("ManufactureDateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _ManufactureDateElement;

    /// <summary>
    /// Date when the device was made
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ManufactureDate
    {
      get { return ManufactureDateElement != null ? ManufactureDateElement.Value : null; }
      set
      {
        if (value == null)
          ManufactureDateElement = null;
        else
          ManufactureDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("ManufactureDate");
      }
    }

    /// <summary>
    /// Date and time of expiry of this device (if applicable)
    /// </summary>
    [FhirElement("expirationDate", Order=180, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime ExpirationDateElement
    {
      get { return _ExpirationDateElement; }
      set { _ExpirationDateElement = value; OnPropertyChanged("ExpirationDateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _ExpirationDateElement;

    /// <summary>
    /// Date and time of expiry of this device (if applicable)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ExpirationDate
    {
      get { return ExpirationDateElement != null ? ExpirationDateElement.Value : null; }
      set
      {
        if (value == null)
          ExpirationDateElement = null;
        else
          ExpirationDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("ExpirationDate");
      }
    }

    /// <summary>
    /// Lot number of manufacture
    /// </summary>
    [FhirElement("lotNumber", Order=190, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString LotNumberElement
    {
      get { return _LotNumberElement; }
      set { _LotNumberElement = value; OnPropertyChanged("LotNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _LotNumberElement;

    /// <summary>
    /// Lot number of manufacture
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LotNumber
    {
      get { return LotNumberElement != null ? LotNumberElement.Value : null; }
      set
      {
        if (value == null)
          LotNumberElement = null;
        else
          LotNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("LotNumber");
      }
    }

    /// <summary>
    /// Serial number assigned by the manufacturer
    /// </summary>
    [FhirElement("serialNumber", Order=200, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString SerialNumberElement
    {
      get { return _SerialNumberElement; }
      set { _SerialNumberElement = value; OnPropertyChanged("SerialNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _SerialNumberElement;

    /// <summary>
    /// Serial number assigned by the manufacturer
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string SerialNumber
    {
      get { return SerialNumberElement != null ? SerialNumberElement.Value : null; }
      set
      {
        if (value == null)
          SerialNumberElement = null;
        else
          SerialNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("SerialNumber");
      }
    }

    /// <summary>
    /// The name or names of the device as known to the manufacturer and/or patient
    /// </summary>
    [FhirElement("name", Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Device.NameComponent> Name
    {
      get { if(_Name==null) _Name = new List<Hl7.Fhir.Model.Device.NameComponent>(); return _Name; }
      set { _Name = value; OnPropertyChanged("Name"); }
    }

    private List<Hl7.Fhir.Model.Device.NameComponent> _Name;

    /// <summary>
    /// The manufacturer's model number for the device
    /// </summary>
    [FhirElement("modelNumber", Order=220, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ModelNumberElement
    {
      get { return _ModelNumberElement; }
      set { _ModelNumberElement = value; OnPropertyChanged("ModelNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ModelNumberElement;

    /// <summary>
    /// The manufacturer's model number for the device
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ModelNumber
    {
      get { return ModelNumberElement != null ? ModelNumberElement.Value : null; }
      set
      {
        if (value == null)
          ModelNumberElement = null;
        else
          ModelNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("ModelNumber");
      }
    }

    /// <summary>
    /// The part number or catalog number of the device
    /// </summary>
    [FhirElement("partNumber", Order=230, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PartNumberElement
    {
      get { return _PartNumberElement; }
      set { _PartNumberElement = value; OnPropertyChanged("PartNumberElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PartNumberElement;

    /// <summary>
    /// The part number or catalog number of the device
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string PartNumber
    {
      get { return PartNumberElement != null ? PartNumberElement.Value : null; }
      set
      {
        if (value == null)
          PartNumberElement = null;
        else
          PartNumberElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("PartNumber");
      }
    }

    /// <summary>
    /// Indicates a high-level grouping of the device
    /// </summary>
    [FhirElement("category", Order=240)]
    [Binding("DeviceCategory")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// The kind or type of device
    /// </summary>
    [FhirElement("type", Order=250)]
    [Binding("DeviceType")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Type
    {
      get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Type;

    /// <summary>
    /// The actual design of the device or software version running on the device
    /// </summary>
    [FhirElement("version", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Device.VersionComponent> Version
    {
      get { if(_Version==null) _Version = new List<Hl7.Fhir.Model.Device.VersionComponent>(); return _Version; }
      set { _Version = value; OnPropertyChanged("Version"); }
    }

    private List<Hl7.Fhir.Model.Device.VersionComponent> _Version;

    /// <summary>
    /// Identifies the standards, specifications, or formal guidances for the capabilities supported by the device
    /// </summary>
    [FhirElement("conformsTo", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Device.ConformsToComponent> ConformsTo
    {
      get { if(_ConformsTo==null) _ConformsTo = new List<Hl7.Fhir.Model.Device.ConformsToComponent>(); return _ConformsTo; }
      set { _ConformsTo = value; OnPropertyChanged("ConformsTo"); }
    }

    private List<Hl7.Fhir.Model.Device.ConformsToComponent> _ConformsTo;

    /// <summary>
    /// Inherent, essentially fixed, characteristics of the device.  e.g., time properties, size, material, etc.
    /// </summary>
    [FhirElement("property", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Device.PropertyComponent> Property
    {
      get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.Device.PropertyComponent>(); return _Property; }
      set { _Property = value; OnPropertyChanged("Property"); }
    }

    private List<Hl7.Fhir.Model.Device.PropertyComponent> _Property;

    /// <summary>
    /// The designated condition for performing a task
    /// </summary>
    [FhirElement("mode", Order=290)]
    [Binding("DeviceOperationMode")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Mode
    {
      get { return _Mode; }
      set { _Mode = value; OnPropertyChanged("Mode"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Mode;

    /// <summary>
    /// The series of occurrences that repeats during the operation of the device
    /// </summary>
    [FhirElement("cycle", Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.Count Cycle
    {
      get { return _Cycle; }
      set { _Cycle = value; OnPropertyChanged("Cycle"); }
    }

    private Hl7.Fhir.Model.Count _Cycle;

    /// <summary>
    /// A measurement of time during the device's operation (e.g., days, hours, mins, etc.)
    /// </summary>
    [FhirElement("duration", Order=310)]
    [DataMember]
    public Hl7.Fhir.Model.Duration Duration
    {
      get { return _Duration; }
      set { _Duration = value; OnPropertyChanged("Duration"); }
    }

    private Hl7.Fhir.Model.Duration _Duration;

    /// <summary>
    /// Organization responsible for device
    /// </summary>
    [FhirElement("owner", Order=320, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Owner
    {
      get { return _Owner; }
      set { _Owner = value; OnPropertyChanged("Owner"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Owner;

    /// <summary>
    /// Details for human/organization for support
    /// </summary>
    [FhirElement("contact", Order=330, FiveWs="FiveWs.source")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactPoint> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactPoint>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactPoint> _Contact;

    /// <summary>
    /// Where the device is found
    /// </summary>
    [FhirElement("location", Order=340, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// Network address to contact device
    /// </summary>
    [FhirElement("url", Order=350, FiveWs="FiveWs.where[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Network address to contact device
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Technical endpoints providing access to electronic services provided by the device
    /// </summary>
    [FhirElement("endpoint", Order=360)]
    [CLSCompliant(false)]
    [References("Endpoint")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Endpoint
    {
      get { if(_Endpoint==null) _Endpoint = new List<Hl7.Fhir.Model.ResourceReference>(); return _Endpoint; }
      set { _Endpoint = value; OnPropertyChanged("Endpoint"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Endpoint;

    /// <summary>
    /// Linked device acting as a communication/data collector, translator or controller
    /// </summary>
    [FhirElement("gateway", Order=370)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Gateway
    {
      get { if(_Gateway==null) _Gateway = new List<Hl7.Fhir.Model.CodeableReference>(); return _Gateway; }
      set { _Gateway = value; OnPropertyChanged("Gateway"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Gateway;

    /// <summary>
    /// Device notes and comments
    /// </summary>
    [FhirElement("note", Order=380)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Safety Characteristics of Device
    /// </summary>
    [FhirElement("safety", InSummary=true, Order=390)]
    [Binding("Safety")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Safety
    {
      get { if(_Safety==null) _Safety = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Safety; }
      set { _Safety = value; OnPropertyChanged("Safety"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Safety;

    /// <summary>
    /// The higher level or encompassing device that this device is a logical part of
    /// </summary>
    [FhirElement("parent", Order=400)]
    [CLSCompliant(false)]
    [References("Device")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Parent
    {
      get { return _Parent; }
      set { _Parent = value; OnPropertyChanged("Parent"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Parent;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Device;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(DisplayNameElement != null) dest.DisplayNameElement = (Hl7.Fhir.Model.FhirString)DisplayNameElement.DeepCopy();
      if(Definition != null) dest.Definition = (Hl7.Fhir.Model.CodeableReference)Definition.DeepCopy();
      if(UdiCarrier != null) dest.UdiCarrier = new List<Hl7.Fhir.Model.Device.UdiCarrierComponent>(UdiCarrier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Device.FHIRDeviceStatus>)StatusElement.DeepCopy();
      if(AvailabilityStatus != null) dest.AvailabilityStatus = (Hl7.Fhir.Model.CodeableConcept)AvailabilityStatus.DeepCopy();
      if(BiologicalSourceEvent != null) dest.BiologicalSourceEvent = (Hl7.Fhir.Model.Identifier)BiologicalSourceEvent.DeepCopy();
      if(ManufacturerElement != null) dest.ManufacturerElement = (Hl7.Fhir.Model.FhirString)ManufacturerElement.DeepCopy();
      if(ManufactureDateElement != null) dest.ManufactureDateElement = (Hl7.Fhir.Model.FhirDateTime)ManufactureDateElement.DeepCopy();
      if(ExpirationDateElement != null) dest.ExpirationDateElement = (Hl7.Fhir.Model.FhirDateTime)ExpirationDateElement.DeepCopy();
      if(LotNumberElement != null) dest.LotNumberElement = (Hl7.Fhir.Model.FhirString)LotNumberElement.DeepCopy();
      if(SerialNumberElement != null) dest.SerialNumberElement = (Hl7.Fhir.Model.FhirString)SerialNumberElement.DeepCopy();
      if(Name != null) dest.Name = new List<Hl7.Fhir.Model.Device.NameComponent>(Name.DeepCopy());
      if(ModelNumberElement != null) dest.ModelNumberElement = (Hl7.Fhir.Model.FhirString)ModelNumberElement.DeepCopy();
      if(PartNumberElement != null) dest.PartNumberElement = (Hl7.Fhir.Model.FhirString)PartNumberElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
      if(Version != null) dest.Version = new List<Hl7.Fhir.Model.Device.VersionComponent>(Version.DeepCopy());
      if(ConformsTo != null) dest.ConformsTo = new List<Hl7.Fhir.Model.Device.ConformsToComponent>(ConformsTo.DeepCopy());
      if(Property != null) dest.Property = new List<Hl7.Fhir.Model.Device.PropertyComponent>(Property.DeepCopy());
      if(Mode != null) dest.Mode = (Hl7.Fhir.Model.CodeableConcept)Mode.DeepCopy();
      if(Cycle != null) dest.Cycle = (Hl7.Fhir.Model.Count)Cycle.DeepCopy();
      if(Duration != null) dest.Duration = (Hl7.Fhir.Model.Duration)Duration.DeepCopy();
      if(Owner != null) dest.Owner = (Hl7.Fhir.Model.ResourceReference)Owner.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactPoint>(Contact.DeepCopy());
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Endpoint != null) dest.Endpoint = new List<Hl7.Fhir.Model.ResourceReference>(Endpoint.DeepCopy());
      if(Gateway != null) dest.Gateway = new List<Hl7.Fhir.Model.CodeableReference>(Gateway.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Safety != null) dest.Safety = new List<Hl7.Fhir.Model.CodeableConcept>(Safety.DeepCopy());
      if(Parent != null) dest.Parent = (Hl7.Fhir.Model.ResourceReference)Parent.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Device());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Device;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(DisplayNameElement, otherT.DisplayNameElement)) return false;
      if( !DeepComparable.Matches(Definition, otherT.Definition)) return false;
      if( !DeepComparable.Matches(UdiCarrier, otherT.UdiCarrier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(AvailabilityStatus, otherT.AvailabilityStatus)) return false;
      if( !DeepComparable.Matches(BiologicalSourceEvent, otherT.BiologicalSourceEvent)) return false;
      if( !DeepComparable.Matches(ManufacturerElement, otherT.ManufacturerElement)) return false;
      if( !DeepComparable.Matches(ManufactureDateElement, otherT.ManufactureDateElement)) return false;
      if( !DeepComparable.Matches(ExpirationDateElement, otherT.ExpirationDateElement)) return false;
      if( !DeepComparable.Matches(LotNumberElement, otherT.LotNumberElement)) return false;
      if( !DeepComparable.Matches(SerialNumberElement, otherT.SerialNumberElement)) return false;
      if( !DeepComparable.Matches(Name, otherT.Name)) return false;
      if( !DeepComparable.Matches(ModelNumberElement, otherT.ModelNumberElement)) return false;
      if( !DeepComparable.Matches(PartNumberElement, otherT.PartNumberElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Version, otherT.Version)) return false;
      if( !DeepComparable.Matches(ConformsTo, otherT.ConformsTo)) return false;
      if( !DeepComparable.Matches(Property, otherT.Property)) return false;
      if( !DeepComparable.Matches(Mode, otherT.Mode)) return false;
      if( !DeepComparable.Matches(Cycle, otherT.Cycle)) return false;
      if( !DeepComparable.Matches(Duration, otherT.Duration)) return false;
      if( !DeepComparable.Matches(Owner, otherT.Owner)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Endpoint, otherT.Endpoint)) return false;
      if( !DeepComparable.Matches(Gateway, otherT.Gateway)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Safety, otherT.Safety)) return false;
      if( !DeepComparable.Matches(Parent, otherT.Parent)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Device;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(DisplayNameElement, otherT.DisplayNameElement)) return false;
      if( !DeepComparable.IsExactly(Definition, otherT.Definition)) return false;
      if( !DeepComparable.IsExactly(UdiCarrier, otherT.UdiCarrier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(AvailabilityStatus, otherT.AvailabilityStatus)) return false;
      if( !DeepComparable.IsExactly(BiologicalSourceEvent, otherT.BiologicalSourceEvent)) return false;
      if( !DeepComparable.IsExactly(ManufacturerElement, otherT.ManufacturerElement)) return false;
      if( !DeepComparable.IsExactly(ManufactureDateElement, otherT.ManufactureDateElement)) return false;
      if( !DeepComparable.IsExactly(ExpirationDateElement, otherT.ExpirationDateElement)) return false;
      if( !DeepComparable.IsExactly(LotNumberElement, otherT.LotNumberElement)) return false;
      if( !DeepComparable.IsExactly(SerialNumberElement, otherT.SerialNumberElement)) return false;
      if( !DeepComparable.IsExactly(Name, otherT.Name)) return false;
      if( !DeepComparable.IsExactly(ModelNumberElement, otherT.ModelNumberElement)) return false;
      if( !DeepComparable.IsExactly(PartNumberElement, otherT.PartNumberElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Version, otherT.Version)) return false;
      if( !DeepComparable.IsExactly(ConformsTo, otherT.ConformsTo)) return false;
      if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
      if( !DeepComparable.IsExactly(Mode, otherT.Mode)) return false;
      if( !DeepComparable.IsExactly(Cycle, otherT.Cycle)) return false;
      if( !DeepComparable.IsExactly(Duration, otherT.Duration)) return false;
      if( !DeepComparable.IsExactly(Owner, otherT.Owner)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Endpoint, otherT.Endpoint)) return false;
      if( !DeepComparable.IsExactly(Gateway, otherT.Gateway)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Safety, otherT.Safety)) return false;
      if( !DeepComparable.IsExactly(Parent, otherT.Parent)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (DisplayNameElement != null) yield return DisplayNameElement;
        if (Definition != null) yield return Definition;
        foreach (var elem in UdiCarrier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (AvailabilityStatus != null) yield return AvailabilityStatus;
        if (BiologicalSourceEvent != null) yield return BiologicalSourceEvent;
        if (ManufacturerElement != null) yield return ManufacturerElement;
        if (ManufactureDateElement != null) yield return ManufactureDateElement;
        if (ExpirationDateElement != null) yield return ExpirationDateElement;
        if (LotNumberElement != null) yield return LotNumberElement;
        if (SerialNumberElement != null) yield return SerialNumberElement;
        foreach (var elem in Name) { if (elem != null) yield return elem; }
        if (ModelNumberElement != null) yield return ModelNumberElement;
        if (PartNumberElement != null) yield return PartNumberElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        foreach (var elem in Type) { if (elem != null) yield return elem; }
        foreach (var elem in Version) { if (elem != null) yield return elem; }
        foreach (var elem in ConformsTo) { if (elem != null) yield return elem; }
        foreach (var elem in Property) { if (elem != null) yield return elem; }
        if (Mode != null) yield return Mode;
        if (Cycle != null) yield return Cycle;
        if (Duration != null) yield return Duration;
        if (Owner != null) yield return Owner;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (Location != null) yield return Location;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Endpoint) { if (elem != null) yield return elem; }
        foreach (var elem in Gateway) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Safety) { if (elem != null) yield return elem; }
        if (Parent != null) yield return Parent;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (DisplayNameElement != null) yield return new ElementValue("displayName", DisplayNameElement);
        if (Definition != null) yield return new ElementValue("definition", Definition);
        foreach (var elem in UdiCarrier) { if (elem != null) yield return new ElementValue("udiCarrier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (AvailabilityStatus != null) yield return new ElementValue("availabilityStatus", AvailabilityStatus);
        if (BiologicalSourceEvent != null) yield return new ElementValue("biologicalSourceEvent", BiologicalSourceEvent);
        if (ManufacturerElement != null) yield return new ElementValue("manufacturer", ManufacturerElement);
        if (ManufactureDateElement != null) yield return new ElementValue("manufactureDate", ManufactureDateElement);
        if (ExpirationDateElement != null) yield return new ElementValue("expirationDate", ExpirationDateElement);
        if (LotNumberElement != null) yield return new ElementValue("lotNumber", LotNumberElement);
        if (SerialNumberElement != null) yield return new ElementValue("serialNumber", SerialNumberElement);
        foreach (var elem in Name) { if (elem != null) yield return new ElementValue("name", elem); }
        if (ModelNumberElement != null) yield return new ElementValue("modelNumber", ModelNumberElement);
        if (PartNumberElement != null) yield return new ElementValue("partNumber", PartNumberElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
        foreach (var elem in Version) { if (elem != null) yield return new ElementValue("version", elem); }
        foreach (var elem in ConformsTo) { if (elem != null) yield return new ElementValue("conformsTo", elem); }
        foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
        if (Mode != null) yield return new ElementValue("mode", Mode);
        if (Cycle != null) yield return new ElementValue("cycle", Cycle);
        if (Duration != null) yield return new ElementValue("duration", Duration);
        if (Owner != null) yield return new ElementValue("owner", Owner);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (Location != null) yield return new ElementValue("location", Location);
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Endpoint) { if (elem != null) yield return new ElementValue("endpoint", elem); }
        foreach (var elem in Gateway) { if (elem != null) yield return new ElementValue("gateway", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Safety) { if (elem != null) yield return new ElementValue("safety", elem); }
        if (Parent != null) yield return new ElementValue("parent", Parent);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "displayName":
          value = DisplayNameElement;
          return DisplayNameElement is not null;
        case "definition":
          value = Definition;
          return Definition is not null;
        case "udiCarrier":
          value = UdiCarrier;
          return UdiCarrier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "availabilityStatus":
          value = AvailabilityStatus;
          return AvailabilityStatus is not null;
        case "biologicalSourceEvent":
          value = BiologicalSourceEvent;
          return BiologicalSourceEvent is not null;
        case "manufacturer":
          value = ManufacturerElement;
          return ManufacturerElement is not null;
        case "manufactureDate":
          value = ManufactureDateElement;
          return ManufactureDateElement is not null;
        case "expirationDate":
          value = ExpirationDateElement;
          return ExpirationDateElement is not null;
        case "lotNumber":
          value = LotNumberElement;
          return LotNumberElement is not null;
        case "serialNumber":
          value = SerialNumberElement;
          return SerialNumberElement is not null;
        case "name":
          value = Name;
          return Name?.Any() == true;
        case "modelNumber":
          value = ModelNumberElement;
          return ModelNumberElement is not null;
        case "partNumber":
          value = PartNumberElement;
          return PartNumberElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "type":
          value = Type;
          return Type?.Any() == true;
        case "version":
          value = Version;
          return Version?.Any() == true;
        case "conformsTo":
          value = ConformsTo;
          return ConformsTo?.Any() == true;
        case "property":
          value = Property;
          return Property?.Any() == true;
        case "mode":
          value = Mode;
          return Mode is not null;
        case "cycle":
          value = Cycle;
          return Cycle is not null;
        case "duration":
          value = Duration;
          return Duration is not null;
        case "owner":
          value = Owner;
          return Owner is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "location":
          value = Location;
          return Location is not null;
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "endpoint":
          value = Endpoint;
          return Endpoint?.Any() == true;
        case "gateway":
          value = Gateway;
          return Gateway?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "safety":
          value = Safety;
          return Safety?.Any() == true;
        case "parent":
          value = Parent;
          return Parent is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (DisplayNameElement is not null) yield return new KeyValuePair<string,object>("displayName",DisplayNameElement);
      if (Definition is not null) yield return new KeyValuePair<string,object>("definition",Definition);
      if (UdiCarrier?.Any() == true) yield return new KeyValuePair<string,object>("udiCarrier",UdiCarrier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (AvailabilityStatus is not null) yield return new KeyValuePair<string,object>("availabilityStatus",AvailabilityStatus);
      if (BiologicalSourceEvent is not null) yield return new KeyValuePair<string,object>("biologicalSourceEvent",BiologicalSourceEvent);
      if (ManufacturerElement is not null) yield return new KeyValuePair<string,object>("manufacturer",ManufacturerElement);
      if (ManufactureDateElement is not null) yield return new KeyValuePair<string,object>("manufactureDate",ManufactureDateElement);
      if (ExpirationDateElement is not null) yield return new KeyValuePair<string,object>("expirationDate",ExpirationDateElement);
      if (LotNumberElement is not null) yield return new KeyValuePair<string,object>("lotNumber",LotNumberElement);
      if (SerialNumberElement is not null) yield return new KeyValuePair<string,object>("serialNumber",SerialNumberElement);
      if (Name?.Any() == true) yield return new KeyValuePair<string,object>("name",Name);
      if (ModelNumberElement is not null) yield return new KeyValuePair<string,object>("modelNumber",ModelNumberElement);
      if (PartNumberElement is not null) yield return new KeyValuePair<string,object>("partNumber",PartNumberElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
      if (Version?.Any() == true) yield return new KeyValuePair<string,object>("version",Version);
      if (ConformsTo?.Any() == true) yield return new KeyValuePair<string,object>("conformsTo",ConformsTo);
      if (Property?.Any() == true) yield return new KeyValuePair<string,object>("property",Property);
      if (Mode is not null) yield return new KeyValuePair<string,object>("mode",Mode);
      if (Cycle is not null) yield return new KeyValuePair<string,object>("cycle",Cycle);
      if (Duration is not null) yield return new KeyValuePair<string,object>("duration",Duration);
      if (Owner is not null) yield return new KeyValuePair<string,object>("owner",Owner);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Endpoint?.Any() == true) yield return new KeyValuePair<string,object>("endpoint",Endpoint);
      if (Gateway?.Any() == true) yield return new KeyValuePair<string,object>("gateway",Gateway);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Safety?.Any() == true) yield return new KeyValuePair<string,object>("safety",Safety);
      if (Parent is not null) yield return new KeyValuePair<string,object>("parent",Parent);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A set of related requests
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("RequestOrchestration","http://hl7.org/fhir/StructureDefinition/RequestOrchestration", IsResource=true)]
  public partial class RequestOrchestration : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "RequestOrchestration"; } }

    /// <summary>
    /// Proposed actions, if any
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestOrchestration#Action", IsNestedType=true)]
    [BackboneType("RequestOrchestration.action")]
    public partial class ActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestOrchestration#Action"; } }

      /// <summary>
      /// Pointer to specific item from the PlanDefinition
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LinkIdElement;

      /// <summary>
      /// Pointer to specific item from the PlanDefinition
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// User-visible prefix for the action (e.g. 1. or A.)
      /// </summary>
      [FhirElement("prefix", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PrefixElement
      {
        get { return _PrefixElement; }
        set { _PrefixElement = value; OnPropertyChanged("PrefixElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PrefixElement;

      /// <summary>
      /// User-visible prefix for the action (e.g. 1. or A.)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Prefix
      {
        get { return PrefixElement != null ? PrefixElement.Value : null; }
        set
        {
          if (value == null)
            PrefixElement = null;
          else
            PrefixElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Prefix");
        }
      }

      /// <summary>
      /// User-visible title
      /// </summary>
      [FhirElement("title", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// User-visible title
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Short description of the action
      /// </summary>
      [FhirElement("description", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Short description of the action
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
      /// </summary>
      [FhirElement("textEquivalent", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown TextEquivalentElement
      {
        get { return _TextEquivalentElement; }
        set { _TextEquivalentElement = value; OnPropertyChanged("TextEquivalentElement"); }
      }

      private Hl7.Fhir.Model.Markdown _TextEquivalentElement;

      /// <summary>
      /// Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string TextEquivalent
      {
        get { return TextEquivalentElement != null ? TextEquivalentElement.Value : null; }
        set
        {
          if (value == null)
            TextEquivalentElement = null;
          else
            TextEquivalentElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("TextEquivalent");
        }
      }

      /// <summary>
      /// routine | urgent | asap | stat
      /// </summary>
      [FhirElement("priority", Order=90)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("RequestPriority")]
      [DataMember]
      public Code<Hl7.Fhir.Model.RequestPriority> PriorityElement
      {
        get { return _PriorityElement; }
        set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
      }

      private Code<Hl7.Fhir.Model.RequestPriority> _PriorityElement;

      /// <summary>
      /// routine | urgent | asap | stat
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.RequestPriority? Priority
      {
        get { return PriorityElement != null ? PriorityElement.Value : null; }
        set
        {
          if (value == null)
            PriorityElement = null;
          else
            PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(value);
          OnPropertyChanged("Priority");
        }
      }

      /// <summary>
      /// Code representing the meaning of the action or sub-actions
      /// </summary>
      [FhirElement("code", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Code
      {
        get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Code;

      /// <summary>
      /// Supporting documentation for the intended performer of the action
      /// </summary>
      [FhirElement("documentation", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RelatedArtifact> Documentation
      {
        get { if(_Documentation==null) _Documentation = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _Documentation; }
        set { _Documentation = value; OnPropertyChanged("Documentation"); }
      }

      private List<Hl7.Fhir.Model.RelatedArtifact> _Documentation;

      /// <summary>
      /// What goals
      /// </summary>
      [FhirElement("goal", Order=120, FiveWs="FiveWs.why[x]")]
      [CLSCompliant(false)]
      [References("Goal")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Goal
      {
        get { if(_Goal==null) _Goal = new List<Hl7.Fhir.Model.ResourceReference>(); return _Goal; }
        set { _Goal = value; OnPropertyChanged("Goal"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Goal;

      /// <summary>
      /// Whether or not the action is applicable
      /// </summary>
      [FhirElement("condition", Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestOrchestration.ConditionComponent> Condition
      {
        get { if(_Condition==null) _Condition = new List<Hl7.Fhir.Model.RequestOrchestration.ConditionComponent>(); return _Condition; }
        set { _Condition = value; OnPropertyChanged("Condition"); }
      }

      private List<Hl7.Fhir.Model.RequestOrchestration.ConditionComponent> _Condition;

      /// <summary>
      /// Input data requirements
      /// </summary>
      [FhirElement("input", Order=140)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestOrchestration.InputComponent> Input
      {
        get { if(_Input==null) _Input = new List<Hl7.Fhir.Model.RequestOrchestration.InputComponent>(); return _Input; }
        set { _Input = value; OnPropertyChanged("Input"); }
      }

      private List<Hl7.Fhir.Model.RequestOrchestration.InputComponent> _Input;

      /// <summary>
      /// Output data definition
      /// </summary>
      [FhirElement("output", Order=150)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestOrchestration.OutputComponent> Output
      {
        get { if(_Output==null) _Output = new List<Hl7.Fhir.Model.RequestOrchestration.OutputComponent>(); return _Output; }
        set { _Output = value; OnPropertyChanged("Output"); }
      }

      private List<Hl7.Fhir.Model.RequestOrchestration.OutputComponent> _Output;

      /// <summary>
      /// Relationship to another action
      /// </summary>
      [FhirElement("relatedAction", Order=160)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestOrchestration.RelatedActionComponent> RelatedAction
      {
        get { if(_RelatedAction==null) _RelatedAction = new List<Hl7.Fhir.Model.RequestOrchestration.RelatedActionComponent>(); return _RelatedAction; }
        set { _RelatedAction = value; OnPropertyChanged("RelatedAction"); }
      }

      private List<Hl7.Fhir.Model.RequestOrchestration.RelatedActionComponent> _RelatedAction;

      /// <summary>
      /// When the action should take place
      /// </summary>
      [FhirElement("timing", Order=170, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Timing))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Timing
      {
        get { return _Timing; }
        set { _Timing = value; OnPropertyChanged("Timing"); }
      }

      private Hl7.Fhir.Model.DataType _Timing;

      /// <summary>
      /// Where it should happen
      /// </summary>
      [FhirElement("location", Order=180)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Location;

      /// <summary>
      /// Who should perform the action
      /// </summary>
      [FhirElement("participant", Order=190, FiveWs="FiveWs.actor")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestOrchestration.ParticipantComponent> Participant
      {
        get { if(_Participant==null) _Participant = new List<Hl7.Fhir.Model.RequestOrchestration.ParticipantComponent>(); return _Participant; }
        set { _Participant = value; OnPropertyChanged("Participant"); }
      }

      private List<Hl7.Fhir.Model.RequestOrchestration.ParticipantComponent> _Participant;

      /// <summary>
      /// create | update | remove | fire-event
      /// </summary>
      [FhirElement("type", Order=200)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// visual-group | logical-group | sentence-group
      /// </summary>
      [FhirElement("groupingBehavior", Order=210)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionGroupingBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionGroupingBehavior> GroupingBehaviorElement
      {
        get { return _GroupingBehaviorElement; }
        set { _GroupingBehaviorElement = value; OnPropertyChanged("GroupingBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionGroupingBehavior> _GroupingBehaviorElement;

      /// <summary>
      /// visual-group | logical-group | sentence-group
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionGroupingBehavior? GroupingBehavior
      {
        get { return GroupingBehaviorElement != null ? GroupingBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            GroupingBehaviorElement = null;
          else
            GroupingBehaviorElement = new Code<Hl7.Fhir.Model.ActionGroupingBehavior>(value);
          OnPropertyChanged("GroupingBehavior");
        }
      }

      /// <summary>
      /// any | all | all-or-none | exactly-one | at-most-one | one-or-more
      /// </summary>
      [FhirElement("selectionBehavior", Order=220)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionSelectionBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionSelectionBehavior> SelectionBehaviorElement
      {
        get { return _SelectionBehaviorElement; }
        set { _SelectionBehaviorElement = value; OnPropertyChanged("SelectionBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionSelectionBehavior> _SelectionBehaviorElement;

      /// <summary>
      /// any | all | all-or-none | exactly-one | at-most-one | one-or-more
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionSelectionBehavior? SelectionBehavior
      {
        get { return SelectionBehaviorElement != null ? SelectionBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            SelectionBehaviorElement = null;
          else
            SelectionBehaviorElement = new Code<Hl7.Fhir.Model.ActionSelectionBehavior>(value);
          OnPropertyChanged("SelectionBehavior");
        }
      }

      /// <summary>
      /// must | could | must-unless-documented
      /// </summary>
      [FhirElement("requiredBehavior", Order=230)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionRequiredBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionRequiredBehavior> RequiredBehaviorElement
      {
        get { return _RequiredBehaviorElement; }
        set { _RequiredBehaviorElement = value; OnPropertyChanged("RequiredBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionRequiredBehavior> _RequiredBehaviorElement;

      /// <summary>
      /// must | could | must-unless-documented
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionRequiredBehavior? RequiredBehavior
      {
        get { return RequiredBehaviorElement != null ? RequiredBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            RequiredBehaviorElement = null;
          else
            RequiredBehaviorElement = new Code<Hl7.Fhir.Model.ActionRequiredBehavior>(value);
          OnPropertyChanged("RequiredBehavior");
        }
      }

      /// <summary>
      /// yes | no
      /// </summary>
      [FhirElement("precheckBehavior", Order=240)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionPrecheckBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionPrecheckBehavior> PrecheckBehaviorElement
      {
        get { return _PrecheckBehaviorElement; }
        set { _PrecheckBehaviorElement = value; OnPropertyChanged("PrecheckBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionPrecheckBehavior> _PrecheckBehaviorElement;

      /// <summary>
      /// yes | no
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionPrecheckBehavior? PrecheckBehavior
      {
        get { return PrecheckBehaviorElement != null ? PrecheckBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            PrecheckBehaviorElement = null;
          else
            PrecheckBehaviorElement = new Code<Hl7.Fhir.Model.ActionPrecheckBehavior>(value);
          OnPropertyChanged("PrecheckBehavior");
        }
      }

      /// <summary>
      /// single | multiple
      /// </summary>
      [FhirElement("cardinalityBehavior", Order=250)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionCardinalityBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionCardinalityBehavior> CardinalityBehaviorElement
      {
        get { return _CardinalityBehaviorElement; }
        set { _CardinalityBehaviorElement = value; OnPropertyChanged("CardinalityBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionCardinalityBehavior> _CardinalityBehaviorElement;

      /// <summary>
      /// single | multiple
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionCardinalityBehavior? CardinalityBehavior
      {
        get { return CardinalityBehaviorElement != null ? CardinalityBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            CardinalityBehaviorElement = null;
          else
            CardinalityBehaviorElement = new Code<Hl7.Fhir.Model.ActionCardinalityBehavior>(value);
          OnPropertyChanged("CardinalityBehavior");
        }
      }

      /// <summary>
      /// The target of the action
      /// </summary>
      [FhirElement("resource", Order=260)]
      [CLSCompliant(false)]
      [References("Resource")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Resource
      {
        get { return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Resource;

      /// <summary>
      /// Description of the activity to be performed
      /// </summary>
      [FhirElement("definition", Order=270, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Canonical),typeof(Hl7.Fhir.Model.FhirUri))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Definition
      {
        get { return _Definition; }
        set { _Definition = value; OnPropertyChanged("Definition"); }
      }

      private Hl7.Fhir.Model.DataType _Definition;

      /// <summary>
      /// Transform to apply the template
      /// </summary>
      [FhirElement("transform", Order=280)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical TransformElement
      {
        get { return _TransformElement; }
        set { _TransformElement = value; OnPropertyChanged("TransformElement"); }
      }

      private Hl7.Fhir.Model.Canonical _TransformElement;

      /// <summary>
      /// Transform to apply the template
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Transform
      {
        get { return TransformElement != null ? TransformElement.Value : null; }
        set
        {
          if (value == null)
            TransformElement = null;
          else
            TransformElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Transform");
        }
      }

      /// <summary>
      /// Dynamic aspects of the definition
      /// </summary>
      [FhirElement("dynamicValue", Order=290)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestOrchestration.DynamicValueComponent> DynamicValue
      {
        get { if(_DynamicValue==null) _DynamicValue = new List<Hl7.Fhir.Model.RequestOrchestration.DynamicValueComponent>(); return _DynamicValue; }
        set { _DynamicValue = value; OnPropertyChanged("DynamicValue"); }
      }

      private List<Hl7.Fhir.Model.RequestOrchestration.DynamicValueComponent> _DynamicValue;

      /// <summary>
      /// Sub action
      /// </summary>
      [FhirElement("action", Order=300)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent> Action
      {
        get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent>(); return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent> _Action;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.FhirString)LinkIdElement.DeepCopy();
        if(PrefixElement != null) dest.PrefixElement = (Hl7.Fhir.Model.FhirString)PrefixElement.DeepCopy();
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(TextEquivalentElement != null) dest.TextEquivalentElement = (Hl7.Fhir.Model.Markdown)TextEquivalentElement.DeepCopy();
        if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.RequestPriority>)PriorityElement.DeepCopy();
        if(Code != null) dest.Code = new List<Hl7.Fhir.Model.CodeableConcept>(Code.DeepCopy());
        if(Documentation != null) dest.Documentation = new List<Hl7.Fhir.Model.RelatedArtifact>(Documentation.DeepCopy());
        if(Goal != null) dest.Goal = new List<Hl7.Fhir.Model.ResourceReference>(Goal.DeepCopy());
        if(Condition != null) dest.Condition = new List<Hl7.Fhir.Model.RequestOrchestration.ConditionComponent>(Condition.DeepCopy());
        if(Input != null) dest.Input = new List<Hl7.Fhir.Model.RequestOrchestration.InputComponent>(Input.DeepCopy());
        if(Output != null) dest.Output = new List<Hl7.Fhir.Model.RequestOrchestration.OutputComponent>(Output.DeepCopy());
        if(RelatedAction != null) dest.RelatedAction = new List<Hl7.Fhir.Model.RequestOrchestration.RelatedActionComponent>(RelatedAction.DeepCopy());
        if(Timing != null) dest.Timing = (Hl7.Fhir.Model.DataType)Timing.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.CodeableReference)Location.DeepCopy();
        if(Participant != null) dest.Participant = new List<Hl7.Fhir.Model.RequestOrchestration.ParticipantComponent>(Participant.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(GroupingBehaviorElement != null) dest.GroupingBehaviorElement = (Code<Hl7.Fhir.Model.ActionGroupingBehavior>)GroupingBehaviorElement.DeepCopy();
        if(SelectionBehaviorElement != null) dest.SelectionBehaviorElement = (Code<Hl7.Fhir.Model.ActionSelectionBehavior>)SelectionBehaviorElement.DeepCopy();
        if(RequiredBehaviorElement != null) dest.RequiredBehaviorElement = (Code<Hl7.Fhir.Model.ActionRequiredBehavior>)RequiredBehaviorElement.DeepCopy();
        if(PrecheckBehaviorElement != null) dest.PrecheckBehaviorElement = (Code<Hl7.Fhir.Model.ActionPrecheckBehavior>)PrecheckBehaviorElement.DeepCopy();
        if(CardinalityBehaviorElement != null) dest.CardinalityBehaviorElement = (Code<Hl7.Fhir.Model.ActionCardinalityBehavior>)CardinalityBehaviorElement.DeepCopy();
        if(Resource != null) dest.Resource = (Hl7.Fhir.Model.ResourceReference)Resource.DeepCopy();
        if(Definition != null) dest.Definition = (Hl7.Fhir.Model.DataType)Definition.DeepCopy();
        if(TransformElement != null) dest.TransformElement = (Hl7.Fhir.Model.Canonical)TransformElement.DeepCopy();
        if(DynamicValue != null) dest.DynamicValue = new List<Hl7.Fhir.Model.RequestOrchestration.DynamicValueComponent>(DynamicValue.DeepCopy());
        if(Action != null) dest.Action = new List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent>(Action.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(PrefixElement, otherT.PrefixElement)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(TextEquivalentElement, otherT.TextEquivalentElement)) return false;
        if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Documentation, otherT.Documentation)) return false;
        if( !DeepComparable.Matches(Goal, otherT.Goal)) return false;
        if( !DeepComparable.Matches(Condition, otherT.Condition)) return false;
        if( !DeepComparable.Matches(Input, otherT.Input)) return false;
        if( !DeepComparable.Matches(Output, otherT.Output)) return false;
        if( !DeepComparable.Matches(RelatedAction, otherT.RelatedAction)) return false;
        if( !DeepComparable.Matches(Timing, otherT.Timing)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;
        if( !DeepComparable.Matches(Participant, otherT.Participant)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(GroupingBehaviorElement, otherT.GroupingBehaviorElement)) return false;
        if( !DeepComparable.Matches(SelectionBehaviorElement, otherT.SelectionBehaviorElement)) return false;
        if( !DeepComparable.Matches(RequiredBehaviorElement, otherT.RequiredBehaviorElement)) return false;
        if( !DeepComparable.Matches(PrecheckBehaviorElement, otherT.PrecheckBehaviorElement)) return false;
        if( !DeepComparable.Matches(CardinalityBehaviorElement, otherT.CardinalityBehaviorElement)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;
        if( !DeepComparable.Matches(Definition, otherT.Definition)) return false;
        if( !DeepComparable.Matches(TransformElement, otherT.TransformElement)) return false;
        if( !DeepComparable.Matches(DynamicValue, otherT.DynamicValue)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(PrefixElement, otherT.PrefixElement)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(TextEquivalentElement, otherT.TextEquivalentElement)) return false;
        if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Documentation, otherT.Documentation)) return false;
        if( !DeepComparable.IsExactly(Goal, otherT.Goal)) return false;
        if( !DeepComparable.IsExactly(Condition, otherT.Condition)) return false;
        if( !DeepComparable.IsExactly(Input, otherT.Input)) return false;
        if( !DeepComparable.IsExactly(Output, otherT.Output)) return false;
        if( !DeepComparable.IsExactly(RelatedAction, otherT.RelatedAction)) return false;
        if( !DeepComparable.IsExactly(Timing, otherT.Timing)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
        if( !DeepComparable.IsExactly(Participant, otherT.Participant)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(GroupingBehaviorElement, otherT.GroupingBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(SelectionBehaviorElement, otherT.SelectionBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(RequiredBehaviorElement, otherT.RequiredBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(PrecheckBehaviorElement, otherT.PrecheckBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(CardinalityBehaviorElement, otherT.CardinalityBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;
        if( !DeepComparable.IsExactly(Definition, otherT.Definition)) return false;
        if( !DeepComparable.IsExactly(TransformElement, otherT.TransformElement)) return false;
        if( !DeepComparable.IsExactly(DynamicValue, otherT.DynamicValue)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (PrefixElement != null) yield return PrefixElement;
          if (TitleElement != null) yield return TitleElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (TextEquivalentElement != null) yield return TextEquivalentElement;
          if (PriorityElement != null) yield return PriorityElement;
          foreach (var elem in Code) { if (elem != null) yield return elem; }
          foreach (var elem in Documentation) { if (elem != null) yield return elem; }
          foreach (var elem in Goal) { if (elem != null) yield return elem; }
          foreach (var elem in Condition) { if (elem != null) yield return elem; }
          foreach (var elem in Input) { if (elem != null) yield return elem; }
          foreach (var elem in Output) { if (elem != null) yield return elem; }
          foreach (var elem in RelatedAction) { if (elem != null) yield return elem; }
          if (Timing != null) yield return Timing;
          if (Location != null) yield return Location;
          foreach (var elem in Participant) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
          if (GroupingBehaviorElement != null) yield return GroupingBehaviorElement;
          if (SelectionBehaviorElement != null) yield return SelectionBehaviorElement;
          if (RequiredBehaviorElement != null) yield return RequiredBehaviorElement;
          if (PrecheckBehaviorElement != null) yield return PrecheckBehaviorElement;
          if (CardinalityBehaviorElement != null) yield return CardinalityBehaviorElement;
          if (Resource != null) yield return Resource;
          if (Definition != null) yield return Definition;
          if (TransformElement != null) yield return TransformElement;
          foreach (var elem in DynamicValue) { if (elem != null) yield return elem; }
          foreach (var elem in Action) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (PrefixElement != null) yield return new ElementValue("prefix", PrefixElement);
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (TextEquivalentElement != null) yield return new ElementValue("textEquivalent", TextEquivalentElement);
          if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
          foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
          foreach (var elem in Documentation) { if (elem != null) yield return new ElementValue("documentation", elem); }
          foreach (var elem in Goal) { if (elem != null) yield return new ElementValue("goal", elem); }
          foreach (var elem in Condition) { if (elem != null) yield return new ElementValue("condition", elem); }
          foreach (var elem in Input) { if (elem != null) yield return new ElementValue("input", elem); }
          foreach (var elem in Output) { if (elem != null) yield return new ElementValue("output", elem); }
          foreach (var elem in RelatedAction) { if (elem != null) yield return new ElementValue("relatedAction", elem); }
          if (Timing != null) yield return new ElementValue("timing", Timing);
          if (Location != null) yield return new ElementValue("location", Location);
          foreach (var elem in Participant) { if (elem != null) yield return new ElementValue("participant", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
          if (GroupingBehaviorElement != null) yield return new ElementValue("groupingBehavior", GroupingBehaviorElement);
          if (SelectionBehaviorElement != null) yield return new ElementValue("selectionBehavior", SelectionBehaviorElement);
          if (RequiredBehaviorElement != null) yield return new ElementValue("requiredBehavior", RequiredBehaviorElement);
          if (PrecheckBehaviorElement != null) yield return new ElementValue("precheckBehavior", PrecheckBehaviorElement);
          if (CardinalityBehaviorElement != null) yield return new ElementValue("cardinalityBehavior", CardinalityBehaviorElement);
          if (Resource != null) yield return new ElementValue("resource", Resource);
          if (Definition != null) yield return new ElementValue("definition", Definition);
          if (TransformElement != null) yield return new ElementValue("transform", TransformElement);
          foreach (var elem in DynamicValue) { if (elem != null) yield return new ElementValue("dynamicValue", elem); }
          foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "prefix":
            value = PrefixElement;
            return PrefixElement is not null;
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "textEquivalent":
            value = TextEquivalentElement;
            return TextEquivalentElement is not null;
          case "priority":
            value = PriorityElement;
            return PriorityElement is not null;
          case "code":
            value = Code;
            return Code?.Any() == true;
          case "documentation":
            value = Documentation;
            return Documentation?.Any() == true;
          case "goal":
            value = Goal;
            return Goal?.Any() == true;
          case "condition":
            value = Condition;
            return Condition?.Any() == true;
          case "input":
            value = Input;
            return Input?.Any() == true;
          case "output":
            value = Output;
            return Output?.Any() == true;
          case "relatedAction":
            value = RelatedAction;
            return RelatedAction?.Any() == true;
          case "timing":
            value = Timing;
            return Timing is not null;
          case "location":
            value = Location;
            return Location is not null;
          case "participant":
            value = Participant;
            return Participant?.Any() == true;
          case "type":
            value = Type;
            return Type is not null;
          case "groupingBehavior":
            value = GroupingBehaviorElement;
            return GroupingBehaviorElement is not null;
          case "selectionBehavior":
            value = SelectionBehaviorElement;
            return SelectionBehaviorElement is not null;
          case "requiredBehavior":
            value = RequiredBehaviorElement;
            return RequiredBehaviorElement is not null;
          case "precheckBehavior":
            value = PrecheckBehaviorElement;
            return PrecheckBehaviorElement is not null;
          case "cardinalityBehavior":
            value = CardinalityBehaviorElement;
            return CardinalityBehaviorElement is not null;
          case "resource":
            value = Resource;
            return Resource is not null;
          case "definition":
            value = Definition;
            return Definition is not null;
          case "transform":
            value = TransformElement;
            return TransformElement is not null;
          case "dynamicValue":
            value = DynamicValue;
            return DynamicValue?.Any() == true;
          case "action":
            value = Action;
            return Action?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (PrefixElement is not null) yield return new KeyValuePair<string,object>("prefix",PrefixElement);
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (TextEquivalentElement is not null) yield return new KeyValuePair<string,object>("textEquivalent",TextEquivalentElement);
        if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
        if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
        if (Documentation?.Any() == true) yield return new KeyValuePair<string,object>("documentation",Documentation);
        if (Goal?.Any() == true) yield return new KeyValuePair<string,object>("goal",Goal);
        if (Condition?.Any() == true) yield return new KeyValuePair<string,object>("condition",Condition);
        if (Input?.Any() == true) yield return new KeyValuePair<string,object>("input",Input);
        if (Output?.Any() == true) yield return new KeyValuePair<string,object>("output",Output);
        if (RelatedAction?.Any() == true) yield return new KeyValuePair<string,object>("relatedAction",RelatedAction);
        if (Timing is not null) yield return new KeyValuePair<string,object>("timing",Timing);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
        if (Participant?.Any() == true) yield return new KeyValuePair<string,object>("participant",Participant);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (GroupingBehaviorElement is not null) yield return new KeyValuePair<string,object>("groupingBehavior",GroupingBehaviorElement);
        if (SelectionBehaviorElement is not null) yield return new KeyValuePair<string,object>("selectionBehavior",SelectionBehaviorElement);
        if (RequiredBehaviorElement is not null) yield return new KeyValuePair<string,object>("requiredBehavior",RequiredBehaviorElement);
        if (PrecheckBehaviorElement is not null) yield return new KeyValuePair<string,object>("precheckBehavior",PrecheckBehaviorElement);
        if (CardinalityBehaviorElement is not null) yield return new KeyValuePair<string,object>("cardinalityBehavior",CardinalityBehaviorElement);
        if (Resource is not null) yield return new KeyValuePair<string,object>("resource",Resource);
        if (Definition is not null) yield return new KeyValuePair<string,object>("definition",Definition);
        if (TransformElement is not null) yield return new KeyValuePair<string,object>("transform",TransformElement);
        if (DynamicValue?.Any() == true) yield return new KeyValuePair<string,object>("dynamicValue",DynamicValue);
        if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
      }

    }

    /// <summary>
    /// Whether or not the action is applicable
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestOrchestration#Condition", IsNestedType=true)]
    [BackboneType("RequestOrchestration.action.condition")]
    public partial class ConditionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestOrchestration#Condition"; } }

      /// <summary>
      /// applicability | start | stop
      /// </summary>
      [FhirElement("kind", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionConditionKind")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionConditionKind> KindElement
      {
        get { return _KindElement; }
        set { _KindElement = value; OnPropertyChanged("KindElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionConditionKind> _KindElement;

      /// <summary>
      /// applicability | start | stop
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionConditionKind? Kind
      {
        get { return KindElement != null ? KindElement.Value : null; }
        set
        {
          if (value == null)
            KindElement = null;
          else
            KindElement = new Code<Hl7.Fhir.Model.ActionConditionKind>(value);
          OnPropertyChanged("Kind");
        }
      }

      /// <summary>
      /// Boolean-valued expression
      /// </summary>
      [FhirElement("expression", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Expression Expression
      {
        get { return _Expression; }
        set { _Expression = value; OnPropertyChanged("Expression"); }
      }

      private Hl7.Fhir.Model.Expression _Expression;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConditionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.ActionConditionKind>)KindElement.DeepCopy();
        if(Expression != null) dest.Expression = (Hl7.Fhir.Model.Expression)Expression.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConditionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConditionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
        if( !DeepComparable.Matches(Expression, otherT.Expression)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConditionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
        if( !DeepComparable.IsExactly(Expression, otherT.Expression)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (KindElement != null) yield return KindElement;
          if (Expression != null) yield return Expression;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (KindElement != null) yield return new ElementValue("kind", KindElement);
          if (Expression != null) yield return new ElementValue("expression", Expression);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "kind":
            value = KindElement;
            return KindElement is not null;
          case "expression":
            value = Expression;
            return Expression is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (KindElement is not null) yield return new KeyValuePair<string,object>("kind",KindElement);
        if (Expression is not null) yield return new KeyValuePair<string,object>("expression",Expression);
      }

    }

    /// <summary>
    /// Input data requirements
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestOrchestration#Input", IsNestedType=true)]
    [BackboneType("RequestOrchestration.action.input")]
    public partial class InputComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestOrchestration#Input"; } }

      /// <summary>
      /// User-visible title
      /// </summary>
      [FhirElement("title", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// User-visible title
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// What data is provided
      /// </summary>
      [FhirElement("requirement", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.DataRequirement Requirement
      {
        get { return _Requirement; }
        set { _Requirement = value; OnPropertyChanged("Requirement"); }
      }

      private Hl7.Fhir.Model.DataRequirement _Requirement;

      /// <summary>
      /// What data is provided
      /// </summary>
      [FhirElement("relatedData", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Id RelatedDataElement
      {
        get { return _RelatedDataElement; }
        set { _RelatedDataElement = value; OnPropertyChanged("RelatedDataElement"); }
      }

      private Hl7.Fhir.Model.Id _RelatedDataElement;

      /// <summary>
      /// What data is provided
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RelatedData
      {
        get { return RelatedDataElement != null ? RelatedDataElement.Value : null; }
        set
        {
          if (value == null)
            RelatedDataElement = null;
          else
            RelatedDataElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("RelatedData");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InputComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(Requirement != null) dest.Requirement = (Hl7.Fhir.Model.DataRequirement)Requirement.DeepCopy();
        if(RelatedDataElement != null) dest.RelatedDataElement = (Hl7.Fhir.Model.Id)RelatedDataElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InputComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InputComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(Requirement, otherT.Requirement)) return false;
        if( !DeepComparable.Matches(RelatedDataElement, otherT.RelatedDataElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InputComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(Requirement, otherT.Requirement)) return false;
        if( !DeepComparable.IsExactly(RelatedDataElement, otherT.RelatedDataElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TitleElement != null) yield return TitleElement;
          if (Requirement != null) yield return Requirement;
          if (RelatedDataElement != null) yield return RelatedDataElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (Requirement != null) yield return new ElementValue("requirement", Requirement);
          if (RelatedDataElement != null) yield return new ElementValue("relatedData", RelatedDataElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "requirement":
            value = Requirement;
            return Requirement is not null;
          case "relatedData":
            value = RelatedDataElement;
            return RelatedDataElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (Requirement is not null) yield return new KeyValuePair<string,object>("requirement",Requirement);
        if (RelatedDataElement is not null) yield return new KeyValuePair<string,object>("relatedData",RelatedDataElement);
      }

    }

    /// <summary>
    /// Output data definition
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestOrchestration#Output", IsNestedType=true)]
    [BackboneType("RequestOrchestration.action.output")]
    public partial class OutputComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestOrchestration#Output"; } }

      /// <summary>
      /// User-visible title
      /// </summary>
      [FhirElement("title", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// User-visible title
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// What data is provided
      /// </summary>
      [FhirElement("requirement", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.DataRequirement Requirement
      {
        get { return _Requirement; }
        set { _Requirement = value; OnPropertyChanged("Requirement"); }
      }

      private Hl7.Fhir.Model.DataRequirement _Requirement;

      /// <summary>
      /// What data is provided
      /// </summary>
      [FhirElement("relatedData", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RelatedDataElement
      {
        get { return _RelatedDataElement; }
        set { _RelatedDataElement = value; OnPropertyChanged("RelatedDataElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RelatedDataElement;

      /// <summary>
      /// What data is provided
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RelatedData
      {
        get { return RelatedDataElement != null ? RelatedDataElement.Value : null; }
        set
        {
          if (value == null)
            RelatedDataElement = null;
          else
            RelatedDataElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("RelatedData");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OutputComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(Requirement != null) dest.Requirement = (Hl7.Fhir.Model.DataRequirement)Requirement.DeepCopy();
        if(RelatedDataElement != null) dest.RelatedDataElement = (Hl7.Fhir.Model.FhirString)RelatedDataElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OutputComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OutputComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(Requirement, otherT.Requirement)) return false;
        if( !DeepComparable.Matches(RelatedDataElement, otherT.RelatedDataElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OutputComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(Requirement, otherT.Requirement)) return false;
        if( !DeepComparable.IsExactly(RelatedDataElement, otherT.RelatedDataElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TitleElement != null) yield return TitleElement;
          if (Requirement != null) yield return Requirement;
          if (RelatedDataElement != null) yield return RelatedDataElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (Requirement != null) yield return new ElementValue("requirement", Requirement);
          if (RelatedDataElement != null) yield return new ElementValue("relatedData", RelatedDataElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "requirement":
            value = Requirement;
            return Requirement is not null;
          case "relatedData":
            value = RelatedDataElement;
            return RelatedDataElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (Requirement is not null) yield return new KeyValuePair<string,object>("requirement",Requirement);
        if (RelatedDataElement is not null) yield return new KeyValuePair<string,object>("relatedData",RelatedDataElement);
      }

    }

    /// <summary>
    /// Relationship to another action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestOrchestration#RelatedAction", IsNestedType=true)]
    [BackboneType("RequestOrchestration.action.relatedAction")]
    public partial class RelatedActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestOrchestration#RelatedAction"; } }

      /// <summary>
      /// What action this is related to
      /// </summary>
      [FhirElement("targetId", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id TargetIdElement
      {
        get { return _TargetIdElement; }
        set { _TargetIdElement = value; OnPropertyChanged("TargetIdElement"); }
      }

      private Hl7.Fhir.Model.Id _TargetIdElement;

      /// <summary>
      /// What action this is related to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string TargetId
      {
        get { return TargetIdElement != null ? TargetIdElement.Value : null; }
        set
        {
          if (value == null)
            TargetIdElement = null;
          else
            TargetIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("TargetId");
        }
      }

      /// <summary>
      /// before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
      /// </summary>
      [FhirElement("relationship", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionRelationshipType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionRelationshipType> RelationshipElement
      {
        get { return _RelationshipElement; }
        set { _RelationshipElement = value; OnPropertyChanged("RelationshipElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionRelationshipType> _RelationshipElement;

      /// <summary>
      /// before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionRelationshipType? Relationship
      {
        get { return RelationshipElement != null ? RelationshipElement.Value : null; }
        set
        {
          if (value == null)
            RelationshipElement = null;
          else
            RelationshipElement = new Code<Hl7.Fhir.Model.ActionRelationshipType>(value);
          OnPropertyChanged("Relationship");
        }
      }

      /// <summary>
      /// before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
      /// </summary>
      [FhirElement("endRelationship", Order=60)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionRelationshipType")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionRelationshipType> EndRelationshipElement
      {
        get { return _EndRelationshipElement; }
        set { _EndRelationshipElement = value; OnPropertyChanged("EndRelationshipElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionRelationshipType> _EndRelationshipElement;

      /// <summary>
      /// before | before-start | before-end | concurrent | concurrent-with-start | concurrent-with-end | after | after-start | after-end
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionRelationshipType? EndRelationship
      {
        get { return EndRelationshipElement != null ? EndRelationshipElement.Value : null; }
        set
        {
          if (value == null)
            EndRelationshipElement = null;
          else
            EndRelationshipElement = new Code<Hl7.Fhir.Model.ActionRelationshipType>(value);
          OnPropertyChanged("EndRelationship");
        }
      }

      /// <summary>
      /// Time offset for the relationship
      /// </summary>
      [FhirElement("offset", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Offset
      {
        get { return _Offset; }
        set { _Offset = value; OnPropertyChanged("Offset"); }
      }

      private Hl7.Fhir.Model.DataType _Offset;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatedActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TargetIdElement != null) dest.TargetIdElement = (Hl7.Fhir.Model.Id)TargetIdElement.DeepCopy();
        if(RelationshipElement != null) dest.RelationshipElement = (Code<Hl7.Fhir.Model.ActionRelationshipType>)RelationshipElement.DeepCopy();
        if(EndRelationshipElement != null) dest.EndRelationshipElement = (Code<Hl7.Fhir.Model.ActionRelationshipType>)EndRelationshipElement.DeepCopy();
        if(Offset != null) dest.Offset = (Hl7.Fhir.Model.DataType)Offset.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatedActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatedActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TargetIdElement, otherT.TargetIdElement)) return false;
        if( !DeepComparable.Matches(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.Matches(EndRelationshipElement, otherT.EndRelationshipElement)) return false;
        if( !DeepComparable.Matches(Offset, otherT.Offset)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatedActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TargetIdElement, otherT.TargetIdElement)) return false;
        if( !DeepComparable.IsExactly(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.IsExactly(EndRelationshipElement, otherT.EndRelationshipElement)) return false;
        if( !DeepComparable.IsExactly(Offset, otherT.Offset)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TargetIdElement != null) yield return TargetIdElement;
          if (RelationshipElement != null) yield return RelationshipElement;
          if (EndRelationshipElement != null) yield return EndRelationshipElement;
          if (Offset != null) yield return Offset;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TargetIdElement != null) yield return new ElementValue("targetId", TargetIdElement);
          if (RelationshipElement != null) yield return new ElementValue("relationship", RelationshipElement);
          if (EndRelationshipElement != null) yield return new ElementValue("endRelationship", EndRelationshipElement);
          if (Offset != null) yield return new ElementValue("offset", Offset);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "targetId":
            value = TargetIdElement;
            return TargetIdElement is not null;
          case "relationship":
            value = RelationshipElement;
            return RelationshipElement is not null;
          case "endRelationship":
            value = EndRelationshipElement;
            return EndRelationshipElement is not null;
          case "offset":
            value = Offset;
            return Offset is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TargetIdElement is not null) yield return new KeyValuePair<string,object>("targetId",TargetIdElement);
        if (RelationshipElement is not null) yield return new KeyValuePair<string,object>("relationship",RelationshipElement);
        if (EndRelationshipElement is not null) yield return new KeyValuePair<string,object>("endRelationship",EndRelationshipElement);
        if (Offset is not null) yield return new KeyValuePair<string,object>("offset",Offset);
      }

    }

    /// <summary>
    /// Who should perform the action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestOrchestration#Participant", IsNestedType=true)]
    [BackboneType("RequestOrchestration.action.participant")]
    public partial class ParticipantComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestOrchestration#Participant"; } }

      /// <summary>
      /// careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
      /// </summary>
      [FhirElement("type", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActivityParticipantType")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionParticipantType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionParticipantType> _TypeElement;

      /// <summary>
      /// careteam | device | group | healthcareservice | location | organization | patient | practitioner | practitionerrole | relatedperson
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionParticipantType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.ActionParticipantType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// Who or what can participate
      /// </summary>
      [FhirElement("typeCanonical", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical TypeCanonicalElement
      {
        get { return _TypeCanonicalElement; }
        set { _TypeCanonicalElement = value; OnPropertyChanged("TypeCanonicalElement"); }
      }

      private Hl7.Fhir.Model.Canonical _TypeCanonicalElement;

      /// <summary>
      /// Who or what can participate
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string TypeCanonical
      {
        get { return TypeCanonicalElement != null ? TypeCanonicalElement.Value : null; }
        set
        {
          if (value == null)
            TypeCanonicalElement = null;
          else
            TypeCanonicalElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("TypeCanonical");
        }
      }

      /// <summary>
      /// Who or what can participate
      /// </summary>
      [FhirElement("typeReference", Order=60)]
      [CLSCompliant(false)]
      [References("CareTeam","Device","DeviceDefinition","Endpoint","Group","HealthcareService","Location","Organization","Patient","Practitioner","PractitionerRole","RelatedPerson")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference TypeReference
      {
        get { return _TypeReference; }
        set { _TypeReference = value; OnPropertyChanged("TypeReference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _TypeReference;

      /// <summary>
      /// E.g. Nurse, Surgeon, Parent, etc
      /// </summary>
      [FhirElement("role", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// E.g. Author, Reviewer, Witness, etc
      /// </summary>
      [FhirElement("function", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Function
      {
        get { return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Function;

      /// <summary>
      /// Who/what is participating?
      /// </summary>
      [FhirElement("actor", Order=90, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("CareTeam","Device","DeviceDefinition","Endpoint","Group","HealthcareService","Location","Organization","Patient","Practitioner","PractitionerRole","RelatedPerson")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Canonical),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.DataType _Actor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParticipantComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.ActionParticipantType>)TypeElement.DeepCopy();
        if(TypeCanonicalElement != null) dest.TypeCanonicalElement = (Hl7.Fhir.Model.Canonical)TypeCanonicalElement.DeepCopy();
        if(TypeReference != null) dest.TypeReference = (Hl7.Fhir.Model.ResourceReference)TypeReference.DeepCopy();
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(Function != null) dest.Function = (Hl7.Fhir.Model.CodeableConcept)Function.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.DataType)Actor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParticipantComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(TypeCanonicalElement, otherT.TypeCanonicalElement)) return false;
        if( !DeepComparable.Matches(TypeReference, otherT.TypeReference)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(TypeCanonicalElement, otherT.TypeCanonicalElement)) return false;
        if( !DeepComparable.IsExactly(TypeReference, otherT.TypeReference)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TypeElement != null) yield return TypeElement;
          if (TypeCanonicalElement != null) yield return TypeCanonicalElement;
          if (TypeReference != null) yield return TypeReference;
          if (Role != null) yield return Role;
          if (Function != null) yield return Function;
          if (Actor != null) yield return Actor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (TypeCanonicalElement != null) yield return new ElementValue("typeCanonical", TypeCanonicalElement);
          if (TypeReference != null) yield return new ElementValue("typeReference", TypeReference);
          if (Role != null) yield return new ElementValue("role", Role);
          if (Function != null) yield return new ElementValue("function", Function);
          if (Actor != null) yield return new ElementValue("actor", Actor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "typeCanonical":
            value = TypeCanonicalElement;
            return TypeCanonicalElement is not null;
          case "typeReference":
            value = TypeReference;
            return TypeReference is not null;
          case "role":
            value = Role;
            return Role is not null;
          case "function":
            value = Function;
            return Function is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (TypeCanonicalElement is not null) yield return new KeyValuePair<string,object>("typeCanonical",TypeCanonicalElement);
        if (TypeReference is not null) yield return new KeyValuePair<string,object>("typeReference",TypeReference);
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Function is not null) yield return new KeyValuePair<string,object>("function",Function);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
      }

    }

    /// <summary>
    /// Dynamic aspects of the definition
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestOrchestration#DynamicValue", IsNestedType=true)]
    [BackboneType("RequestOrchestration.action.dynamicValue")]
    public partial class DynamicValueComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestOrchestration#DynamicValue"; } }

      /// <summary>
      /// The path to the element to be set dynamically
      /// </summary>
      [FhirElement("path", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PathElement
      {
        get { return _PathElement; }
        set { _PathElement = value; OnPropertyChanged("PathElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PathElement;

      /// <summary>
      /// The path to the element to be set dynamically
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Path
      {
        get { return PathElement != null ? PathElement.Value : null; }
        set
        {
          if (value == null)
            PathElement = null;
          else
            PathElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Path");
        }
      }

      /// <summary>
      /// An expression that provides the dynamic value for the customization
      /// </summary>
      [FhirElement("expression", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Expression Expression
      {
        get { return _Expression; }
        set { _Expression = value; OnPropertyChanged("Expression"); }
      }

      private Hl7.Fhir.Model.Expression _Expression;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DynamicValueComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PathElement != null) dest.PathElement = (Hl7.Fhir.Model.FhirString)PathElement.DeepCopy();
        if(Expression != null) dest.Expression = (Hl7.Fhir.Model.Expression)Expression.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DynamicValueComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DynamicValueComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.Matches(Expression, otherT.Expression)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DynamicValueComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.IsExactly(Expression, otherT.Expression)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PathElement != null) yield return PathElement;
          if (Expression != null) yield return Expression;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PathElement != null) yield return new ElementValue("path", PathElement);
          if (Expression != null) yield return new ElementValue("expression", Expression);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "path":
            value = PathElement;
            return PathElement is not null;
          case "expression":
            value = Expression;
            return Expression is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (PathElement is not null) yield return new KeyValuePair<string,object>("path",PathElement);
        if (Expression is not null) yield return new KeyValuePair<string,object>("expression",Expression);
      }

    }

    /// <summary>
    /// Business identifier
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [FhirElement("instantiatesCanonical", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> InstantiatesCanonicalElement
    {
      get { if(_InstantiatesCanonicalElement==null) _InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesCanonicalElement; }
      set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _InstantiatesCanonicalElement;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesCanonical
    {
      get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesCanonicalElement = null;
        else
          InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("InstantiatesCanonical");
      }
    }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [FhirElement("instantiatesUri", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirUri> InstantiatesUriElement
    {
      get { if(_InstantiatesUriElement==null) _InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _InstantiatesUriElement; }
      set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
    }

    private List<Hl7.Fhir.Model.FhirUri> _InstantiatesUriElement;

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesUri
    {
      get { return InstantiatesUriElement != null ? InstantiatesUriElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesUriElement = null;
        else
          InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
        OnPropertyChanged("InstantiatesUri");
      }
    }

    /// <summary>
    /// Fulfills plan, proposal, or order
    /// </summary>
    [FhirElement("basedOn", Order=120)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Request(s) replaced by this request
    /// </summary>
    [FhirElement("replaces", Order=130)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Replaces
    {
      get { if(_Replaces==null) _Replaces = new List<Hl7.Fhir.Model.ResourceReference>(); return _Replaces; }
      set { _Replaces = value; OnPropertyChanged("Replaces"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Replaces;

    /// <summary>
    /// Composite request this is part of
    /// </summary>
    [FhirElement("groupIdentifier", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier GroupIdentifier
    {
      get { return _GroupIdentifier; }
      set { _GroupIdentifier = value; OnPropertyChanged("GroupIdentifier"); }
    }

    private Hl7.Fhir.Model.Identifier _GroupIdentifier;

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestStatus> _StatusElement;

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.RequestStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [FhirElement("intent", InSummary=true, IsModifier=true, Order=160, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestIntent")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestIntent> _IntentElement;

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.RequestIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [FhirElement("priority", InSummary=true, Order=170, FiveWs="FiveWs.grade")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestPriority")]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestPriority> PriorityElement
    {
      get { return _PriorityElement; }
      set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestPriority> _PriorityElement;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestPriority? Priority
    {
      get { return PriorityElement != null ? PriorityElement.Value : null; }
      set
      {
        if (value == null)
          PriorityElement = null;
        else
          PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(value);
        OnPropertyChanged("Priority");
      }
    }

    /// <summary>
    /// What's being requested/ordered
    /// </summary>
    [FhirElement("code", InSummary=true, Order=180, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Who the request orchestration is about
    /// </summary>
    [FhirElement("subject", Order=190, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("CareTeam","Device","Group","HealthcareService","Location","Organization","Patient","Practitioner","PractitionerRole","RelatedPerson")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Created as part of
    /// </summary>
    [FhirElement("encounter", Order=200, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// When the request orchestration was authored
    /// </summary>
    [FhirElement("authoredOn", Order=210, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime AuthoredOnElement
    {
      get { return _AuthoredOnElement; }
      set { _AuthoredOnElement = value; OnPropertyChanged("AuthoredOnElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _AuthoredOnElement;

    /// <summary>
    /// When the request orchestration was authored
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string AuthoredOn
    {
      get { return AuthoredOnElement != null ? AuthoredOnElement.Value : null; }
      set
      {
        if (value == null)
          AuthoredOnElement = null;
        else
          AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("AuthoredOn");
      }
    }

    /// <summary>
    /// Device or practitioner that authored the request orchestration
    /// </summary>
    [FhirElement("author", Order=220, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Device","Practitioner","PractitionerRole")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Author
    {
      get { return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Author;

    /// <summary>
    /// Why the request orchestration is needed
    /// </summary>
    [FhirElement("reason", Order=230, FiveWs="FiveWs.why[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Reason
    {
      get { if(_Reason==null) _Reason = new List<Hl7.Fhir.Model.CodeableReference>(); return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Reason;

    /// <summary>
    /// What goals
    /// </summary>
    [FhirElement("goal", Order=240, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Goal")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Goal
    {
      get { if(_Goal==null) _Goal = new List<Hl7.Fhir.Model.ResourceReference>(); return _Goal; }
      set { _Goal = value; OnPropertyChanged("Goal"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Goal;

    /// <summary>
    /// Additional notes about the response
    /// </summary>
    [FhirElement("note", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Proposed actions, if any
    /// </summary>
    [FhirElement("action", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent> Action
    {
      get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent>(); return _Action; }
      set { _Action = value; OnPropertyChanged("Action"); }
    }

    private List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent> _Action;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as RequestOrchestration;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesCanonicalElement.DeepCopy());
      if(InstantiatesUriElement != null) dest.InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(InstantiatesUriElement.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Replaces != null) dest.Replaces = new List<Hl7.Fhir.Model.ResourceReference>(Replaces.DeepCopy());
      if(GroupIdentifier != null) dest.GroupIdentifier = (Hl7.Fhir.Model.Identifier)GroupIdentifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.RequestStatus>)StatusElement.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.RequestIntent>)IntentElement.DeepCopy();
      if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.RequestPriority>)PriorityElement.DeepCopy();
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(AuthoredOnElement != null) dest.AuthoredOnElement = (Hl7.Fhir.Model.FhirDateTime)AuthoredOnElement.DeepCopy();
      if(Author != null) dest.Author = (Hl7.Fhir.Model.ResourceReference)Author.DeepCopy();
      if(Reason != null) dest.Reason = new List<Hl7.Fhir.Model.CodeableReference>(Reason.DeepCopy());
      if(Goal != null) dest.Goal = new List<Hl7.Fhir.Model.ResourceReference>(Goal.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Action != null) dest.Action = new List<Hl7.Fhir.Model.RequestOrchestration.ActionComponent>(Action.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new RequestOrchestration());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as RequestOrchestration;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.Matches(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(Goal, otherT.Goal)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Action, otherT.Action)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as RequestOrchestration;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.IsExactly(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(Goal, otherT.Goal)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        foreach (var elem in Replaces) { if (elem != null) yield return elem; }
        if (GroupIdentifier != null) yield return GroupIdentifier;
        if (StatusElement != null) yield return StatusElement;
        if (IntentElement != null) yield return IntentElement;
        if (PriorityElement != null) yield return PriorityElement;
        if (Code != null) yield return Code;
        if (Subject != null) yield return Subject;
        if (Encounter != null) yield return Encounter;
        if (AuthoredOnElement != null) yield return AuthoredOnElement;
        if (Author != null) yield return Author;
        foreach (var elem in Reason) { if (elem != null) yield return elem; }
        foreach (var elem in Goal) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Action) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return new ElementValue("instantiatesCanonical", elem); }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return new ElementValue("instantiatesUri", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        foreach (var elem in Replaces) { if (elem != null) yield return new ElementValue("replaces", elem); }
        if (GroupIdentifier != null) yield return new ElementValue("groupIdentifier", GroupIdentifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        if (Code != null) yield return new ElementValue("code", Code);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (AuthoredOnElement != null) yield return new ElementValue("authoredOn", AuthoredOnElement);
        if (Author != null) yield return new ElementValue("author", Author);
        foreach (var elem in Reason) { if (elem != null) yield return new ElementValue("reason", elem); }
        foreach (var elem in Goal) { if (elem != null) yield return new ElementValue("goal", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "instantiatesCanonical":
          value = InstantiatesCanonicalElement;
          return InstantiatesCanonicalElement?.Any() == true;
        case "instantiatesUri":
          value = InstantiatesUriElement;
          return InstantiatesUriElement?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "replaces":
          value = Replaces;
          return Replaces?.Any() == true;
        case "groupIdentifier":
          value = GroupIdentifier;
          return GroupIdentifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "priority":
          value = PriorityElement;
          return PriorityElement is not null;
        case "code":
          value = Code;
          return Code is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "authoredOn":
          value = AuthoredOnElement;
          return AuthoredOnElement is not null;
        case "author":
          value = Author;
          return Author is not null;
        case "reason":
          value = Reason;
          return Reason?.Any() == true;
        case "goal":
          value = Goal;
          return Goal?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "action":
          value = Action;
          return Action?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (InstantiatesCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
      if (InstantiatesUriElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (Replaces?.Any() == true) yield return new KeyValuePair<string,object>("replaces",Replaces);
      if (GroupIdentifier is not null) yield return new KeyValuePair<string,object>("groupIdentifier",GroupIdentifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (AuthoredOnElement is not null) yield return new KeyValuePair<string,object>("authoredOn",AuthoredOnElement);
      if (Author is not null) yield return new KeyValuePair<string,object>("author",Author);
      if (Reason?.Any() == true) yield return new KeyValuePair<string,object>("reason",Reason);
      if (Goal?.Any() == true) yield return new KeyValuePair<string,object>("goal",Goal);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
    }

  }

}

// end of file

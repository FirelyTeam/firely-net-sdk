// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A functional description of an inventory item used in inventory and supply-related workflows
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("InventoryItem","http://hl7.org/fhir/StructureDefinition/InventoryItem", IsResource=true)]
  public partial class InventoryItem : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "InventoryItem"; } }

    /// <summary>
    /// InventoryItem Status Codes
    /// (url: http://hl7.org/fhir/ValueSet/inventoryitem-status)
    /// (system: http://hl7.org/fhir/inventoryitem-status)
    /// </summary>
    [FhirEnumeration("InventoryItemStatusCodes", "http://hl7.org/fhir/ValueSet/inventoryitem-status", "http://hl7.org/fhir/inventoryitem-status")]
    public enum InventoryItemStatusCodes
    {
      /// <summary>
      /// The item is active and can be referenced.
      /// (system: http://hl7.org/fhir/inventoryitem-status)
      /// </summary>
      [EnumLiteral("active"), Description("Active")]
      Active,
      /// <summary>
      /// The item is presently inactive - there may be references to it but the item is not expected to be used.
      /// (system: http://hl7.org/fhir/inventoryitem-status)
      /// </summary>
      [EnumLiteral("inactive"), Description("Inactive")]
      Inactive,
      /// <summary>
      /// The item record was entered in error.
      /// (system: http://hl7.org/fhir/inventoryitem-status)
      /// </summary>
      [EnumLiteral("entered-in-error"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// The item status has not been determined.
      /// (system: http://hl7.org/fhir/inventoryitem-status)
      /// </summary>
      [EnumLiteral("unknown"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// The item name(s) - the brand name, or common name, functional name, generic name or others
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("InventoryItem#Name", IsNestedType=true)]
    [BackboneType("InventoryItem.name")]
    public partial class NameComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InventoryItem#Name"; } }

      /// <summary>
      /// The type of name e.g. 'brand-name', 'functional-name', 'common-name'
      /// </summary>
      [FhirElement("nameType", InSummary=true, Order=40)]
      [Binding("NameType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding NameType
      {
        get { return _NameType; }
        set { _NameType = value; OnPropertyChanged("NameType"); }
      }

      private Hl7.Fhir.Model.Coding _NameType;

      /// <summary>
      /// The language used to express the item name
      /// </summary>
      [FhirElement("language", InSummary=true, Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("NameLanguage")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CommonLanguages> LanguageElement
      {
        get { return _LanguageElement; }
        set { _LanguageElement = value; OnPropertyChanged("LanguageElement"); }
      }

      private Code<Hl7.Fhir.Model.CommonLanguages> _LanguageElement;

      /// <summary>
      /// The language used to express the item name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CommonLanguages? Language
      {
        get { return LanguageElement != null ? LanguageElement.Value : null; }
        set
        {
          if (value == null)
            LanguageElement = null;
          else
            LanguageElement = new Code<Hl7.Fhir.Model.CommonLanguages>(value);
          OnPropertyChanged("Language");
        }
      }

      /// <summary>
      /// The name or designation of the item
      /// </summary>
      [FhirElement("name", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// The name or designation of the item
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NameComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameType != null) dest.NameType = (Hl7.Fhir.Model.Coding)NameType.DeepCopy();
        if(LanguageElement != null) dest.LanguageElement = (Code<Hl7.Fhir.Model.CommonLanguages>)LanguageElement.DeepCopy();
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NameComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameType, otherT.NameType)) return false;
        if( !DeepComparable.Matches(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameType, otherT.NameType)) return false;
        if( !DeepComparable.IsExactly(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameType != null) yield return NameType;
          if (LanguageElement != null) yield return LanguageElement;
          if (NameElement != null) yield return NameElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameType != null) yield return new ElementValue("nameType", NameType);
          if (LanguageElement != null) yield return new ElementValue("language", LanguageElement);
          if (NameElement != null) yield return new ElementValue("name", NameElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "nameType":
            value = NameType;
            return NameType is not null;
          case "language":
            value = LanguageElement;
            return LanguageElement is not null;
          case "name":
            value = NameElement;
            return NameElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameType is not null) yield return new KeyValuePair<string,object>("nameType",NameType);
        if (LanguageElement is not null) yield return new KeyValuePair<string,object>("language",LanguageElement);
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      }

    }

    /// <summary>
    /// Organization(s) responsible for the product
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("InventoryItem#ResponsibleOrganization", IsNestedType=true)]
    [BackboneType("InventoryItem.responsibleOrganization")]
    public partial class ResponsibleOrganizationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InventoryItem#ResponsibleOrganization"; } }

      /// <summary>
      /// The role of the organization e.g. manufacturer, distributor, or other
      /// </summary>
      [FhirElement("role", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// An organization that is associated with the item
      /// </summary>
      [FhirElement("organization", Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Organization
      {
        get { return _Organization; }
        set { _Organization = value; OnPropertyChanged("Organization"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Organization;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ResponsibleOrganizationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(Organization != null) dest.Organization = (Hl7.Fhir.Model.ResourceReference)Organization.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ResponsibleOrganizationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ResponsibleOrganizationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Organization, otherT.Organization)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ResponsibleOrganizationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Organization, otherT.Organization)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Role != null) yield return Role;
          if (Organization != null) yield return Organization;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Role != null) yield return new ElementValue("role", Role);
          if (Organization != null) yield return new ElementValue("organization", Organization);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "role":
            value = Role;
            return Role is not null;
          case "organization":
            value = Organization;
            return Organization is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Organization is not null) yield return new KeyValuePair<string,object>("organization",Organization);
      }

    }

    /// <summary>
    /// Descriptive characteristics of the item
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("InventoryItem#Description", IsNestedType=true)]
    [BackboneType("InventoryItem.description")]
    public partial class DescriptionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InventoryItem#Description"; } }

      /// <summary>
      /// The language that is used in the item description
      /// </summary>
      [FhirElement("language", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ItemDescriptionLanguage")]
      [DataMember]
      public Code<Hl7.Fhir.Model.CommonLanguages> LanguageElement
      {
        get { return _LanguageElement; }
        set { _LanguageElement = value; OnPropertyChanged("LanguageElement"); }
      }

      private Code<Hl7.Fhir.Model.CommonLanguages> _LanguageElement;

      /// <summary>
      /// The language that is used in the item description
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CommonLanguages? Language
      {
        get { return LanguageElement != null ? LanguageElement.Value : null; }
        set
        {
          if (value == null)
            LanguageElement = null;
          else
            LanguageElement = new Code<Hl7.Fhir.Model.CommonLanguages>(value);
          OnPropertyChanged("Language");
        }
      }

      /// <summary>
      /// Textual description of the item
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Textual description of the item
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DescriptionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LanguageElement != null) dest.LanguageElement = (Code<Hl7.Fhir.Model.CommonLanguages>)LanguageElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DescriptionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DescriptionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DescriptionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LanguageElement != null) yield return LanguageElement;
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LanguageElement != null) yield return new ElementValue("language", LanguageElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "language":
            value = LanguageElement;
            return LanguageElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LanguageElement is not null) yield return new KeyValuePair<string,object>("language",LanguageElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// Association with other items or products
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("InventoryItem#Association", IsNestedType=true)]
    [BackboneType("InventoryItem.association")]
    public partial class AssociationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InventoryItem#Association"; } }

      /// <summary>
      /// The type of association between the device and the other item
      /// </summary>
      [FhirElement("associationType", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept AssociationType
      {
        get { return _AssociationType; }
        set { _AssociationType = value; OnPropertyChanged("AssociationType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _AssociationType;

      /// <summary>
      /// The related item or product
      /// </summary>
      [FhirElement("relatedItem", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("InventoryItem","Medication","MedicationKnowledge","Device","DeviceDefinition","NutritionProduct","BiologicallyDerivedProduct")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference RelatedItem
      {
        get { return _RelatedItem; }
        set { _RelatedItem = value; OnPropertyChanged("RelatedItem"); }
      }

      private Hl7.Fhir.Model.ResourceReference _RelatedItem;

      /// <summary>
      /// The quantity of the product in this product
      /// </summary>
      [FhirElement("quantity", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Ratio Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Ratio _Quantity;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AssociationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(AssociationType != null) dest.AssociationType = (Hl7.Fhir.Model.CodeableConcept)AssociationType.DeepCopy();
        if(RelatedItem != null) dest.RelatedItem = (Hl7.Fhir.Model.ResourceReference)RelatedItem.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Ratio)Quantity.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AssociationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AssociationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(AssociationType, otherT.AssociationType)) return false;
        if( !DeepComparable.Matches(RelatedItem, otherT.RelatedItem)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AssociationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(AssociationType, otherT.AssociationType)) return false;
        if( !DeepComparable.IsExactly(RelatedItem, otherT.RelatedItem)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (AssociationType != null) yield return AssociationType;
          if (RelatedItem != null) yield return RelatedItem;
          if (Quantity != null) yield return Quantity;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (AssociationType != null) yield return new ElementValue("associationType", AssociationType);
          if (RelatedItem != null) yield return new ElementValue("relatedItem", RelatedItem);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "associationType":
            value = AssociationType;
            return AssociationType is not null;
          case "relatedItem":
            value = RelatedItem;
            return RelatedItem is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (AssociationType is not null) yield return new KeyValuePair<string,object>("associationType",AssociationType);
        if (RelatedItem is not null) yield return new KeyValuePair<string,object>("relatedItem",RelatedItem);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
      }

    }

    /// <summary>
    /// Characteristic of the item
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("InventoryItem#Characteristic", IsNestedType=true)]
    [BackboneType("InventoryItem.characteristic")]
    public partial class CharacteristicComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InventoryItem#Characteristic"; } }

      /// <summary>
      /// The characteristic that is being defined
      /// </summary>
      [FhirElement("characteristicType", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept CharacteristicType
      {
        get { return _CharacteristicType; }
        set { _CharacteristicType = value; OnPropertyChanged("CharacteristicType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _CharacteristicType;

      /// <summary>
      /// The value of the attribute
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.FhirDecimal),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.FhirUrl),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.Annotation),typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.CodeableConcept))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CharacteristicComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CharacteristicType != null) dest.CharacteristicType = (Hl7.Fhir.Model.CodeableConcept)CharacteristicType.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CharacteristicComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CharacteristicComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CharacteristicType, otherT.CharacteristicType)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CharacteristicComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CharacteristicType, otherT.CharacteristicType)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CharacteristicType != null) yield return CharacteristicType;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CharacteristicType != null) yield return new ElementValue("characteristicType", CharacteristicType);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "characteristicType":
            value = CharacteristicType;
            return CharacteristicType is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CharacteristicType is not null) yield return new KeyValuePair<string,object>("characteristicType",CharacteristicType);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Instances or occurrences of the product
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("InventoryItem#Instance", IsNestedType=true)]
    [BackboneType("InventoryItem.instance")]
    public partial class InstanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InventoryItem#Instance"; } }

      /// <summary>
      /// The identifier for the physical instance, typically a serial number
      /// </summary>
      [FhirElement("identifier", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Identifier> Identifier
      {
        get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private List<Hl7.Fhir.Model.Identifier> _Identifier;

      /// <summary>
      /// The lot or batch number of the item
      /// </summary>
      [FhirElement("lotNumber", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LotNumberElement
      {
        get { return _LotNumberElement; }
        set { _LotNumberElement = value; OnPropertyChanged("LotNumberElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LotNumberElement;

      /// <summary>
      /// The lot or batch number of the item
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LotNumber
      {
        get { return LotNumberElement != null ? LotNumberElement.Value : null; }
        set
        {
          if (value == null)
            LotNumberElement = null;
          else
            LotNumberElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("LotNumber");
        }
      }

      /// <summary>
      /// The expiry date or date and time for the product
      /// </summary>
      [FhirElement("expiry", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime ExpiryElement
      {
        get { return _ExpiryElement; }
        set { _ExpiryElement = value; OnPropertyChanged("ExpiryElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _ExpiryElement;

      /// <summary>
      /// The expiry date or date and time for the product
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Expiry
      {
        get { return ExpiryElement != null ? ExpiryElement.Value : null; }
        set
        {
          if (value == null)
            ExpiryElement = null;
          else
            ExpiryElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Expiry");
        }
      }

      /// <summary>
      /// The subject that the item is associated with
      /// </summary>
      [FhirElement("subject", Order=70)]
      [CLSCompliant(false)]
      [References("Patient","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Subject
      {
        get { return _Subject; }
        set { _Subject = value; OnPropertyChanged("Subject"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Subject;

      /// <summary>
      /// The location that the item is associated with
      /// </summary>
      [FhirElement("location", Order=80)]
      [CLSCompliant(false)]
      [References("Location")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Location;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InstanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
        if(LotNumberElement != null) dest.LotNumberElement = (Hl7.Fhir.Model.FhirString)LotNumberElement.DeepCopy();
        if(ExpiryElement != null) dest.ExpiryElement = (Hl7.Fhir.Model.FhirDateTime)ExpiryElement.DeepCopy();
        if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InstanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InstanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(LotNumberElement, otherT.LotNumberElement)) return false;
        if( !DeepComparable.Matches(ExpiryElement, otherT.ExpiryElement)) return false;
        if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InstanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(LotNumberElement, otherT.LotNumberElement)) return false;
        if( !DeepComparable.IsExactly(ExpiryElement, otherT.ExpiryElement)) return false;
        if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Identifier) { if (elem != null) yield return elem; }
          if (LotNumberElement != null) yield return LotNumberElement;
          if (ExpiryElement != null) yield return ExpiryElement;
          if (Subject != null) yield return Subject;
          if (Location != null) yield return Location;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
          if (LotNumberElement != null) yield return new ElementValue("lotNumber", LotNumberElement);
          if (ExpiryElement != null) yield return new ElementValue("expiry", ExpiryElement);
          if (Subject != null) yield return new ElementValue("subject", Subject);
          if (Location != null) yield return new ElementValue("location", Location);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier?.Any() == true;
          case "lotNumber":
            value = LotNumberElement;
            return LotNumberElement is not null;
          case "expiry":
            value = ExpiryElement;
            return ExpiryElement is not null;
          case "subject":
            value = Subject;
            return Subject is not null;
          case "location":
            value = Location;
            return Location is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (LotNumberElement is not null) yield return new KeyValuePair<string,object>("lotNumber",LotNumberElement);
        if (ExpiryElement is not null) yield return new KeyValuePair<string,object>("expiry",ExpiryElement);
        if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      }

    }

    /// <summary>
    /// Business identifier for the inventory item
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// active | inactive | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, Order=100)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("InventoryItemStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.InventoryItem.InventoryItemStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.InventoryItem.InventoryItemStatusCodes> _StatusElement;

    /// <summary>
    /// active | inactive | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.InventoryItem.InventoryItemStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.InventoryItem.InventoryItemStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Category or class of the item
    /// </summary>
    [FhirElement("category", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Code designating the specific type of item
    /// </summary>
    [FhirElement("code", InSummary=true, Order=120)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Code
    {
      get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Code;

    /// <summary>
    /// The item name(s) - the brand name, or common name, functional name, generic name or others
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InventoryItem.NameComponent> Name
    {
      get { if(_Name==null) _Name = new List<Hl7.Fhir.Model.InventoryItem.NameComponent>(); return _Name; }
      set { _Name = value; OnPropertyChanged("Name"); }
    }

    private List<Hl7.Fhir.Model.InventoryItem.NameComponent> _Name;

    /// <summary>
    /// Organization(s) responsible for the product
    /// </summary>
    [FhirElement("responsibleOrganization", Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InventoryItem.ResponsibleOrganizationComponent> ResponsibleOrganization
    {
      get { if(_ResponsibleOrganization==null) _ResponsibleOrganization = new List<Hl7.Fhir.Model.InventoryItem.ResponsibleOrganizationComponent>(); return _ResponsibleOrganization; }
      set { _ResponsibleOrganization = value; OnPropertyChanged("ResponsibleOrganization"); }
    }

    private List<Hl7.Fhir.Model.InventoryItem.ResponsibleOrganizationComponent> _ResponsibleOrganization;

    /// <summary>
    /// Descriptive characteristics of the item
    /// </summary>
    [FhirElement("description", Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.InventoryItem.DescriptionComponent Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.InventoryItem.DescriptionComponent _Description;

    /// <summary>
    /// The usage status like recalled, in use, discarded
    /// </summary>
    [FhirElement("inventoryStatus", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> InventoryStatus
    {
      get { if(_InventoryStatus==null) _InventoryStatus = new List<Hl7.Fhir.Model.CodeableConcept>(); return _InventoryStatus; }
      set { _InventoryStatus = value; OnPropertyChanged("InventoryStatus"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _InventoryStatus;

    /// <summary>
    /// The base unit of measure - the unit in which the product is used or counted
    /// </summary>
    [FhirElement("baseUnit", InSummary=true, Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept BaseUnit
    {
      get { return _BaseUnit; }
      set { _BaseUnit = value; OnPropertyChanged("BaseUnit"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _BaseUnit;

    /// <summary>
    /// Net content or amount present in the item
    /// </summary>
    [FhirElement("netContent", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.Quantity NetContent
    {
      get { return _NetContent; }
      set { _NetContent = value; OnPropertyChanged("NetContent"); }
    }

    private Hl7.Fhir.Model.Quantity _NetContent;

    /// <summary>
    /// Association with other items or products
    /// </summary>
    [FhirElement("association", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InventoryItem.AssociationComponent> Association
    {
      get { if(_Association==null) _Association = new List<Hl7.Fhir.Model.InventoryItem.AssociationComponent>(); return _Association; }
      set { _Association = value; OnPropertyChanged("Association"); }
    }

    private List<Hl7.Fhir.Model.InventoryItem.AssociationComponent> _Association;

    /// <summary>
    /// Characteristic of the item
    /// </summary>
    [FhirElement("characteristic", Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InventoryItem.CharacteristicComponent> Characteristic
    {
      get { if(_Characteristic==null) _Characteristic = new List<Hl7.Fhir.Model.InventoryItem.CharacteristicComponent>(); return _Characteristic; }
      set { _Characteristic = value; OnPropertyChanged("Characteristic"); }
    }

    private List<Hl7.Fhir.Model.InventoryItem.CharacteristicComponent> _Characteristic;

    /// <summary>
    /// Instances or occurrences of the product
    /// </summary>
    [FhirElement("instance", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.InventoryItem.InstanceComponent Instance
    {
      get { return _Instance; }
      set { _Instance = value; OnPropertyChanged("Instance"); }
    }

    private Hl7.Fhir.Model.InventoryItem.InstanceComponent _Instance;

    /// <summary>
    /// Link to a product resource used in clinical workflows
    /// </summary>
    [FhirElement("productReference", Order=220)]
    [CLSCompliant(false)]
    [References("Medication","Device","NutritionProduct","BiologicallyDerivedProduct")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ProductReference
    {
      get { return _ProductReference; }
      set { _ProductReference = value; OnPropertyChanged("ProductReference"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ProductReference;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as InventoryItem;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.InventoryItem.InventoryItemStatusCodes>)StatusElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Code != null) dest.Code = new List<Hl7.Fhir.Model.CodeableConcept>(Code.DeepCopy());
      if(Name != null) dest.Name = new List<Hl7.Fhir.Model.InventoryItem.NameComponent>(Name.DeepCopy());
      if(ResponsibleOrganization != null) dest.ResponsibleOrganization = new List<Hl7.Fhir.Model.InventoryItem.ResponsibleOrganizationComponent>(ResponsibleOrganization.DeepCopy());
      if(Description != null) dest.Description = (Hl7.Fhir.Model.InventoryItem.DescriptionComponent)Description.DeepCopy();
      if(InventoryStatus != null) dest.InventoryStatus = new List<Hl7.Fhir.Model.CodeableConcept>(InventoryStatus.DeepCopy());
      if(BaseUnit != null) dest.BaseUnit = (Hl7.Fhir.Model.CodeableConcept)BaseUnit.DeepCopy();
      if(NetContent != null) dest.NetContent = (Hl7.Fhir.Model.Quantity)NetContent.DeepCopy();
      if(Association != null) dest.Association = new List<Hl7.Fhir.Model.InventoryItem.AssociationComponent>(Association.DeepCopy());
      if(Characteristic != null) dest.Characteristic = new List<Hl7.Fhir.Model.InventoryItem.CharacteristicComponent>(Characteristic.DeepCopy());
      if(Instance != null) dest.Instance = (Hl7.Fhir.Model.InventoryItem.InstanceComponent)Instance.DeepCopy();
      if(ProductReference != null) dest.ProductReference = (Hl7.Fhir.Model.ResourceReference)ProductReference.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new InventoryItem());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as InventoryItem;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(Name, otherT.Name)) return false;
      if( !DeepComparable.Matches(ResponsibleOrganization, otherT.ResponsibleOrganization)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(InventoryStatus, otherT.InventoryStatus)) return false;
      if( !DeepComparable.Matches(BaseUnit, otherT.BaseUnit)) return false;
      if( !DeepComparable.Matches(NetContent, otherT.NetContent)) return false;
      if( !DeepComparable.Matches(Association, otherT.Association)) return false;
      if( !DeepComparable.Matches(Characteristic, otherT.Characteristic)) return false;
      if( !DeepComparable.Matches(Instance, otherT.Instance)) return false;
      if( !DeepComparable.Matches(ProductReference, otherT.ProductReference)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as InventoryItem;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(Name, otherT.Name)) return false;
      if( !DeepComparable.IsExactly(ResponsibleOrganization, otherT.ResponsibleOrganization)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(InventoryStatus, otherT.InventoryStatus)) return false;
      if( !DeepComparable.IsExactly(BaseUnit, otherT.BaseUnit)) return false;
      if( !DeepComparable.IsExactly(NetContent, otherT.NetContent)) return false;
      if( !DeepComparable.IsExactly(Association, otherT.Association)) return false;
      if( !DeepComparable.IsExactly(Characteristic, otherT.Characteristic)) return false;
      if( !DeepComparable.IsExactly(Instance, otherT.Instance)) return false;
      if( !DeepComparable.IsExactly(ProductReference, otherT.ProductReference)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        foreach (var elem in Code) { if (elem != null) yield return elem; }
        foreach (var elem in Name) { if (elem != null) yield return elem; }
        foreach (var elem in ResponsibleOrganization) { if (elem != null) yield return elem; }
        if (Description != null) yield return Description;
        foreach (var elem in InventoryStatus) { if (elem != null) yield return elem; }
        if (BaseUnit != null) yield return BaseUnit;
        if (NetContent != null) yield return NetContent;
        foreach (var elem in Association) { if (elem != null) yield return elem; }
        foreach (var elem in Characteristic) { if (elem != null) yield return elem; }
        if (Instance != null) yield return Instance;
        if (ProductReference != null) yield return ProductReference;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
        foreach (var elem in Name) { if (elem != null) yield return new ElementValue("name", elem); }
        foreach (var elem in ResponsibleOrganization) { if (elem != null) yield return new ElementValue("responsibleOrganization", elem); }
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in InventoryStatus) { if (elem != null) yield return new ElementValue("inventoryStatus", elem); }
        if (BaseUnit != null) yield return new ElementValue("baseUnit", BaseUnit);
        if (NetContent != null) yield return new ElementValue("netContent", NetContent);
        foreach (var elem in Association) { if (elem != null) yield return new ElementValue("association", elem); }
        foreach (var elem in Characteristic) { if (elem != null) yield return new ElementValue("characteristic", elem); }
        if (Instance != null) yield return new ElementValue("instance", Instance);
        if (ProductReference != null) yield return new ElementValue("productReference", ProductReference);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "code":
          value = Code;
          return Code?.Any() == true;
        case "name":
          value = Name;
          return Name?.Any() == true;
        case "responsibleOrganization":
          value = ResponsibleOrganization;
          return ResponsibleOrganization?.Any() == true;
        case "description":
          value = Description;
          return Description is not null;
        case "inventoryStatus":
          value = InventoryStatus;
          return InventoryStatus?.Any() == true;
        case "baseUnit":
          value = BaseUnit;
          return BaseUnit is not null;
        case "netContent":
          value = NetContent;
          return NetContent is not null;
        case "association":
          value = Association;
          return Association?.Any() == true;
        case "characteristic":
          value = Characteristic;
          return Characteristic?.Any() == true;
        case "instance":
          value = Instance;
          return Instance is not null;
        case "productReference":
          value = ProductReference;
          return ProductReference is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
      if (Name?.Any() == true) yield return new KeyValuePair<string,object>("name",Name);
      if (ResponsibleOrganization?.Any() == true) yield return new KeyValuePair<string,object>("responsibleOrganization",ResponsibleOrganization);
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (InventoryStatus?.Any() == true) yield return new KeyValuePair<string,object>("inventoryStatus",InventoryStatus);
      if (BaseUnit is not null) yield return new KeyValuePair<string,object>("baseUnit",BaseUnit);
      if (NetContent is not null) yield return new KeyValuePair<string,object>("netContent",NetContent);
      if (Association?.Any() == true) yield return new KeyValuePair<string,object>("association",Association);
      if (Characteristic?.Any() == true) yield return new KeyValuePair<string,object>("characteristic",Characteristic);
      if (Instance is not null) yield return new KeyValuePair<string,object>("instance",Instance);
      if (ProductReference is not null) yield return new KeyValuePair<string,object>("productReference",ProductReference);
    }

  }

}

// end of file

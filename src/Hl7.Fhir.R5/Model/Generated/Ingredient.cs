// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// An ingredient of a manufactured item or pharmaceutical product
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Ingredient","http://hl7.org/fhir/StructureDefinition/Ingredient", IsResource=true)]
  public partial class Ingredient : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Ingredient"; } }

    /// <summary>
    /// An organization that manufactures this ingredient
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#Manufacturer", IsNestedType=true)]
    public partial class ManufacturerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#Manufacturer"; } }

      /// <summary>
      /// The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role
      /// </summary>
      [FhirElement("role", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.Coding _Role;

      /// <summary>
      /// An organization that manufactures this ingredient
      /// </summary>
      [FhirElement("manufacturer", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Manufacturer
      {
        get { return _Manufacturer; }
        set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Manufacturer;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ManufacturerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Role != null) dest.Role = (Hl7.Fhir.Model.Coding)Role.DeepCopy();
        if(Manufacturer != null) dest.Manufacturer = (Hl7.Fhir.Model.ResourceReference)Manufacturer.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ManufacturerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ManufacturerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ManufacturerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Role != null) yield return Role;
          if (Manufacturer != null) yield return Manufacturer;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Role != null) yield return new ElementValue("role", Role);
          if (Manufacturer != null) yield return new ElementValue("manufacturer", Manufacturer);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "role":
            value = Role;
            return Role is not null;
          case "manufacturer":
            value = Manufacturer;
            return Manufacturer is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Manufacturer is not null) yield return new KeyValuePair<string,object>("manufacturer",Manufacturer);
      }

    }

    /// <summary>
    /// The substance that comprises this ingredient
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#Substance", IsNestedType=true)]
    public partial class SubstanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#Substance"; } }

      /// <summary>
      /// A code or full resource that represents the ingredient substance
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Code;

      /// <summary>
      /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item
      /// </summary>
      [FhirElement("strength", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Ingredient.StrengthComponent> Strength
      {
        get { if(_Strength==null) _Strength = new List<Hl7.Fhir.Model.Ingredient.StrengthComponent>(); return _Strength; }
        set { _Strength = value; OnPropertyChanged("Strength"); }
      }

      private List<Hl7.Fhir.Model.Ingredient.StrengthComponent> _Strength;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SubstanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableReference)Code.DeepCopy();
        if(Strength != null) dest.Strength = new List<Hl7.Fhir.Model.Ingredient.StrengthComponent>(Strength.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SubstanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SubstanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Strength, otherT.Strength)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SubstanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Strength, otherT.Strength)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          foreach (var elem in Strength) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in Strength) { if (elem != null) yield return new ElementValue("strength", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "strength":
            value = Strength;
            return Strength?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Strength?.Any() == true) yield return new KeyValuePair<string,object>("strength",Strength);
      }

    }

    /// <summary>
    /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#Strength", IsNestedType=true)]
    public partial class StrengthComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#Strength"; } }

      /// <summary>
      /// The quantity of substance in the unit of presentation, or in the volume (or mass) of the single pharmaceutical product or manufactured item
      /// </summary>
      [FhirElement("presentation", InSummary=true, Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Presentation
      {
        get { return _Presentation; }
        set { _Presentation = value; OnPropertyChanged("Presentation"); }
      }

      private Hl7.Fhir.Model.DataType _Presentation;

      /// <summary>
      /// A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio
      /// </summary>
      [FhirElement("presentationText", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PresentationTextElement
      {
        get { return _PresentationTextElement; }
        set { _PresentationTextElement = value; OnPropertyChanged("PresentationTextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PresentationTextElement;

      /// <summary>
      /// A textual represention of either the whole of the presentation strength or a part of it - with the rest being in Strength.presentation as a ratio
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string PresentationText
      {
        get { return PresentationTextElement != null ? PresentationTextElement.Value : null; }
        set
        {
          if (value == null)
            PresentationTextElement = null;
          else
            PresentationTextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("PresentationText");
        }
      }

      /// <summary>
      /// The strength per unitary volume (or mass)
      /// </summary>
      [FhirElement("concentration", InSummary=true, Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Concentration
      {
        get { return _Concentration; }
        set { _Concentration = value; OnPropertyChanged("Concentration"); }
      }

      private Hl7.Fhir.Model.DataType _Concentration;

      /// <summary>
      /// A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio
      /// </summary>
      [FhirElement("concentrationText", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ConcentrationTextElement
      {
        get { return _ConcentrationTextElement; }
        set { _ConcentrationTextElement = value; OnPropertyChanged("ConcentrationTextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ConcentrationTextElement;

      /// <summary>
      /// A textual represention of either the whole of the concentration strength or a part of it - with the rest being in Strength.concentration as a ratio
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ConcentrationText
      {
        get { return ConcentrationTextElement != null ? ConcentrationTextElement.Value : null; }
        set
        {
          if (value == null)
            ConcentrationTextElement = null;
          else
            ConcentrationTextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("ConcentrationText");
        }
      }

      /// <summary>
      /// A code that indicates if the strength is, for example, based on the ingredient substance as stated or on the substance base (when the ingredient is a salt)
      /// </summary>
      [FhirElement("basis", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Basis
      {
        get { return _Basis; }
        set { _Basis = value; OnPropertyChanged("Basis"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Basis;

      /// <summary>
      /// For when strength is measured at a particular point or distance
      /// </summary>
      [FhirElement("measurementPoint", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MeasurementPointElement
      {
        get { return _MeasurementPointElement; }
        set { _MeasurementPointElement = value; OnPropertyChanged("MeasurementPointElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MeasurementPointElement;

      /// <summary>
      /// For when strength is measured at a particular point or distance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MeasurementPoint
      {
        get { return MeasurementPointElement != null ? MeasurementPointElement.Value : null; }
        set
        {
          if (value == null)
            MeasurementPointElement = null;
          else
            MeasurementPointElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MeasurementPoint");
        }
      }

      /// <summary>
      /// The country or countries for which the strength range applies
      /// </summary>
      [FhirElement("country", InSummary=true, Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Country
      {
        get { if(_Country==null) _Country = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Country; }
        set { _Country = value; OnPropertyChanged("Country"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Country;

      /// <summary>
      /// Strength expressed in terms of a reference substance
      /// </summary>
      [FhirElement("referenceStrength", InSummary=true, Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent> ReferenceStrength
      {
        get { if(_ReferenceStrength==null) _ReferenceStrength = new List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent>(); return _ReferenceStrength; }
        set { _ReferenceStrength = value; OnPropertyChanged("ReferenceStrength"); }
      }

      private List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent> _ReferenceStrength;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StrengthComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Presentation != null) dest.Presentation = (Hl7.Fhir.Model.DataType)Presentation.DeepCopy();
        if(PresentationTextElement != null) dest.PresentationTextElement = (Hl7.Fhir.Model.FhirString)PresentationTextElement.DeepCopy();
        if(Concentration != null) dest.Concentration = (Hl7.Fhir.Model.DataType)Concentration.DeepCopy();
        if(ConcentrationTextElement != null) dest.ConcentrationTextElement = (Hl7.Fhir.Model.FhirString)ConcentrationTextElement.DeepCopy();
        if(Basis != null) dest.Basis = (Hl7.Fhir.Model.CodeableConcept)Basis.DeepCopy();
        if(MeasurementPointElement != null) dest.MeasurementPointElement = (Hl7.Fhir.Model.FhirString)MeasurementPointElement.DeepCopy();
        if(Country != null) dest.Country = new List<Hl7.Fhir.Model.CodeableConcept>(Country.DeepCopy());
        if(ReferenceStrength != null) dest.ReferenceStrength = new List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent>(ReferenceStrength.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StrengthComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StrengthComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Presentation, otherT.Presentation)) return false;
        if( !DeepComparable.Matches(PresentationTextElement, otherT.PresentationTextElement)) return false;
        if( !DeepComparable.Matches(Concentration, otherT.Concentration)) return false;
        if( !DeepComparable.Matches(ConcentrationTextElement, otherT.ConcentrationTextElement)) return false;
        if( !DeepComparable.Matches(Basis, otherT.Basis)) return false;
        if( !DeepComparable.Matches(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.Matches(Country, otherT.Country)) return false;
        if( !DeepComparable.Matches(ReferenceStrength, otherT.ReferenceStrength)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StrengthComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Presentation, otherT.Presentation)) return false;
        if( !DeepComparable.IsExactly(PresentationTextElement, otherT.PresentationTextElement)) return false;
        if( !DeepComparable.IsExactly(Concentration, otherT.Concentration)) return false;
        if( !DeepComparable.IsExactly(ConcentrationTextElement, otherT.ConcentrationTextElement)) return false;
        if( !DeepComparable.IsExactly(Basis, otherT.Basis)) return false;
        if( !DeepComparable.IsExactly(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.IsExactly(Country, otherT.Country)) return false;
        if( !DeepComparable.IsExactly(ReferenceStrength, otherT.ReferenceStrength)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Presentation != null) yield return Presentation;
          if (PresentationTextElement != null) yield return PresentationTextElement;
          if (Concentration != null) yield return Concentration;
          if (ConcentrationTextElement != null) yield return ConcentrationTextElement;
          if (Basis != null) yield return Basis;
          if (MeasurementPointElement != null) yield return MeasurementPointElement;
          foreach (var elem in Country) { if (elem != null) yield return elem; }
          foreach (var elem in ReferenceStrength) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Presentation != null) yield return new ElementValue("presentation", Presentation);
          if (PresentationTextElement != null) yield return new ElementValue("presentationText", PresentationTextElement);
          if (Concentration != null) yield return new ElementValue("concentration", Concentration);
          if (ConcentrationTextElement != null) yield return new ElementValue("concentrationText", ConcentrationTextElement);
          if (Basis != null) yield return new ElementValue("basis", Basis);
          if (MeasurementPointElement != null) yield return new ElementValue("measurementPoint", MeasurementPointElement);
          foreach (var elem in Country) { if (elem != null) yield return new ElementValue("country", elem); }
          foreach (var elem in ReferenceStrength) { if (elem != null) yield return new ElementValue("referenceStrength", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "presentation":
            value = Presentation;
            return Presentation is not null;
          case "presentationText":
            value = PresentationTextElement;
            return PresentationTextElement is not null;
          case "concentration":
            value = Concentration;
            return Concentration is not null;
          case "concentrationText":
            value = ConcentrationTextElement;
            return ConcentrationTextElement is not null;
          case "basis":
            value = Basis;
            return Basis is not null;
          case "measurementPoint":
            value = MeasurementPointElement;
            return MeasurementPointElement is not null;
          case "country":
            value = Country;
            return Country?.Any() == true;
          case "referenceStrength":
            value = ReferenceStrength;
            return ReferenceStrength?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Presentation is not null) yield return new KeyValuePair<string,object>("presentation",Presentation);
        if (PresentationTextElement is not null) yield return new KeyValuePair<string,object>("presentationText",PresentationTextElement);
        if (Concentration is not null) yield return new KeyValuePair<string,object>("concentration",Concentration);
        if (ConcentrationTextElement is not null) yield return new KeyValuePair<string,object>("concentrationText",ConcentrationTextElement);
        if (Basis is not null) yield return new KeyValuePair<string,object>("basis",Basis);
        if (MeasurementPointElement is not null) yield return new KeyValuePair<string,object>("measurementPoint",MeasurementPointElement);
        if (Country?.Any() == true) yield return new KeyValuePair<string,object>("country",Country);
        if (ReferenceStrength?.Any() == true) yield return new KeyValuePair<string,object>("referenceStrength",ReferenceStrength);
      }

    }

    /// <summary>
    /// Strength expressed in terms of a reference substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#ReferenceStrength", IsNestedType=true)]
    public partial class ReferenceStrengthComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#ReferenceStrength"; } }

      /// <summary>
      /// Relevant reference substance
      /// </summary>
      [FhirElement("substance", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Substance
      {
        get { return _Substance; }
        set { _Substance = value; OnPropertyChanged("Substance"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Substance;

      /// <summary>
      /// Strength expressed in terms of a reference substance
      /// </summary>
      [FhirElement("strength", InSummary=true, Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange),typeof(Hl7.Fhir.Model.Quantity))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Strength
      {
        get { return _Strength; }
        set { _Strength = value; OnPropertyChanged("Strength"); }
      }

      private Hl7.Fhir.Model.DataType _Strength;

      /// <summary>
      /// For when strength is measured at a particular point or distance
      /// </summary>
      [FhirElement("measurementPoint", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MeasurementPointElement
      {
        get { return _MeasurementPointElement; }
        set { _MeasurementPointElement = value; OnPropertyChanged("MeasurementPointElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MeasurementPointElement;

      /// <summary>
      /// For when strength is measured at a particular point or distance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MeasurementPoint
      {
        get { return MeasurementPointElement != null ? MeasurementPointElement.Value : null; }
        set
        {
          if (value == null)
            MeasurementPointElement = null;
          else
            MeasurementPointElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MeasurementPoint");
        }
      }

      /// <summary>
      /// The country or countries for which the strength range applies
      /// </summary>
      [FhirElement("country", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Country
      {
        get { if(_Country==null) _Country = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Country; }
        set { _Country = value; OnPropertyChanged("Country"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Country;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ReferenceStrengthComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Substance != null) dest.Substance = (Hl7.Fhir.Model.CodeableReference)Substance.DeepCopy();
        if(Strength != null) dest.Strength = (Hl7.Fhir.Model.DataType)Strength.DeepCopy();
        if(MeasurementPointElement != null) dest.MeasurementPointElement = (Hl7.Fhir.Model.FhirString)MeasurementPointElement.DeepCopy();
        if(Country != null) dest.Country = new List<Hl7.Fhir.Model.CodeableConcept>(Country.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ReferenceStrengthComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ReferenceStrengthComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Substance, otherT.Substance)) return false;
        if( !DeepComparable.Matches(Strength, otherT.Strength)) return false;
        if( !DeepComparable.Matches(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.Matches(Country, otherT.Country)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ReferenceStrengthComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Substance, otherT.Substance)) return false;
        if( !DeepComparable.IsExactly(Strength, otherT.Strength)) return false;
        if( !DeepComparable.IsExactly(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.IsExactly(Country, otherT.Country)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Substance != null) yield return Substance;
          if (Strength != null) yield return Strength;
          if (MeasurementPointElement != null) yield return MeasurementPointElement;
          foreach (var elem in Country) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Substance != null) yield return new ElementValue("substance", Substance);
          if (Strength != null) yield return new ElementValue("strength", Strength);
          if (MeasurementPointElement != null) yield return new ElementValue("measurementPoint", MeasurementPointElement);
          foreach (var elem in Country) { if (elem != null) yield return new ElementValue("country", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "substance":
            value = Substance;
            return Substance is not null;
          case "strength":
            value = Strength;
            return Strength is not null;
          case "measurementPoint":
            value = MeasurementPointElement;
            return MeasurementPointElement is not null;
          case "country":
            value = Country;
            return Country?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Substance is not null) yield return new KeyValuePair<string,object>("substance",Substance);
        if (Strength is not null) yield return new KeyValuePair<string,object>("strength",Strength);
        if (MeasurementPointElement is not null) yield return new KeyValuePair<string,object>("measurementPoint",MeasurementPointElement);
        if (Country?.Any() == true) yield return new KeyValuePair<string,object>("country",Country);
      }

    }

    /// <summary>
    /// An identifier or code by which the ingredient can be referenced
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// The product which this ingredient is a constituent part of
    /// </summary>
    [FhirElement("for", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("MedicinalProductDefinition","AdministrableProductDefinition","ManufacturedItemDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> For
    {
      get { if(_For==null) _For = new List<Hl7.Fhir.Model.ResourceReference>(); return _For; }
      set { _For = value; OnPropertyChanged("For"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _For;

    /// <summary>
    /// A classification of the ingredient identifying its purpose within the product, e.g. active, inactive
    /// </summary>
    [FhirElement("role", InSummary=true, Order=120)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Role
    {
      get { return _Role; }
      set { _Role = value; OnPropertyChanged("Role"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Role;

    /// <summary>
    /// A classification of the ingredient identifying its precise purpose(s) in the drug product. This extends the Ingredient.role to add more detail. Example: Antioxidant, Alkalizing Agent
    /// </summary>
    [FhirElement("function", InSummary=true, Order=130)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Function
    {
      get { if(_Function==null) _Function = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Function; }
      set { _Function = value; OnPropertyChanged("Function"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Function;

    /// <summary>
    /// A classification of the ingredient according to where in the physical item it tends to be used, such the outer shell of a tablet, inner body or ink
    /// </summary>
    [FhirElement("group", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Group
    {
      get { return _Group; }
      set { _Group = value; OnPropertyChanged("Group"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Group;

    /// <summary>
    /// If the ingredient is a known or suspected allergen
    /// </summary>
    [FhirElement("allergenicIndicator", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean AllergenicIndicatorElement
    {
      get { return _AllergenicIndicatorElement; }
      set { _AllergenicIndicatorElement = value; OnPropertyChanged("AllergenicIndicatorElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _AllergenicIndicatorElement;

    /// <summary>
    /// If the ingredient is a known or suspected allergen
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? AllergenicIndicator
    {
      get { return AllergenicIndicatorElement != null ? AllergenicIndicatorElement.Value : null; }
      set
      {
        if (value == null)
          AllergenicIndicatorElement = null;
        else
          AllergenicIndicatorElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("AllergenicIndicator");
      }
    }

    /// <summary>
    /// An organization that manufactures this ingredient
    /// </summary>
    [FhirElement("manufacturer", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent> Manufacturer
    {
      get { if(_Manufacturer==null) _Manufacturer = new List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent>(); return _Manufacturer; }
      set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
    }

    private List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent> _Manufacturer;

    /// <summary>
    /// The substance that comprises this ingredient
    /// </summary>
    [FhirElement("substance", InSummary=true, Order=170)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Ingredient.SubstanceComponent Substance
    {
      get { return _Substance; }
      set { _Substance = value; OnPropertyChanged("Substance"); }
    }

    private Hl7.Fhir.Model.Ingredient.SubstanceComponent _Substance;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Ingredient;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(For != null) dest.For = new List<Hl7.Fhir.Model.ResourceReference>(For.DeepCopy());
      if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
      if(Function != null) dest.Function = new List<Hl7.Fhir.Model.CodeableConcept>(Function.DeepCopy());
      if(Group != null) dest.Group = (Hl7.Fhir.Model.CodeableConcept)Group.DeepCopy();
      if(AllergenicIndicatorElement != null) dest.AllergenicIndicatorElement = (Hl7.Fhir.Model.FhirBoolean)AllergenicIndicatorElement.DeepCopy();
      if(Manufacturer != null) dest.Manufacturer = new List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent>(Manufacturer.DeepCopy());
      if(Substance != null) dest.Substance = (Hl7.Fhir.Model.Ingredient.SubstanceComponent)Substance.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Ingredient());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Ingredient;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(For, otherT.For)) return false;
      if( !DeepComparable.Matches(Role, otherT.Role)) return false;
      if( !DeepComparable.Matches(Function, otherT.Function)) return false;
      if( !DeepComparable.Matches(Group, otherT.Group)) return false;
      if( !DeepComparable.Matches(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;
      if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.Matches(Substance, otherT.Substance)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Ingredient;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(For, otherT.For)) return false;
      if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
      if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
      if( !DeepComparable.IsExactly(Group, otherT.Group)) return false;
      if( !DeepComparable.IsExactly(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;
      if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.IsExactly(Substance, otherT.Substance)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (StatusElement != null) yield return StatusElement;
        foreach (var elem in For) { if (elem != null) yield return elem; }
        if (Role != null) yield return Role;
        foreach (var elem in Function) { if (elem != null) yield return elem; }
        if (Group != null) yield return Group;
        if (AllergenicIndicatorElement != null) yield return AllergenicIndicatorElement;
        foreach (var elem in Manufacturer) { if (elem != null) yield return elem; }
        if (Substance != null) yield return Substance;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        foreach (var elem in For) { if (elem != null) yield return new ElementValue("for", elem); }
        if (Role != null) yield return new ElementValue("role", Role);
        foreach (var elem in Function) { if (elem != null) yield return new ElementValue("function", elem); }
        if (Group != null) yield return new ElementValue("group", Group);
        if (AllergenicIndicatorElement != null) yield return new ElementValue("allergenicIndicator", AllergenicIndicatorElement);
        foreach (var elem in Manufacturer) { if (elem != null) yield return new ElementValue("manufacturer", elem); }
        if (Substance != null) yield return new ElementValue("substance", Substance);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "for":
          value = For;
          return For?.Any() == true;
        case "role":
          value = Role;
          return Role is not null;
        case "function":
          value = Function;
          return Function?.Any() == true;
        case "group":
          value = Group;
          return Group is not null;
        case "allergenicIndicator":
          value = AllergenicIndicatorElement;
          return AllergenicIndicatorElement is not null;
        case "manufacturer":
          value = Manufacturer;
          return Manufacturer?.Any() == true;
        case "substance":
          value = Substance;
          return Substance is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (For?.Any() == true) yield return new KeyValuePair<string,object>("for",For);
      if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
      if (Function?.Any() == true) yield return new KeyValuePair<string,object>("function",Function);
      if (Group is not null) yield return new KeyValuePair<string,object>("group",Group);
      if (AllergenicIndicatorElement is not null) yield return new KeyValuePair<string,object>("allergenicIndicator",AllergenicIndicatorElement);
      if (Manufacturer?.Any() == true) yield return new KeyValuePair<string,object>("manufacturer",Manufacturer);
      if (Substance is not null) yield return new KeyValuePair<string,object>("substance",Substance);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Delivery of item
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Transport","http://hl7.org/fhir/StructureDefinition/Transport", IsResource=true)]
  public partial class Transport : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Transport"; } }

    /// <summary>
    /// Status of the transport
    /// (url: http://hl7.org/fhir/ValueSet/transport-status)
    /// (system: http://hl7.org/fhir/transport-status)
    /// </summary>
    [FhirEnumeration("TransportStatus", "http://hl7.org/fhir/ValueSet/transport-status", "http://hl7.org/fhir/transport-status")]
    public enum TransportStatus
    {
      /// <summary>
      /// Transport has started but not completed.
      /// (system: http://hl7.org/fhir/transport-status)
      /// </summary>
      [EnumLiteral("in-progress"), Description("In Progress")]
      InProgress,
      /// <summary>
      /// Transport has been completed.
      /// (system: http://hl7.org/fhir/transport-status)
      /// </summary>
      [EnumLiteral("completed"), Description("Completed")]
      Completed,
      /// <summary>
      /// Transport was started but not completed.
      /// (system: http://hl7.org/fhir/transport-status)
      /// </summary>
      [EnumLiteral("abandoned"), Description("Abandoned")]
      Abandoned,
      /// <summary>
      /// Transport was cancelled before started.
      /// (system: http://hl7.org/fhir/transport-status)
      /// </summary>
      [EnumLiteral("cancelled"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// Planned transport that is not yet requested.
      /// (system: http://hl7.org/fhir/transport-status)
      /// </summary>
      [EnumLiteral("planned"), Description("Planned")]
      Planned,
      /// <summary>
      /// This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "abandoned" rather than "entered-in-error".).
      /// (system: http://hl7.org/fhir/transport-status)
      /// </summary>
      [EnumLiteral("entered-in-error"), Description("Entered In Error")]
      EnteredInError,
    }

    /// <summary>
    /// Distinguishes whether the transport is a proposal, plan or full order.
    /// (url: http://hl7.org/fhir/ValueSet/transport-intent)
    /// (systems: 2)
    /// </summary>
    [FhirEnumeration("TransportIntent", "http://hl7.org/fhir/ValueSet/transport-intent", "http://hl7.org/fhir/request-intent")]
    public enum TransportIntent
    {
      /// <summary>
      /// The intent is not known.  When dealing with Transport, it's not always known (or relevant) how the transport was initiated - i.e. whether it was proposed, planned, ordered or just done spontaneously.
      /// (system: http://hl7.org/fhir/transport-intent)
      /// </summary>
      [EnumLiteral("unknown", "http://hl7.org/fhir/transport-intent"), Description("Unknown")]
      Unknown,
      /// <summary>
      /// The request is a suggestion made by someone/something that does not have an intention to ensure it occurs and without providing an authorization to act.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("proposal"), Description("Proposal")]
      Proposal,
      /// <summary>
      /// The request represents an intention to ensure something occurs without providing an authorization for others to act.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("plan"), Description("Plan")]
      Plan,
      /// <summary>
      /// The request represents a request/demand and authorization for action by the requestor.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("order"), Description("Order")]
      Order,
      /// <summary>
      /// The request represents an original authorization for action.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("original-order"), Description("Original Order")]
      OriginalOrder,
      /// <summary>
      /// The request represents an automatically generated supplemental authorization for action based on a parent authorization together with initial results of the action taken against that parent authorization.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("reflex-order"), Description("Reflex Order")]
      ReflexOrder,
      /// <summary>
      /// The request represents the view of an authorization instantiated by a fulfilling system representing the details of the fulfiller's intention to act upon a submitted order.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("filler-order"), Description("Filler Order")]
      FillerOrder,
      /// <summary>
      /// An order created in fulfillment of a broader order that represents the authorization for a single activity occurrence.  E.g. The administration of a single dose of a drug.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("instance-order"), Description("Instance Order")]
      InstanceOrder,
      /// <summary>
      /// The request represents a component or option for a RequestOrchestration that establishes timing, conditionality and/or other constraints among a set of requests.  Refer to [[[RequestOrchestration]]] for additional information on how this status is used.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("option"), Description("Option")]
      Option,
    }

    /// <summary>
    /// Constraints on fulfillment transports
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Transport#Restriction", IsNestedType=true)]
    [BackboneType("Transport.restriction")]
    public partial class RestrictionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Transport#Restriction"; } }

      /// <summary>
      /// How many times to repeat
      /// </summary>
      [FhirElement("repetitions", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt RepetitionsElement
      {
        get { return _RepetitionsElement; }
        set { _RepetitionsElement = value; OnPropertyChanged("RepetitionsElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _RepetitionsElement;

      /// <summary>
      /// How many times to repeat
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Repetitions
      {
        get { return RepetitionsElement != null ? RepetitionsElement.Value : null; }
        set
        {
          if (value == null)
            RepetitionsElement = null;
          else
            RepetitionsElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Repetitions");
        }
      }

      /// <summary>
      /// When fulfillment sought
      /// </summary>
      [FhirElement("period", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      /// <summary>
      /// For whom is fulfillment sought?
      /// </summary>
      [FhirElement("recipient", Order=60)]
      [CLSCompliant(false)]
      [References("Patient","Practitioner","PractitionerRole","RelatedPerson","Group","Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Recipient
      {
        get { if(_Recipient==null) _Recipient = new List<Hl7.Fhir.Model.ResourceReference>(); return _Recipient; }
        set { _Recipient = value; OnPropertyChanged("Recipient"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Recipient;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RestrictionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RepetitionsElement != null) dest.RepetitionsElement = (Hl7.Fhir.Model.PositiveInt)RepetitionsElement.DeepCopy();
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        if(Recipient != null) dest.Recipient = new List<Hl7.Fhir.Model.ResourceReference>(Recipient.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RestrictionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RestrictionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RepetitionsElement, otherT.RepetitionsElement)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;
        if( !DeepComparable.Matches(Recipient, otherT.Recipient)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RestrictionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RepetitionsElement, otherT.RepetitionsElement)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
        if( !DeepComparable.IsExactly(Recipient, otherT.Recipient)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RepetitionsElement != null) yield return RepetitionsElement;
          if (Period != null) yield return Period;
          foreach (var elem in Recipient) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RepetitionsElement != null) yield return new ElementValue("repetitions", RepetitionsElement);
          if (Period != null) yield return new ElementValue("period", Period);
          foreach (var elem in Recipient) { if (elem != null) yield return new ElementValue("recipient", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "repetitions":
            value = RepetitionsElement;
            return RepetitionsElement is not null;
          case "period":
            value = Period;
            return Period is not null;
          case "recipient":
            value = Recipient;
            return Recipient?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RepetitionsElement is not null) yield return new KeyValuePair<string,object>("repetitions",RepetitionsElement);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
        if (Recipient?.Any() == true) yield return new KeyValuePair<string,object>("recipient",Recipient);
      }

    }

    /// <summary>
    /// Information used to perform transport
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Transport#Parameter", IsNestedType=true)]
    [BackboneType("Transport.input")]
    public partial class ParameterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Transport#Parameter"; } }

      /// <summary>
      /// Label for the input
      /// </summary>
      [FhirElement("type", Order=40)]
      [Binding("TransportInputParameterType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Content to use in performing the transport
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Base64Binary),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Canonical),typeof(Hl7.Fhir.Model.Code),typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.FhirDecimal),typeof(Hl7.Fhir.Model.Id),typeof(Hl7.Fhir.Model.Instant),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.Integer64),typeof(Hl7.Fhir.Model.Markdown),typeof(Hl7.Fhir.Model.Oid),typeof(Hl7.Fhir.Model.PositiveInt),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Time),typeof(Hl7.Fhir.Model.UnsignedInt),typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.FhirUrl),typeof(Hl7.Fhir.Model.Uuid),typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Annotation),typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.CodeableReference),typeof(Hl7.Fhir.Model.Coding),typeof(Hl7.Fhir.Model.ContactPoint),typeof(Hl7.Fhir.Model.Count),typeof(Hl7.Fhir.Model.Distance),typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.HumanName),typeof(Hl7.Fhir.Model.Identifier),typeof(Hl7.Fhir.Model.Money),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange),typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.SampledData),typeof(Hl7.Fhir.Model.Signature),typeof(Hl7.Fhir.Model.Timing),typeof(Hl7.Fhir.Model.ContactDetail),typeof(Hl7.Fhir.Model.DataRequirement),typeof(Hl7.Fhir.Model.Expression),typeof(Hl7.Fhir.Model.ParameterDefinition),typeof(Hl7.Fhir.Model.RelatedArtifact),typeof(Hl7.Fhir.Model.TriggerDefinition),typeof(Hl7.Fhir.Model.UsageContext),typeof(Hl7.Fhir.Model.Availability),typeof(Hl7.Fhir.Model.ExtendedContactDetail),typeof(Hl7.Fhir.Model.Dosage),typeof(Hl7.Fhir.Model.Meta))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParameterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParameterComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParameterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParameterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Information produced as part of transport
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Transport#Output", IsNestedType=true)]
    [BackboneType("Transport.output")]
    public partial class OutputComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Transport#Output"; } }

      /// <summary>
      /// Label for output
      /// </summary>
      [FhirElement("type", Order=40)]
      [Binding("TransportOutputParameterType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Result of output
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Base64Binary),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Canonical),typeof(Hl7.Fhir.Model.Code),typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.FhirDecimal),typeof(Hl7.Fhir.Model.Id),typeof(Hl7.Fhir.Model.Instant),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.Integer64),typeof(Hl7.Fhir.Model.Markdown),typeof(Hl7.Fhir.Model.Oid),typeof(Hl7.Fhir.Model.PositiveInt),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Time),typeof(Hl7.Fhir.Model.UnsignedInt),typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.FhirUrl),typeof(Hl7.Fhir.Model.Uuid),typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Annotation),typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.CodeableReference),typeof(Hl7.Fhir.Model.Coding),typeof(Hl7.Fhir.Model.ContactPoint),typeof(Hl7.Fhir.Model.Count),typeof(Hl7.Fhir.Model.Distance),typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.HumanName),typeof(Hl7.Fhir.Model.Identifier),typeof(Hl7.Fhir.Model.Money),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange),typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.SampledData),typeof(Hl7.Fhir.Model.Signature),typeof(Hl7.Fhir.Model.Timing),typeof(Hl7.Fhir.Model.ContactDetail),typeof(Hl7.Fhir.Model.DataRequirement),typeof(Hl7.Fhir.Model.Expression),typeof(Hl7.Fhir.Model.ParameterDefinition),typeof(Hl7.Fhir.Model.RelatedArtifact),typeof(Hl7.Fhir.Model.TriggerDefinition),typeof(Hl7.Fhir.Model.UsageContext),typeof(Hl7.Fhir.Model.Availability),typeof(Hl7.Fhir.Model.ExtendedContactDetail),typeof(Hl7.Fhir.Model.Dosage),typeof(Hl7.Fhir.Model.Meta))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OutputComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OutputComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OutputComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OutputComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// External identifier
    /// </summary>
    [FhirElement("identifier", Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Formal definition of transport
    /// </summary>
    [FhirElement("instantiatesCanonical", InSummary=true, Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.Canonical InstantiatesCanonicalElement
    {
      get { return _InstantiatesCanonicalElement; }
      set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
    }

    private Hl7.Fhir.Model.Canonical _InstantiatesCanonicalElement;

    /// <summary>
    /// Formal definition of transport
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string InstantiatesCanonical
    {
      get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Value : null; }
      set
      {
        if (value == null)
          InstantiatesCanonicalElement = null;
        else
          InstantiatesCanonicalElement = new Hl7.Fhir.Model.Canonical(value);
        OnPropertyChanged("InstantiatesCanonical");
      }
    }

    /// <summary>
    /// Formal definition of transport
    /// </summary>
    [FhirElement("instantiatesUri", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri InstantiatesUriElement
    {
      get { return _InstantiatesUriElement; }
      set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _InstantiatesUriElement;

    /// <summary>
    /// Formal definition of transport
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string InstantiatesUri
    {
      get { return InstantiatesUriElement != null ? InstantiatesUriElement.Value : null; }
      set
      {
        if (value == null)
          InstantiatesUriElement = null;
        else
          InstantiatesUriElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("InstantiatesUri");
      }
    }

    /// <summary>
    /// Request fulfilled by this transport
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Requisition or grouper id
    /// </summary>
    [FhirElement("groupIdentifier", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier GroupIdentifier
    {
      get { return _GroupIdentifier; }
      set { _GroupIdentifier = value; OnPropertyChanged("GroupIdentifier"); }
    }

    private Hl7.Fhir.Model.Identifier _GroupIdentifier;

    /// <summary>
    /// Part of referenced event
    /// </summary>
    [FhirElement("partOf", InSummary=true, Order=140)]
    [CLSCompliant(false)]
    [References("Transport")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// in-progress | completed | abandoned | cancelled | planned | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("TransportStatus")]
    [DataMember]
    public Code<Hl7.Fhir.Model.Transport.TransportStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Transport.TransportStatus> _StatusElement;

    /// <summary>
    /// in-progress | completed | abandoned | cancelled | planned | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Transport.TransportStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Transport.TransportStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Reason for current status
    /// </summary>
    [FhirElement("statusReason", InSummary=true, Order=160)]
    [Binding("TransportStatusReason")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept StatusReason
    {
      get { return _StatusReason; }
      set { _StatusReason = value; OnPropertyChanged("StatusReason"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _StatusReason;

    /// <summary>
    /// unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [FhirElement("intent", InSummary=true, Order=170, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("TransportIntent")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Transport.TransportIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.Transport.TransportIntent> _IntentElement;

    /// <summary>
    /// unknown | proposal | plan | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Transport.TransportIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.Transport.TransportIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [FhirElement("priority", Order=180, FiveWs="FiveWs.grade")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("TransportPriority")]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestPriority> PriorityElement
    {
      get { return _PriorityElement; }
      set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestPriority> _PriorityElement;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestPriority? Priority
    {
      get { return PriorityElement != null ? PriorityElement.Value : null; }
      set
      {
        if (value == null)
          PriorityElement = null;
        else
          PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(value);
        OnPropertyChanged("Priority");
      }
    }

    /// <summary>
    /// Transport Type
    /// </summary>
    [FhirElement("code", InSummary=true, Order=190, FiveWs="FiveWs.what[x]")]
    [Binding("TransportCode")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Human-readable explanation of transport
    /// </summary>
    [FhirElement("description", InSummary=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Human-readable explanation of transport
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// What transport is acting on
    /// </summary>
    [FhirElement("focus", InSummary=true, Order=210, FiveWs="FiveWs.what[x]")]
    [CLSCompliant(false)]
    [References("Resource")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Focus
    {
      get { return _Focus; }
      set { _Focus = value; OnPropertyChanged("Focus"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Focus;

    /// <summary>
    /// Beneficiary of the Transport
    /// </summary>
    [FhirElement("for", InSummary=true, Order=220, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("Resource")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference For
    {
      get { return _For; }
      set { _For = value; OnPropertyChanged("For"); }
    }

    private Hl7.Fhir.Model.ResourceReference _For;

    /// <summary>
    /// Healthcare event during which this transport originated
    /// </summary>
    [FhirElement("encounter", InSummary=true, Order=230, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Completion time of the event (the occurrence)
    /// </summary>
    [FhirElement("completionTime", InSummary=true, Order=240, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CompletionTimeElement
    {
      get { return _CompletionTimeElement; }
      set { _CompletionTimeElement = value; OnPropertyChanged("CompletionTimeElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CompletionTimeElement;

    /// <summary>
    /// Completion time of the event (the occurrence)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CompletionTime
    {
      get { return CompletionTimeElement != null ? CompletionTimeElement.Value : null; }
      set
      {
        if (value == null)
          CompletionTimeElement = null;
        else
          CompletionTimeElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("CompletionTime");
      }
    }

    /// <summary>
    /// Transport Creation Date
    /// </summary>
    [FhirElement("authoredOn", Order=250, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime AuthoredOnElement
    {
      get { return _AuthoredOnElement; }
      set { _AuthoredOnElement = value; OnPropertyChanged("AuthoredOnElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _AuthoredOnElement;

    /// <summary>
    /// Transport Creation Date
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string AuthoredOn
    {
      get { return AuthoredOnElement != null ? AuthoredOnElement.Value : null; }
      set
      {
        if (value == null)
          AuthoredOnElement = null;
        else
          AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("AuthoredOn");
      }
    }

    /// <summary>
    /// Transport Last Modified Date
    /// </summary>
    [FhirElement("lastModified", InSummary=true, Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime LastModifiedElement
    {
      get { return _LastModifiedElement; }
      set { _LastModifiedElement = value; OnPropertyChanged("LastModifiedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _LastModifiedElement;

    /// <summary>
    /// Transport Last Modified Date
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastModified
    {
      get { return LastModifiedElement != null ? LastModifiedElement.Value : null; }
      set
      {
        if (value == null)
          LastModifiedElement = null;
        else
          LastModifiedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("LastModified");
      }
    }

    /// <summary>
    /// Who is asking for transport to be done
    /// </summary>
    [FhirElement("requester", InSummary=true, Order=270, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Device","Organization","Patient","Practitioner","PractitionerRole","RelatedPerson")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Requester
    {
      get { return _Requester; }
      set { _Requester = value; OnPropertyChanged("Requester"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Requester;

    /// <summary>
    /// Requested performer
    /// </summary>
    [FhirElement("performerType", Order=280, FiveWs="FiveWs.actor")]
    [Binding("TransportPerformerType")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> PerformerType
    {
      get { if(_PerformerType==null) _PerformerType = new List<Hl7.Fhir.Model.CodeableConcept>(); return _PerformerType; }
      set { _PerformerType = value; OnPropertyChanged("PerformerType"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _PerformerType;

    /// <summary>
    /// Responsible individual
    /// </summary>
    [FhirElement("owner", InSummary=true, Order=290, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization","CareTeam","HealthcareService","Patient","Device","RelatedPerson")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Owner
    {
      get { return _Owner; }
      set { _Owner = value; OnPropertyChanged("Owner"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Owner;

    /// <summary>
    /// Where transport occurs
    /// </summary>
    [FhirElement("location", InSummary=true, Order=300, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// Associated insurance coverage
    /// </summary>
    [FhirElement("insurance", Order=310)]
    [CLSCompliant(false)]
    [References("Coverage","ClaimResponse")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Insurance
    {
      get { if(_Insurance==null) _Insurance = new List<Hl7.Fhir.Model.ResourceReference>(); return _Insurance; }
      set { _Insurance = value; OnPropertyChanged("Insurance"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Insurance;

    /// <summary>
    /// Comments made about the transport
    /// </summary>
    [FhirElement("note", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Key events in history of the Transport
    /// </summary>
    [FhirElement("relevantHistory", Order=330)]
    [CLSCompliant(false)]
    [References("Provenance")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> RelevantHistory
    {
      get { if(_RelevantHistory==null) _RelevantHistory = new List<Hl7.Fhir.Model.ResourceReference>(); return _RelevantHistory; }
      set { _RelevantHistory = value; OnPropertyChanged("RelevantHistory"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _RelevantHistory;

    /// <summary>
    /// Constraints on fulfillment transports
    /// </summary>
    [FhirElement("restriction", Order=340)]
    [DataMember]
    public Hl7.Fhir.Model.Transport.RestrictionComponent Restriction
    {
      get { return _Restriction; }
      set { _Restriction = value; OnPropertyChanged("Restriction"); }
    }

    private Hl7.Fhir.Model.Transport.RestrictionComponent _Restriction;

    /// <summary>
    /// Information used to perform transport
    /// </summary>
    [FhirElement("input", Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Transport.ParameterComponent> Input
    {
      get { if(_Input==null) _Input = new List<Hl7.Fhir.Model.Transport.ParameterComponent>(); return _Input; }
      set { _Input = value; OnPropertyChanged("Input"); }
    }

    private List<Hl7.Fhir.Model.Transport.ParameterComponent> _Input;

    /// <summary>
    /// Information produced as part of transport
    /// </summary>
    [FhirElement("output", Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Transport.OutputComponent> Output
    {
      get { if(_Output==null) _Output = new List<Hl7.Fhir.Model.Transport.OutputComponent>(); return _Output; }
      set { _Output = value; OnPropertyChanged("Output"); }
    }

    private List<Hl7.Fhir.Model.Transport.OutputComponent> _Output;

    /// <summary>
    /// The desired location
    /// </summary>
    [FhirElement("requestedLocation", InSummary=true, Order=370, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference RequestedLocation
    {
      get { return _RequestedLocation; }
      set { _RequestedLocation = value; OnPropertyChanged("RequestedLocation"); }
    }

    private Hl7.Fhir.Model.ResourceReference _RequestedLocation;

    /// <summary>
    /// The entity current location
    /// </summary>
    [FhirElement("currentLocation", InSummary=true, Order=380, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference CurrentLocation
    {
      get { return _CurrentLocation; }
      set { _CurrentLocation = value; OnPropertyChanged("CurrentLocation"); }
    }

    private Hl7.Fhir.Model.ResourceReference _CurrentLocation;

    /// <summary>
    /// Why transport is needed
    /// </summary>
    [FhirElement("reason", Order=390, FiveWs="FiveWs.why[x]")]
    [Binding("TransportReason")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference Reason
    {
      get { return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private Hl7.Fhir.Model.CodeableReference _Reason;

    /// <summary>
    /// Parent (or preceding) transport
    /// </summary>
    [FhirElement("history", Order=400, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Transport")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference History
    {
      get { return _History; }
      set { _History = value; OnPropertyChanged("History"); }
    }

    private Hl7.Fhir.Model.ResourceReference _History;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Transport;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = (Hl7.Fhir.Model.Canonical)InstantiatesCanonicalElement.DeepCopy();
      if(InstantiatesUriElement != null) dest.InstantiatesUriElement = (Hl7.Fhir.Model.FhirUri)InstantiatesUriElement.DeepCopy();
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(GroupIdentifier != null) dest.GroupIdentifier = (Hl7.Fhir.Model.Identifier)GroupIdentifier.DeepCopy();
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Transport.TransportStatus>)StatusElement.DeepCopy();
      if(StatusReason != null) dest.StatusReason = (Hl7.Fhir.Model.CodeableConcept)StatusReason.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.Transport.TransportIntent>)IntentElement.DeepCopy();
      if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.RequestPriority>)PriorityElement.DeepCopy();
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(Focus != null) dest.Focus = (Hl7.Fhir.Model.ResourceReference)Focus.DeepCopy();
      if(For != null) dest.For = (Hl7.Fhir.Model.ResourceReference)For.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(CompletionTimeElement != null) dest.CompletionTimeElement = (Hl7.Fhir.Model.FhirDateTime)CompletionTimeElement.DeepCopy();
      if(AuthoredOnElement != null) dest.AuthoredOnElement = (Hl7.Fhir.Model.FhirDateTime)AuthoredOnElement.DeepCopy();
      if(LastModifiedElement != null) dest.LastModifiedElement = (Hl7.Fhir.Model.FhirDateTime)LastModifiedElement.DeepCopy();
      if(Requester != null) dest.Requester = (Hl7.Fhir.Model.ResourceReference)Requester.DeepCopy();
      if(PerformerType != null) dest.PerformerType = new List<Hl7.Fhir.Model.CodeableConcept>(PerformerType.DeepCopy());
      if(Owner != null) dest.Owner = (Hl7.Fhir.Model.ResourceReference)Owner.DeepCopy();
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Insurance != null) dest.Insurance = new List<Hl7.Fhir.Model.ResourceReference>(Insurance.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(RelevantHistory != null) dest.RelevantHistory = new List<Hl7.Fhir.Model.ResourceReference>(RelevantHistory.DeepCopy());
      if(Restriction != null) dest.Restriction = (Hl7.Fhir.Model.Transport.RestrictionComponent)Restriction.DeepCopy();
      if(Input != null) dest.Input = new List<Hl7.Fhir.Model.Transport.ParameterComponent>(Input.DeepCopy());
      if(Output != null) dest.Output = new List<Hl7.Fhir.Model.Transport.OutputComponent>(Output.DeepCopy());
      if(RequestedLocation != null) dest.RequestedLocation = (Hl7.Fhir.Model.ResourceReference)RequestedLocation.DeepCopy();
      if(CurrentLocation != null) dest.CurrentLocation = (Hl7.Fhir.Model.ResourceReference)CurrentLocation.DeepCopy();
      if(Reason != null) dest.Reason = (Hl7.Fhir.Model.CodeableReference)Reason.DeepCopy();
      if(History != null) dest.History = (Hl7.Fhir.Model.ResourceReference)History.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Transport());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Transport;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Focus, otherT.Focus)) return false;
      if( !DeepComparable.Matches(For, otherT.For)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(CompletionTimeElement, otherT.CompletionTimeElement)) return false;
      if( !DeepComparable.Matches(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.Matches(LastModifiedElement, otherT.LastModifiedElement)) return false;
      if( !DeepComparable.Matches(Requester, otherT.Requester)) return false;
      if( !DeepComparable.Matches(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.Matches(Owner, otherT.Owner)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(RelevantHistory, otherT.RelevantHistory)) return false;
      if( !DeepComparable.Matches(Restriction, otherT.Restriction)) return false;
      if( !DeepComparable.Matches(Input, otherT.Input)) return false;
      if( !DeepComparable.Matches(Output, otherT.Output)) return false;
      if( !DeepComparable.Matches(RequestedLocation, otherT.RequestedLocation)) return false;
      if( !DeepComparable.Matches(CurrentLocation, otherT.CurrentLocation)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(History, otherT.History)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Transport;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Focus, otherT.Focus)) return false;
      if( !DeepComparable.IsExactly(For, otherT.For)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(CompletionTimeElement, otherT.CompletionTimeElement)) return false;
      if( !DeepComparable.IsExactly(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.IsExactly(LastModifiedElement, otherT.LastModifiedElement)) return false;
      if( !DeepComparable.IsExactly(Requester, otherT.Requester)) return false;
      if( !DeepComparable.IsExactly(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.IsExactly(Owner, otherT.Owner)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(RelevantHistory, otherT.RelevantHistory)) return false;
      if( !DeepComparable.IsExactly(Restriction, otherT.Restriction)) return false;
      if( !DeepComparable.IsExactly(Input, otherT.Input)) return false;
      if( !DeepComparable.IsExactly(Output, otherT.Output)) return false;
      if( !DeepComparable.IsExactly(RequestedLocation, otherT.RequestedLocation)) return false;
      if( !DeepComparable.IsExactly(CurrentLocation, otherT.CurrentLocation)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(History, otherT.History)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (InstantiatesCanonicalElement != null) yield return InstantiatesCanonicalElement;
        if (InstantiatesUriElement != null) yield return InstantiatesUriElement;
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (GroupIdentifier != null) yield return GroupIdentifier;
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (StatusReason != null) yield return StatusReason;
        if (IntentElement != null) yield return IntentElement;
        if (PriorityElement != null) yield return PriorityElement;
        if (Code != null) yield return Code;
        if (DescriptionElement != null) yield return DescriptionElement;
        if (Focus != null) yield return Focus;
        if (For != null) yield return For;
        if (Encounter != null) yield return Encounter;
        if (CompletionTimeElement != null) yield return CompletionTimeElement;
        if (AuthoredOnElement != null) yield return AuthoredOnElement;
        if (LastModifiedElement != null) yield return LastModifiedElement;
        if (Requester != null) yield return Requester;
        foreach (var elem in PerformerType) { if (elem != null) yield return elem; }
        if (Owner != null) yield return Owner;
        if (Location != null) yield return Location;
        foreach (var elem in Insurance) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in RelevantHistory) { if (elem != null) yield return elem; }
        if (Restriction != null) yield return Restriction;
        foreach (var elem in Input) { if (elem != null) yield return elem; }
        foreach (var elem in Output) { if (elem != null) yield return elem; }
        if (RequestedLocation != null) yield return RequestedLocation;
        if (CurrentLocation != null) yield return CurrentLocation;
        if (Reason != null) yield return Reason;
        if (History != null) yield return History;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (InstantiatesCanonicalElement != null) yield return new ElementValue("instantiatesCanonical", InstantiatesCanonicalElement);
        if (InstantiatesUriElement != null) yield return new ElementValue("instantiatesUri", InstantiatesUriElement);
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (GroupIdentifier != null) yield return new ElementValue("groupIdentifier", GroupIdentifier);
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (StatusReason != null) yield return new ElementValue("statusReason", StatusReason);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        if (Code != null) yield return new ElementValue("code", Code);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        if (Focus != null) yield return new ElementValue("focus", Focus);
        if (For != null) yield return new ElementValue("for", For);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (CompletionTimeElement != null) yield return new ElementValue("completionTime", CompletionTimeElement);
        if (AuthoredOnElement != null) yield return new ElementValue("authoredOn", AuthoredOnElement);
        if (LastModifiedElement != null) yield return new ElementValue("lastModified", LastModifiedElement);
        if (Requester != null) yield return new ElementValue("requester", Requester);
        foreach (var elem in PerformerType) { if (elem != null) yield return new ElementValue("performerType", elem); }
        if (Owner != null) yield return new ElementValue("owner", Owner);
        if (Location != null) yield return new ElementValue("location", Location);
        foreach (var elem in Insurance) { if (elem != null) yield return new ElementValue("insurance", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in RelevantHistory) { if (elem != null) yield return new ElementValue("relevantHistory", elem); }
        if (Restriction != null) yield return new ElementValue("restriction", Restriction);
        foreach (var elem in Input) { if (elem != null) yield return new ElementValue("input", elem); }
        foreach (var elem in Output) { if (elem != null) yield return new ElementValue("output", elem); }
        if (RequestedLocation != null) yield return new ElementValue("requestedLocation", RequestedLocation);
        if (CurrentLocation != null) yield return new ElementValue("currentLocation", CurrentLocation);
        if (Reason != null) yield return new ElementValue("reason", Reason);
        if (History != null) yield return new ElementValue("history", History);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "instantiatesCanonical":
          value = InstantiatesCanonicalElement;
          return InstantiatesCanonicalElement is not null;
        case "instantiatesUri":
          value = InstantiatesUriElement;
          return InstantiatesUriElement is not null;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "groupIdentifier":
          value = GroupIdentifier;
          return GroupIdentifier is not null;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "statusReason":
          value = StatusReason;
          return StatusReason is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "priority":
          value = PriorityElement;
          return PriorityElement is not null;
        case "code":
          value = Code;
          return Code is not null;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "focus":
          value = Focus;
          return Focus is not null;
        case "for":
          value = For;
          return For is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "completionTime":
          value = CompletionTimeElement;
          return CompletionTimeElement is not null;
        case "authoredOn":
          value = AuthoredOnElement;
          return AuthoredOnElement is not null;
        case "lastModified":
          value = LastModifiedElement;
          return LastModifiedElement is not null;
        case "requester":
          value = Requester;
          return Requester is not null;
        case "performerType":
          value = PerformerType;
          return PerformerType?.Any() == true;
        case "owner":
          value = Owner;
          return Owner is not null;
        case "location":
          value = Location;
          return Location is not null;
        case "insurance":
          value = Insurance;
          return Insurance?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "relevantHistory":
          value = RelevantHistory;
          return RelevantHistory?.Any() == true;
        case "restriction":
          value = Restriction;
          return Restriction is not null;
        case "input":
          value = Input;
          return Input?.Any() == true;
        case "output":
          value = Output;
          return Output?.Any() == true;
        case "requestedLocation":
          value = RequestedLocation;
          return RequestedLocation is not null;
        case "currentLocation":
          value = CurrentLocation;
          return CurrentLocation is not null;
        case "reason":
          value = Reason;
          return Reason is not null;
        case "history":
          value = History;
          return History is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (InstantiatesCanonicalElement is not null) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
      if (InstantiatesUriElement is not null) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (GroupIdentifier is not null) yield return new KeyValuePair<string,object>("groupIdentifier",GroupIdentifier);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (StatusReason is not null) yield return new KeyValuePair<string,object>("statusReason",StatusReason);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (Focus is not null) yield return new KeyValuePair<string,object>("focus",Focus);
      if (For is not null) yield return new KeyValuePair<string,object>("for",For);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (CompletionTimeElement is not null) yield return new KeyValuePair<string,object>("completionTime",CompletionTimeElement);
      if (AuthoredOnElement is not null) yield return new KeyValuePair<string,object>("authoredOn",AuthoredOnElement);
      if (LastModifiedElement is not null) yield return new KeyValuePair<string,object>("lastModified",LastModifiedElement);
      if (Requester is not null) yield return new KeyValuePair<string,object>("requester",Requester);
      if (PerformerType?.Any() == true) yield return new KeyValuePair<string,object>("performerType",PerformerType);
      if (Owner is not null) yield return new KeyValuePair<string,object>("owner",Owner);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Insurance?.Any() == true) yield return new KeyValuePair<string,object>("insurance",Insurance);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (RelevantHistory?.Any() == true) yield return new KeyValuePair<string,object>("relevantHistory",RelevantHistory);
      if (Restriction is not null) yield return new KeyValuePair<string,object>("restriction",Restriction);
      if (Input?.Any() == true) yield return new KeyValuePair<string,object>("input",Input);
      if (Output?.Any() == true) yield return new KeyValuePair<string,object>("output",Output);
      if (RequestedLocation is not null) yield return new KeyValuePair<string,object>("requestedLocation",RequestedLocation);
      if (CurrentLocation is not null) yield return new KeyValuePair<string,object>("currentLocation",CurrentLocation);
      if (Reason is not null) yield return new KeyValuePair<string,object>("reason",Reason);
      if (History is not null) yield return new KeyValuePair<string,object>("history",History);
    }

  }

}

// end of file

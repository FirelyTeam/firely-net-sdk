// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// The detailed description of a substance, typically at a level beyond what is used for prescribing
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("SubstanceDefinition","http://hl7.org/fhir/StructureDefinition/SubstanceDefinition", IsResource=true)]
  public partial class SubstanceDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "SubstanceDefinition"; } }

    /// <summary>
    /// Moiety, for structural modifications
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Moiety", IsNestedType=true)]
    public partial class MoietyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Moiety"; } }

      /// <summary>
      /// Role that the moiety is playing
      /// </summary>
      [FhirElement("role", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// Identifier by which this moiety substance is known
      /// </summary>
      [FhirElement("identifier", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// Textual name for this moiety substance
      /// </summary>
      [FhirElement("name", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Textual name for this moiety substance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Stereochemistry type
      /// </summary>
      [FhirElement("stereochemistry", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Stereochemistry
      {
        get { return _Stereochemistry; }
        set { _Stereochemistry = value; OnPropertyChanged("Stereochemistry"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Stereochemistry;

      /// <summary>
      /// Optical activity type
      /// </summary>
      [FhirElement("opticalActivity", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept OpticalActivity
      {
        get { return _OpticalActivity; }
        set { _OpticalActivity = value; OnPropertyChanged("OpticalActivity"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _OpticalActivity;

      /// <summary>
      /// Molecular formula for this moiety of this substance, typically using the Hill system
      /// </summary>
      [FhirElement("molecularFormula", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MolecularFormulaElement
      {
        get { return _MolecularFormulaElement; }
        set { _MolecularFormulaElement = value; OnPropertyChanged("MolecularFormulaElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MolecularFormulaElement;

      /// <summary>
      /// Molecular formula for this moiety of this substance, typically using the Hill system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MolecularFormula
      {
        get { return MolecularFormulaElement != null ? MolecularFormulaElement.Value : null; }
        set
        {
          if (value == null)
            MolecularFormulaElement = null;
          else
            MolecularFormulaElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MolecularFormula");
        }
      }

      /// <summary>
      /// Quantitative value for this moiety
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=100, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.FhirString))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.DataType _Amount;

      /// <summary>
      /// The measurement type of the quantitative value
      /// </summary>
      [FhirElement("amountType", InSummary=true, Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept AmountType
      {
        get { return _AmountType; }
        set { _AmountType = value; OnPropertyChanged("AmountType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _AmountType;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MoietyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Stereochemistry != null) dest.Stereochemistry = (Hl7.Fhir.Model.CodeableConcept)Stereochemistry.DeepCopy();
        if(OpticalActivity != null) dest.OpticalActivity = (Hl7.Fhir.Model.CodeableConcept)OpticalActivity.DeepCopy();
        if(MolecularFormulaElement != null) dest.MolecularFormulaElement = (Hl7.Fhir.Model.FhirString)MolecularFormulaElement.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.DataType)Amount.DeepCopy();
        if(AmountType != null) dest.AmountType = (Hl7.Fhir.Model.CodeableConcept)AmountType.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MoietyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MoietyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Stereochemistry, otherT.Stereochemistry)) return false;
        if( !DeepComparable.Matches(OpticalActivity, otherT.OpticalActivity)) return false;
        if( !DeepComparable.Matches(MolecularFormulaElement, otherT.MolecularFormulaElement)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;
        if( !DeepComparable.Matches(AmountType, otherT.AmountType)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MoietyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Stereochemistry, otherT.Stereochemistry)) return false;
        if( !DeepComparable.IsExactly(OpticalActivity, otherT.OpticalActivity)) return false;
        if( !DeepComparable.IsExactly(MolecularFormulaElement, otherT.MolecularFormulaElement)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;
        if( !DeepComparable.IsExactly(AmountType, otherT.AmountType)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Role != null) yield return Role;
          if (Identifier != null) yield return Identifier;
          if (NameElement != null) yield return NameElement;
          if (Stereochemistry != null) yield return Stereochemistry;
          if (OpticalActivity != null) yield return OpticalActivity;
          if (MolecularFormulaElement != null) yield return MolecularFormulaElement;
          if (Amount != null) yield return Amount;
          if (AmountType != null) yield return AmountType;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Role != null) yield return new ElementValue("role", Role);
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Stereochemistry != null) yield return new ElementValue("stereochemistry", Stereochemistry);
          if (OpticalActivity != null) yield return new ElementValue("opticalActivity", OpticalActivity);
          if (MolecularFormulaElement != null) yield return new ElementValue("molecularFormula", MolecularFormulaElement);
          if (Amount != null) yield return new ElementValue("amount", Amount);
          if (AmountType != null) yield return new ElementValue("amountType", AmountType);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "role":
            value = Role;
            return Role is not null;
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "stereochemistry":
            value = Stereochemistry;
            return Stereochemistry is not null;
          case "opticalActivity":
            value = OpticalActivity;
            return OpticalActivity is not null;
          case "molecularFormula":
            value = MolecularFormulaElement;
            return MolecularFormulaElement is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          case "amountType":
            value = AmountType;
            return AmountType is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Stereochemistry is not null) yield return new KeyValuePair<string,object>("stereochemistry",Stereochemistry);
        if (OpticalActivity is not null) yield return new KeyValuePair<string,object>("opticalActivity",OpticalActivity);
        if (MolecularFormulaElement is not null) yield return new KeyValuePair<string,object>("molecularFormula",MolecularFormulaElement);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
        if (AmountType is not null) yield return new KeyValuePair<string,object>("amountType",AmountType);
      }

    }

    /// <summary>
    /// General specifications for this substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Property", IsNestedType=true)]
    public partial class PropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Property"; } }

      /// <summary>
      /// A code expressing the type of characteristic
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// A value for the characteristic
      /// </summary>
      [FhirElement("value", InSummary=true, Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Attachment))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#MolecularWeight", IsNestedType=true)]
    public partial class MolecularWeightComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#MolecularWeight"; } }

      /// <summary>
      /// The method by which the molecular weight was determined
      /// </summary>
      [FhirElement("method", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Method
      {
        get { return _Method; }
        set { _Method = value; OnPropertyChanged("Method"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Method;

      /// <summary>
      /// Type of molecular weight such as exact, average (also known as. number average), weight average
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.Quantity _Amount;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MolecularWeightComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Method != null) dest.Method = (Hl7.Fhir.Model.CodeableConcept)Method.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Quantity)Amount.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MolecularWeightComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MolecularWeightComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Method, otherT.Method)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MolecularWeightComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Method, otherT.Method)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Method != null) yield return Method;
          if (Type != null) yield return Type;
          if (Amount != null) yield return Amount;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Method != null) yield return new ElementValue("method", Method);
          if (Type != null) yield return new ElementValue("type", Type);
          if (Amount != null) yield return new ElementValue("amount", Amount);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "method":
            value = Method;
            return Method is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Method is not null) yield return new KeyValuePair<string,object>("method",Method);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
      }

    }

    /// <summary>
    /// Structural information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Structure", IsNestedType=true)]
    public partial class StructureComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Structure"; } }

      /// <summary>
      /// Stereochemistry type
      /// </summary>
      [FhirElement("stereochemistry", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Stereochemistry
      {
        get { return _Stereochemistry; }
        set { _Stereochemistry = value; OnPropertyChanged("Stereochemistry"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Stereochemistry;

      /// <summary>
      /// Optical activity type
      /// </summary>
      [FhirElement("opticalActivity", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept OpticalActivity
      {
        get { return _OpticalActivity; }
        set { _OpticalActivity = value; OnPropertyChanged("OpticalActivity"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _OpticalActivity;

      /// <summary>
      /// Molecular formula of this substance, typically using the Hill system
      /// </summary>
      [FhirElement("molecularFormula", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MolecularFormulaElement
      {
        get { return _MolecularFormulaElement; }
        set { _MolecularFormulaElement = value; OnPropertyChanged("MolecularFormulaElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MolecularFormulaElement;

      /// <summary>
      /// Molecular formula of this substance, typically using the Hill system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MolecularFormula
      {
        get { return MolecularFormulaElement != null ? MolecularFormulaElement.Value : null; }
        set
        {
          if (value == null)
            MolecularFormulaElement = null;
          else
            MolecularFormulaElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MolecularFormula");
        }
      }

      /// <summary>
      /// Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot
      /// </summary>
      [FhirElement("molecularFormulaByMoiety", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MolecularFormulaByMoietyElement
      {
        get { return _MolecularFormulaByMoietyElement; }
        set { _MolecularFormulaByMoietyElement = value; OnPropertyChanged("MolecularFormulaByMoietyElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MolecularFormulaByMoietyElement;

      /// <summary>
      /// Specified per moiety according to the Hill system, i.e. first C, then H, then alphabetical, each moiety separated by a dot
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MolecularFormulaByMoiety
      {
        get { return MolecularFormulaByMoietyElement != null ? MolecularFormulaByMoietyElement.Value : null; }
        set
        {
          if (value == null)
            MolecularFormulaByMoietyElement = null;
          else
            MolecularFormulaByMoietyElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MolecularFormulaByMoiety");
        }
      }

      /// <summary>
      /// The molecular weight or weight range (for proteins, polymers or nucleic acids)
      /// </summary>
      [FhirElement("molecularWeight", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.SubstanceDefinition.MolecularWeightComponent MolecularWeight
      {
        get { return _MolecularWeight; }
        set { _MolecularWeight = value; OnPropertyChanged("MolecularWeight"); }
      }

      private Hl7.Fhir.Model.SubstanceDefinition.MolecularWeightComponent _MolecularWeight;

      /// <summary>
      /// The method used to elucidate the structure or characterization of the drug substance. Examples: X-ray, HPLC, NMR, Peptide mapping, Ligand binding assay
      /// </summary>
      [FhirElement("technique", InSummary=true, Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Technique
      {
        get { if(_Technique==null) _Technique = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Technique; }
        set { _Technique = value; OnPropertyChanged("Technique"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Technique;

      /// <summary>
      /// Supporting literature about the source of information
      /// </summary>
      [FhirElement("sourceDocument", InSummary=true, Order=100)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> SourceDocument
      {
        get { if(_SourceDocument==null) _SourceDocument = new List<Hl7.Fhir.Model.ResourceReference>(); return _SourceDocument; }
        set { _SourceDocument = value; OnPropertyChanged("SourceDocument"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _SourceDocument;

      /// <summary>
      /// A depiction of the structure or characterization of the substance
      /// </summary>
      [FhirElement("representation", InSummary=true, Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstanceDefinition.RepresentationComponent> Representation
      {
        get { if(_Representation==null) _Representation = new List<Hl7.Fhir.Model.SubstanceDefinition.RepresentationComponent>(); return _Representation; }
        set { _Representation = value; OnPropertyChanged("Representation"); }
      }

      private List<Hl7.Fhir.Model.SubstanceDefinition.RepresentationComponent> _Representation;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StructureComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Stereochemistry != null) dest.Stereochemistry = (Hl7.Fhir.Model.CodeableConcept)Stereochemistry.DeepCopy();
        if(OpticalActivity != null) dest.OpticalActivity = (Hl7.Fhir.Model.CodeableConcept)OpticalActivity.DeepCopy();
        if(MolecularFormulaElement != null) dest.MolecularFormulaElement = (Hl7.Fhir.Model.FhirString)MolecularFormulaElement.DeepCopy();
        if(MolecularFormulaByMoietyElement != null) dest.MolecularFormulaByMoietyElement = (Hl7.Fhir.Model.FhirString)MolecularFormulaByMoietyElement.DeepCopy();
        if(MolecularWeight != null) dest.MolecularWeight = (Hl7.Fhir.Model.SubstanceDefinition.MolecularWeightComponent)MolecularWeight.DeepCopy();
        if(Technique != null) dest.Technique = new List<Hl7.Fhir.Model.CodeableConcept>(Technique.DeepCopy());
        if(SourceDocument != null) dest.SourceDocument = new List<Hl7.Fhir.Model.ResourceReference>(SourceDocument.DeepCopy());
        if(Representation != null) dest.Representation = new List<Hl7.Fhir.Model.SubstanceDefinition.RepresentationComponent>(Representation.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StructureComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StructureComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Stereochemistry, otherT.Stereochemistry)) return false;
        if( !DeepComparable.Matches(OpticalActivity, otherT.OpticalActivity)) return false;
        if( !DeepComparable.Matches(MolecularFormulaElement, otherT.MolecularFormulaElement)) return false;
        if( !DeepComparable.Matches(MolecularFormulaByMoietyElement, otherT.MolecularFormulaByMoietyElement)) return false;
        if( !DeepComparable.Matches(MolecularWeight, otherT.MolecularWeight)) return false;
        if( !DeepComparable.Matches(Technique, otherT.Technique)) return false;
        if( !DeepComparable.Matches(SourceDocument, otherT.SourceDocument)) return false;
        if( !DeepComparable.Matches(Representation, otherT.Representation)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StructureComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Stereochemistry, otherT.Stereochemistry)) return false;
        if( !DeepComparable.IsExactly(OpticalActivity, otherT.OpticalActivity)) return false;
        if( !DeepComparable.IsExactly(MolecularFormulaElement, otherT.MolecularFormulaElement)) return false;
        if( !DeepComparable.IsExactly(MolecularFormulaByMoietyElement, otherT.MolecularFormulaByMoietyElement)) return false;
        if( !DeepComparable.IsExactly(MolecularWeight, otherT.MolecularWeight)) return false;
        if( !DeepComparable.IsExactly(Technique, otherT.Technique)) return false;
        if( !DeepComparable.IsExactly(SourceDocument, otherT.SourceDocument)) return false;
        if( !DeepComparable.IsExactly(Representation, otherT.Representation)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Stereochemistry != null) yield return Stereochemistry;
          if (OpticalActivity != null) yield return OpticalActivity;
          if (MolecularFormulaElement != null) yield return MolecularFormulaElement;
          if (MolecularFormulaByMoietyElement != null) yield return MolecularFormulaByMoietyElement;
          if (MolecularWeight != null) yield return MolecularWeight;
          foreach (var elem in Technique) { if (elem != null) yield return elem; }
          foreach (var elem in SourceDocument) { if (elem != null) yield return elem; }
          foreach (var elem in Representation) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Stereochemistry != null) yield return new ElementValue("stereochemistry", Stereochemistry);
          if (OpticalActivity != null) yield return new ElementValue("opticalActivity", OpticalActivity);
          if (MolecularFormulaElement != null) yield return new ElementValue("molecularFormula", MolecularFormulaElement);
          if (MolecularFormulaByMoietyElement != null) yield return new ElementValue("molecularFormulaByMoiety", MolecularFormulaByMoietyElement);
          if (MolecularWeight != null) yield return new ElementValue("molecularWeight", MolecularWeight);
          foreach (var elem in Technique) { if (elem != null) yield return new ElementValue("technique", elem); }
          foreach (var elem in SourceDocument) { if (elem != null) yield return new ElementValue("sourceDocument", elem); }
          foreach (var elem in Representation) { if (elem != null) yield return new ElementValue("representation", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "stereochemistry":
            value = Stereochemistry;
            return Stereochemistry is not null;
          case "opticalActivity":
            value = OpticalActivity;
            return OpticalActivity is not null;
          case "molecularFormula":
            value = MolecularFormulaElement;
            return MolecularFormulaElement is not null;
          case "molecularFormulaByMoiety":
            value = MolecularFormulaByMoietyElement;
            return MolecularFormulaByMoietyElement is not null;
          case "molecularWeight":
            value = MolecularWeight;
            return MolecularWeight is not null;
          case "technique":
            value = Technique;
            return Technique?.Any() == true;
          case "sourceDocument":
            value = SourceDocument;
            return SourceDocument?.Any() == true;
          case "representation":
            value = Representation;
            return Representation?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Stereochemistry is not null) yield return new KeyValuePair<string,object>("stereochemistry",Stereochemistry);
        if (OpticalActivity is not null) yield return new KeyValuePair<string,object>("opticalActivity",OpticalActivity);
        if (MolecularFormulaElement is not null) yield return new KeyValuePair<string,object>("molecularFormula",MolecularFormulaElement);
        if (MolecularFormulaByMoietyElement is not null) yield return new KeyValuePair<string,object>("molecularFormulaByMoiety",MolecularFormulaByMoietyElement);
        if (MolecularWeight is not null) yield return new KeyValuePair<string,object>("molecularWeight",MolecularWeight);
        if (Technique?.Any() == true) yield return new KeyValuePair<string,object>("technique",Technique);
        if (SourceDocument?.Any() == true) yield return new KeyValuePair<string,object>("sourceDocument",SourceDocument);
        if (Representation?.Any() == true) yield return new KeyValuePair<string,object>("representation",Representation);
      }

    }

    /// <summary>
    /// A depiction of the structure or characterization of the substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Representation", IsNestedType=true)]
    public partial class RepresentationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Representation"; } }

      /// <summary>
      /// The kind of structural representation (e.g. full, partial)
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The structural representation or characterization as a text string in a standard format
      /// </summary>
      [FhirElement("representation", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RepresentationElement
      {
        get { return _RepresentationElement; }
        set { _RepresentationElement = value; OnPropertyChanged("RepresentationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RepresentationElement;

      /// <summary>
      /// The structural representation or characterization as a text string in a standard format
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Representation
      {
        get { return RepresentationElement != null ? RepresentationElement.Value : null; }
        set
        {
          if (value == null)
            RepresentationElement = null;
          else
            RepresentationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Representation");
        }
      }

      /// <summary>
      /// The format of the representation e.g. InChI, SMILES, MOLFILE, CDX, SDF, PDB, mmCIF. The logical content type rather than the physical file format of a document
      /// </summary>
      [FhirElement("format", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Format
      {
        get { return _Format; }
        set { _Format = value; OnPropertyChanged("Format"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Format;

      /// <summary>
      /// An attached file with the structural representation or characterization e.g. a molecular structure graphic of the substance, a JCAMP or AnIML file
      /// </summary>
      [FhirElement("document", InSummary=true, Order=70)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Document
      {
        get { return _Document; }
        set { _Document = value; OnPropertyChanged("Document"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Document;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RepresentationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(RepresentationElement != null) dest.RepresentationElement = (Hl7.Fhir.Model.FhirString)RepresentationElement.DeepCopy();
        if(Format != null) dest.Format = (Hl7.Fhir.Model.CodeableConcept)Format.DeepCopy();
        if(Document != null) dest.Document = (Hl7.Fhir.Model.ResourceReference)Document.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RepresentationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RepresentationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(RepresentationElement, otherT.RepresentationElement)) return false;
        if( !DeepComparable.Matches(Format, otherT.Format)) return false;
        if( !DeepComparable.Matches(Document, otherT.Document)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RepresentationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(RepresentationElement, otherT.RepresentationElement)) return false;
        if( !DeepComparable.IsExactly(Format, otherT.Format)) return false;
        if( !DeepComparable.IsExactly(Document, otherT.Document)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (RepresentationElement != null) yield return RepresentationElement;
          if (Format != null) yield return Format;
          if (Document != null) yield return Document;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (RepresentationElement != null) yield return new ElementValue("representation", RepresentationElement);
          if (Format != null) yield return new ElementValue("format", Format);
          if (Document != null) yield return new ElementValue("document", Document);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "representation":
            value = RepresentationElement;
            return RepresentationElement is not null;
          case "format":
            value = Format;
            return Format is not null;
          case "document":
            value = Document;
            return Document is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (RepresentationElement is not null) yield return new KeyValuePair<string,object>("representation",RepresentationElement);
        if (Format is not null) yield return new KeyValuePair<string,object>("format",Format);
        if (Document is not null) yield return new KeyValuePair<string,object>("document",Document);
      }

    }

    /// <summary>
    /// Codes associated with the substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Code", IsNestedType=true)]
    public partial class CodeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Code"; } }

      /// <summary>
      /// The specific code
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Status of the code assignment, for example 'provisional', 'approved'
      /// </summary>
      [FhirElement("status", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Status
      {
        get { return _Status; }
        set { _Status = value; OnPropertyChanged("Status"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Status;

      /// <summary>
      /// The date at which the code status is changed as part of the terminology maintenance
      /// </summary>
      [FhirElement("statusDate", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime StatusDateElement
      {
        get { return _StatusDateElement; }
        set { _StatusDateElement = value; OnPropertyChanged("StatusDateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _StatusDateElement;

      /// <summary>
      /// The date at which the code status is changed as part of the terminology maintenance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string StatusDate
      {
        get { return StatusDateElement != null ? StatusDateElement.Value : null; }
        set
        {
          if (value == null)
            StatusDateElement = null;
          else
            StatusDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("StatusDate");
        }
      }

      /// <summary>
      /// Any comment can be provided in this field, if necessary
      /// </summary>
      [FhirElement("note", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// Supporting literature
      /// </summary>
      [FhirElement("source", InSummary=true, Order=80)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Source
      {
        get { if(_Source==null) _Source = new List<Hl7.Fhir.Model.ResourceReference>(); return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Source;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CodeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Status != null) dest.Status = (Hl7.Fhir.Model.CodeableConcept)Status.DeepCopy();
        if(StatusDateElement != null) dest.StatusDateElement = (Hl7.Fhir.Model.FhirDateTime)StatusDateElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(Source != null) dest.Source = new List<Hl7.Fhir.Model.ResourceReference>(Source.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CodeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CodeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Status, otherT.Status)) return false;
        if( !DeepComparable.Matches(StatusDateElement, otherT.StatusDateElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CodeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Status, otherT.Status)) return false;
        if( !DeepComparable.IsExactly(StatusDateElement, otherT.StatusDateElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          if (Status != null) yield return Status;
          if (StatusDateElement != null) yield return StatusDateElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          foreach (var elem in Source) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          if (Status != null) yield return new ElementValue("status", Status);
          if (StatusDateElement != null) yield return new ElementValue("statusDate", StatusDateElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          foreach (var elem in Source) { if (elem != null) yield return new ElementValue("source", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "status":
            value = Status;
            return Status is not null;
          case "statusDate":
            value = StatusDateElement;
            return StatusDateElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "source":
            value = Source;
            return Source?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Status is not null) yield return new KeyValuePair<string,object>("status",Status);
        if (StatusDateElement is not null) yield return new KeyValuePair<string,object>("statusDate",StatusDateElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (Source?.Any() == true) yield return new KeyValuePair<string,object>("source",Source);
      }

    }

    /// <summary>
    /// Names applicable to this substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Name", IsNestedType=true)]
    public partial class NameComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Name"; } }

      /// <summary>
      /// The actual name
      /// </summary>
      [FhirElement("name", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// The actual name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Name type, for example 'systematic',  'scientific, 'brand'
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The status of the name, for example 'current', 'proposed'
      /// </summary>
      [FhirElement("status", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Status
      {
        get { return _Status; }
        set { _Status = value; OnPropertyChanged("Status"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Status;

      /// <summary>
      /// If this is the preferred name for this substance
      /// </summary>
      [FhirElement("preferred", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean PreferredElement
      {
        get { return _PreferredElement; }
        set { _PreferredElement = value; OnPropertyChanged("PreferredElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _PreferredElement;

      /// <summary>
      /// If this is the preferred name for this substance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Preferred
      {
        get { return PreferredElement != null ? PreferredElement.Value : null; }
        set
        {
          if (value == null)
            PreferredElement = null;
          else
            PreferredElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Preferred");
        }
      }

      /// <summary>
      /// Human language that the name is written in
      /// </summary>
      [FhirElement("language", InSummary=true, Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Language
      {
        get { if(_Language==null) _Language = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Language; }
        set { _Language = value; OnPropertyChanged("Language"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Language;

      /// <summary>
      /// The use context of this name for example if there is a different name a drug active ingredient as opposed to a food colour additive
      /// </summary>
      [FhirElement("domain", InSummary=true, Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Domain
      {
        get { if(_Domain==null) _Domain = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Domain; }
        set { _Domain = value; OnPropertyChanged("Domain"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Domain;

      /// <summary>
      /// The jurisdiction where this name applies
      /// </summary>
      [FhirElement("jurisdiction", InSummary=true, Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
      {
        get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
        set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

      /// <summary>
      /// A synonym of this particular name, by which the substance is also known
      /// </summary>
      [FhirElement("synonym", InSummary=true, Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent> Synonym
      {
        get { if(_Synonym==null) _Synonym = new List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent>(); return _Synonym; }
        set { _Synonym = value; OnPropertyChanged("Synonym"); }
      }

      private List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent> _Synonym;

      /// <summary>
      /// A translation for this name into another human language
      /// </summary>
      [FhirElement("translation", InSummary=true, Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent> Translation
      {
        get { if(_Translation==null) _Translation = new List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent>(); return _Translation; }
        set { _Translation = value; OnPropertyChanged("Translation"); }
      }

      private List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent> _Translation;

      /// <summary>
      /// Details of the official nature of this name
      /// </summary>
      [FhirElement("official", InSummary=true, Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.SubstanceDefinition.OfficialComponent> Official
      {
        get { if(_Official==null) _Official = new List<Hl7.Fhir.Model.SubstanceDefinition.OfficialComponent>(); return _Official; }
        set { _Official = value; OnPropertyChanged("Official"); }
      }

      private List<Hl7.Fhir.Model.SubstanceDefinition.OfficialComponent> _Official;

      /// <summary>
      /// Supporting literature
      /// </summary>
      [FhirElement("source", InSummary=true, Order=140)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Source
      {
        get { if(_Source==null) _Source = new List<Hl7.Fhir.Model.ResourceReference>(); return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Source;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NameComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Status != null) dest.Status = (Hl7.Fhir.Model.CodeableConcept)Status.DeepCopy();
        if(PreferredElement != null) dest.PreferredElement = (Hl7.Fhir.Model.FhirBoolean)PreferredElement.DeepCopy();
        if(Language != null) dest.Language = new List<Hl7.Fhir.Model.CodeableConcept>(Language.DeepCopy());
        if(Domain != null) dest.Domain = new List<Hl7.Fhir.Model.CodeableConcept>(Domain.DeepCopy());
        if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
        if(Synonym != null) dest.Synonym = new List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent>(Synonym.DeepCopy());
        if(Translation != null) dest.Translation = new List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent>(Translation.DeepCopy());
        if(Official != null) dest.Official = new List<Hl7.Fhir.Model.SubstanceDefinition.OfficialComponent>(Official.DeepCopy());
        if(Source != null) dest.Source = new List<Hl7.Fhir.Model.ResourceReference>(Source.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NameComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Status, otherT.Status)) return false;
        if( !DeepComparable.Matches(PreferredElement, otherT.PreferredElement)) return false;
        if( !DeepComparable.Matches(Language, otherT.Language)) return false;
        if( !DeepComparable.Matches(Domain, otherT.Domain)) return false;
        if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
        if( !DeepComparable.Matches(Synonym, otherT.Synonym)) return false;
        if( !DeepComparable.Matches(Translation, otherT.Translation)) return false;
        if( !DeepComparable.Matches(Official, otherT.Official)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Status, otherT.Status)) return false;
        if( !DeepComparable.IsExactly(PreferredElement, otherT.PreferredElement)) return false;
        if( !DeepComparable.IsExactly(Language, otherT.Language)) return false;
        if( !DeepComparable.IsExactly(Domain, otherT.Domain)) return false;
        if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
        if( !DeepComparable.IsExactly(Synonym, otherT.Synonym)) return false;
        if( !DeepComparable.IsExactly(Translation, otherT.Translation)) return false;
        if( !DeepComparable.IsExactly(Official, otherT.Official)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (Type != null) yield return Type;
          if (Status != null) yield return Status;
          if (PreferredElement != null) yield return PreferredElement;
          foreach (var elem in Language) { if (elem != null) yield return elem; }
          foreach (var elem in Domain) { if (elem != null) yield return elem; }
          foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
          foreach (var elem in Synonym) { if (elem != null) yield return elem; }
          foreach (var elem in Translation) { if (elem != null) yield return elem; }
          foreach (var elem in Official) { if (elem != null) yield return elem; }
          foreach (var elem in Source) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Type != null) yield return new ElementValue("type", Type);
          if (Status != null) yield return new ElementValue("status", Status);
          if (PreferredElement != null) yield return new ElementValue("preferred", PreferredElement);
          foreach (var elem in Language) { if (elem != null) yield return new ElementValue("language", elem); }
          foreach (var elem in Domain) { if (elem != null) yield return new ElementValue("domain", elem); }
          foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
          foreach (var elem in Synonym) { if (elem != null) yield return new ElementValue("synonym", elem); }
          foreach (var elem in Translation) { if (elem != null) yield return new ElementValue("translation", elem); }
          foreach (var elem in Official) { if (elem != null) yield return new ElementValue("official", elem); }
          foreach (var elem in Source) { if (elem != null) yield return new ElementValue("source", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "status":
            value = Status;
            return Status is not null;
          case "preferred":
            value = PreferredElement;
            return PreferredElement is not null;
          case "language":
            value = Language;
            return Language?.Any() == true;
          case "domain":
            value = Domain;
            return Domain?.Any() == true;
          case "jurisdiction":
            value = Jurisdiction;
            return Jurisdiction?.Any() == true;
          case "synonym":
            value = Synonym;
            return Synonym?.Any() == true;
          case "translation":
            value = Translation;
            return Translation?.Any() == true;
          case "official":
            value = Official;
            return Official?.Any() == true;
          case "source":
            value = Source;
            return Source?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Status is not null) yield return new KeyValuePair<string,object>("status",Status);
        if (PreferredElement is not null) yield return new KeyValuePair<string,object>("preferred",PreferredElement);
        if (Language?.Any() == true) yield return new KeyValuePair<string,object>("language",Language);
        if (Domain?.Any() == true) yield return new KeyValuePair<string,object>("domain",Domain);
        if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
        if (Synonym?.Any() == true) yield return new KeyValuePair<string,object>("synonym",Synonym);
        if (Translation?.Any() == true) yield return new KeyValuePair<string,object>("translation",Translation);
        if (Official?.Any() == true) yield return new KeyValuePair<string,object>("official",Official);
        if (Source?.Any() == true) yield return new KeyValuePair<string,object>("source",Source);
      }

    }

    /// <summary>
    /// Details of the official nature of this name
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Official", IsNestedType=true)]
    public partial class OfficialComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Official"; } }

      /// <summary>
      /// Which authority uses this official name
      /// </summary>
      [FhirElement("authority", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Authority
      {
        get { return _Authority; }
        set { _Authority = value; OnPropertyChanged("Authority"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Authority;

      /// <summary>
      /// The status of the official name, for example 'provisional', 'approved'
      /// </summary>
      [FhirElement("status", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Status
      {
        get { return _Status; }
        set { _Status = value; OnPropertyChanged("Status"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Status;

      /// <summary>
      /// Date of official name change
      /// </summary>
      [FhirElement("date", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _DateElement;

      /// <summary>
      /// Date of official name change
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Date");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OfficialComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Authority != null) dest.Authority = (Hl7.Fhir.Model.CodeableConcept)Authority.DeepCopy();
        if(Status != null) dest.Status = (Hl7.Fhir.Model.CodeableConcept)Status.DeepCopy();
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OfficialComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OfficialComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Authority, otherT.Authority)) return false;
        if( !DeepComparable.Matches(Status, otherT.Status)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OfficialComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Authority, otherT.Authority)) return false;
        if( !DeepComparable.IsExactly(Status, otherT.Status)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Authority != null) yield return Authority;
          if (Status != null) yield return Status;
          if (DateElement != null) yield return DateElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Authority != null) yield return new ElementValue("authority", Authority);
          if (Status != null) yield return new ElementValue("status", Status);
          if (DateElement != null) yield return new ElementValue("date", DateElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "authority":
            value = Authority;
            return Authority is not null;
          case "status":
            value = Status;
            return Status is not null;
          case "date":
            value = DateElement;
            return DateElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Authority is not null) yield return new KeyValuePair<string,object>("authority",Authority);
        if (Status is not null) yield return new KeyValuePair<string,object>("status",Status);
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      }

    }

    /// <summary>
    /// A link between this substance and another, with details of the relationship
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#Relationship", IsNestedType=true)]
    public partial class RelationshipComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#Relationship"; } }

      /// <summary>
      /// A pointer to another substance, as a resource or just a representational code
      /// </summary>
      [FhirElement("substanceDefinition", InSummary=true, Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("SubstanceDefinition")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.CodeableConcept))]
      [DataMember]
      public Hl7.Fhir.Model.DataType SubstanceDefinition
      {
        get { return _SubstanceDefinition; }
        set { _SubstanceDefinition = value; OnPropertyChanged("SubstanceDefinition"); }
      }

      private Hl7.Fhir.Model.DataType _SubstanceDefinition;

      /// <summary>
      /// For example "salt to parent", "active moiety", "starting material", "polymorph", "impurity of"
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships
      /// </summary>
      [FhirElement("isDefining", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean IsDefiningElement
      {
        get { return _IsDefiningElement; }
        set { _IsDefiningElement = value; OnPropertyChanged("IsDefiningElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _IsDefiningElement;

      /// <summary>
      /// For example where an enzyme strongly bonds with a particular substance, this is a defining relationship for that enzyme, out of several possible substance relationships
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? IsDefining
      {
        get { return IsDefiningElement != null ? IsDefiningElement.Value : null; }
        set
        {
          if (value == null)
            IsDefiningElement = null;
          else
            IsDefiningElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("IsDefining");
        }
      }

      /// <summary>
      /// A numeric factor for the relationship, for instance to express that the salt of a substance has some percentage of the active substance in relation to some other
      /// </summary>
      [FhirElement("amount", InSummary=true, Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.FhirString))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Amount
      {
        get { return _Amount; }
        set { _Amount = value; OnPropertyChanged("Amount"); }
      }

      private Hl7.Fhir.Model.DataType _Amount;

      /// <summary>
      /// For use when the numeric has an uncertain range
      /// </summary>
      [FhirElement("amountRatioHighLimit", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Ratio AmountRatioHighLimit
      {
        get { return _AmountRatioHighLimit; }
        set { _AmountRatioHighLimit = value; OnPropertyChanged("AmountRatioHighLimit"); }
      }

      private Hl7.Fhir.Model.Ratio _AmountRatioHighLimit;

      /// <summary>
      /// An operator for the amount, for example "average", "approximately", "less than"
      /// </summary>
      [FhirElement("amountType", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept AmountType
      {
        get { return _AmountType; }
        set { _AmountType = value; OnPropertyChanged("AmountType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _AmountType;

      /// <summary>
      /// Supporting literature
      /// </summary>
      [FhirElement("source", InSummary=true, Order=100)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Source
      {
        get { if(_Source==null) _Source = new List<Hl7.Fhir.Model.ResourceReference>(); return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Source;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelationshipComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SubstanceDefinition != null) dest.SubstanceDefinition = (Hl7.Fhir.Model.DataType)SubstanceDefinition.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(IsDefiningElement != null) dest.IsDefiningElement = (Hl7.Fhir.Model.FhirBoolean)IsDefiningElement.DeepCopy();
        if(Amount != null) dest.Amount = (Hl7.Fhir.Model.DataType)Amount.DeepCopy();
        if(AmountRatioHighLimit != null) dest.AmountRatioHighLimit = (Hl7.Fhir.Model.Ratio)AmountRatioHighLimit.DeepCopy();
        if(AmountType != null) dest.AmountType = (Hl7.Fhir.Model.CodeableConcept)AmountType.DeepCopy();
        if(Source != null) dest.Source = new List<Hl7.Fhir.Model.ResourceReference>(Source.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelationshipComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelationshipComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SubstanceDefinition, otherT.SubstanceDefinition)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(IsDefiningElement, otherT.IsDefiningElement)) return false;
        if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;
        if( !DeepComparable.Matches(AmountRatioHighLimit, otherT.AmountRatioHighLimit)) return false;
        if( !DeepComparable.Matches(AmountType, otherT.AmountType)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelationshipComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SubstanceDefinition, otherT.SubstanceDefinition)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(IsDefiningElement, otherT.IsDefiningElement)) return false;
        if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;
        if( !DeepComparable.IsExactly(AmountRatioHighLimit, otherT.AmountRatioHighLimit)) return false;
        if( !DeepComparable.IsExactly(AmountType, otherT.AmountType)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SubstanceDefinition != null) yield return SubstanceDefinition;
          if (Type != null) yield return Type;
          if (IsDefiningElement != null) yield return IsDefiningElement;
          if (Amount != null) yield return Amount;
          if (AmountRatioHighLimit != null) yield return AmountRatioHighLimit;
          if (AmountType != null) yield return AmountType;
          foreach (var elem in Source) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SubstanceDefinition != null) yield return new ElementValue("substanceDefinition", SubstanceDefinition);
          if (Type != null) yield return new ElementValue("type", Type);
          if (IsDefiningElement != null) yield return new ElementValue("isDefining", IsDefiningElement);
          if (Amount != null) yield return new ElementValue("amount", Amount);
          if (AmountRatioHighLimit != null) yield return new ElementValue("amountRatioHighLimit", AmountRatioHighLimit);
          if (AmountType != null) yield return new ElementValue("amountType", AmountType);
          foreach (var elem in Source) { if (elem != null) yield return new ElementValue("source", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "substanceDefinition":
            value = SubstanceDefinition;
            return SubstanceDefinition is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "isDefining":
            value = IsDefiningElement;
            return IsDefiningElement is not null;
          case "amount":
            value = Amount;
            return Amount is not null;
          case "amountRatioHighLimit":
            value = AmountRatioHighLimit;
            return AmountRatioHighLimit is not null;
          case "amountType":
            value = AmountType;
            return AmountType is not null;
          case "source":
            value = Source;
            return Source?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SubstanceDefinition is not null) yield return new KeyValuePair<string,object>("substanceDefinition",SubstanceDefinition);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (IsDefiningElement is not null) yield return new KeyValuePair<string,object>("isDefining",IsDefiningElement);
        if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
        if (AmountRatioHighLimit is not null) yield return new KeyValuePair<string,object>("amountRatioHighLimit",AmountRatioHighLimit);
        if (AmountType is not null) yield return new KeyValuePair<string,object>("amountType",AmountType);
        if (Source?.Any() == true) yield return new KeyValuePair<string,object>("source",Source);
      }

    }

    /// <summary>
    /// Material or taxonomic/anatomical source for the substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SubstanceDefinition#SourceMaterial", IsNestedType=true)]
    public partial class SourceMaterialComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SubstanceDefinition#SourceMaterial"; } }

      /// <summary>
      /// A classification that provides the origin of the raw material. Example: cat hair would be an Animal source type
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The genus of an organism, typically referring to the Latin epithet of the genus element of the plant/animal scientific name
      /// </summary>
      [FhirElement("genus", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Genus
      {
        get { return _Genus; }
        set { _Genus = value; OnPropertyChanged("Genus"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Genus;

      /// <summary>
      /// The species of an organism, typically referring to the Latin epithet of the species of the plant/animal
      /// </summary>
      [FhirElement("species", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Species
      {
        get { return _Species; }
        set { _Species = value; OnPropertyChanged("Species"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Species;

      /// <summary>
      /// An anatomical origin of the source material within an organism
      /// </summary>
      [FhirElement("part", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Part
      {
        get { return _Part; }
        set { _Part = value; OnPropertyChanged("Part"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Part;

      /// <summary>
      /// The country or countries where the material is harvested
      /// </summary>
      [FhirElement("countryOfOrigin", InSummary=true, Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> CountryOfOrigin
      {
        get { if(_CountryOfOrigin==null) _CountryOfOrigin = new List<Hl7.Fhir.Model.CodeableConcept>(); return _CountryOfOrigin; }
        set { _CountryOfOrigin = value; OnPropertyChanged("CountryOfOrigin"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _CountryOfOrigin;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SourceMaterialComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Genus != null) dest.Genus = (Hl7.Fhir.Model.CodeableConcept)Genus.DeepCopy();
        if(Species != null) dest.Species = (Hl7.Fhir.Model.CodeableConcept)Species.DeepCopy();
        if(Part != null) dest.Part = (Hl7.Fhir.Model.CodeableConcept)Part.DeepCopy();
        if(CountryOfOrigin != null) dest.CountryOfOrigin = new List<Hl7.Fhir.Model.CodeableConcept>(CountryOfOrigin.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SourceMaterialComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SourceMaterialComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Genus, otherT.Genus)) return false;
        if( !DeepComparable.Matches(Species, otherT.Species)) return false;
        if( !DeepComparable.Matches(Part, otherT.Part)) return false;
        if( !DeepComparable.Matches(CountryOfOrigin, otherT.CountryOfOrigin)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SourceMaterialComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Genus, otherT.Genus)) return false;
        if( !DeepComparable.IsExactly(Species, otherT.Species)) return false;
        if( !DeepComparable.IsExactly(Part, otherT.Part)) return false;
        if( !DeepComparable.IsExactly(CountryOfOrigin, otherT.CountryOfOrigin)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Genus != null) yield return Genus;
          if (Species != null) yield return Species;
          if (Part != null) yield return Part;
          foreach (var elem in CountryOfOrigin) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Genus != null) yield return new ElementValue("genus", Genus);
          if (Species != null) yield return new ElementValue("species", Species);
          if (Part != null) yield return new ElementValue("part", Part);
          foreach (var elem in CountryOfOrigin) { if (elem != null) yield return new ElementValue("countryOfOrigin", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "genus":
            value = Genus;
            return Genus is not null;
          case "species":
            value = Species;
            return Species is not null;
          case "part":
            value = Part;
            return Part is not null;
          case "countryOfOrigin":
            value = CountryOfOrigin;
            return CountryOfOrigin?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Genus is not null) yield return new KeyValuePair<string,object>("genus",Genus);
        if (Species is not null) yield return new KeyValuePair<string,object>("species",Species);
        if (Part is not null) yield return new KeyValuePair<string,object>("part",Part);
        if (CountryOfOrigin?.Any() == true) yield return new KeyValuePair<string,object>("countryOfOrigin",CountryOfOrigin);
      }

    }

    /// <summary>
    /// Identifier by which this substance is known
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// A business level identifier of the substance
    /// </summary>
    [FhirElement("version", InSummary=true, Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// A business level identifier of the substance
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Status of substance within the catalogue e.g. approved
    /// </summary>
    [FhirElement("status", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Status
    {
      get { return _Status; }
      set { _Status = value; OnPropertyChanged("Status"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Status;

    /// <summary>
    /// A high level categorization, e.g. polymer or nucleic acid, or food, chemical, biological, or a lower level such as the general types of polymer (linear or branch chain) or type of impurity (process related or contaminant)
    /// </summary>
    [FhirElement("classification", InSummary=true, Order=120)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Classification
    {
      get { if(_Classification==null) _Classification = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Classification; }
      set { _Classification = value; OnPropertyChanged("Classification"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Classification;

    /// <summary>
    /// If the substance applies to only human or veterinary use
    /// </summary>
    [FhirElement("domain", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Domain
    {
      get { return _Domain; }
      set { _Domain = value; OnPropertyChanged("Domain"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Domain;

    /// <summary>
    /// The quality standard, established benchmark, to which substance complies (e.g. USP/NF, Ph. Eur, JP, BP, Company Standard)
    /// </summary>
    [FhirElement("grade", InSummary=true, Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Grade
    {
      get { if(_Grade==null) _Grade = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Grade; }
      set { _Grade = value; OnPropertyChanged("Grade"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Grade;

    /// <summary>
    /// Textual description of the substance
    /// </summary>
    [FhirElement("description", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// Supporting literature
    /// </summary>
    [FhirElement("informationSource", InSummary=true, Order=160)]
    [CLSCompliant(false)]
    [References("Citation")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> InformationSource
    {
      get { if(_InformationSource==null) _InformationSource = new List<Hl7.Fhir.Model.ResourceReference>(); return _InformationSource; }
      set { _InformationSource = value; OnPropertyChanged("InformationSource"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _InformationSource;

    /// <summary>
    /// Textual comment about the substance's catalogue or registry record
    /// </summary>
    [FhirElement("note", InSummary=true, Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// A company that makes this substance
    /// </summary>
    [FhirElement("manufacturer", InSummary=true, Order=180)]
    [CLSCompliant(false)]
    [References("Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Manufacturer
    {
      get { if(_Manufacturer==null) _Manufacturer = new List<Hl7.Fhir.Model.ResourceReference>(); return _Manufacturer; }
      set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Manufacturer;

    /// <summary>
    /// A company that supplies this substance
    /// </summary>
    [FhirElement("supplier", InSummary=true, Order=190)]
    [CLSCompliant(false)]
    [References("Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Supplier
    {
      get { if(_Supplier==null) _Supplier = new List<Hl7.Fhir.Model.ResourceReference>(); return _Supplier; }
      set { _Supplier = value; OnPropertyChanged("Supplier"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Supplier;

    /// <summary>
    /// Moiety, for structural modifications
    /// </summary>
    [FhirElement("moiety", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstanceDefinition.MoietyComponent> Moiety
    {
      get { if(_Moiety==null) _Moiety = new List<Hl7.Fhir.Model.SubstanceDefinition.MoietyComponent>(); return _Moiety; }
      set { _Moiety = value; OnPropertyChanged("Moiety"); }
    }

    private List<Hl7.Fhir.Model.SubstanceDefinition.MoietyComponent> _Moiety;

    /// <summary>
    /// General specifications for this substance
    /// </summary>
    [FhirElement("property", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstanceDefinition.PropertyComponent> Property
    {
      get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.SubstanceDefinition.PropertyComponent>(); return _Property; }
      set { _Property = value; OnPropertyChanged("Property"); }
    }

    private List<Hl7.Fhir.Model.SubstanceDefinition.PropertyComponent> _Property;

    /// <summary>
    /// General information detailing this substance
    /// </summary>
    [FhirElement("referenceInformation", InSummary=true, Order=220)]
    [CLSCompliant(false)]
    [References("SubstanceReferenceInformation")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ReferenceInformation
    {
      get { return _ReferenceInformation; }
      set { _ReferenceInformation = value; OnPropertyChanged("ReferenceInformation"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ReferenceInformation;

    /// <summary>
    /// The molecular weight or weight range (for proteins, polymers or nucleic acids)
    /// </summary>
    [FhirElement("molecularWeight", InSummary=true, Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstanceDefinition.MolecularWeightComponent> MolecularWeight
    {
      get { if(_MolecularWeight==null) _MolecularWeight = new List<Hl7.Fhir.Model.SubstanceDefinition.MolecularWeightComponent>(); return _MolecularWeight; }
      set { _MolecularWeight = value; OnPropertyChanged("MolecularWeight"); }
    }

    private List<Hl7.Fhir.Model.SubstanceDefinition.MolecularWeightComponent> _MolecularWeight;

    /// <summary>
    /// Structural information
    /// </summary>
    [FhirElement("structure", InSummary=true, Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.SubstanceDefinition.StructureComponent Structure
    {
      get { return _Structure; }
      set { _Structure = value; OnPropertyChanged("Structure"); }
    }

    private Hl7.Fhir.Model.SubstanceDefinition.StructureComponent _Structure;

    /// <summary>
    /// Codes associated with the substance
    /// </summary>
    [FhirElement("code", InSummary=true, Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstanceDefinition.CodeComponent> Code
    {
      get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.SubstanceDefinition.CodeComponent>(); return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private List<Hl7.Fhir.Model.SubstanceDefinition.CodeComponent> _Code;

    /// <summary>
    /// Names applicable to this substance
    /// </summary>
    [FhirElement("name", InSummary=true, Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent> Name
    {
      get { if(_Name==null) _Name = new List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent>(); return _Name; }
      set { _Name = value; OnPropertyChanged("Name"); }
    }

    private List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent> _Name;

    /// <summary>
    /// A link between this substance and another, with details of the relationship
    /// </summary>
    [FhirElement("relationship", InSummary=true, Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SubstanceDefinition.RelationshipComponent> Relationship
    {
      get { if(_Relationship==null) _Relationship = new List<Hl7.Fhir.Model.SubstanceDefinition.RelationshipComponent>(); return _Relationship; }
      set { _Relationship = value; OnPropertyChanged("Relationship"); }
    }

    private List<Hl7.Fhir.Model.SubstanceDefinition.RelationshipComponent> _Relationship;

    /// <summary>
    /// Data items specific to nucleic acids
    /// </summary>
    [FhirElement("nucleicAcid", InSummary=true, Order=280)]
    [CLSCompliant(false)]
    [References("SubstanceNucleicAcid")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference NucleicAcid
    {
      get { return _NucleicAcid; }
      set { _NucleicAcid = value; OnPropertyChanged("NucleicAcid"); }
    }

    private Hl7.Fhir.Model.ResourceReference _NucleicAcid;

    /// <summary>
    /// Data items specific to polymers
    /// </summary>
    [FhirElement("polymer", InSummary=true, Order=290)]
    [CLSCompliant(false)]
    [References("SubstancePolymer")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Polymer
    {
      get { return _Polymer; }
      set { _Polymer = value; OnPropertyChanged("Polymer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Polymer;

    /// <summary>
    /// Data items specific to proteins
    /// </summary>
    [FhirElement("protein", InSummary=true, Order=300)]
    [CLSCompliant(false)]
    [References("SubstanceProtein")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Protein
    {
      get { return _Protein; }
      set { _Protein = value; OnPropertyChanged("Protein"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Protein;

    /// <summary>
    /// Material or taxonomic/anatomical source for the substance
    /// </summary>
    [FhirElement("sourceMaterial", InSummary=true, Order=310)]
    [DataMember]
    public Hl7.Fhir.Model.SubstanceDefinition.SourceMaterialComponent SourceMaterial
    {
      get { return _SourceMaterial; }
      set { _SourceMaterial = value; OnPropertyChanged("SourceMaterial"); }
    }

    private Hl7.Fhir.Model.SubstanceDefinition.SourceMaterialComponent _SourceMaterial;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as SubstanceDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(Status != null) dest.Status = (Hl7.Fhir.Model.CodeableConcept)Status.DeepCopy();
      if(Classification != null) dest.Classification = new List<Hl7.Fhir.Model.CodeableConcept>(Classification.DeepCopy());
      if(Domain != null) dest.Domain = (Hl7.Fhir.Model.CodeableConcept)Domain.DeepCopy();
      if(Grade != null) dest.Grade = new List<Hl7.Fhir.Model.CodeableConcept>(Grade.DeepCopy());
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(InformationSource != null) dest.InformationSource = new List<Hl7.Fhir.Model.ResourceReference>(InformationSource.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Manufacturer != null) dest.Manufacturer = new List<Hl7.Fhir.Model.ResourceReference>(Manufacturer.DeepCopy());
      if(Supplier != null) dest.Supplier = new List<Hl7.Fhir.Model.ResourceReference>(Supplier.DeepCopy());
      if(Moiety != null) dest.Moiety = new List<Hl7.Fhir.Model.SubstanceDefinition.MoietyComponent>(Moiety.DeepCopy());
      if(Property != null) dest.Property = new List<Hl7.Fhir.Model.SubstanceDefinition.PropertyComponent>(Property.DeepCopy());
      if(ReferenceInformation != null) dest.ReferenceInformation = (Hl7.Fhir.Model.ResourceReference)ReferenceInformation.DeepCopy();
      if(MolecularWeight != null) dest.MolecularWeight = new List<Hl7.Fhir.Model.SubstanceDefinition.MolecularWeightComponent>(MolecularWeight.DeepCopy());
      if(Structure != null) dest.Structure = (Hl7.Fhir.Model.SubstanceDefinition.StructureComponent)Structure.DeepCopy();
      if(Code != null) dest.Code = new List<Hl7.Fhir.Model.SubstanceDefinition.CodeComponent>(Code.DeepCopy());
      if(Name != null) dest.Name = new List<Hl7.Fhir.Model.SubstanceDefinition.NameComponent>(Name.DeepCopy());
      if(Relationship != null) dest.Relationship = new List<Hl7.Fhir.Model.SubstanceDefinition.RelationshipComponent>(Relationship.DeepCopy());
      if(NucleicAcid != null) dest.NucleicAcid = (Hl7.Fhir.Model.ResourceReference)NucleicAcid.DeepCopy();
      if(Polymer != null) dest.Polymer = (Hl7.Fhir.Model.ResourceReference)Polymer.DeepCopy();
      if(Protein != null) dest.Protein = (Hl7.Fhir.Model.ResourceReference)Protein.DeepCopy();
      if(SourceMaterial != null) dest.SourceMaterial = (Hl7.Fhir.Model.SubstanceDefinition.SourceMaterialComponent)SourceMaterial.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new SubstanceDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as SubstanceDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(Status, otherT.Status)) return false;
      if( !DeepComparable.Matches(Classification, otherT.Classification)) return false;
      if( !DeepComparable.Matches(Domain, otherT.Domain)) return false;
      if( !DeepComparable.Matches(Grade, otherT.Grade)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.Matches(Supplier, otherT.Supplier)) return false;
      if( !DeepComparable.Matches(Moiety, otherT.Moiety)) return false;
      if( !DeepComparable.Matches(Property, otherT.Property)) return false;
      if( !DeepComparable.Matches(ReferenceInformation, otherT.ReferenceInformation)) return false;
      if( !DeepComparable.Matches(MolecularWeight, otherT.MolecularWeight)) return false;
      if( !DeepComparable.Matches(Structure, otherT.Structure)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(Name, otherT.Name)) return false;
      if( !DeepComparable.Matches(Relationship, otherT.Relationship)) return false;
      if( !DeepComparable.Matches(NucleicAcid, otherT.NucleicAcid)) return false;
      if( !DeepComparable.Matches(Polymer, otherT.Polymer)) return false;
      if( !DeepComparable.Matches(Protein, otherT.Protein)) return false;
      if( !DeepComparable.Matches(SourceMaterial, otherT.SourceMaterial)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as SubstanceDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(Status, otherT.Status)) return false;
      if( !DeepComparable.IsExactly(Classification, otherT.Classification)) return false;
      if( !DeepComparable.IsExactly(Domain, otherT.Domain)) return false;
      if( !DeepComparable.IsExactly(Grade, otherT.Grade)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(InformationSource, otherT.InformationSource)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.IsExactly(Supplier, otherT.Supplier)) return false;
      if( !DeepComparable.IsExactly(Moiety, otherT.Moiety)) return false;
      if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
      if( !DeepComparable.IsExactly(ReferenceInformation, otherT.ReferenceInformation)) return false;
      if( !DeepComparable.IsExactly(MolecularWeight, otherT.MolecularWeight)) return false;
      if( !DeepComparable.IsExactly(Structure, otherT.Structure)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(Name, otherT.Name)) return false;
      if( !DeepComparable.IsExactly(Relationship, otherT.Relationship)) return false;
      if( !DeepComparable.IsExactly(NucleicAcid, otherT.NucleicAcid)) return false;
      if( !DeepComparable.IsExactly(Polymer, otherT.Polymer)) return false;
      if( !DeepComparable.IsExactly(Protein, otherT.Protein)) return false;
      if( !DeepComparable.IsExactly(SourceMaterial, otherT.SourceMaterial)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (Status != null) yield return Status;
        foreach (var elem in Classification) { if (elem != null) yield return elem; }
        if (Domain != null) yield return Domain;
        foreach (var elem in Grade) { if (elem != null) yield return elem; }
        if (Description != null) yield return Description;
        foreach (var elem in InformationSource) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Manufacturer) { if (elem != null) yield return elem; }
        foreach (var elem in Supplier) { if (elem != null) yield return elem; }
        foreach (var elem in Moiety) { if (elem != null) yield return elem; }
        foreach (var elem in Property) { if (elem != null) yield return elem; }
        if (ReferenceInformation != null) yield return ReferenceInformation;
        foreach (var elem in MolecularWeight) { if (elem != null) yield return elem; }
        if (Structure != null) yield return Structure;
        foreach (var elem in Code) { if (elem != null) yield return elem; }
        foreach (var elem in Name) { if (elem != null) yield return elem; }
        foreach (var elem in Relationship) { if (elem != null) yield return elem; }
        if (NucleicAcid != null) yield return NucleicAcid;
        if (Polymer != null) yield return Polymer;
        if (Protein != null) yield return Protein;
        if (SourceMaterial != null) yield return SourceMaterial;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (Status != null) yield return new ElementValue("status", Status);
        foreach (var elem in Classification) { if (elem != null) yield return new ElementValue("classification", elem); }
        if (Domain != null) yield return new ElementValue("domain", Domain);
        foreach (var elem in Grade) { if (elem != null) yield return new ElementValue("grade", elem); }
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in InformationSource) { if (elem != null) yield return new ElementValue("informationSource", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Manufacturer) { if (elem != null) yield return new ElementValue("manufacturer", elem); }
        foreach (var elem in Supplier) { if (elem != null) yield return new ElementValue("supplier", elem); }
        foreach (var elem in Moiety) { if (elem != null) yield return new ElementValue("moiety", elem); }
        foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
        if (ReferenceInformation != null) yield return new ElementValue("referenceInformation", ReferenceInformation);
        foreach (var elem in MolecularWeight) { if (elem != null) yield return new ElementValue("molecularWeight", elem); }
        if (Structure != null) yield return new ElementValue("structure", Structure);
        foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
        foreach (var elem in Name) { if (elem != null) yield return new ElementValue("name", elem); }
        foreach (var elem in Relationship) { if (elem != null) yield return new ElementValue("relationship", elem); }
        if (NucleicAcid != null) yield return new ElementValue("nucleicAcid", NucleicAcid);
        if (Polymer != null) yield return new ElementValue("polymer", Polymer);
        if (Protein != null) yield return new ElementValue("protein", Protein);
        if (SourceMaterial != null) yield return new ElementValue("sourceMaterial", SourceMaterial);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "status":
          value = Status;
          return Status is not null;
        case "classification":
          value = Classification;
          return Classification?.Any() == true;
        case "domain":
          value = Domain;
          return Domain is not null;
        case "grade":
          value = Grade;
          return Grade?.Any() == true;
        case "description":
          value = Description;
          return Description is not null;
        case "informationSource":
          value = InformationSource;
          return InformationSource?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "manufacturer":
          value = Manufacturer;
          return Manufacturer?.Any() == true;
        case "supplier":
          value = Supplier;
          return Supplier?.Any() == true;
        case "moiety":
          value = Moiety;
          return Moiety?.Any() == true;
        case "property":
          value = Property;
          return Property?.Any() == true;
        case "referenceInformation":
          value = ReferenceInformation;
          return ReferenceInformation is not null;
        case "molecularWeight":
          value = MolecularWeight;
          return MolecularWeight?.Any() == true;
        case "structure":
          value = Structure;
          return Structure is not null;
        case "code":
          value = Code;
          return Code?.Any() == true;
        case "name":
          value = Name;
          return Name?.Any() == true;
        case "relationship":
          value = Relationship;
          return Relationship?.Any() == true;
        case "nucleicAcid":
          value = NucleicAcid;
          return NucleicAcid is not null;
        case "polymer":
          value = Polymer;
          return Polymer is not null;
        case "protein":
          value = Protein;
          return Protein is not null;
        case "sourceMaterial":
          value = SourceMaterial;
          return SourceMaterial is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (Status is not null) yield return new KeyValuePair<string,object>("status",Status);
      if (Classification?.Any() == true) yield return new KeyValuePair<string,object>("classification",Classification);
      if (Domain is not null) yield return new KeyValuePair<string,object>("domain",Domain);
      if (Grade?.Any() == true) yield return new KeyValuePair<string,object>("grade",Grade);
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (InformationSource?.Any() == true) yield return new KeyValuePair<string,object>("informationSource",InformationSource);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Manufacturer?.Any() == true) yield return new KeyValuePair<string,object>("manufacturer",Manufacturer);
      if (Supplier?.Any() == true) yield return new KeyValuePair<string,object>("supplier",Supplier);
      if (Moiety?.Any() == true) yield return new KeyValuePair<string,object>("moiety",Moiety);
      if (Property?.Any() == true) yield return new KeyValuePair<string,object>("property",Property);
      if (ReferenceInformation is not null) yield return new KeyValuePair<string,object>("referenceInformation",ReferenceInformation);
      if (MolecularWeight?.Any() == true) yield return new KeyValuePair<string,object>("molecularWeight",MolecularWeight);
      if (Structure is not null) yield return new KeyValuePair<string,object>("structure",Structure);
      if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
      if (Name?.Any() == true) yield return new KeyValuePair<string,object>("name",Name);
      if (Relationship?.Any() == true) yield return new KeyValuePair<string,object>("relationship",Relationship);
      if (NucleicAcid is not null) yield return new KeyValuePair<string,object>("nucleicAcid",NucleicAcid);
      if (Polymer is not null) yield return new KeyValuePair<string,object>("polymer",Polymer);
      if (Protein is not null) yield return new KeyValuePair<string,object>("protein",Protein);
      if (SourceMaterial is not null) yield return new KeyValuePair<string,object>("sourceMaterial",SourceMaterial);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Investigation to increase healthcare-related patient-independent knowledge
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ResearchStudy","http://hl7.org/fhir/StructureDefinition/ResearchStudy", IsResource=true)]
  public partial class ResearchStudy : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ResearchStudy"; } }

    /// <summary>
    /// Additional names for the study
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#Label", IsNestedType=true)]
    [BackboneType("ResearchStudy.label")]
    public partial class LabelComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#Label"; } }

      /// <summary>
      /// primary | official | scientific | plain-language | subtitle | short-title | acronym | earlier-title | language | auto-translated | human-use | machine-use | duplicate-uid
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The name
      /// </summary>
      [FhirElement("value", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LabelComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LabelComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LabelComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LabelComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// Sponsors, collaborators, and other parties
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#AssociatedParty", IsNestedType=true)]
    [BackboneType("ResearchStudy.associatedParty")]
    public partial class AssociatedPartyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#AssociatedParty"; } }

      /// <summary>
      /// Name of associated party
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Name of associated party
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// sponsor | lead-sponsor | sponsor-investigator | primary-investigator | collaborator | funding-source | general-contact | recruitment-contact | sub-investigator | study-director | study-chair
      /// </summary>
      [FhirElement("role", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// When active in the role
      /// </summary>
      [FhirElement("period", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Period> Period
      {
        get { if(_Period==null) _Period = new List<Hl7.Fhir.Model.Period>(); return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private List<Hl7.Fhir.Model.Period> _Period;

      /// <summary>
      /// nih | fda | government | nonprofit | academic | industry
      /// </summary>
      [FhirElement("classifier", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Classifier
      {
        get { if(_Classifier==null) _Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Classifier; }
        set { _Classifier = value; OnPropertyChanged("Classifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Classifier;

      /// <summary>
      /// Individual or organization associated with study (use practitionerRole to specify their organisation)
      /// </summary>
      [FhirElement("party", Order=80)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AssociatedPartyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(Period != null) dest.Period = new List<Hl7.Fhir.Model.Period>(Period.DeepCopy());
        if(Classifier != null) dest.Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(Classifier.DeepCopy());
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AssociatedPartyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AssociatedPartyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;
        if( !DeepComparable.Matches(Classifier, otherT.Classifier)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AssociatedPartyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
        if( !DeepComparable.IsExactly(Classifier, otherT.Classifier)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (Role != null) yield return Role;
          foreach (var elem in Period) { if (elem != null) yield return elem; }
          foreach (var elem in Classifier) { if (elem != null) yield return elem; }
          if (Party != null) yield return Party;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Role != null) yield return new ElementValue("role", Role);
          foreach (var elem in Period) { if (elem != null) yield return new ElementValue("period", elem); }
          foreach (var elem in Classifier) { if (elem != null) yield return new ElementValue("classifier", elem); }
          if (Party != null) yield return new ElementValue("party", Party);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "role":
            value = Role;
            return Role is not null;
          case "period":
            value = Period;
            return Period?.Any() == true;
          case "classifier":
            value = Classifier;
            return Classifier?.Any() == true;
          case "party":
            value = Party;
            return Party is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Period?.Any() == true) yield return new KeyValuePair<string,object>("period",Period);
        if (Classifier?.Any() == true) yield return new KeyValuePair<string,object>("classifier",Classifier);
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
      }

    }

    /// <summary>
    /// Status of study with time for that status
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#ProgressStatus", IsNestedType=true)]
    [BackboneType("ResearchStudy.progressStatus")]
    public partial class ProgressStatusComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#ProgressStatus"; } }

      /// <summary>
      /// Label for status or state (e.g. recruitment status)
      /// </summary>
      [FhirElement("state", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept State
      {
        get { return _State; }
        set { _State = value; OnPropertyChanged("State"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _State;

      /// <summary>
      /// Actual if true else anticipated
      /// </summary>
      [FhirElement("actual", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ActualElement
      {
        get { return _ActualElement; }
        set { _ActualElement = value; OnPropertyChanged("ActualElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ActualElement;

      /// <summary>
      /// Actual if true else anticipated
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Actual
      {
        get { return ActualElement != null ? ActualElement.Value : null; }
        set
        {
          if (value == null)
            ActualElement = null;
          else
            ActualElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Actual");
        }
      }

      /// <summary>
      /// Date range
      /// </summary>
      [FhirElement("period", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProgressStatusComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(State != null) dest.State = (Hl7.Fhir.Model.CodeableConcept)State.DeepCopy();
        if(ActualElement != null) dest.ActualElement = (Hl7.Fhir.Model.FhirBoolean)ActualElement.DeepCopy();
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProgressStatusComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProgressStatusComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(State, otherT.State)) return false;
        if( !DeepComparable.Matches(ActualElement, otherT.ActualElement)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProgressStatusComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(State, otherT.State)) return false;
        if( !DeepComparable.IsExactly(ActualElement, otherT.ActualElement)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (State != null) yield return State;
          if (ActualElement != null) yield return ActualElement;
          if (Period != null) yield return Period;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (State != null) yield return new ElementValue("state", State);
          if (ActualElement != null) yield return new ElementValue("actual", ActualElement);
          if (Period != null) yield return new ElementValue("period", Period);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "state":
            value = State;
            return State is not null;
          case "actual":
            value = ActualElement;
            return ActualElement is not null;
          case "period":
            value = Period;
            return Period is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (State is not null) yield return new KeyValuePair<string,object>("state",State);
        if (ActualElement is not null) yield return new KeyValuePair<string,object>("actual",ActualElement);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      }

    }

    /// <summary>
    /// Target or actual group of participants enrolled in study
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#Recruitment", IsNestedType=true)]
    [BackboneType("ResearchStudy.recruitment")]
    public partial class RecruitmentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#Recruitment"; } }

      /// <summary>
      /// Estimated total number of participants to be enrolled
      /// </summary>
      [FhirElement("targetNumber", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt TargetNumberElement
      {
        get { return _TargetNumberElement; }
        set { _TargetNumberElement = value; OnPropertyChanged("TargetNumberElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _TargetNumberElement;

      /// <summary>
      /// Estimated total number of participants to be enrolled
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? TargetNumber
      {
        get { return TargetNumberElement != null ? TargetNumberElement.Value : null; }
        set
        {
          if (value == null)
            TargetNumberElement = null;
          else
            TargetNumberElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("TargetNumber");
        }
      }

      /// <summary>
      /// Actual total number of participants enrolled in study
      /// </summary>
      [FhirElement("actualNumber", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt ActualNumberElement
      {
        get { return _ActualNumberElement; }
        set { _ActualNumberElement = value; OnPropertyChanged("ActualNumberElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _ActualNumberElement;

      /// <summary>
      /// Actual total number of participants enrolled in study
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? ActualNumber
      {
        get { return ActualNumberElement != null ? ActualNumberElement.Value : null; }
        set
        {
          if (value == null)
            ActualNumberElement = null;
          else
            ActualNumberElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("ActualNumber");
        }
      }

      /// <summary>
      /// Inclusion and exclusion criteria
      /// </summary>
      [FhirElement("eligibility", Order=60)]
      [CLSCompliant(false)]
      [References("Group","EvidenceVariable")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Eligibility
      {
        get { return _Eligibility; }
        set { _Eligibility = value; OnPropertyChanged("Eligibility"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Eligibility;

      /// <summary>
      /// Group of participants who were enrolled in study
      /// </summary>
      [FhirElement("actualGroup", InSummary=true, Order=70, FiveWs="FiveWs.subject[x]")]
      [CLSCompliant(false)]
      [References("Group")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference ActualGroup
      {
        get { return _ActualGroup; }
        set { _ActualGroup = value; OnPropertyChanged("ActualGroup"); }
      }

      private Hl7.Fhir.Model.ResourceReference _ActualGroup;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RecruitmentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TargetNumberElement != null) dest.TargetNumberElement = (Hl7.Fhir.Model.UnsignedInt)TargetNumberElement.DeepCopy();
        if(ActualNumberElement != null) dest.ActualNumberElement = (Hl7.Fhir.Model.UnsignedInt)ActualNumberElement.DeepCopy();
        if(Eligibility != null) dest.Eligibility = (Hl7.Fhir.Model.ResourceReference)Eligibility.DeepCopy();
        if(ActualGroup != null) dest.ActualGroup = (Hl7.Fhir.Model.ResourceReference)ActualGroup.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RecruitmentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RecruitmentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TargetNumberElement, otherT.TargetNumberElement)) return false;
        if( !DeepComparable.Matches(ActualNumberElement, otherT.ActualNumberElement)) return false;
        if( !DeepComparable.Matches(Eligibility, otherT.Eligibility)) return false;
        if( !DeepComparable.Matches(ActualGroup, otherT.ActualGroup)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RecruitmentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TargetNumberElement, otherT.TargetNumberElement)) return false;
        if( !DeepComparable.IsExactly(ActualNumberElement, otherT.ActualNumberElement)) return false;
        if( !DeepComparable.IsExactly(Eligibility, otherT.Eligibility)) return false;
        if( !DeepComparable.IsExactly(ActualGroup, otherT.ActualGroup)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TargetNumberElement != null) yield return TargetNumberElement;
          if (ActualNumberElement != null) yield return ActualNumberElement;
          if (Eligibility != null) yield return Eligibility;
          if (ActualGroup != null) yield return ActualGroup;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TargetNumberElement != null) yield return new ElementValue("targetNumber", TargetNumberElement);
          if (ActualNumberElement != null) yield return new ElementValue("actualNumber", ActualNumberElement);
          if (Eligibility != null) yield return new ElementValue("eligibility", Eligibility);
          if (ActualGroup != null) yield return new ElementValue("actualGroup", ActualGroup);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "targetNumber":
            value = TargetNumberElement;
            return TargetNumberElement is not null;
          case "actualNumber":
            value = ActualNumberElement;
            return ActualNumberElement is not null;
          case "eligibility":
            value = Eligibility;
            return Eligibility is not null;
          case "actualGroup":
            value = ActualGroup;
            return ActualGroup is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TargetNumberElement is not null) yield return new KeyValuePair<string,object>("targetNumber",TargetNumberElement);
        if (ActualNumberElement is not null) yield return new KeyValuePair<string,object>("actualNumber",ActualNumberElement);
        if (Eligibility is not null) yield return new KeyValuePair<string,object>("eligibility",Eligibility);
        if (ActualGroup is not null) yield return new KeyValuePair<string,object>("actualGroup",ActualGroup);
      }

    }

    /// <summary>
    /// Defined path through the study for a subject
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#ComparisonGroup", IsNestedType=true)]
    [BackboneType("ResearchStudy.comparisonGroup")]
    public partial class ComparisonGroupComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#ComparisonGroup"; } }

      /// <summary>
      /// Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily
      /// </summary>
      [FhirElement("linkId", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Id LinkIdElement
      {
        get { return _LinkIdElement; }
        set { _LinkIdElement = value; OnPropertyChanged("LinkIdElement"); }
      }

      private Hl7.Fhir.Model.Id _LinkIdElement;

      /// <summary>
      /// Allows the comparisonGroup for the study and the comparisonGroup for the subject to be linked easily
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LinkId
      {
        get { return LinkIdElement != null ? LinkIdElement.Value : null; }
        set
        {
          if (value == null)
            LinkIdElement = null;
          else
            LinkIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("LinkId");
        }
      }

      /// <summary>
      /// Label for study comparisonGroup
      /// </summary>
      [FhirElement("name", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Label for study comparisonGroup
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Categorization of study comparisonGroup
      /// </summary>
      [FhirElement("type", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Short explanation of study path
      /// </summary>
      [FhirElement("description", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Short explanation of study path
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Interventions or exposures in this comparisonGroup or cohort
      /// </summary>
      [FhirElement("intendedExposure", Order=80)]
      [CLSCompliant(false)]
      [References("EvidenceVariable")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> IntendedExposure
      {
        get { if(_IntendedExposure==null) _IntendedExposure = new List<Hl7.Fhir.Model.ResourceReference>(); return _IntendedExposure; }
        set { _IntendedExposure = value; OnPropertyChanged("IntendedExposure"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _IntendedExposure;

      /// <summary>
      /// Group of participants who were enrolled in study comparisonGroup
      /// </summary>
      [FhirElement("observedGroup", Order=90)]
      [CLSCompliant(false)]
      [References("Group")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference ObservedGroup
      {
        get { return _ObservedGroup; }
        set { _ObservedGroup = value; OnPropertyChanged("ObservedGroup"); }
      }

      private Hl7.Fhir.Model.ResourceReference _ObservedGroup;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ComparisonGroupComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LinkIdElement != null) dest.LinkIdElement = (Hl7.Fhir.Model.Id)LinkIdElement.DeepCopy();
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(IntendedExposure != null) dest.IntendedExposure = new List<Hl7.Fhir.Model.ResourceReference>(IntendedExposure.DeepCopy());
        if(ObservedGroup != null) dest.ObservedGroup = (Hl7.Fhir.Model.ResourceReference)ObservedGroup.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ComparisonGroupComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ComparisonGroupComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(IntendedExposure, otherT.IntendedExposure)) return false;
        if( !DeepComparable.Matches(ObservedGroup, otherT.ObservedGroup)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ComparisonGroupComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LinkIdElement, otherT.LinkIdElement)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(IntendedExposure, otherT.IntendedExposure)) return false;
        if( !DeepComparable.IsExactly(ObservedGroup, otherT.ObservedGroup)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LinkIdElement != null) yield return LinkIdElement;
          if (NameElement != null) yield return NameElement;
          if (Type != null) yield return Type;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in IntendedExposure) { if (elem != null) yield return elem; }
          if (ObservedGroup != null) yield return ObservedGroup;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LinkIdElement != null) yield return new ElementValue("linkId", LinkIdElement);
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Type != null) yield return new ElementValue("type", Type);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in IntendedExposure) { if (elem != null) yield return new ElementValue("intendedExposure", elem); }
          if (ObservedGroup != null) yield return new ElementValue("observedGroup", ObservedGroup);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "linkId":
            value = LinkIdElement;
            return LinkIdElement is not null;
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "intendedExposure":
            value = IntendedExposure;
            return IntendedExposure?.Any() == true;
          case "observedGroup":
            value = ObservedGroup;
            return ObservedGroup is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LinkIdElement is not null) yield return new KeyValuePair<string,object>("linkId",LinkIdElement);
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (IntendedExposure?.Any() == true) yield return new KeyValuePair<string,object>("intendedExposure",IntendedExposure);
        if (ObservedGroup is not null) yield return new KeyValuePair<string,object>("observedGroup",ObservedGroup);
      }

    }

    /// <summary>
    /// A goal for the study
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#Objective", IsNestedType=true)]
    [BackboneType("ResearchStudy.objective")]
    public partial class ObjectiveComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#Objective"; } }

      /// <summary>
      /// Label for the objective
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Label for the objective
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// primary | secondary | exploratory
      /// </summary>
      [FhirElement("type", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Description of the objective
      /// </summary>
      [FhirElement("description", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Description of the objective
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ObjectiveComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ObjectiveComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ObjectiveComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ObjectiveComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (Type != null) yield return Type;
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Type != null) yield return new ElementValue("type", Type);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// A variable measured during the study
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#OutcomeMeasure", IsNestedType=true)]
    [BackboneType("ResearchStudy.outcomeMeasure")]
    public partial class OutcomeMeasureComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#OutcomeMeasure"; } }

      /// <summary>
      /// Label for the outcome
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Label for the outcome
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// primary | secondary | exploratory
      /// </summary>
      [FhirElement("type", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// Description of the outcome
      /// </summary>
      [FhirElement("description", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Description of the outcome
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Structured outcome definition
      /// </summary>
      [FhirElement("reference", Order=70)]
      [CLSCompliant(false)]
      [References("EvidenceVariable")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Reference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OutcomeMeasureComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.ResourceReference)Reference.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OutcomeMeasureComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OutcomeMeasureComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OutcomeMeasureComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (DescriptionElement != null) yield return DescriptionElement;
          if (Reference != null) yield return Reference;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (Reference != null) yield return new ElementValue("reference", Reference);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "reference":
            value = Reference;
            return Reference is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
      }

    }

    /// <summary>
    /// Canonical identifier for this study resource
    /// </summary>
    [FhirElement("url", Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this study resource
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Business Identifier for study
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// The business version for the study record
    /// </summary>
    [FhirElement("version", Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// The business version for the study record
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this study (computer friendly)
    /// </summary>
    [FhirElement("name", Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this study (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Human readable name of the study
    /// </summary>
    [FhirElement("title", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Human readable name of the study
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Additional names for the study
    /// </summary>
    [FhirElement("label", Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.LabelComponent> Label
    {
      get { if(_Label==null) _Label = new List<Hl7.Fhir.Model.ResearchStudy.LabelComponent>(); return _Label; }
      set { _Label = value; OnPropertyChanged("Label"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.LabelComponent> _Label;

    /// <summary>
    /// Steps followed in executing study
    /// </summary>
    [FhirElement("protocol", InSummary=true, Order=150)]
    [CLSCompliant(false)]
    [References("PlanDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Protocol
    {
      get { if(_Protocol==null) _Protocol = new List<Hl7.Fhir.Model.ResourceReference>(); return _Protocol; }
      set { _Protocol = value; OnPropertyChanged("Protocol"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Protocol;

    /// <summary>
    /// Part of larger study
    /// </summary>
    [FhirElement("partOf", InSummary=true, Order=160)]
    [CLSCompliant(false)]
    [References("ResearchStudy")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// References, URLs, and attachments
    /// </summary>
    [FhirElement("relatedArtifact", Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Date the resource last changed
    /// </summary>
    [FhirElement("date", Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date the resource last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=190, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility
    /// </summary>
    [FhirElement("primaryPurposeType", InSummary=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept PrimaryPurposeType
    {
      get { return _PrimaryPurposeType; }
      set { _PrimaryPurposeType = value; OnPropertyChanged("PrimaryPurposeType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _PrimaryPurposeType;

    /// <summary>
    /// n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4
    /// </summary>
    [FhirElement("phase", InSummary=true, Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Phase
    {
      get { return _Phase; }
      set { _Phase = value; OnPropertyChanged("Phase"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Phase;

    /// <summary>
    /// Classifications of the study design characteristics
    /// </summary>
    [FhirElement("studyDesign", InSummary=true, Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> StudyDesign
    {
      get { if(_StudyDesign==null) _StudyDesign = new List<Hl7.Fhir.Model.CodeableConcept>(); return _StudyDesign; }
      set { _StudyDesign = value; OnPropertyChanged("StudyDesign"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _StudyDesign;

    /// <summary>
    /// Drugs, devices, etc. under study
    /// </summary>
    [FhirElement("focus", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Focus
    {
      get { if(_Focus==null) _Focus = new List<Hl7.Fhir.Model.CodeableReference>(); return _Focus; }
      set { _Focus = value; OnPropertyChanged("Focus"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Focus;

    /// <summary>
    /// Condition being studied
    /// </summary>
    [FhirElement("condition", InSummary=true, Order=240, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Condition
    {
      get { if(_Condition==null) _Condition = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Condition; }
      set { _Condition = value; OnPropertyChanged("Condition"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Condition;

    /// <summary>
    /// Used to search for the study
    /// </summary>
    [FhirElement("keyword", InSummary=true, Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Keyword
    {
      get { if(_Keyword==null) _Keyword = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Keyword; }
      set { _Keyword = value; OnPropertyChanged("Keyword"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Keyword;

    /// <summary>
    /// Geographic area for the study
    /// </summary>
    [FhirElement("region", InSummary=true, Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Region
    {
      get { if(_Region==null) _Region = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Region; }
      set { _Region = value; OnPropertyChanged("Region"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Region;

    /// <summary>
    /// Brief text explaining the study
    /// </summary>
    [FhirElement("descriptionSummary", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionSummaryElement
    {
      get { return _DescriptionSummaryElement; }
      set { _DescriptionSummaryElement = value; OnPropertyChanged("DescriptionSummaryElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionSummaryElement;

    /// <summary>
    /// Brief text explaining the study
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string DescriptionSummary
    {
      get { return DescriptionSummaryElement != null ? DescriptionSummaryElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionSummaryElement = null;
        else
          DescriptionSummaryElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("DescriptionSummary");
      }
    }

    /// <summary>
    /// Detailed narrative of the study
    /// </summary>
    [FhirElement("description", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Detailed narrative of the study
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// When the study began and ended
    /// </summary>
    [FhirElement("period", InSummary=true, Order=290, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// Facility where study activities are conducted
    /// </summary>
    [FhirElement("site", InSummary=true, Order=300, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location","ResearchStudy","Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Site
    {
      get { if(_Site==null) _Site = new List<Hl7.Fhir.Model.ResourceReference>(); return _Site; }
      set { _Site = value; OnPropertyChanged("Site"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Site;

    /// <summary>
    /// Comments made about the study
    /// </summary>
    [FhirElement("note", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Classification for the study
    /// </summary>
    [FhirElement("classifier", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Classifier
    {
      get { if(_Classifier==null) _Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Classifier; }
      set { _Classifier = value; OnPropertyChanged("Classifier"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Classifier;

    /// <summary>
    /// Sponsors, collaborators, and other parties
    /// </summary>
    [FhirElement("associatedParty", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.AssociatedPartyComponent> AssociatedParty
    {
      get { if(_AssociatedParty==null) _AssociatedParty = new List<Hl7.Fhir.Model.ResearchStudy.AssociatedPartyComponent>(); return _AssociatedParty; }
      set { _AssociatedParty = value; OnPropertyChanged("AssociatedParty"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.AssociatedPartyComponent> _AssociatedParty;

    /// <summary>
    /// Status of study with time for that status
    /// </summary>
    [FhirElement("progressStatus", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.ProgressStatusComponent> ProgressStatus
    {
      get { if(_ProgressStatus==null) _ProgressStatus = new List<Hl7.Fhir.Model.ResearchStudy.ProgressStatusComponent>(); return _ProgressStatus; }
      set { _ProgressStatus = value; OnPropertyChanged("ProgressStatus"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.ProgressStatusComponent> _ProgressStatus;

    /// <summary>
    /// accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design
    /// </summary>
    [FhirElement("whyStopped", InSummary=true, Order=350, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept WhyStopped
    {
      get { return _WhyStopped; }
      set { _WhyStopped = value; OnPropertyChanged("WhyStopped"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _WhyStopped;

    /// <summary>
    /// Target or actual group of participants enrolled in study
    /// </summary>
    [FhirElement("recruitment", InSummary=true, Order=360, FiveWs="FiveWs.subject[x]")]
    [DataMember]
    public Hl7.Fhir.Model.ResearchStudy.RecruitmentComponent Recruitment
    {
      get { return _Recruitment; }
      set { _Recruitment = value; OnPropertyChanged("Recruitment"); }
    }

    private Hl7.Fhir.Model.ResearchStudy.RecruitmentComponent _Recruitment;

    /// <summary>
    /// Defined path through the study for a subject
    /// </summary>
    [FhirElement("comparisonGroup", Order=370)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.ComparisonGroupComponent> ComparisonGroup
    {
      get { if(_ComparisonGroup==null) _ComparisonGroup = new List<Hl7.Fhir.Model.ResearchStudy.ComparisonGroupComponent>(); return _ComparisonGroup; }
      set { _ComparisonGroup = value; OnPropertyChanged("ComparisonGroup"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.ComparisonGroupComponent> _ComparisonGroup;

    /// <summary>
    /// A goal for the study
    /// </summary>
    [FhirElement("objective", Order=380)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent> Objective
    {
      get { if(_Objective==null) _Objective = new List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent>(); return _Objective; }
      set { _Objective = value; OnPropertyChanged("Objective"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent> _Objective;

    /// <summary>
    /// A variable measured during the study
    /// </summary>
    [FhirElement("outcomeMeasure", Order=390)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.OutcomeMeasureComponent> OutcomeMeasure
    {
      get { if(_OutcomeMeasure==null) _OutcomeMeasure = new List<Hl7.Fhir.Model.ResearchStudy.OutcomeMeasureComponent>(); return _OutcomeMeasure; }
      set { _OutcomeMeasure = value; OnPropertyChanged("OutcomeMeasure"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.OutcomeMeasureComponent> _OutcomeMeasure;

    /// <summary>
    /// Link to results generated during the study
    /// </summary>
    [FhirElement("result", InSummary=true, Order=400)]
    [CLSCompliant(false)]
    [References("EvidenceReport","Citation","DiagnosticReport")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Result
    {
      get { if(_Result==null) _Result = new List<Hl7.Fhir.Model.ResourceReference>(); return _Result; }
      set { _Result = value; OnPropertyChanged("Result"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Result;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ResearchStudy;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(Label != null) dest.Label = new List<Hl7.Fhir.Model.ResearchStudy.LabelComponent>(Label.DeepCopy());
      if(Protocol != null) dest.Protocol = new List<Hl7.Fhir.Model.ResourceReference>(Protocol.DeepCopy());
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(PrimaryPurposeType != null) dest.PrimaryPurposeType = (Hl7.Fhir.Model.CodeableConcept)PrimaryPurposeType.DeepCopy();
      if(Phase != null) dest.Phase = (Hl7.Fhir.Model.CodeableConcept)Phase.DeepCopy();
      if(StudyDesign != null) dest.StudyDesign = new List<Hl7.Fhir.Model.CodeableConcept>(StudyDesign.DeepCopy());
      if(Focus != null) dest.Focus = new List<Hl7.Fhir.Model.CodeableReference>(Focus.DeepCopy());
      if(Condition != null) dest.Condition = new List<Hl7.Fhir.Model.CodeableConcept>(Condition.DeepCopy());
      if(Keyword != null) dest.Keyword = new List<Hl7.Fhir.Model.CodeableConcept>(Keyword.DeepCopy());
      if(Region != null) dest.Region = new List<Hl7.Fhir.Model.CodeableConcept>(Region.DeepCopy());
      if(DescriptionSummaryElement != null) dest.DescriptionSummaryElement = (Hl7.Fhir.Model.Markdown)DescriptionSummaryElement.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(Site != null) dest.Site = new List<Hl7.Fhir.Model.ResourceReference>(Site.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Classifier != null) dest.Classifier = new List<Hl7.Fhir.Model.CodeableConcept>(Classifier.DeepCopy());
      if(AssociatedParty != null) dest.AssociatedParty = new List<Hl7.Fhir.Model.ResearchStudy.AssociatedPartyComponent>(AssociatedParty.DeepCopy());
      if(ProgressStatus != null) dest.ProgressStatus = new List<Hl7.Fhir.Model.ResearchStudy.ProgressStatusComponent>(ProgressStatus.DeepCopy());
      if(WhyStopped != null) dest.WhyStopped = (Hl7.Fhir.Model.CodeableConcept)WhyStopped.DeepCopy();
      if(Recruitment != null) dest.Recruitment = (Hl7.Fhir.Model.ResearchStudy.RecruitmentComponent)Recruitment.DeepCopy();
      if(ComparisonGroup != null) dest.ComparisonGroup = new List<Hl7.Fhir.Model.ResearchStudy.ComparisonGroupComponent>(ComparisonGroup.DeepCopy());
      if(Objective != null) dest.Objective = new List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent>(Objective.DeepCopy());
      if(OutcomeMeasure != null) dest.OutcomeMeasure = new List<Hl7.Fhir.Model.ResearchStudy.OutcomeMeasureComponent>(OutcomeMeasure.DeepCopy());
      if(Result != null) dest.Result = new List<Hl7.Fhir.Model.ResourceReference>(Result.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ResearchStudy());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ResearchStudy;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(Label, otherT.Label)) return false;
      if( !DeepComparable.Matches(Protocol, otherT.Protocol)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(PrimaryPurposeType, otherT.PrimaryPurposeType)) return false;
      if( !DeepComparable.Matches(Phase, otherT.Phase)) return false;
      if( !DeepComparable.Matches(StudyDesign, otherT.StudyDesign)) return false;
      if( !DeepComparable.Matches(Focus, otherT.Focus)) return false;
      if( !DeepComparable.Matches(Condition, otherT.Condition)) return false;
      if( !DeepComparable.Matches(Keyword, otherT.Keyword)) return false;
      if( !DeepComparable.Matches(Region, otherT.Region)) return false;
      if( !DeepComparable.Matches(DescriptionSummaryElement, otherT.DescriptionSummaryElement)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(Site, otherT.Site)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Classifier, otherT.Classifier)) return false;
      if( !DeepComparable.Matches(AssociatedParty, otherT.AssociatedParty)) return false;
      if( !DeepComparable.Matches(ProgressStatus, otherT.ProgressStatus)) return false;
      if( !DeepComparable.Matches(WhyStopped, otherT.WhyStopped)) return false;
      if( !DeepComparable.Matches(Recruitment, otherT.Recruitment)) return false;
      if( !DeepComparable.Matches(ComparisonGroup, otherT.ComparisonGroup)) return false;
      if( !DeepComparable.Matches(Objective, otherT.Objective)) return false;
      if( !DeepComparable.Matches(OutcomeMeasure, otherT.OutcomeMeasure)) return false;
      if( !DeepComparable.Matches(Result, otherT.Result)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ResearchStudy;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(Label, otherT.Label)) return false;
      if( !DeepComparable.IsExactly(Protocol, otherT.Protocol)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(PrimaryPurposeType, otherT.PrimaryPurposeType)) return false;
      if( !DeepComparable.IsExactly(Phase, otherT.Phase)) return false;
      if( !DeepComparable.IsExactly(StudyDesign, otherT.StudyDesign)) return false;
      if( !DeepComparable.IsExactly(Focus, otherT.Focus)) return false;
      if( !DeepComparable.IsExactly(Condition, otherT.Condition)) return false;
      if( !DeepComparable.IsExactly(Keyword, otherT.Keyword)) return false;
      if( !DeepComparable.IsExactly(Region, otherT.Region)) return false;
      if( !DeepComparable.IsExactly(DescriptionSummaryElement, otherT.DescriptionSummaryElement)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Classifier, otherT.Classifier)) return false;
      if( !DeepComparable.IsExactly(AssociatedParty, otherT.AssociatedParty)) return false;
      if( !DeepComparable.IsExactly(ProgressStatus, otherT.ProgressStatus)) return false;
      if( !DeepComparable.IsExactly(WhyStopped, otherT.WhyStopped)) return false;
      if( !DeepComparable.IsExactly(Recruitment, otherT.Recruitment)) return false;
      if( !DeepComparable.IsExactly(ComparisonGroup, otherT.ComparisonGroup)) return false;
      if( !DeepComparable.IsExactly(Objective, otherT.Objective)) return false;
      if( !DeepComparable.IsExactly(OutcomeMeasure, otherT.OutcomeMeasure)) return false;
      if( !DeepComparable.IsExactly(Result, otherT.Result)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        foreach (var elem in Label) { if (elem != null) yield return elem; }
        foreach (var elem in Protocol) { if (elem != null) yield return elem; }
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        if (DateElement != null) yield return DateElement;
        if (StatusElement != null) yield return StatusElement;
        if (PrimaryPurposeType != null) yield return PrimaryPurposeType;
        if (Phase != null) yield return Phase;
        foreach (var elem in StudyDesign) { if (elem != null) yield return elem; }
        foreach (var elem in Focus) { if (elem != null) yield return elem; }
        foreach (var elem in Condition) { if (elem != null) yield return elem; }
        foreach (var elem in Keyword) { if (elem != null) yield return elem; }
        foreach (var elem in Region) { if (elem != null) yield return elem; }
        if (DescriptionSummaryElement != null) yield return DescriptionSummaryElement;
        if (DescriptionElement != null) yield return DescriptionElement;
        if (Period != null) yield return Period;
        foreach (var elem in Site) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Classifier) { if (elem != null) yield return elem; }
        foreach (var elem in AssociatedParty) { if (elem != null) yield return elem; }
        foreach (var elem in ProgressStatus) { if (elem != null) yield return elem; }
        if (WhyStopped != null) yield return WhyStopped;
        if (Recruitment != null) yield return Recruitment;
        foreach (var elem in ComparisonGroup) { if (elem != null) yield return elem; }
        foreach (var elem in Objective) { if (elem != null) yield return elem; }
        foreach (var elem in OutcomeMeasure) { if (elem != null) yield return elem; }
        foreach (var elem in Result) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        foreach (var elem in Label) { if (elem != null) yield return new ElementValue("label", elem); }
        foreach (var elem in Protocol) { if (elem != null) yield return new ElementValue("protocol", elem); }
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (PrimaryPurposeType != null) yield return new ElementValue("primaryPurposeType", PrimaryPurposeType);
        if (Phase != null) yield return new ElementValue("phase", Phase);
        foreach (var elem in StudyDesign) { if (elem != null) yield return new ElementValue("studyDesign", elem); }
        foreach (var elem in Focus) { if (elem != null) yield return new ElementValue("focus", elem); }
        foreach (var elem in Condition) { if (elem != null) yield return new ElementValue("condition", elem); }
        foreach (var elem in Keyword) { if (elem != null) yield return new ElementValue("keyword", elem); }
        foreach (var elem in Region) { if (elem != null) yield return new ElementValue("region", elem); }
        if (DescriptionSummaryElement != null) yield return new ElementValue("descriptionSummary", DescriptionSummaryElement);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        if (Period != null) yield return new ElementValue("period", Period);
        foreach (var elem in Site) { if (elem != null) yield return new ElementValue("site", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Classifier) { if (elem != null) yield return new ElementValue("classifier", elem); }
        foreach (var elem in AssociatedParty) { if (elem != null) yield return new ElementValue("associatedParty", elem); }
        foreach (var elem in ProgressStatus) { if (elem != null) yield return new ElementValue("progressStatus", elem); }
        if (WhyStopped != null) yield return new ElementValue("whyStopped", WhyStopped);
        if (Recruitment != null) yield return new ElementValue("recruitment", Recruitment);
        foreach (var elem in ComparisonGroup) { if (elem != null) yield return new ElementValue("comparisonGroup", elem); }
        foreach (var elem in Objective) { if (elem != null) yield return new ElementValue("objective", elem); }
        foreach (var elem in OutcomeMeasure) { if (elem != null) yield return new ElementValue("outcomeMeasure", elem); }
        foreach (var elem in Result) { if (elem != null) yield return new ElementValue("result", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "label":
          value = Label;
          return Label?.Any() == true;
        case "protocol":
          value = Protocol;
          return Protocol?.Any() == true;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "relatedArtifact":
          value = RelatedArtifact;
          return RelatedArtifact?.Any() == true;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "primaryPurposeType":
          value = PrimaryPurposeType;
          return PrimaryPurposeType is not null;
        case "phase":
          value = Phase;
          return Phase is not null;
        case "studyDesign":
          value = StudyDesign;
          return StudyDesign?.Any() == true;
        case "focus":
          value = Focus;
          return Focus?.Any() == true;
        case "condition":
          value = Condition;
          return Condition?.Any() == true;
        case "keyword":
          value = Keyword;
          return Keyword?.Any() == true;
        case "region":
          value = Region;
          return Region?.Any() == true;
        case "descriptionSummary":
          value = DescriptionSummaryElement;
          return DescriptionSummaryElement is not null;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "period":
          value = Period;
          return Period is not null;
        case "site":
          value = Site;
          return Site?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "classifier":
          value = Classifier;
          return Classifier?.Any() == true;
        case "associatedParty":
          value = AssociatedParty;
          return AssociatedParty?.Any() == true;
        case "progressStatus":
          value = ProgressStatus;
          return ProgressStatus?.Any() == true;
        case "whyStopped":
          value = WhyStopped;
          return WhyStopped is not null;
        case "recruitment":
          value = Recruitment;
          return Recruitment is not null;
        case "comparisonGroup":
          value = ComparisonGroup;
          return ComparisonGroup?.Any() == true;
        case "objective":
          value = Objective;
          return Objective?.Any() == true;
        case "outcomeMeasure":
          value = OutcomeMeasure;
          return OutcomeMeasure?.Any() == true;
        case "result":
          value = Result;
          return Result?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (Label?.Any() == true) yield return new KeyValuePair<string,object>("label",Label);
      if (Protocol?.Any() == true) yield return new KeyValuePair<string,object>("protocol",Protocol);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (PrimaryPurposeType is not null) yield return new KeyValuePair<string,object>("primaryPurposeType",PrimaryPurposeType);
      if (Phase is not null) yield return new KeyValuePair<string,object>("phase",Phase);
      if (StudyDesign?.Any() == true) yield return new KeyValuePair<string,object>("studyDesign",StudyDesign);
      if (Focus?.Any() == true) yield return new KeyValuePair<string,object>("focus",Focus);
      if (Condition?.Any() == true) yield return new KeyValuePair<string,object>("condition",Condition);
      if (Keyword?.Any() == true) yield return new KeyValuePair<string,object>("keyword",Keyword);
      if (Region?.Any() == true) yield return new KeyValuePair<string,object>("region",Region);
      if (DescriptionSummaryElement is not null) yield return new KeyValuePair<string,object>("descriptionSummary",DescriptionSummaryElement);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (Site?.Any() == true) yield return new KeyValuePair<string,object>("site",Site);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Classifier?.Any() == true) yield return new KeyValuePair<string,object>("classifier",Classifier);
      if (AssociatedParty?.Any() == true) yield return new KeyValuePair<string,object>("associatedParty",AssociatedParty);
      if (ProgressStatus?.Any() == true) yield return new KeyValuePair<string,object>("progressStatus",ProgressStatus);
      if (WhyStopped is not null) yield return new KeyValuePair<string,object>("whyStopped",WhyStopped);
      if (Recruitment is not null) yield return new KeyValuePair<string,object>("recruitment",Recruitment);
      if (ComparisonGroup?.Any() == true) yield return new KeyValuePair<string,object>("comparisonGroup",ComparisonGroup);
      if (Objective?.Any() == true) yield return new KeyValuePair<string,object>("objective",Objective);
      if (OutcomeMeasure?.Any() == true) yield return new KeyValuePair<string,object>("outcomeMeasure",OutcomeMeasure);
      if (Result?.Any() == true) yield return new KeyValuePair<string,object>("result",Result);
    }

  }

}

// end of file

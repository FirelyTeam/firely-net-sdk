// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Availability data for an {item}
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MonetaryComponent","http://hl7.org/fhir/StructureDefinition/MonetaryComponent")]
  public partial class MonetaryComponent : Hl7.Fhir.Model.DataType
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MonetaryComponent"; } }

    /// <summary>
    /// Codes indicating the kind of the price component.
    /// (url: http://hl7.org/fhir/ValueSet/price-component-type)
    /// (system: http://hl7.org/fhir/price-component-type)
    /// </summary>
    [FhirEnumeration("PriceComponentType", "http://hl7.org/fhir/ValueSet/price-component-type", "http://hl7.org/fhir/price-component-type")]
    public enum PriceComponentType
    {
      /// <summary>
      /// the amount is the base price used for calculating the total price before applying surcharges, discount or taxes.
      /// (system: http://hl7.org/fhir/price-component-type)
      /// </summary>
      [EnumLiteral("base"), Description("base price")]
      Base,
      /// <summary>
      /// the amount is a surcharge applied on the base price.
      /// (system: http://hl7.org/fhir/price-component-type)
      /// </summary>
      [EnumLiteral("surcharge"), Description("surcharge")]
      Surcharge,
      /// <summary>
      /// the amount is a deduction applied on the base price.
      /// (system: http://hl7.org/fhir/price-component-type)
      /// </summary>
      [EnumLiteral("deduction"), Description("deduction")]
      Deduction,
      /// <summary>
      /// the amount is a discount applied on the base price.
      /// (system: http://hl7.org/fhir/price-component-type)
      /// </summary>
      [EnumLiteral("discount"), Description("discount")]
      Discount,
      /// <summary>
      /// the amount is the tax component of the total price.
      /// (system: http://hl7.org/fhir/price-component-type)
      /// </summary>
      [EnumLiteral("tax"), Description("tax")]
      Tax,
      /// <summary>
      /// the amount is of informational character, it has not been applied in the calculation of the total price.
      /// (system: http://hl7.org/fhir/price-component-type)
      /// </summary>
      [EnumLiteral("informational"), Description("informational")]
      Informational,
    }

    /// <summary>
    /// base | surcharge | deduction | discount | tax | informational
    /// </summary>
    [FhirElement("type", InSummary=true, Order=30)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PriceComponentType")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MonetaryComponent.PriceComponentType> TypeElement
    {
      get { return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private Code<Hl7.Fhir.Model.MonetaryComponent.PriceComponentType> _TypeElement;

    /// <summary>
    /// base | surcharge | deduction | discount | tax | informational
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MonetaryComponent.PriceComponentType? Type
    {
      get { return TypeElement != null ? TypeElement.Value : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new Code<Hl7.Fhir.Model.MonetaryComponent.PriceComponentType>(value);
        OnPropertyChanged("Type");
      }
    }

    /// <summary>
    /// Codes may be used to differentiate between kinds of taxes, surcharges, discounts etc.
    /// </summary>
    [FhirElement("code", InSummary=true, Order=40)]
    [Binding("PriceComponentCode")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Factor used for calculating this component
    /// </summary>
    [FhirElement("factor", InSummary=true, Order=50)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDecimal FactorElement
    {
      get { return _FactorElement; }
      set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
    }

    private Hl7.Fhir.Model.FhirDecimal _FactorElement;

    /// <summary>
    /// Factor used for calculating this component
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public decimal? Factor
    {
      get { return FactorElement != null ? FactorElement.Value : null; }
      set
      {
        if (value == null)
          FactorElement = null;
        else
          FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
        OnPropertyChanged("Factor");
      }
    }

    /// <summary>
    /// Explicit value amount to be used
    /// </summary>
    [FhirElement("amount", InSummary=true, Order=60)]
    [DataMember]
    public Hl7.Fhir.Model.Money Amount
    {
      get { return _Amount; }
      set { _Amount = value; OnPropertyChanged("Amount"); }
    }

    private Hl7.Fhir.Model.Money _Amount;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MonetaryComponent;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.MonetaryComponent.PriceComponentType>)TypeElement.DeepCopy();
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
      if(Amount != null) dest.Amount = (Hl7.Fhir.Model.Money)Amount.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MonetaryComponent());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MonetaryComponent;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
      if( !DeepComparable.Matches(Amount, otherT.Amount)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MonetaryComponent;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
      if( !DeepComparable.IsExactly(Amount, otherT.Amount)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (TypeElement != null) yield return TypeElement;
        if (Code != null) yield return Code;
        if (FactorElement != null) yield return FactorElement;
        if (Amount != null) yield return Amount;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        if (Code != null) yield return new ElementValue("code", Code);
        if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
        if (Amount != null) yield return new ElementValue("amount", Amount);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "type":
          value = TypeElement;
          return TypeElement is not null;
        case "code":
          value = Code;
          return Code is not null;
        case "factor":
          value = FactorElement;
          return FactorElement is not null;
        case "amount":
          value = Amount;
          return Amount is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
      if (Amount is not null) yield return new KeyValuePair<string,object>("amount",Amount);
    }

  }

}

// end of file

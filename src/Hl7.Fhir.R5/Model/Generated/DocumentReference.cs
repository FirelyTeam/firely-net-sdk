// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A reference to a document
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("DocumentReference","http://hl7.org/fhir/StructureDefinition/DocumentReference", IsResource=true)]
  public partial class DocumentReference : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "DocumentReference"; } }

    /// <summary>
    /// The status of the document reference.
    /// (url: http://hl7.org/fhir/ValueSet/document-reference-status)
    /// (system: http://hl7.org/fhir/document-reference-status)
    /// </summary>
    [FhirEnumeration("DocumentReferenceStatus", "http://hl7.org/fhir/ValueSet/document-reference-status")]
    public enum DocumentReferenceStatus
    {
      /// <summary>
      /// This is the current reference for this document.
      /// (system: http://hl7.org/fhir/document-reference-status)
      /// </summary>
      [EnumLiteral("current", "http://hl7.org/fhir/document-reference-status"), Description("Current")]
      Current,
      /// <summary>
      /// This reference has been superseded by another reference.
      /// (system: http://hl7.org/fhir/document-reference-status)
      /// </summary>
      [EnumLiteral("superseded", "http://hl7.org/fhir/document-reference-status"), Description("Superseded")]
      Superseded,
      /// <summary>
      /// This reference was created in error.
      /// (system: http://hl7.org/fhir/document-reference-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/document-reference-status"), Description("Entered in Error")]
      EnteredInError,
    }

    /// <summary>
    /// Attests to accuracy of the document
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DocumentReference#Attester", IsNestedType=true)]
    [BackboneType("DocumentReference.attester")]
    public partial class AttesterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DocumentReference#Attester"; } }

      /// <summary>
      /// personal | professional | legal | official
      /// </summary>
      [FhirElement("mode", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Mode
      {
        get { return _Mode; }
        set { _Mode = value; OnPropertyChanged("Mode"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Mode;

      /// <summary>
      /// When the document was attested
      /// </summary>
      [FhirElement("time", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime TimeElement
      {
        get { return _TimeElement; }
        set { _TimeElement = value; OnPropertyChanged("TimeElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _TimeElement;

      /// <summary>
      /// When the document was attested
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Time
      {
        get { return TimeElement != null ? TimeElement.Value : null; }
        set
        {
          if (value == null)
            TimeElement = null;
          else
            TimeElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Time");
        }
      }

      /// <summary>
      /// Who attested the document
      /// </summary>
      [FhirElement("party", Order=60, FiveWs="FiveWs.witness")]
      [CLSCompliant(false)]
      [References("Patient","RelatedPerson","Practitioner","PractitionerRole","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AttesterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Mode != null) dest.Mode = (Hl7.Fhir.Model.CodeableConcept)Mode.DeepCopy();
        if(TimeElement != null) dest.TimeElement = (Hl7.Fhir.Model.FhirDateTime)TimeElement.DeepCopy();
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AttesterComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AttesterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Mode, otherT.Mode)) return false;
        if( !DeepComparable.Matches(TimeElement, otherT.TimeElement)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AttesterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Mode, otherT.Mode)) return false;
        if( !DeepComparable.IsExactly(TimeElement, otherT.TimeElement)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Mode != null) yield return Mode;
          if (TimeElement != null) yield return TimeElement;
          if (Party != null) yield return Party;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Mode != null) yield return new ElementValue("mode", Mode);
          if (TimeElement != null) yield return new ElementValue("time", TimeElement);
          if (Party != null) yield return new ElementValue("party", Party);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = Mode;
            return Mode is not null;
          case "time":
            value = TimeElement;
            return TimeElement is not null;
          case "party":
            value = Party;
            return Party is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Mode is not null) yield return new KeyValuePair<string,object>("mode",Mode);
        if (TimeElement is not null) yield return new KeyValuePair<string,object>("time",TimeElement);
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
      }

    }

    /// <summary>
    /// Relationships to other documents
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DocumentReference#RelatesTo", IsNestedType=true)]
    [BackboneType("DocumentReference.relatesTo")]
    public partial class RelatesToComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DocumentReference#RelatesTo"; } }

      /// <summary>
      /// The relationship type with another document
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Target of the relationship
      /// </summary>
      [FhirElement("target", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Target
      {
        get { return _Target; }
        set { _Target = value; OnPropertyChanged("Target"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Target;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatesToComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Target != null) dest.Target = (Hl7.Fhir.Model.ResourceReference)Target.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatesToComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatesToComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Target, otherT.Target)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatesToComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Target, otherT.Target)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          if (Target != null) yield return Target;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          if (Target != null) yield return new ElementValue("target", Target);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "target":
            value = Target;
            return Target is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Target is not null) yield return new KeyValuePair<string,object>("target",Target);
      }

    }

    /// <summary>
    /// Document referenced
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DocumentReference#Content", IsNestedType=true)]
    [BackboneType("DocumentReference.content")]
    public partial class ContentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DocumentReference#Content"; } }

      /// <summary>
      /// Where to access the document
      /// </summary>
      [FhirElement("attachment", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Attachment Attachment
      {
        get { return _Attachment; }
        set { _Attachment = value; OnPropertyChanged("Attachment"); }
      }

      private Hl7.Fhir.Model.Attachment _Attachment;

      /// <summary>
      /// Content profile rules for the document
      /// </summary>
      [FhirElement("profile", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.DocumentReference.ProfileComponent> Profile
      {
        get { if(_Profile==null) _Profile = new List<Hl7.Fhir.Model.DocumentReference.ProfileComponent>(); return _Profile; }
        set { _Profile = value; OnPropertyChanged("Profile"); }
      }

      private List<Hl7.Fhir.Model.DocumentReference.ProfileComponent> _Profile;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Attachment != null) dest.Attachment = (Hl7.Fhir.Model.Attachment)Attachment.DeepCopy();
        if(Profile != null) dest.Profile = new List<Hl7.Fhir.Model.DocumentReference.ProfileComponent>(Profile.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Attachment, otherT.Attachment)) return false;
        if( !DeepComparable.Matches(Profile, otherT.Profile)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Attachment, otherT.Attachment)) return false;
        if( !DeepComparable.IsExactly(Profile, otherT.Profile)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Attachment != null) yield return Attachment;
          foreach (var elem in Profile) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Attachment != null) yield return new ElementValue("attachment", Attachment);
          foreach (var elem in Profile) { if (elem != null) yield return new ElementValue("profile", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "attachment":
            value = Attachment;
            return Attachment is not null;
          case "profile":
            value = Profile;
            return Profile?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Attachment is not null) yield return new KeyValuePair<string,object>("attachment",Attachment);
        if (Profile?.Any() == true) yield return new KeyValuePair<string,object>("profile",Profile);
      }

    }

    /// <summary>
    /// Content profile rules for the document
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DocumentReference#Profile", IsNestedType=true)]
    [BackboneType("DocumentReference.content.profile")]
    public partial class ProfileComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DocumentReference#Profile"; } }

      /// <summary>
      /// Code|uri|canonical
      /// </summary>
      [FhirElement("value", InSummary=true, Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Coding),typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.Canonical))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProfileComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProfileComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProfileComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProfileComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Business identifiers for the document
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// An explicitly assigned identifer of a variation of the content in the DocumentReference
    /// </summary>
    [FhirElement("version", InSummary=true, Order=100, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// An explicitly assigned identifer of a variation of the content in the DocumentReference
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Procedure that caused this media to be created
    /// </summary>
    [FhirElement("basedOn", Order=110)]
    [CLSCompliant(false)]
    [References("Appointment","AppointmentResponse","CarePlan","Claim","CommunicationRequest","Contract","CoverageEligibilityRequest","DeviceRequest","EnrollmentRequest","ImmunizationRecommendation","MedicationRequest","NutritionOrder","RequestOrchestration","ServiceRequest","SupplyRequest","VisionPrescription")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// current | superseded | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=120, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("DocumentReferenceStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus> _StatusElement;

    /// <summary>
    /// current | superseded | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
    /// </summary>
    [FhirElement("docStatus", InSummary=true, Order=130, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ReferredDocumentStatus")]
    [DataMember]
    public Code<Hl7.Fhir.Model.CompositionStatus> DocStatusElement
    {
      get { return _DocStatusElement; }
      set { _DocStatusElement = value; OnPropertyChanged("DocStatusElement"); }
    }

    private Code<Hl7.Fhir.Model.CompositionStatus> _DocStatusElement;

    /// <summary>
    /// registered | partial | preliminary | final | amended | corrected | appended | cancelled | entered-in-error | deprecated | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.CompositionStatus? DocStatus
    {
      get { return DocStatusElement != null ? DocStatusElement.Value : null; }
      set
      {
        if (value == null)
          DocStatusElement = null;
        else
          DocStatusElement = new Code<Hl7.Fhir.Model.CompositionStatus>(value);
        OnPropertyChanged("DocStatus");
      }
    }

    /// <summary>
    /// Imaging modality used
    /// </summary>
    [FhirElement("modality", InSummary=true, Order=140, FiveWs="FiveWs.class")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Modality
    {
      get { if(_Modality==null) _Modality = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modality; }
      set { _Modality = value; OnPropertyChanged("Modality"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Modality;

    /// <summary>
    /// Kind of document (LOINC if possible)
    /// </summary>
    [FhirElement("type", InSummary=true, Order=150, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// Categorization of document
    /// </summary>
    [FhirElement("category", InSummary=true, Order=160, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Who/what is the subject of the document
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=170, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("Resource")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Context of the document content
    /// </summary>
    [FhirElement("context", Order=180, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Appointment","Encounter","EpisodeOfCare")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Context
    {
      get { if(_Context==null) _Context = new List<Hl7.Fhir.Model.ResourceReference>(); return _Context; }
      set { _Context = value; OnPropertyChanged("Context"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Context;

    /// <summary>
    /// Main clinical acts documented
    /// </summary>
    [FhirElement("event", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Event
    {
      get { if(_Event==null) _Event = new List<Hl7.Fhir.Model.CodeableReference>(); return _Event; }
      set { _Event = value; OnPropertyChanged("Event"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Event;

    /// <summary>
    /// Body part included
    /// </summary>
    [FhirElement("bodySite", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> BodySite
    {
      get { if(_BodySite==null) _BodySite = new List<Hl7.Fhir.Model.CodeableReference>(); return _BodySite; }
      set { _BodySite = value; OnPropertyChanged("BodySite"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _BodySite;

    /// <summary>
    /// Kind of facility where patient was seen
    /// </summary>
    [FhirElement("facilityType", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept FacilityType
    {
      get { return _FacilityType; }
      set { _FacilityType = value; OnPropertyChanged("FacilityType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _FacilityType;

    /// <summary>
    /// Additional details about where the content was created (e.g. clinical specialty)
    /// </summary>
    [FhirElement("practiceSetting", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept PracticeSetting
    {
      get { return _PracticeSetting; }
      set { _PracticeSetting = value; OnPropertyChanged("PracticeSetting"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _PracticeSetting;

    /// <summary>
    /// Time of service that is being documented
    /// </summary>
    [FhirElement("period", InSummary=true, Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// When this document reference was created
    /// </summary>
    [FhirElement("date", InSummary=true, Order=240, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.Instant DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.Instant _DateElement;

    /// <summary>
    /// When this document reference was created
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public DateTimeOffset? Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Who and/or what authored the document
    /// </summary>
    [FhirElement("author", InSummary=true, Order=250)]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization","Device","Patient","RelatedPerson","CareTeam")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ResourceReference>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Author;

    /// <summary>
    /// Attests to accuracy of the document
    /// </summary>
    [FhirElement("attester", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DocumentReference.AttesterComponent> Attester
    {
      get { if(_Attester==null) _Attester = new List<Hl7.Fhir.Model.DocumentReference.AttesterComponent>(); return _Attester; }
      set { _Attester = value; OnPropertyChanged("Attester"); }
    }

    private List<Hl7.Fhir.Model.DocumentReference.AttesterComponent> _Attester;

    /// <summary>
    /// Organization which maintains the document
    /// </summary>
    [FhirElement("custodian", Order=270)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Custodian
    {
      get { return _Custodian; }
      set { _Custodian = value; OnPropertyChanged("Custodian"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Custodian;

    /// <summary>
    /// Relationships to other documents
    /// </summary>
    [FhirElement("relatesTo", InSummary=true, Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DocumentReference.RelatesToComponent> RelatesTo
    {
      get { if(_RelatesTo==null) _RelatesTo = new List<Hl7.Fhir.Model.DocumentReference.RelatesToComponent>(); return _RelatesTo; }
      set { _RelatesTo = value; OnPropertyChanged("RelatesTo"); }
    }

    private List<Hl7.Fhir.Model.DocumentReference.RelatesToComponent> _RelatesTo;

    /// <summary>
    /// Human-readable description
    /// </summary>
    [FhirElement("description", InSummary=true, Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Human-readable description
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Document security-tags
    /// </summary>
    [FhirElement("securityLabel", InSummary=true, Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> SecurityLabel
    {
      get { if(_SecurityLabel==null) _SecurityLabel = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SecurityLabel; }
      set { _SecurityLabel = value; OnPropertyChanged("SecurityLabel"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _SecurityLabel;

    /// <summary>
    /// Document referenced
    /// </summary>
    [FhirElement("content", InSummary=true, Order=310)]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DocumentReference.ContentComponent> Content
    {
      get { if(_Content==null) _Content = new List<Hl7.Fhir.Model.DocumentReference.ContentComponent>(); return _Content; }
      set { _Content = value; OnPropertyChanged("Content"); }
    }

    private List<Hl7.Fhir.Model.DocumentReference.ContentComponent> _Content;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as DocumentReference;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.DocumentReference.DocumentReferenceStatus>)StatusElement.DeepCopy();
      if(DocStatusElement != null) dest.DocStatusElement = (Code<Hl7.Fhir.Model.CompositionStatus>)DocStatusElement.DeepCopy();
      if(Modality != null) dest.Modality = new List<Hl7.Fhir.Model.CodeableConcept>(Modality.DeepCopy());
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Context != null) dest.Context = new List<Hl7.Fhir.Model.ResourceReference>(Context.DeepCopy());
      if(Event != null) dest.Event = new List<Hl7.Fhir.Model.CodeableReference>(Event.DeepCopy());
      if(BodySite != null) dest.BodySite = new List<Hl7.Fhir.Model.CodeableReference>(BodySite.DeepCopy());
      if(FacilityType != null) dest.FacilityType = (Hl7.Fhir.Model.CodeableConcept)FacilityType.DeepCopy();
      if(PracticeSetting != null) dest.PracticeSetting = (Hl7.Fhir.Model.CodeableConcept)PracticeSetting.DeepCopy();
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Instant)DateElement.DeepCopy();
      if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ResourceReference>(Author.DeepCopy());
      if(Attester != null) dest.Attester = new List<Hl7.Fhir.Model.DocumentReference.AttesterComponent>(Attester.DeepCopy());
      if(Custodian != null) dest.Custodian = (Hl7.Fhir.Model.ResourceReference)Custodian.DeepCopy();
      if(RelatesTo != null) dest.RelatesTo = new List<Hl7.Fhir.Model.DocumentReference.RelatesToComponent>(RelatesTo.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(SecurityLabel != null) dest.SecurityLabel = new List<Hl7.Fhir.Model.CodeableConcept>(SecurityLabel.DeepCopy());
      if(Content != null) dest.Content = new List<Hl7.Fhir.Model.DocumentReference.ContentComponent>(Content.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new DocumentReference());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as DocumentReference;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(DocStatusElement, otherT.DocStatusElement)) return false;
      if( !DeepComparable.Matches(Modality, otherT.Modality)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Context, otherT.Context)) return false;
      if( !DeepComparable.Matches(Event, otherT.Event)) return false;
      if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.Matches(FacilityType, otherT.FacilityType)) return false;
      if( !DeepComparable.Matches(PracticeSetting, otherT.PracticeSetting)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Attester, otherT.Attester)) return false;
      if( !DeepComparable.Matches(Custodian, otherT.Custodian)) return false;
      if( !DeepComparable.Matches(RelatesTo, otherT.RelatesTo)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(SecurityLabel, otherT.SecurityLabel)) return false;
      if( !DeepComparable.Matches(Content, otherT.Content)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as DocumentReference;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(DocStatusElement, otherT.DocStatusElement)) return false;
      if( !DeepComparable.IsExactly(Modality, otherT.Modality)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Context, otherT.Context)) return false;
      if( !DeepComparable.IsExactly(Event, otherT.Event)) return false;
      if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.IsExactly(FacilityType, otherT.FacilityType)) return false;
      if( !DeepComparable.IsExactly(PracticeSetting, otherT.PracticeSetting)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Attester, otherT.Attester)) return false;
      if( !DeepComparable.IsExactly(Custodian, otherT.Custodian)) return false;
      if( !DeepComparable.IsExactly(RelatesTo, otherT.RelatesTo)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(SecurityLabel, otherT.SecurityLabel)) return false;
      if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (DocStatusElement != null) yield return DocStatusElement;
        foreach (var elem in Modality) { if (elem != null) yield return elem; }
        if (Type != null) yield return Type;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Subject != null) yield return Subject;
        foreach (var elem in Context) { if (elem != null) yield return elem; }
        foreach (var elem in Event) { if (elem != null) yield return elem; }
        foreach (var elem in BodySite) { if (elem != null) yield return elem; }
        if (FacilityType != null) yield return FacilityType;
        if (PracticeSetting != null) yield return PracticeSetting;
        if (Period != null) yield return Period;
        if (DateElement != null) yield return DateElement;
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        foreach (var elem in Attester) { if (elem != null) yield return elem; }
        if (Custodian != null) yield return Custodian;
        foreach (var elem in RelatesTo) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in SecurityLabel) { if (elem != null) yield return elem; }
        foreach (var elem in Content) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (DocStatusElement != null) yield return new ElementValue("docStatus", DocStatusElement);
        foreach (var elem in Modality) { if (elem != null) yield return new ElementValue("modality", elem); }
        if (Type != null) yield return new ElementValue("type", Type);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Subject != null) yield return new ElementValue("subject", Subject);
        foreach (var elem in Context) { if (elem != null) yield return new ElementValue("context", elem); }
        foreach (var elem in Event) { if (elem != null) yield return new ElementValue("event", elem); }
        foreach (var elem in BodySite) { if (elem != null) yield return new ElementValue("bodySite", elem); }
        if (FacilityType != null) yield return new ElementValue("facilityType", FacilityType);
        if (PracticeSetting != null) yield return new ElementValue("practiceSetting", PracticeSetting);
        if (Period != null) yield return new ElementValue("period", Period);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        foreach (var elem in Attester) { if (elem != null) yield return new ElementValue("attester", elem); }
        if (Custodian != null) yield return new ElementValue("custodian", Custodian);
        foreach (var elem in RelatesTo) { if (elem != null) yield return new ElementValue("relatesTo", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in SecurityLabel) { if (elem != null) yield return new ElementValue("securityLabel", elem); }
        foreach (var elem in Content) { if (elem != null) yield return new ElementValue("content", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "docStatus":
          value = DocStatusElement;
          return DocStatusElement is not null;
        case "modality":
          value = Modality;
          return Modality?.Any() == true;
        case "type":
          value = Type;
          return Type is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "context":
          value = Context;
          return Context?.Any() == true;
        case "event":
          value = Event;
          return Event?.Any() == true;
        case "bodySite":
          value = BodySite;
          return BodySite?.Any() == true;
        case "facilityType":
          value = FacilityType;
          return FacilityType is not null;
        case "practiceSetting":
          value = PracticeSetting;
          return PracticeSetting is not null;
        case "period":
          value = Period;
          return Period is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "attester":
          value = Attester;
          return Attester?.Any() == true;
        case "custodian":
          value = Custodian;
          return Custodian is not null;
        case "relatesTo":
          value = RelatesTo;
          return RelatesTo?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "securityLabel":
          value = SecurityLabel;
          return SecurityLabel?.Any() == true;
        case "content":
          value = Content;
          return Content?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (DocStatusElement is not null) yield return new KeyValuePair<string,object>("docStatus",DocStatusElement);
      if (Modality?.Any() == true) yield return new KeyValuePair<string,object>("modality",Modality);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Context?.Any() == true) yield return new KeyValuePair<string,object>("context",Context);
      if (Event?.Any() == true) yield return new KeyValuePair<string,object>("event",Event);
      if (BodySite?.Any() == true) yield return new KeyValuePair<string,object>("bodySite",BodySite);
      if (FacilityType is not null) yield return new KeyValuePair<string,object>("facilityType",FacilityType);
      if (PracticeSetting is not null) yield return new KeyValuePair<string,object>("practiceSetting",PracticeSetting);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (Attester?.Any() == true) yield return new KeyValuePair<string,object>("attester",Attester);
      if (Custodian is not null) yield return new KeyValuePair<string,object>("custodian",Custodian);
      if (RelatesTo?.Any() == true) yield return new KeyValuePair<string,object>("relatesTo",RelatesTo);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (SecurityLabel?.Any() == true) yield return new KeyValuePair<string,object>("securityLabel",SecurityLabel);
      if (Content?.Any() == true) yield return new KeyValuePair<string,object>("content",Content);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A map from one set of concepts to one or more other concepts
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ConceptMap","http://hl7.org/fhir/StructureDefinition/ConceptMap", IsResource=true)]
  public partial class ConceptMap : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ConceptMap"; } }

    /// <summary>
    /// The type of a ConceptMap mapping property value.
    /// (url: http://hl7.org/fhir/ValueSet/conceptmap-property-type)
    /// (system: http://hl7.org/fhir/conceptmap-property-type)
    /// </summary>
    [FhirEnumeration("ConceptMapPropertyType", "http://hl7.org/fhir/ValueSet/conceptmap-property-type", "http://hl7.org/fhir/conceptmap-property-type")]
    public enum ConceptMapPropertyType
    {
      /// <summary>
      /// The property  value is a code defined in an external code system. This may be used for translations, but is not the intent.
      /// (system: http://hl7.org/fhir/conceptmap-property-type)
      /// </summary>
      [EnumLiteral("Coding"), Description("Coding (external reference)")]
      Coding,
      /// <summary>
      /// The property value is a string.
      /// (system: http://hl7.org/fhir/conceptmap-property-type)
      /// </summary>
      [EnumLiteral("string"), Description("string")]
      String,
      /// <summary>
      /// The property value is an integer (often used to assign ranking values to concepts for supporting score assessments).
      /// (system: http://hl7.org/fhir/conceptmap-property-type)
      /// </summary>
      [EnumLiteral("integer"), Description("integer")]
      Integer,
      /// <summary>
      /// The property value is a boolean true | false.
      /// (system: http://hl7.org/fhir/conceptmap-property-type)
      /// </summary>
      [EnumLiteral("boolean"), Description("boolean")]
      Boolean,
      /// <summary>
      /// The property is a date or a date + time.
      /// (system: http://hl7.org/fhir/conceptmap-property-type)
      /// </summary>
      [EnumLiteral("dateTime"), Description("dateTime")]
      DateTime,
      /// <summary>
      /// The property value is a decimal number.
      /// (system: http://hl7.org/fhir/conceptmap-property-type)
      /// </summary>
      [EnumLiteral("decimal"), Description("decimal")]
      Decimal,
      /// <summary>
      /// The property value is a code as defined in the CodeSystem in ConceptMap.property.system.
      /// (system: http://hl7.org/fhir/conceptmap-property-type)
      /// </summary>
      [EnumLiteral("code"), Description("code")]
      Code,
    }

    /// <summary>
    /// The type of a ConceptMap mapping attribute value.
    /// (url: http://hl7.org/fhir/ValueSet/conceptmap-attribute-type)
    /// (system: http://hl7.org/fhir/conceptmap-attribute-type)
    /// </summary>
    [FhirEnumeration("ConceptMapAttributeType", "http://hl7.org/fhir/ValueSet/conceptmap-attribute-type", "http://hl7.org/fhir/conceptmap-attribute-type")]
    public enum ConceptMapAttributeType
    {
      /// <summary>
      /// The attribute value is a code defined in the code system in context.
      /// (system: http://hl7.org/fhir/conceptmap-attribute-type)
      /// </summary>
      [EnumLiteral("code"), Description("code")]
      Code,
      /// <summary>
      /// The attribute value is a code defined in a code system.
      /// (system: http://hl7.org/fhir/conceptmap-attribute-type)
      /// </summary>
      [EnumLiteral("Coding"), Description("Coding")]
      Coding,
      /// <summary>
      /// The attribute value is a string.
      /// (system: http://hl7.org/fhir/conceptmap-attribute-type)
      /// </summary>
      [EnumLiteral("string"), Description("string")]
      String,
      /// <summary>
      /// The attribute value is a boolean true | false.
      /// (system: http://hl7.org/fhir/conceptmap-attribute-type)
      /// </summary>
      [EnumLiteral("boolean"), Description("boolean")]
      Boolean,
      /// <summary>
      /// The attribute is a Quantity (may represent an integer or a decimal with no units).
      /// (system: http://hl7.org/fhir/conceptmap-attribute-type)
      /// </summary>
      [EnumLiteral("Quantity"), Description("Quantity")]
      Quantity,
    }

    /// <summary>
    /// The relationship between concepts.
    /// (url: http://hl7.org/fhir/ValueSet/concept-map-relationship)
    /// (system: http://hl7.org/fhir/concept-map-relationship)
    /// </summary>
    [FhirEnumeration("ConceptMapRelationship", "http://hl7.org/fhir/ValueSet/concept-map-relationship", "http://hl7.org/fhir/concept-map-relationship")]
    public enum ConceptMapRelationship
    {
      /// <summary>
      /// The concepts are related to each other, but the exact relationship is not known.
      /// (system: http://hl7.org/fhir/concept-map-relationship)
      /// </summary>
      [EnumLiteral("related-to"), Description("Related To")]
      RelatedTo,
      /// <summary>
      /// The definitions of the concepts mean the same thing.
      /// (system: http://hl7.org/fhir/concept-map-relationship)
      /// </summary>
      [EnumLiteral("equivalent"), Description("Equivalent")]
      Equivalent,
      /// <summary>
      /// The source concept is narrower in meaning than the target concept.
      /// (system: http://hl7.org/fhir/concept-map-relationship)
      /// </summary>
      [EnumLiteral("source-is-narrower-than-target"), Description("Source Is Narrower Than Target")]
      SourceIsNarrowerThanTarget,
      /// <summary>
      /// The source concept is broader in meaning than the target concept.
      /// (system: http://hl7.org/fhir/concept-map-relationship)
      /// </summary>
      [EnumLiteral("source-is-broader-than-target"), Description("Source Is Broader Than Target")]
      SourceIsBroaderThanTarget,
      /// <summary>
      /// This is an explicit assertion that the target concept is not related to the source concept.
      /// (system: http://hl7.org/fhir/concept-map-relationship)
      /// </summary>
      [EnumLiteral("not-related-to"), Description("Not Related To")]
      NotRelatedTo,
    }

    /// <summary>
    /// Defines which action to take if there is no match in the group.
    /// (url: http://hl7.org/fhir/ValueSet/conceptmap-unmapped-mode)
    /// (system: http://hl7.org/fhir/conceptmap-unmapped-mode)
    /// </summary>
    [FhirEnumeration("ConceptMapGroupUnmappedMode", "http://hl7.org/fhir/ValueSet/conceptmap-unmapped-mode", "http://hl7.org/fhir/conceptmap-unmapped-mode")]
    public enum ConceptMapGroupUnmappedMode
    {
      /// <summary>
      /// Use the code as provided in the $translate request in one of the following input parameters: sourceCode, sourceCoding, sourceCodeableConcept.
      /// (system: http://hl7.org/fhir/conceptmap-unmapped-mode)
      /// </summary>
      [EnumLiteral("use-source-code"), Description("Use Provided Source Code")]
      UseSourceCode,
      /// <summary>
      /// Use the code(s) explicitly provided in the group.unmapped 'code' or 'valueSet' element.
      /// (system: http://hl7.org/fhir/conceptmap-unmapped-mode)
      /// </summary>
      [EnumLiteral("fixed"), Description("Fixed Code")]
      Fixed,
      /// <summary>
      /// Use the map identified by the canonical URL in the url element.
      /// (system: http://hl7.org/fhir/conceptmap-unmapped-mode)
      /// </summary>
      [EnumLiteral("other-map"), Description("Other Map")]
      OtherMap,
    }

    /// <summary>
    /// Additional properties of the mapping
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#Property", IsNestedType=true)]
    [BackboneType("ConceptMap.property")]
    public partial class PropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#Property"; } }

      /// <summary>
      /// Identifies the property on the mappings, and when referred to in the $translate operation
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Identifies the property on the mappings, and when referred to in the $translate operation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Formal identifier for the property
      /// </summary>
      [FhirElement("uri", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UriElement
      {
        get { return _UriElement; }
        set { _UriElement = value; OnPropertyChanged("UriElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UriElement;

      /// <summary>
      /// Formal identifier for the property
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Uri
      {
        get { return UriElement != null ? UriElement.Value : null; }
        set
        {
          if (value == null)
            UriElement = null;
          else
            UriElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Uri");
        }
      }

      /// <summary>
      /// Why the property is defined, and/or what it conveys
      /// </summary>
      [FhirElement("description", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Why the property is defined, and/or what it conveys
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Coding | string | integer | boolean | dateTime | decimal | code
      /// </summary>
      [FhirElement("type", InSummary=true, Order=70)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("PropertyType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ConceptMap.ConceptMapPropertyType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ConceptMap.ConceptMapPropertyType> _TypeElement;

      /// <summary>
      /// Coding | string | integer | boolean | dateTime | decimal | code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ConceptMap.ConceptMapPropertyType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapPropertyType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// The CodeSystem from which code values come
      /// </summary>
      [FhirElement("system", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical SystemElement
      {
        get { return _SystemElement; }
        set { _SystemElement = value; OnPropertyChanged("SystemElement"); }
      }

      private Hl7.Fhir.Model.Canonical _SystemElement;

      /// <summary>
      /// The CodeSystem from which code values come
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string System
      {
        get { return SystemElement != null ? SystemElement.Value : null; }
        set
        {
          if (value == null)
            SystemElement = null;
          else
            SystemElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("System");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(UriElement != null) dest.UriElement = (Hl7.Fhir.Model.FhirUri)UriElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.ConceptMap.ConceptMapPropertyType>)TypeElement.DeepCopy();
        if(SystemElement != null) dest.SystemElement = (Hl7.Fhir.Model.Canonical)SystemElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(SystemElement, otherT.SystemElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(SystemElement, otherT.SystemElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (UriElement != null) yield return UriElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (TypeElement != null) yield return TypeElement;
          if (SystemElement != null) yield return SystemElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (UriElement != null) yield return new ElementValue("uri", UriElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (SystemElement != null) yield return new ElementValue("system", SystemElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "uri":
            value = UriElement;
            return UriElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "system":
            value = SystemElement;
            return SystemElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (UriElement is not null) yield return new KeyValuePair<string,object>("uri",UriElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (SystemElement is not null) yield return new KeyValuePair<string,object>("system",SystemElement);
      }

    }

    /// <summary>
    /// Definition of an additional attribute to act as a data source or target
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#AdditionalAttribute", IsNestedType=true)]
    [BackboneType("ConceptMap.additionalAttribute")]
    public partial class AdditionalAttributeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#AdditionalAttribute"; } }

      /// <summary>
      /// Identifies this additional attribute through this resource
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Identifies this additional attribute through this resource
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Formal identifier for the data element referred to in this attribte
      /// </summary>
      [FhirElement("uri", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UriElement
      {
        get { return _UriElement; }
        set { _UriElement = value; OnPropertyChanged("UriElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UriElement;

      /// <summary>
      /// Formal identifier for the data element referred to in this attribte
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Uri
      {
        get { return UriElement != null ? UriElement.Value : null; }
        set
        {
          if (value == null)
            UriElement = null;
          else
            UriElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Uri");
        }
      }

      /// <summary>
      /// Why the additional attribute is defined, and/or what the data element it refers to is
      /// </summary>
      [FhirElement("description", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Why the additional attribute is defined, and/or what the data element it refers to is
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// code | Coding | string | boolean | Quantity
      /// </summary>
      [FhirElement("type", InSummary=true, Order=70)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ConceptMapmapAttributeType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ConceptMap.ConceptMapAttributeType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ConceptMap.ConceptMapAttributeType> _TypeElement;

      /// <summary>
      /// code | Coding | string | boolean | Quantity
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ConceptMap.ConceptMapAttributeType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapAttributeType>(value);
          OnPropertyChanged("Type");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AdditionalAttributeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(UriElement != null) dest.UriElement = (Hl7.Fhir.Model.FhirUri)UriElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.ConceptMap.ConceptMapAttributeType>)TypeElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AdditionalAttributeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AdditionalAttributeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AdditionalAttributeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (UriElement != null) yield return UriElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (TypeElement != null) yield return TypeElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (UriElement != null) yield return new ElementValue("uri", UriElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "uri":
            value = UriElement;
            return UriElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (UriElement is not null) yield return new KeyValuePair<string,object>("uri",UriElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      }

    }

    /// <summary>
    /// Same source and target systems
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#Group", IsNestedType=true)]
    [BackboneType("ConceptMap.group")]
    public partial class GroupComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#Group"; } }

      /// <summary>
      /// Source system where concepts to be mapped are defined
      /// </summary>
      [FhirElement("source", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical SourceElement
      {
        get { return _SourceElement; }
        set { _SourceElement = value; OnPropertyChanged("SourceElement"); }
      }

      private Hl7.Fhir.Model.Canonical _SourceElement;

      /// <summary>
      /// Source system where concepts to be mapped are defined
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Source
      {
        get { return SourceElement != null ? SourceElement.Value : null; }
        set
        {
          if (value == null)
            SourceElement = null;
          else
            SourceElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Source");
        }
      }

      /// <summary>
      /// Target system that the concepts are to be mapped to
      /// </summary>
      [FhirElement("target", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical TargetElement
      {
        get { return _TargetElement; }
        set { _TargetElement = value; OnPropertyChanged("TargetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _TargetElement;

      /// <summary>
      /// Target system that the concepts are to be mapped to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Target
      {
        get { return TargetElement != null ? TargetElement.Value : null; }
        set
        {
          if (value == null)
            TargetElement = null;
          else
            TargetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Target");
        }
      }

      /// <summary>
      /// Mappings for a concept from the source set
      /// </summary>
      [FhirElement("element", Order=60)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ConceptMap.SourceElementComponent> Element
      {
        get { if(_Element==null) _Element = new List<Hl7.Fhir.Model.ConceptMap.SourceElementComponent>(); return _Element; }
        set { _Element = value; OnPropertyChanged("Element"); }
      }

      private List<Hl7.Fhir.Model.ConceptMap.SourceElementComponent> _Element;

      /// <summary>
      /// What to do when there is no mapping target for the source concept and ConceptMap.group.element.noMap is not true
      /// </summary>
      [FhirElement("unmapped", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.ConceptMap.UnmappedComponent Unmapped
      {
        get { return _Unmapped; }
        set { _Unmapped = value; OnPropertyChanged("Unmapped"); }
      }

      private Hl7.Fhir.Model.ConceptMap.UnmappedComponent _Unmapped;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as GroupComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SourceElement != null) dest.SourceElement = (Hl7.Fhir.Model.Canonical)SourceElement.DeepCopy();
        if(TargetElement != null) dest.TargetElement = (Hl7.Fhir.Model.Canonical)TargetElement.DeepCopy();
        if(Element != null) dest.Element = new List<Hl7.Fhir.Model.ConceptMap.SourceElementComponent>(Element.DeepCopy());
        if(Unmapped != null) dest.Unmapped = (Hl7.Fhir.Model.ConceptMap.UnmappedComponent)Unmapped.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new GroupComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as GroupComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SourceElement, otherT.SourceElement)) return false;
        if( !DeepComparable.Matches(TargetElement, otherT.TargetElement)) return false;
        if( !DeepComparable.Matches(Element, otherT.Element)) return false;
        if( !DeepComparable.Matches(Unmapped, otherT.Unmapped)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as GroupComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SourceElement, otherT.SourceElement)) return false;
        if( !DeepComparable.IsExactly(TargetElement, otherT.TargetElement)) return false;
        if( !DeepComparable.IsExactly(Element, otherT.Element)) return false;
        if( !DeepComparable.IsExactly(Unmapped, otherT.Unmapped)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SourceElement != null) yield return SourceElement;
          if (TargetElement != null) yield return TargetElement;
          foreach (var elem in Element) { if (elem != null) yield return elem; }
          if (Unmapped != null) yield return Unmapped;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SourceElement != null) yield return new ElementValue("source", SourceElement);
          if (TargetElement != null) yield return new ElementValue("target", TargetElement);
          foreach (var elem in Element) { if (elem != null) yield return new ElementValue("element", elem); }
          if (Unmapped != null) yield return new ElementValue("unmapped", Unmapped);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "source":
            value = SourceElement;
            return SourceElement is not null;
          case "target":
            value = TargetElement;
            return TargetElement is not null;
          case "element":
            value = Element;
            return Element?.Any() == true;
          case "unmapped":
            value = Unmapped;
            return Unmapped is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SourceElement is not null) yield return new KeyValuePair<string,object>("source",SourceElement);
        if (TargetElement is not null) yield return new KeyValuePair<string,object>("target",TargetElement);
        if (Element?.Any() == true) yield return new KeyValuePair<string,object>("element",Element);
        if (Unmapped is not null) yield return new KeyValuePair<string,object>("unmapped",Unmapped);
      }

    }

    /// <summary>
    /// Mappings for a concept from the source set
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#SourceElement", IsNestedType=true)]
    [BackboneType("ConceptMap.group.element")]
    public partial class SourceElementComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#SourceElement"; } }

      /// <summary>
      /// Identifies element being mapped
      /// </summary>
      [FhirElement("code", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Identifies element being mapped
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Display for the code
      /// </summary>
      [FhirElement("display", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DisplayElement
      {
        get { return _DisplayElement; }
        set { _DisplayElement = value; OnPropertyChanged("DisplayElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DisplayElement;

      /// <summary>
      /// Display for the code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Display
      {
        get { return DisplayElement != null ? DisplayElement.Value : null; }
        set
        {
          if (value == null)
            DisplayElement = null;
          else
            DisplayElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Display");
        }
      }

      /// <summary>
      /// Identifies the set of concepts being mapped
      /// </summary>
      [FhirElement("valueSet", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical ValueSetElement
      {
        get { return _ValueSetElement; }
        set { _ValueSetElement = value; OnPropertyChanged("ValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _ValueSetElement;

      /// <summary>
      /// Identifies the set of concepts being mapped
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ValueSet
      {
        get { return ValueSetElement != null ? ValueSetElement.Value : null; }
        set
        {
          if (value == null)
            ValueSetElement = null;
          else
            ValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("ValueSet");
        }
      }

      /// <summary>
      /// No mapping to a target concept for this source concept
      /// </summary>
      [FhirElement("noMap", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean NoMapElement
      {
        get { return _NoMapElement; }
        set { _NoMapElement = value; OnPropertyChanged("NoMapElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _NoMapElement;

      /// <summary>
      /// No mapping to a target concept for this source concept
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? NoMap
      {
        get { return NoMapElement != null ? NoMapElement.Value : null; }
        set
        {
          if (value == null)
            NoMapElement = null;
          else
            NoMapElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("NoMap");
        }
      }

      /// <summary>
      /// Concept in target system for element
      /// </summary>
      [FhirElement("target", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ConceptMap.TargetElementComponent> Target
      {
        get { if(_Target==null) _Target = new List<Hl7.Fhir.Model.ConceptMap.TargetElementComponent>(); return _Target; }
        set { _Target = value; OnPropertyChanged("Target"); }
      }

      private List<Hl7.Fhir.Model.ConceptMap.TargetElementComponent> _Target;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SourceElementComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(DisplayElement != null) dest.DisplayElement = (Hl7.Fhir.Model.FhirString)DisplayElement.DeepCopy();
        if(ValueSetElement != null) dest.ValueSetElement = (Hl7.Fhir.Model.Canonical)ValueSetElement.DeepCopy();
        if(NoMapElement != null) dest.NoMapElement = (Hl7.Fhir.Model.FhirBoolean)NoMapElement.DeepCopy();
        if(Target != null) dest.Target = new List<Hl7.Fhir.Model.ConceptMap.TargetElementComponent>(Target.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SourceElementComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SourceElementComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.Matches(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.Matches(NoMapElement, otherT.NoMapElement)) return false;
        if( !DeepComparable.Matches(Target, otherT.Target)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SourceElementComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.IsExactly(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.IsExactly(NoMapElement, otherT.NoMapElement)) return false;
        if( !DeepComparable.IsExactly(Target, otherT.Target)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (DisplayElement != null) yield return DisplayElement;
          if (ValueSetElement != null) yield return ValueSetElement;
          if (NoMapElement != null) yield return NoMapElement;
          foreach (var elem in Target) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (DisplayElement != null) yield return new ElementValue("display", DisplayElement);
          if (ValueSetElement != null) yield return new ElementValue("valueSet", ValueSetElement);
          if (NoMapElement != null) yield return new ElementValue("noMap", NoMapElement);
          foreach (var elem in Target) { if (elem != null) yield return new ElementValue("target", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "display":
            value = DisplayElement;
            return DisplayElement is not null;
          case "valueSet":
            value = ValueSetElement;
            return ValueSetElement is not null;
          case "noMap":
            value = NoMapElement;
            return NoMapElement is not null;
          case "target":
            value = Target;
            return Target?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (DisplayElement is not null) yield return new KeyValuePair<string,object>("display",DisplayElement);
        if (ValueSetElement is not null) yield return new KeyValuePair<string,object>("valueSet",ValueSetElement);
        if (NoMapElement is not null) yield return new KeyValuePair<string,object>("noMap",NoMapElement);
        if (Target?.Any() == true) yield return new KeyValuePair<string,object>("target",Target);
      }

    }

    /// <summary>
    /// Concept in target system for element
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#TargetElement", IsNestedType=true)]
    [BackboneType("ConceptMap.group.element.target")]
    public partial class TargetElementComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#TargetElement"; } }

      /// <summary>
      /// Code that identifies the target element
      /// </summary>
      [FhirElement("code", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Code that identifies the target element
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Display for the code
      /// </summary>
      [FhirElement("display", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DisplayElement
      {
        get { return _DisplayElement; }
        set { _DisplayElement = value; OnPropertyChanged("DisplayElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DisplayElement;

      /// <summary>
      /// Display for the code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Display
      {
        get { return DisplayElement != null ? DisplayElement.Value : null; }
        set
        {
          if (value == null)
            DisplayElement = null;
          else
            DisplayElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Display");
        }
      }

      /// <summary>
      /// Identifies the set of target concepts
      /// </summary>
      [FhirElement("valueSet", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical ValueSetElement
      {
        get { return _ValueSetElement; }
        set { _ValueSetElement = value; OnPropertyChanged("ValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _ValueSetElement;

      /// <summary>
      /// Identifies the set of target concepts
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ValueSet
      {
        get { return ValueSetElement != null ? ValueSetElement.Value : null; }
        set
        {
          if (value == null)
            ValueSetElement = null;
          else
            ValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("ValueSet");
        }
      }

      /// <summary>
      /// related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
      /// </summary>
      [FhirElement("relationship", IsModifier=true, Order=70)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ConceptMapRelationship")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship> RelationshipElement
      {
        get { return _RelationshipElement; }
        set { _RelationshipElement = value; OnPropertyChanged("RelationshipElement"); }
      }

      private Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship> _RelationshipElement;

      /// <summary>
      /// related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship? Relationship
      {
        get { return RelationshipElement != null ? RelationshipElement.Value : null; }
        set
        {
          if (value == null)
            RelationshipElement = null;
          else
            RelationshipElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship>(value);
          OnPropertyChanged("Relationship");
        }
      }

      /// <summary>
      /// Description of status/issues in mapping
      /// </summary>
      [FhirElement("comment", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CommentElement
      {
        get { return _CommentElement; }
        set { _CommentElement = value; OnPropertyChanged("CommentElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CommentElement;

      /// <summary>
      /// Description of status/issues in mapping
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Comment
      {
        get { return CommentElement != null ? CommentElement.Value : null; }
        set
        {
          if (value == null)
            CommentElement = null;
          else
            CommentElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Comment");
        }
      }

      /// <summary>
      /// Property value for the source -&gt; target mapping
      /// </summary>
      [FhirElement("property", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ConceptMap.MappingPropertyComponent> Property
      {
        get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.ConceptMap.MappingPropertyComponent>(); return _Property; }
        set { _Property = value; OnPropertyChanged("Property"); }
      }

      private List<Hl7.Fhir.Model.ConceptMap.MappingPropertyComponent> _Property;

      /// <summary>
      /// Other properties required for this mapping
      /// </summary>
      [FhirElement("dependsOn", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent> DependsOn
      {
        get { if(_DependsOn==null) _DependsOn = new List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent>(); return _DependsOn; }
        set { _DependsOn = value; OnPropertyChanged("DependsOn"); }
      }

      private List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent> _DependsOn;

      /// <summary>
      /// Other data elements that this mapping also produces
      /// </summary>
      [FhirElement("product", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent> Product
      {
        get { if(_Product==null) _Product = new List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent>(); return _Product; }
        set { _Product = value; OnPropertyChanged("Product"); }
      }

      private List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent> _Product;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TargetElementComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(DisplayElement != null) dest.DisplayElement = (Hl7.Fhir.Model.FhirString)DisplayElement.DeepCopy();
        if(ValueSetElement != null) dest.ValueSetElement = (Hl7.Fhir.Model.Canonical)ValueSetElement.DeepCopy();
        if(RelationshipElement != null) dest.RelationshipElement = (Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship>)RelationshipElement.DeepCopy();
        if(CommentElement != null) dest.CommentElement = (Hl7.Fhir.Model.FhirString)CommentElement.DeepCopy();
        if(Property != null) dest.Property = new List<Hl7.Fhir.Model.ConceptMap.MappingPropertyComponent>(Property.DeepCopy());
        if(DependsOn != null) dest.DependsOn = new List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent>(DependsOn.DeepCopy());
        if(Product != null) dest.Product = new List<Hl7.Fhir.Model.ConceptMap.OtherElementComponent>(Product.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TargetElementComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TargetElementComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.Matches(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.Matches(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.Matches(CommentElement, otherT.CommentElement)) return false;
        if( !DeepComparable.Matches(Property, otherT.Property)) return false;
        if( !DeepComparable.Matches(DependsOn, otherT.DependsOn)) return false;
        if( !DeepComparable.Matches(Product, otherT.Product)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TargetElementComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.IsExactly(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.IsExactly(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.IsExactly(CommentElement, otherT.CommentElement)) return false;
        if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
        if( !DeepComparable.IsExactly(DependsOn, otherT.DependsOn)) return false;
        if( !DeepComparable.IsExactly(Product, otherT.Product)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (DisplayElement != null) yield return DisplayElement;
          if (ValueSetElement != null) yield return ValueSetElement;
          if (RelationshipElement != null) yield return RelationshipElement;
          if (CommentElement != null) yield return CommentElement;
          foreach (var elem in Property) { if (elem != null) yield return elem; }
          foreach (var elem in DependsOn) { if (elem != null) yield return elem; }
          foreach (var elem in Product) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (DisplayElement != null) yield return new ElementValue("display", DisplayElement);
          if (ValueSetElement != null) yield return new ElementValue("valueSet", ValueSetElement);
          if (RelationshipElement != null) yield return new ElementValue("relationship", RelationshipElement);
          if (CommentElement != null) yield return new ElementValue("comment", CommentElement);
          foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
          foreach (var elem in DependsOn) { if (elem != null) yield return new ElementValue("dependsOn", elem); }
          foreach (var elem in Product) { if (elem != null) yield return new ElementValue("product", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "display":
            value = DisplayElement;
            return DisplayElement is not null;
          case "valueSet":
            value = ValueSetElement;
            return ValueSetElement is not null;
          case "relationship":
            value = RelationshipElement;
            return RelationshipElement is not null;
          case "comment":
            value = CommentElement;
            return CommentElement is not null;
          case "property":
            value = Property;
            return Property?.Any() == true;
          case "dependsOn":
            value = DependsOn;
            return DependsOn?.Any() == true;
          case "product":
            value = Product;
            return Product?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (DisplayElement is not null) yield return new KeyValuePair<string,object>("display",DisplayElement);
        if (ValueSetElement is not null) yield return new KeyValuePair<string,object>("valueSet",ValueSetElement);
        if (RelationshipElement is not null) yield return new KeyValuePair<string,object>("relationship",RelationshipElement);
        if (CommentElement is not null) yield return new KeyValuePair<string,object>("comment",CommentElement);
        if (Property?.Any() == true) yield return new KeyValuePair<string,object>("property",Property);
        if (DependsOn?.Any() == true) yield return new KeyValuePair<string,object>("dependsOn",DependsOn);
        if (Product?.Any() == true) yield return new KeyValuePair<string,object>("product",Product);
      }

    }

    /// <summary>
    /// Property value for the source -&gt; target mapping
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#MappingProperty", IsNestedType=true)]
    [BackboneType("ConceptMap.group.element.target.property")]
    public partial class MappingPropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#MappingProperty"; } }

      /// <summary>
      /// Reference to ConceptMap.property.code
      /// </summary>
      [FhirElement("code", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Reference to ConceptMap.property.code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Value of the property for this concept
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Coding),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.FhirDecimal),typeof(Hl7.Fhir.Model.Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MappingPropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MappingPropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MappingPropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MappingPropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Other properties required for this mapping
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#OtherElement", IsNestedType=true)]
    [BackboneType("ConceptMap.group.element.target.dependsOn")]
    public partial class OtherElementComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#OtherElement"; } }

      /// <summary>
      /// A reference to a mapping attribute defined in ConceptMap.additionalAttribute
      /// </summary>
      [FhirElement("attribute", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code AttributeElement
      {
        get { return _AttributeElement; }
        set { _AttributeElement = value; OnPropertyChanged("AttributeElement"); }
      }

      private Hl7.Fhir.Model.Code _AttributeElement;

      /// <summary>
      /// A reference to a mapping attribute defined in ConceptMap.additionalAttribute
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Attribute
      {
        get { return AttributeElement != null ? AttributeElement.Value : null; }
        set
        {
          if (value == null)
            AttributeElement = null;
          else
            AttributeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Attribute");
        }
      }

      /// <summary>
      /// Value of the referenced data element
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Code),typeof(Hl7.Fhir.Model.Coding),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Quantity))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      /// <summary>
      /// The mapping depends on a data element with a value from this value set
      /// </summary>
      [FhirElement("valueSet", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical ValueSetElement
      {
        get { return _ValueSetElement; }
        set { _ValueSetElement = value; OnPropertyChanged("ValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _ValueSetElement;

      /// <summary>
      /// The mapping depends on a data element with a value from this value set
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ValueSet
      {
        get { return ValueSetElement != null ? ValueSetElement.Value : null; }
        set
        {
          if (value == null)
            ValueSetElement = null;
          else
            ValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("ValueSet");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OtherElementComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(AttributeElement != null) dest.AttributeElement = (Hl7.Fhir.Model.Code)AttributeElement.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        if(ValueSetElement != null) dest.ValueSetElement = (Hl7.Fhir.Model.Canonical)ValueSetElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OtherElementComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OtherElementComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(AttributeElement, otherT.AttributeElement)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(ValueSetElement, otherT.ValueSetElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OtherElementComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(AttributeElement, otherT.AttributeElement)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(ValueSetElement, otherT.ValueSetElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (AttributeElement != null) yield return AttributeElement;
          if (Value != null) yield return Value;
          if (ValueSetElement != null) yield return ValueSetElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (AttributeElement != null) yield return new ElementValue("attribute", AttributeElement);
          if (Value != null) yield return new ElementValue("value", Value);
          if (ValueSetElement != null) yield return new ElementValue("valueSet", ValueSetElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "attribute":
            value = AttributeElement;
            return AttributeElement is not null;
          case "value":
            value = Value;
            return Value is not null;
          case "valueSet":
            value = ValueSetElement;
            return ValueSetElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (AttributeElement is not null) yield return new KeyValuePair<string,object>("attribute",AttributeElement);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
        if (ValueSetElement is not null) yield return new KeyValuePair<string,object>("valueSet",ValueSetElement);
      }

    }

    /// <summary>
    /// What to do when there is no mapping target for the source concept and ConceptMap.group.element.noMap is not true
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ConceptMap#Unmapped", IsNestedType=true)]
    [BackboneType("ConceptMap.group.unmapped")]
    public partial class UnmappedComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ConceptMap#Unmapped"; } }

      /// <summary>
      /// use-source-code | fixed | other-map
      /// </summary>
      [FhirElement("mode", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ConceptMapGroupUnmappedMode")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode> _ModeElement;

      /// <summary>
      /// use-source-code | fixed | other-map
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>(value);
          OnPropertyChanged("Mode");
        }
      }

      /// <summary>
      /// Fixed code when mode = fixed
      /// </summary>
      [FhirElement("code", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Fixed code when mode = fixed
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Display for the code
      /// </summary>
      [FhirElement("display", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DisplayElement
      {
        get { return _DisplayElement; }
        set { _DisplayElement = value; OnPropertyChanged("DisplayElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DisplayElement;

      /// <summary>
      /// Display for the code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Display
      {
        get { return DisplayElement != null ? DisplayElement.Value : null; }
        set
        {
          if (value == null)
            DisplayElement = null;
          else
            DisplayElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Display");
        }
      }

      /// <summary>
      /// Fixed code set when mode = fixed
      /// </summary>
      [FhirElement("valueSet", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical ValueSetElement
      {
        get { return _ValueSetElement; }
        set { _ValueSetElement = value; OnPropertyChanged("ValueSetElement"); }
      }

      private Hl7.Fhir.Model.Canonical _ValueSetElement;

      /// <summary>
      /// Fixed code set when mode = fixed
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ValueSet
      {
        get { return ValueSetElement != null ? ValueSetElement.Value : null; }
        set
        {
          if (value == null)
            ValueSetElement = null;
          else
            ValueSetElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("ValueSet");
        }
      }

      /// <summary>
      /// related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
      /// </summary>
      [FhirElement("relationship", IsModifier=true, Order=80)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("UnmappedConceptMapRelationship")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship> RelationshipElement
      {
        get { return _RelationshipElement; }
        set { _RelationshipElement = value; OnPropertyChanged("RelationshipElement"); }
      }

      private Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship> _RelationshipElement;

      /// <summary>
      /// related-to | equivalent | source-is-narrower-than-target | source-is-broader-than-target | not-related-to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship? Relationship
      {
        get { return RelationshipElement != null ? RelationshipElement.Value : null; }
        set
        {
          if (value == null)
            RelationshipElement = null;
          else
            RelationshipElement = new Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship>(value);
          OnPropertyChanged("Relationship");
        }
      }

      /// <summary>
      /// canonical reference to an additional ConceptMap to use for mapping if the source concept is unmapped
      /// </summary>
      [FhirElement("otherMap", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical OtherMapElement
      {
        get { return _OtherMapElement; }
        set { _OtherMapElement = value; OnPropertyChanged("OtherMapElement"); }
      }

      private Hl7.Fhir.Model.Canonical _OtherMapElement;

      /// <summary>
      /// canonical reference to an additional ConceptMap to use for mapping if the source concept is unmapped
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string OtherMap
      {
        get { return OtherMapElement != null ? OtherMapElement.Value : null; }
        set
        {
          if (value == null)
            OtherMapElement = null;
          else
            OtherMapElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("OtherMap");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as UnmappedComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.ConceptMap.ConceptMapGroupUnmappedMode>)ModeElement.DeepCopy();
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(DisplayElement != null) dest.DisplayElement = (Hl7.Fhir.Model.FhirString)DisplayElement.DeepCopy();
        if(ValueSetElement != null) dest.ValueSetElement = (Hl7.Fhir.Model.Canonical)ValueSetElement.DeepCopy();
        if(RelationshipElement != null) dest.RelationshipElement = (Code<Hl7.Fhir.Model.ConceptMap.ConceptMapRelationship>)RelationshipElement.DeepCopy();
        if(OtherMapElement != null) dest.OtherMapElement = (Hl7.Fhir.Model.Canonical)OtherMapElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new UnmappedComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as UnmappedComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.Matches(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.Matches(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.Matches(OtherMapElement, otherT.OtherMapElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as UnmappedComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.IsExactly(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.IsExactly(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.IsExactly(OtherMapElement, otherT.OtherMapElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ModeElement != null) yield return ModeElement;
          if (CodeElement != null) yield return CodeElement;
          if (DisplayElement != null) yield return DisplayElement;
          if (ValueSetElement != null) yield return ValueSetElement;
          if (RelationshipElement != null) yield return RelationshipElement;
          if (OtherMapElement != null) yield return OtherMapElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (DisplayElement != null) yield return new ElementValue("display", DisplayElement);
          if (ValueSetElement != null) yield return new ElementValue("valueSet", ValueSetElement);
          if (RelationshipElement != null) yield return new ElementValue("relationship", RelationshipElement);
          if (OtherMapElement != null) yield return new ElementValue("otherMap", OtherMapElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = ModeElement;
            return ModeElement is not null;
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "display":
            value = DisplayElement;
            return DisplayElement is not null;
          case "valueSet":
            value = ValueSetElement;
            return ValueSetElement is not null;
          case "relationship":
            value = RelationshipElement;
            return RelationshipElement is not null;
          case "otherMap":
            value = OtherMapElement;
            return OtherMapElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ModeElement is not null) yield return new KeyValuePair<string,object>("mode",ModeElement);
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (DisplayElement is not null) yield return new KeyValuePair<string,object>("display",DisplayElement);
        if (ValueSetElement is not null) yield return new KeyValuePair<string,object>("valueSet",ValueSetElement);
        if (RelationshipElement is not null) yield return new KeyValuePair<string,object>("relationship",RelationshipElement);
        if (OtherMapElement is not null) yield return new KeyValuePair<string,object>("otherMap",OtherMapElement);
      }

    }

    /// <summary>
    /// Canonical identifier for this concept map, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this concept map, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the concept map
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the concept map
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the concept map
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// How to compare versions
    /// </summary>
    [FhirElement("versionAlgorithm", InSummary=true, Order=120, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Coding))]
    [DataMember]
    public Hl7.Fhir.Model.DataType VersionAlgorithm
    {
      get { return _VersionAlgorithm; }
      set { _VersionAlgorithm = value; OnPropertyChanged("VersionAlgorithm"); }
    }

    private Hl7.Fhir.Model.DataType _VersionAlgorithm;

    /// <summary>
    /// Name for this concept map (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this concept map (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this concept map (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this concept map (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=160, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=170, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=180, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the concept map
    /// </summary>
    [FhirElement("description", Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the concept map
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for concept map (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=220)]
    [Binding("Jurisdiction")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this concept map is defined
    /// </summary>
    [FhirElement("purpose", Order=230, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this concept map is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    [FhirElement("copyrightLabel", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightLabelElement
    {
      get { return _CopyrightLabelElement; }
      set { _CopyrightLabelElement = value; OnPropertyChanged("CopyrightLabelElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightLabelElement;

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CopyrightLabel
    {
      get { return CopyrightLabelElement != null ? CopyrightLabelElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightLabelElement = null;
        else
          CopyrightLabelElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CopyrightLabel");
      }
    }

    /// <summary>
    /// When the ConceptMap was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When the ConceptMap was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// When the ConceptMap was last reviewed by the publisher
    /// </summary>
    [FhirElement("lastReviewDate", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// When the ConceptMap was last reviewed by the publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// When the ConceptMap is expected to be used
    /// </summary>
    [FhirElement("effectivePeriod", InSummary=true, Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.Period EffectivePeriod
    {
      get { return _EffectivePeriod; }
      set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
    }

    private Hl7.Fhir.Model.Period _EffectivePeriod;

    /// <summary>
    /// E.g. Education, Treatment, Assessment, etc
    /// </summary>
    [FhirElement("topic", Order=290)]
    [Binding("DefinitionTopic")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Topic
    {
      get { if(_Topic==null) _Topic = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Topic; }
      set { _Topic = value; OnPropertyChanged("Topic"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Topic;

    /// <summary>
    /// Who authored the ConceptMap
    /// </summary>
    [FhirElement("author", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ContactDetail>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Author;

    /// <summary>
    /// Who edited the ConceptMap
    /// </summary>
    [FhirElement("editor", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Editor
    {
      get { if(_Editor==null) _Editor = new List<Hl7.Fhir.Model.ContactDetail>(); return _Editor; }
      set { _Editor = value; OnPropertyChanged("Editor"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Editor;

    /// <summary>
    /// Who reviewed the ConceptMap
    /// </summary>
    [FhirElement("reviewer", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Reviewer
    {
      get { if(_Reviewer==null) _Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(); return _Reviewer; }
      set { _Reviewer = value; OnPropertyChanged("Reviewer"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Reviewer;

    /// <summary>
    /// Who endorsed the ConceptMap
    /// </summary>
    [FhirElement("endorser", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Endorser
    {
      get { if(_Endorser==null) _Endorser = new List<Hl7.Fhir.Model.ContactDetail>(); return _Endorser; }
      set { _Endorser = value; OnPropertyChanged("Endorser"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Endorser;

    /// <summary>
    /// Additional documentation, citations, etc
    /// </summary>
    [FhirElement("relatedArtifact", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Additional properties of the mapping
    /// </summary>
    [FhirElement("property", InSummary=true, Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ConceptMap.PropertyComponent> Property
    {
      get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.ConceptMap.PropertyComponent>(); return _Property; }
      set { _Property = value; OnPropertyChanged("Property"); }
    }

    private List<Hl7.Fhir.Model.ConceptMap.PropertyComponent> _Property;

    /// <summary>
    /// Definition of an additional attribute to act as a data source or target
    /// </summary>
    [FhirElement("additionalAttribute", InSummary=true, Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ConceptMap.AdditionalAttributeComponent> AdditionalAttribute
    {
      get { if(_AdditionalAttribute==null) _AdditionalAttribute = new List<Hl7.Fhir.Model.ConceptMap.AdditionalAttributeComponent>(); return _AdditionalAttribute; }
      set { _AdditionalAttribute = value; OnPropertyChanged("AdditionalAttribute"); }
    }

    private List<Hl7.Fhir.Model.ConceptMap.AdditionalAttributeComponent> _AdditionalAttribute;

    /// <summary>
    /// The source value set that contains the concepts that are being mapped
    /// </summary>
    [FhirElement("sourceScope", InSummary=true, Order=370, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.Canonical))]
    [DataMember]
    public Hl7.Fhir.Model.DataType SourceScope
    {
      get { return _SourceScope; }
      set { _SourceScope = value; OnPropertyChanged("SourceScope"); }
    }

    private Hl7.Fhir.Model.DataType _SourceScope;

    /// <summary>
    /// The target value set which provides context for the mappings
    /// </summary>
    [FhirElement("targetScope", InSummary=true, Order=380, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.Canonical))]
    [DataMember]
    public Hl7.Fhir.Model.DataType TargetScope
    {
      get { return _TargetScope; }
      set { _TargetScope = value; OnPropertyChanged("TargetScope"); }
    }

    private Hl7.Fhir.Model.DataType _TargetScope;

    /// <summary>
    /// Same source and target systems
    /// </summary>
    [FhirElement("group", Order=390)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ConceptMap.GroupComponent> Group
    {
      get { if(_Group==null) _Group = new List<Hl7.Fhir.Model.ConceptMap.GroupComponent>(); return _Group; }
      set { _Group = value; OnPropertyChanged("Group"); }
    }

    private List<Hl7.Fhir.Model.ConceptMap.GroupComponent> _Group;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ConceptMap;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(VersionAlgorithm != null) dest.VersionAlgorithm = (Hl7.Fhir.Model.DataType)VersionAlgorithm.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(CopyrightLabelElement != null) dest.CopyrightLabelElement = (Hl7.Fhir.Model.FhirString)CopyrightLabelElement.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
      if(Topic != null) dest.Topic = new List<Hl7.Fhir.Model.CodeableConcept>(Topic.DeepCopy());
      if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ContactDetail>(Author.DeepCopy());
      if(Editor != null) dest.Editor = new List<Hl7.Fhir.Model.ContactDetail>(Editor.DeepCopy());
      if(Reviewer != null) dest.Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(Reviewer.DeepCopy());
      if(Endorser != null) dest.Endorser = new List<Hl7.Fhir.Model.ContactDetail>(Endorser.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(Property != null) dest.Property = new List<Hl7.Fhir.Model.ConceptMap.PropertyComponent>(Property.DeepCopy());
      if(AdditionalAttribute != null) dest.AdditionalAttribute = new List<Hl7.Fhir.Model.ConceptMap.AdditionalAttributeComponent>(AdditionalAttribute.DeepCopy());
      if(SourceScope != null) dest.SourceScope = (Hl7.Fhir.Model.DataType)SourceScope.DeepCopy();
      if(TargetScope != null) dest.TargetScope = (Hl7.Fhir.Model.DataType)TargetScope.DeepCopy();
      if(Group != null) dest.Group = new List<Hl7.Fhir.Model.ConceptMap.GroupComponent>(Group.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ConceptMap());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ConceptMap;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.Matches(Topic, otherT.Topic)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Editor, otherT.Editor)) return false;
      if( !DeepComparable.Matches(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.Matches(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(Property, otherT.Property)) return false;
      if( !DeepComparable.Matches(AdditionalAttribute, otherT.AdditionalAttribute)) return false;
      if( !DeepComparable.Matches(SourceScope, otherT.SourceScope)) return false;
      if( !DeepComparable.Matches(TargetScope, otherT.TargetScope)) return false;
      if( !DeepComparable.Matches(Group, otherT.Group)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ConceptMap;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.IsExactly(Topic, otherT.Topic)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Editor, otherT.Editor)) return false;
      if( !DeepComparable.IsExactly(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.IsExactly(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
      if( !DeepComparable.IsExactly(AdditionalAttribute, otherT.AdditionalAttribute)) return false;
      if( !DeepComparable.IsExactly(SourceScope, otherT.SourceScope)) return false;
      if( !DeepComparable.IsExactly(TargetScope, otherT.TargetScope)) return false;
      if( !DeepComparable.IsExactly(Group, otherT.Group)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (VersionAlgorithm != null) yield return VersionAlgorithm;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (CopyrightLabelElement != null) yield return CopyrightLabelElement;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (EffectivePeriod != null) yield return EffectivePeriod;
        foreach (var elem in Topic) { if (elem != null) yield return elem; }
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        foreach (var elem in Editor) { if (elem != null) yield return elem; }
        foreach (var elem in Reviewer) { if (elem != null) yield return elem; }
        foreach (var elem in Endorser) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        foreach (var elem in Property) { if (elem != null) yield return elem; }
        foreach (var elem in AdditionalAttribute) { if (elem != null) yield return elem; }
        if (SourceScope != null) yield return SourceScope;
        if (TargetScope != null) yield return TargetScope;
        foreach (var elem in Group) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (VersionAlgorithm != null) yield return new ElementValue("versionAlgorithm", VersionAlgorithm);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (CopyrightLabelElement != null) yield return new ElementValue("copyrightLabel", CopyrightLabelElement);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
        foreach (var elem in Topic) { if (elem != null) yield return new ElementValue("topic", elem); }
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        foreach (var elem in Editor) { if (elem != null) yield return new ElementValue("editor", elem); }
        foreach (var elem in Reviewer) { if (elem != null) yield return new ElementValue("reviewer", elem); }
        foreach (var elem in Endorser) { if (elem != null) yield return new ElementValue("endorser", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
        foreach (var elem in AdditionalAttribute) { if (elem != null) yield return new ElementValue("additionalAttribute", elem); }
        if (SourceScope != null) yield return new ElementValue("sourceScope", SourceScope);
        if (TargetScope != null) yield return new ElementValue("targetScope", TargetScope);
        foreach (var elem in Group) { if (elem != null) yield return new ElementValue("group", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "versionAlgorithm":
          value = VersionAlgorithm;
          return VersionAlgorithm is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "copyrightLabel":
          value = CopyrightLabelElement;
          return CopyrightLabelElement is not null;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "effectivePeriod":
          value = EffectivePeriod;
          return EffectivePeriod is not null;
        case "topic":
          value = Topic;
          return Topic?.Any() == true;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "editor":
          value = Editor;
          return Editor?.Any() == true;
        case "reviewer":
          value = Reviewer;
          return Reviewer?.Any() == true;
        case "endorser":
          value = Endorser;
          return Endorser?.Any() == true;
        case "relatedArtifact":
          value = RelatedArtifact;
          return RelatedArtifact?.Any() == true;
        case "property":
          value = Property;
          return Property?.Any() == true;
        case "additionalAttribute":
          value = AdditionalAttribute;
          return AdditionalAttribute?.Any() == true;
        case "sourceScope":
          value = SourceScope;
          return SourceScope is not null;
        case "targetScope":
          value = TargetScope;
          return TargetScope is not null;
        case "group":
          value = Group;
          return Group?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (VersionAlgorithm is not null) yield return new KeyValuePair<string,object>("versionAlgorithm",VersionAlgorithm);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (CopyrightLabelElement is not null) yield return new KeyValuePair<string,object>("copyrightLabel",CopyrightLabelElement);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (EffectivePeriod is not null) yield return new KeyValuePair<string,object>("effectivePeriod",EffectivePeriod);
      if (Topic?.Any() == true) yield return new KeyValuePair<string,object>("topic",Topic);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (Editor?.Any() == true) yield return new KeyValuePair<string,object>("editor",Editor);
      if (Reviewer?.Any() == true) yield return new KeyValuePair<string,object>("reviewer",Reviewer);
      if (Endorser?.Any() == true) yield return new KeyValuePair<string,object>("endorser",Endorser);
      if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
      if (Property?.Any() == true) yield return new KeyValuePair<string,object>("property",Property);
      if (AdditionalAttribute?.Any() == true) yield return new KeyValuePair<string,object>("additionalAttribute",AdditionalAttribute);
      if (SourceScope is not null) yield return new KeyValuePair<string,object>("sourceScope",SourceScope);
      if (TargetScope is not null) yield return new KeyValuePair<string,object>("targetScope",TargetScope);
      if (Group?.Any() == true) yield return new KeyValuePair<string,object>("group",Group);
    }

  }

}

// end of file

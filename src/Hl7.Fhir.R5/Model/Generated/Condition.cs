// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Detailed information about conditions, problems or diagnoses
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Condition","http://hl7.org/fhir/StructureDefinition/Condition", IsResource=true)]
  public partial class Condition : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Condition"; } }

    /// <summary>
    /// Preferred value set for Condition Clinical Status.
    /// (url: http://hl7.org/fhir/ValueSet/condition-clinical)
    /// (systems: 0)
    /// </summary>
    [FhirEnumeration("ConditionClinicalStatusCodes", "http://hl7.org/fhir/ValueSet/condition-clinical", "http://terminology.hl7.org/CodeSystem/condition-clinical")]
    public enum ConditionClinicalStatusCodes
    {
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-clinical)
      /// </summary>
      [EnumLiteral("active"), Description("Active")]
      Active,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-clinical)
      /// </summary>
      [EnumLiteral("recurrence"), Description("Recurrence")]
      Recurrence,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-clinical)
      /// </summary>
      [EnumLiteral("relapse"), Description("Relapse")]
      Relapse,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-clinical)
      /// </summary>
      [EnumLiteral("inactive"), Description("Inactive")]
      Inactive,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-clinical)
      /// </summary>
      [EnumLiteral("remission"), Description("Remission")]
      Remission,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-clinical)
      /// </summary>
      [EnumLiteral("resolved"), Description("Resolved")]
      Resolved,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-clinical)
      /// </summary>
      [EnumLiteral("unknown"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// The verification status to support or decline the clinical status of the condition or diagnosis.
    /// (url: http://hl7.org/fhir/ValueSet/condition-ver-status)
    /// (systems: 0)
    /// </summary>
    [FhirEnumeration("ConditionVerificationStatus", "http://hl7.org/fhir/ValueSet/condition-ver-status", "http://terminology.hl7.org/CodeSystem/condition-ver-status")]
    public enum ConditionVerificationStatus
    {
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-ver-status)
      /// </summary>
      [EnumLiteral("unconfirmed"), Description("Unconfirmed")]
      Unconfirmed,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-ver-status)
      /// </summary>
      [EnumLiteral("provisional"), Description("Provisional")]
      Provisional,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-ver-status)
      /// </summary>
      [EnumLiteral("differential"), Description("Differential")]
      Differential,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-ver-status)
      /// </summary>
      [EnumLiteral("confirmed"), Description("Confirmed")]
      Confirmed,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-ver-status)
      /// </summary>
      [EnumLiteral("refuted"), Description("Refuted")]
      Refuted,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://terminology.hl7.org/CodeSystem/condition-ver-status)
      /// </summary>
      [EnumLiteral("entered-in-error"), Description("Entered in Error")]
      EnteredInError,
    }

    /// <summary>
    /// Who or what participated in the activities related to the condition and how they were involved
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Condition#Participant", IsNestedType=true)]
    [BackboneType("Condition.participant")]
    public partial class ParticipantComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Condition#Participant"; } }

      /// <summary>
      /// Type of involvement
      /// </summary>
      [FhirElement("function", InSummary=true, Order=40)]
      [Binding("ConditionParticipantFunction")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Function
      {
        get { return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Function;

      /// <summary>
      /// Who or what participated in the activities related to the condition
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=50, FiveWs="FiveWs.who")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Patient","RelatedPerson","Device","Organization","CareTeam")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParticipantComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Function != null) dest.Function = (Hl7.Fhir.Model.CodeableConcept)Function.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParticipantComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Function != null) yield return Function;
          if (Actor != null) yield return Actor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Function != null) yield return new ElementValue("function", Function);
          if (Actor != null) yield return new ElementValue("actor", Actor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "function":
            value = Function;
            return Function is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Function is not null) yield return new KeyValuePair<string,object>("function",Function);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
      }

    }

    /// <summary>
    /// Stage/grade, usually assessed formally
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Condition#Stage", IsNestedType=true)]
    [BackboneType("Condition.stage")]
    public partial class StageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Condition#Stage"; } }

      /// <summary>
      /// Simple summary (disease specific)
      /// </summary>
      [FhirElement("summary", Order=40)]
      [Binding("ConditionStage")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Summary
      {
        get { return _Summary; }
        set { _Summary = value; OnPropertyChanged("Summary"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Summary;

      /// <summary>
      /// Formal record of assessment
      /// </summary>
      [FhirElement("assessment", Order=50)]
      [CLSCompliant(false)]
      [References("ClinicalImpression","DiagnosticReport","Observation")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Assessment
      {
        get { if(_Assessment==null) _Assessment = new List<Hl7.Fhir.Model.ResourceReference>(); return _Assessment; }
        set { _Assessment = value; OnPropertyChanged("Assessment"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Assessment;

      /// <summary>
      /// Kind of staging
      /// </summary>
      [FhirElement("type", Order=60)]
      [Binding("ConditionStageType")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Summary != null) dest.Summary = (Hl7.Fhir.Model.CodeableConcept)Summary.DeepCopy();
        if(Assessment != null) dest.Assessment = new List<Hl7.Fhir.Model.ResourceReference>(Assessment.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Summary, otherT.Summary)) return false;
        if( !DeepComparable.Matches(Assessment, otherT.Assessment)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Summary, otherT.Summary)) return false;
        if( !DeepComparable.IsExactly(Assessment, otherT.Assessment)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Summary != null) yield return Summary;
          foreach (var elem in Assessment) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Summary != null) yield return new ElementValue("summary", Summary);
          foreach (var elem in Assessment) { if (elem != null) yield return new ElementValue("assessment", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "summary":
            value = Summary;
            return Summary is not null;
          case "assessment":
            value = Assessment;
            return Assessment?.Any() == true;
          case "type":
            value = Type;
            return Type is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Summary is not null) yield return new KeyValuePair<string,object>("summary",Summary);
        if (Assessment?.Any() == true) yield return new KeyValuePair<string,object>("assessment",Assessment);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      }

    }

    /// <summary>
    /// External Ids for this condition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// active | recurrence | relapse | inactive | remission | resolved | unknown
    /// </summary>
    [FhirElement("clinicalStatus", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [Binding("ConditionClinicalStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept ClinicalStatus
    {
      get { return _ClinicalStatus; }
      set { _ClinicalStatus = value; OnPropertyChanged("ClinicalStatus"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _ClinicalStatus;

    /// <summary>
    /// unconfirmed | provisional | differential | confirmed | refuted | entered-in-error
    /// </summary>
    [FhirElement("verificationStatus", InSummary=true, IsModifier=true, Order=110, FiveWs="FiveWs.status")]
    [Binding("ConditionVerificationStatus")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept VerificationStatus
    {
      get { return _VerificationStatus; }
      set { _VerificationStatus = value; OnPropertyChanged("VerificationStatus"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _VerificationStatus;

    /// <summary>
    /// problem-list-item | encounter-diagnosis
    /// </summary>
    [FhirElement("category", Order=120, FiveWs="FiveWs.class")]
    [Binding("ConditionCategory")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Subjective severity of condition
    /// </summary>
    [FhirElement("severity", Order=130, FiveWs="FiveWs.grade")]
    [Binding("ConditionSeverity")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Severity
    {
      get { return _Severity; }
      set { _Severity = value; OnPropertyChanged("Severity"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Severity;

    /// <summary>
    /// Identification of the condition, problem or diagnosis
    /// </summary>
    [FhirElement("code", InSummary=true, Order=140, FiveWs="FiveWs.what[x]")]
    [Binding("ConditionKind")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Anatomical location, if relevant
    /// </summary>
    [FhirElement("bodySite", InSummary=true, Order=150)]
    [Binding("BodySite")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> BodySite
    {
      get { if(_BodySite==null) _BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(); return _BodySite; }
      set { _BodySite = value; OnPropertyChanged("BodySite"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _BodySite;

    /// <summary>
    /// Who has the condition?
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=160, FiveWs="FiveWs.subject[x]")]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// The Encounter during which this Condition was created
    /// </summary>
    [FhirElement("encounter", InSummary=true, Order=170, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Estimated or actual date,  date-time, or age
    /// </summary>
    [FhirElement("onset", InSummary=true, Order=180, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.init")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.FhirString))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Onset
    {
      get { return _Onset; }
      set { _Onset = value; OnPropertyChanged("Onset"); }
    }

    private Hl7.Fhir.Model.DataType _Onset;

    /// <summary>
    /// When in resolution/remission
    /// </summary>
    [FhirElement("abatement", Order=190, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.FhirString))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Abatement
    {
      get { return _Abatement; }
      set { _Abatement = value; OnPropertyChanged("Abatement"); }
    }

    private Hl7.Fhir.Model.DataType _Abatement;

    /// <summary>
    /// Date condition was first recorded
    /// </summary>
    [FhirElement("recordedDate", InSummary=true, Order=200, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime RecordedDateElement
    {
      get { return _RecordedDateElement; }
      set { _RecordedDateElement = value; OnPropertyChanged("RecordedDateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _RecordedDateElement;

    /// <summary>
    /// Date condition was first recorded
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string RecordedDate
    {
      get { return RecordedDateElement != null ? RecordedDateElement.Value : null; }
      set
      {
        if (value == null)
          RecordedDateElement = null;
        else
          RecordedDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("RecordedDate");
      }
    }

    /// <summary>
    /// Who or what participated in the activities related to the condition and how they were involved
    /// </summary>
    [FhirElement("participant", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Condition.ParticipantComponent> Participant
    {
      get { if(_Participant==null) _Participant = new List<Hl7.Fhir.Model.Condition.ParticipantComponent>(); return _Participant; }
      set { _Participant = value; OnPropertyChanged("Participant"); }
    }

    private List<Hl7.Fhir.Model.Condition.ParticipantComponent> _Participant;

    /// <summary>
    /// Stage/grade, usually assessed formally
    /// </summary>
    [FhirElement("stage", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Condition.StageComponent> Stage
    {
      get { if(_Stage==null) _Stage = new List<Hl7.Fhir.Model.Condition.StageComponent>(); return _Stage; }
      set { _Stage = value; OnPropertyChanged("Stage"); }
    }

    private List<Hl7.Fhir.Model.Condition.StageComponent> _Stage;

    /// <summary>
    /// Supporting evidence for the verification status
    /// </summary>
    [FhirElement("evidence", InSummary=true, Order=230)]
    [Binding("ManifestationOrSymptom")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Evidence
    {
      get { if(_Evidence==null) _Evidence = new List<Hl7.Fhir.Model.CodeableReference>(); return _Evidence; }
      set { _Evidence = value; OnPropertyChanged("Evidence"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Evidence;

    /// <summary>
    /// Additional information about the Condition
    /// </summary>
    [FhirElement("note", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Condition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(ClinicalStatus != null) dest.ClinicalStatus = (Hl7.Fhir.Model.CodeableConcept)ClinicalStatus.DeepCopy();
      if(VerificationStatus != null) dest.VerificationStatus = (Hl7.Fhir.Model.CodeableConcept)VerificationStatus.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Severity != null) dest.Severity = (Hl7.Fhir.Model.CodeableConcept)Severity.DeepCopy();
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(BodySite != null) dest.BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(BodySite.DeepCopy());
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(Onset != null) dest.Onset = (Hl7.Fhir.Model.DataType)Onset.DeepCopy();
      if(Abatement != null) dest.Abatement = (Hl7.Fhir.Model.DataType)Abatement.DeepCopy();
      if(RecordedDateElement != null) dest.RecordedDateElement = (Hl7.Fhir.Model.FhirDateTime)RecordedDateElement.DeepCopy();
      if(Participant != null) dest.Participant = new List<Hl7.Fhir.Model.Condition.ParticipantComponent>(Participant.DeepCopy());
      if(Stage != null) dest.Stage = new List<Hl7.Fhir.Model.Condition.StageComponent>(Stage.DeepCopy());
      if(Evidence != null) dest.Evidence = new List<Hl7.Fhir.Model.CodeableReference>(Evidence.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Condition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Condition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(ClinicalStatus, otherT.ClinicalStatus)) return false;
      if( !DeepComparable.Matches(VerificationStatus, otherT.VerificationStatus)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Severity, otherT.Severity)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(Onset, otherT.Onset)) return false;
      if( !DeepComparable.Matches(Abatement, otherT.Abatement)) return false;
      if( !DeepComparable.Matches(RecordedDateElement, otherT.RecordedDateElement)) return false;
      if( !DeepComparable.Matches(Participant, otherT.Participant)) return false;
      if( !DeepComparable.Matches(Stage, otherT.Stage)) return false;
      if( !DeepComparable.Matches(Evidence, otherT.Evidence)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Condition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(ClinicalStatus, otherT.ClinicalStatus)) return false;
      if( !DeepComparable.IsExactly(VerificationStatus, otherT.VerificationStatus)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Severity, otherT.Severity)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(Onset, otherT.Onset)) return false;
      if( !DeepComparable.IsExactly(Abatement, otherT.Abatement)) return false;
      if( !DeepComparable.IsExactly(RecordedDateElement, otherT.RecordedDateElement)) return false;
      if( !DeepComparable.IsExactly(Participant, otherT.Participant)) return false;
      if( !DeepComparable.IsExactly(Stage, otherT.Stage)) return false;
      if( !DeepComparable.IsExactly(Evidence, otherT.Evidence)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (ClinicalStatus != null) yield return ClinicalStatus;
        if (VerificationStatus != null) yield return VerificationStatus;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Severity != null) yield return Severity;
        if (Code != null) yield return Code;
        foreach (var elem in BodySite) { if (elem != null) yield return elem; }
        if (Subject != null) yield return Subject;
        if (Encounter != null) yield return Encounter;
        if (Onset != null) yield return Onset;
        if (Abatement != null) yield return Abatement;
        if (RecordedDateElement != null) yield return RecordedDateElement;
        foreach (var elem in Participant) { if (elem != null) yield return elem; }
        foreach (var elem in Stage) { if (elem != null) yield return elem; }
        foreach (var elem in Evidence) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (ClinicalStatus != null) yield return new ElementValue("clinicalStatus", ClinicalStatus);
        if (VerificationStatus != null) yield return new ElementValue("verificationStatus", VerificationStatus);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Severity != null) yield return new ElementValue("severity", Severity);
        if (Code != null) yield return new ElementValue("code", Code);
        foreach (var elem in BodySite) { if (elem != null) yield return new ElementValue("bodySite", elem); }
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (Onset != null) yield return new ElementValue("onset", Onset);
        if (Abatement != null) yield return new ElementValue("abatement", Abatement);
        if (RecordedDateElement != null) yield return new ElementValue("recordedDate", RecordedDateElement);
        foreach (var elem in Participant) { if (elem != null) yield return new ElementValue("participant", elem); }
        foreach (var elem in Stage) { if (elem != null) yield return new ElementValue("stage", elem); }
        foreach (var elem in Evidence) { if (elem != null) yield return new ElementValue("evidence", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "clinicalStatus":
          value = ClinicalStatus;
          return ClinicalStatus is not null;
        case "verificationStatus":
          value = VerificationStatus;
          return VerificationStatus is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "severity":
          value = Severity;
          return Severity is not null;
        case "code":
          value = Code;
          return Code is not null;
        case "bodySite":
          value = BodySite;
          return BodySite?.Any() == true;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "onset":
          value = Onset;
          return Onset is not null;
        case "abatement":
          value = Abatement;
          return Abatement is not null;
        case "recordedDate":
          value = RecordedDateElement;
          return RecordedDateElement is not null;
        case "participant":
          value = Participant;
          return Participant?.Any() == true;
        case "stage":
          value = Stage;
          return Stage?.Any() == true;
        case "evidence":
          value = Evidence;
          return Evidence?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (ClinicalStatus is not null) yield return new KeyValuePair<string,object>("clinicalStatus",ClinicalStatus);
      if (VerificationStatus is not null) yield return new KeyValuePair<string,object>("verificationStatus",VerificationStatus);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Severity is not null) yield return new KeyValuePair<string,object>("severity",Severity);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (BodySite?.Any() == true) yield return new KeyValuePair<string,object>("bodySite",BodySite);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (Onset is not null) yield return new KeyValuePair<string,object>("onset",Onset);
      if (Abatement is not null) yield return new KeyValuePair<string,object>("abatement",Abatement);
      if (RecordedDateElement is not null) yield return new KeyValuePair<string,object>("recordedDate",RecordedDateElement);
      if (Participant?.Any() == true) yield return new KeyValuePair<string,object>("participant",Participant);
      if (Stage?.Any() == true) yield return new KeyValuePair<string,object>("stage",Stage);
      if (Evidence?.Any() == true) yield return new KeyValuePair<string,object>("evidence",Evidence);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Results of a measure evaluation
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MeasureReport","http://hl7.org/fhir/StructureDefinition/MeasureReport", IsResource=true)]
  public partial class MeasureReport : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MeasureReport"; } }

    /// <summary>
    /// The status of the measure report
    /// (url: http://hl7.org/fhir/ValueSet/measure-report-status)
    /// (system: http://hl7.org/fhir/measure-report-status)
    /// </summary>
    [FhirEnumeration("MeasureReportStatus")]
    public enum MeasureReportStatus
    {
      /// <summary>
      /// The report is complete and ready for use
      /// (system: http://hl7.org/fhir/measure-report-status)
      /// </summary>
      [EnumLiteral("complete", "http://hl7.org/fhir/measure-report-status"), Description("Complete")]
      Complete,
      /// <summary>
      /// The report is currently being generated
      /// (system: http://hl7.org/fhir/measure-report-status)
      /// </summary>
      [EnumLiteral("pending", "http://hl7.org/fhir/measure-report-status"), Description("Pending")]
      Pending,
      /// <summary>
      /// An error occurred attempting to generate the report
      /// (system: http://hl7.org/fhir/measure-report-status)
      /// </summary>
      [EnumLiteral("error", "http://hl7.org/fhir/measure-report-status"), Description("Error")]
      Error,
    }

    /// <summary>
    /// The type of the measure report
    /// (url: http://hl7.org/fhir/ValueSet/measure-report-type)
    /// (system: http://hl7.org/fhir/measure-report-type)
    /// </summary>
    [FhirEnumeration("MeasureReportType")]
    public enum MeasureReportType
    {
      /// <summary>
      /// An individual report that provides information on the performance for a given measure with respect to a single patient
      /// (system: http://hl7.org/fhir/measure-report-type)
      /// </summary>
      [EnumLiteral("individual", "http://hl7.org/fhir/measure-report-type"), Description("Individual")]
      Individual,
      /// <summary>
      /// A patient list report that includes a listing of patients that satisfied each population criteria in the measure
      /// (system: http://hl7.org/fhir/measure-report-type)
      /// </summary>
      [EnumLiteral("patient-list", "http://hl7.org/fhir/measure-report-type"), Description("Patient List")]
      PatientList,
      /// <summary>
      /// A summary report that returns the number of patients in each population criteria for the measure
      /// (system: http://hl7.org/fhir/measure-report-type)
      /// </summary>
      [EnumLiteral("summary", "http://hl7.org/fhir/measure-report-type"), Description("Summary")]
      Summary,
    }

    /// <summary>
    /// Measure results for each group
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#Group", IsNestedType=true)]
    public partial class GroupComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#Group"; } }

      /// <summary>
      /// What group of the measure
      /// </summary>
      [FhirElement("identifier", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// The populations in the group
      /// </summary>
      [FhirElement("population", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.PopulationComponent> Population
      {
        get { if(_Population==null) _Population = new List<Hl7.Fhir.Model.MeasureReport.PopulationComponent>(); return _Population; }
        set { _Population = value; OnPropertyChanged("Population"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.PopulationComponent> _Population;

      /// <summary>
      /// What score this group achieved
      /// </summary>
      [FhirElement("measureScore", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal MeasureScoreElement
      {
        get { return _MeasureScoreElement; }
        set { _MeasureScoreElement = value; OnPropertyChanged("MeasureScoreElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _MeasureScoreElement;

      /// <summary>
      /// What score this group achieved
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? MeasureScore
      {
        get { return MeasureScoreElement != null ? MeasureScoreElement.Value : null; }
        set
        {
          if (value == null)
            MeasureScoreElement = null;
          else
            MeasureScoreElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("MeasureScore");
        }
      }

      /// <summary>
      /// Stratification results
      /// </summary>
      [FhirElement("stratifier", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.StratifierComponent> Stratifier
      {
        get { if(_Stratifier==null) _Stratifier = new List<Hl7.Fhir.Model.MeasureReport.StratifierComponent>(); return _Stratifier; }
        set { _Stratifier = value; OnPropertyChanged("Stratifier"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.StratifierComponent> _Stratifier;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as GroupComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Population != null) dest.Population = new List<Hl7.Fhir.Model.MeasureReport.PopulationComponent>(Population.DeepCopy());
        if(MeasureScoreElement != null) dest.MeasureScoreElement = (Hl7.Fhir.Model.FhirDecimal)MeasureScoreElement.DeepCopy();
        if(Stratifier != null) dest.Stratifier = new List<Hl7.Fhir.Model.MeasureReport.StratifierComponent>(Stratifier.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new GroupComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as GroupComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Population, otherT.Population)) return false;
        if( !DeepComparable.Matches(MeasureScoreElement, otherT.MeasureScoreElement)) return false;
        if( !DeepComparable.Matches(Stratifier, otherT.Stratifier)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as GroupComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Population, otherT.Population)) return false;
        if( !DeepComparable.IsExactly(MeasureScoreElement, otherT.MeasureScoreElement)) return false;
        if( !DeepComparable.IsExactly(Stratifier, otherT.Stratifier)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          foreach (var elem in Population) { if (elem != null) yield return elem; }
          if (MeasureScoreElement != null) yield return MeasureScoreElement;
          foreach (var elem in Stratifier) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          foreach (var elem in Population) { if (elem != null) yield return new ElementValue("population", elem); }
          if (MeasureScoreElement != null) yield return new ElementValue("measureScore", MeasureScoreElement);
          foreach (var elem in Stratifier) { if (elem != null) yield return new ElementValue("stratifier", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "population":
            value = Population;
            return Population?.Any() == true;
          case "measureScore":
            value = MeasureScoreElement;
            return MeasureScoreElement is not null;
          case "stratifier":
            value = Stratifier;
            return Stratifier?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (Population?.Any() == true) yield return new KeyValuePair<string,object>("population",Population);
        if (MeasureScoreElement is not null) yield return new KeyValuePair<string,object>("measureScore",MeasureScoreElement);
        if (Stratifier?.Any() == true) yield return new KeyValuePair<string,object>("stratifier",Stratifier);
      }

    }

    /// <summary>
    /// The populations in the group
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#Population", IsNestedType=true)]
    public partial class PopulationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#Population"; } }

      /// <summary>
      /// Population identifier as defined in the measure
      /// </summary>
      [FhirElement("identifier", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-score
      /// </summary>
      [FhirElement("code", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Size of the population
      /// </summary>
      [FhirElement("count", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// Size of the population
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      /// <summary>
      /// For patient-list reports, the patients in this population
      /// </summary>
      [FhirElement("patients", Order=70)]
      [CLSCompliant(false)]
      [References("List")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Patients
      {
        get { return _Patients; }
        set { _Patients = value; OnPropertyChanged("Patients"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Patients;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PopulationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        if(Patients != null) dest.Patients = (Hl7.Fhir.Model.ResourceReference)Patients.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PopulationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PopulationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.Matches(Patients, otherT.Patients)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PopulationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.IsExactly(Patients, otherT.Patients)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          if (Code != null) yield return Code;
          if (CountElement != null) yield return CountElement;
          if (Patients != null) yield return Patients;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (Code != null) yield return new ElementValue("code", Code);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
          if (Patients != null) yield return new ElementValue("patients", Patients);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "count":
            value = CountElement;
            return CountElement is not null;
          case "patients":
            value = Patients;
            return Patients is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (CountElement is not null) yield return new KeyValuePair<string,object>("count",CountElement);
        if (Patients is not null) yield return new KeyValuePair<string,object>("patients",Patients);
      }

    }

    /// <summary>
    /// Stratification results
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#Stratifier", IsNestedType=true)]
    public partial class StratifierComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#Stratifier"; } }

      /// <summary>
      /// What stratifier of the group
      /// </summary>
      [FhirElement("identifier", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// Stratum results, one for each unique value in the stratifier
      /// </summary>
      [FhirElement("stratum", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent> Stratum
      {
        get { if(_Stratum==null) _Stratum = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent>(); return _Stratum; }
        set { _Stratum = value; OnPropertyChanged("Stratum"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent> _Stratum;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StratifierComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Stratum != null) dest.Stratum = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupComponent>(Stratum.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StratifierComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StratifierComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Stratum, otherT.Stratum)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StratifierComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Stratum, otherT.Stratum)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          foreach (var elem in Stratum) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          foreach (var elem in Stratum) { if (elem != null) yield return new ElementValue("stratum", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "stratum":
            value = Stratum;
            return Stratum?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (Stratum?.Any() == true) yield return new KeyValuePair<string,object>("stratum",Stratum);
      }

    }

    /// <summary>
    /// Stratum results, one for each unique value in the stratifier
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#StratifierGroup", IsNestedType=true)]
    public partial class StratifierGroupComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#StratifierGroup"; } }

      /// <summary>
      /// The stratum value, e.g. male
      /// </summary>
      [FhirElement("value", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The stratum value, e.g. male
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      /// <summary>
      /// Population results in this stratum
      /// </summary>
      [FhirElement("population", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent> Population
      {
        get { if(_Population==null) _Population = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent>(); return _Population; }
        set { _Population = value; OnPropertyChanged("Population"); }
      }

      private List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent> _Population;

      /// <summary>
      /// What score this stratum achieved
      /// </summary>
      [FhirElement("measureScore", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal MeasureScoreElement
      {
        get { return _MeasureScoreElement; }
        set { _MeasureScoreElement = value; OnPropertyChanged("MeasureScoreElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _MeasureScoreElement;

      /// <summary>
      /// What score this stratum achieved
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? MeasureScore
      {
        get { return MeasureScoreElement != null ? MeasureScoreElement.Value : null; }
        set
        {
          if (value == null)
            MeasureScoreElement = null;
          else
            MeasureScoreElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("MeasureScore");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StratifierGroupComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        if(Population != null) dest.Population = new List<Hl7.Fhir.Model.MeasureReport.StratifierGroupPopulationComponent>(Population.DeepCopy());
        if(MeasureScoreElement != null) dest.MeasureScoreElement = (Hl7.Fhir.Model.FhirDecimal)MeasureScoreElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StratifierGroupComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StratifierGroupComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.Matches(Population, otherT.Population)) return false;
        if( !DeepComparable.Matches(MeasureScoreElement, otherT.MeasureScoreElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StratifierGroupComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.IsExactly(Population, otherT.Population)) return false;
        if( !DeepComparable.IsExactly(MeasureScoreElement, otherT.MeasureScoreElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ValueElement != null) yield return ValueElement;
          foreach (var elem in Population) { if (elem != null) yield return elem; }
          if (MeasureScoreElement != null) yield return MeasureScoreElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
          foreach (var elem in Population) { if (elem != null) yield return new ElementValue("population", elem); }
          if (MeasureScoreElement != null) yield return new ElementValue("measureScore", MeasureScoreElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          case "population":
            value = Population;
            return Population?.Any() == true;
          case "measureScore":
            value = MeasureScoreElement;
            return MeasureScoreElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
        if (Population?.Any() == true) yield return new KeyValuePair<string,object>("population",Population);
        if (MeasureScoreElement is not null) yield return new KeyValuePair<string,object>("measureScore",MeasureScoreElement);
      }

    }

    /// <summary>
    /// Population results in this stratum
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MeasureReport#StratifierGroupPopulation", IsNestedType=true)]
    public partial class StratifierGroupPopulationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MeasureReport#StratifierGroupPopulation"; } }

      /// <summary>
      /// Population identifier as defined in the measure
      /// </summary>
      [FhirElement("identifier", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// initial-population | numerator | numerator-exclusion | denominator | denominator-exclusion | denominator-exception | measure-population | measure-population-exclusion | measure-score
      /// </summary>
      [FhirElement("code", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Size of the population
      /// </summary>
      [FhirElement("count", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer CountElement
      {
        get { return _CountElement; }
        set { _CountElement = value; OnPropertyChanged("CountElement"); }
      }

      private Hl7.Fhir.Model.Integer _CountElement;

      /// <summary>
      /// Size of the population
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Count
      {
        get { return CountElement != null ? CountElement.Value : null; }
        set
        {
          if (value == null)
            CountElement = null;
          else
            CountElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Count");
        }
      }

      /// <summary>
      /// For patient-list reports, the patients in this population
      /// </summary>
      [FhirElement("patients", Order=70)]
      [CLSCompliant(false)]
      [References("List")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Patients
      {
        get { return _Patients; }
        set { _Patients = value; OnPropertyChanged("Patients"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Patients;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StratifierGroupPopulationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(CountElement != null) dest.CountElement = (Hl7.Fhir.Model.Integer)CountElement.DeepCopy();
        if(Patients != null) dest.Patients = (Hl7.Fhir.Model.ResourceReference)Patients.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StratifierGroupPopulationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StratifierGroupPopulationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.Matches(Patients, otherT.Patients)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StratifierGroupPopulationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(CountElement, otherT.CountElement)) return false;
        if( !DeepComparable.IsExactly(Patients, otherT.Patients)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          if (Code != null) yield return Code;
          if (CountElement != null) yield return CountElement;
          if (Patients != null) yield return Patients;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (Code != null) yield return new ElementValue("code", Code);
          if (CountElement != null) yield return new ElementValue("count", CountElement);
          if (Patients != null) yield return new ElementValue("patients", Patients);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "count":
            value = CountElement;
            return CountElement is not null;
          case "patients":
            value = Patients;
            return Patients is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (CountElement is not null) yield return new KeyValuePair<string,object>("count",CountElement);
        if (Patients is not null) yield return new KeyValuePair<string,object>("patients",Patients);
      }

    }

    /// <summary>
    /// Additional identifier for the Report
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// complete | pending | error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus> _StatusElement;

    /// <summary>
    /// complete | pending | error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MeasureReport.MeasureReportStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// individual | patient-list | summary
    /// </summary>
    [FhirElement("type", InSummary=true, Order=110)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType> TypeElement
    {
      get { return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType> _TypeElement;

    /// <summary>
    /// individual | patient-list | summary
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MeasureReport.MeasureReportType? Type
    {
      get { return TypeElement != null ? TypeElement.Value : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType>(value);
        OnPropertyChanged("Type");
      }
    }

    /// <summary>
    /// What measure was evaluated
    /// </summary>
    [FhirElement("measure", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("Measure")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Measure
    {
      get { return _Measure; }
      set { _Measure = value; OnPropertyChanged("Measure"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Measure;

    /// <summary>
    /// What patient the report is for
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=130)]
    [CLSCompliant(false)]
    [References("Patient")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// When the report was generated
    /// </summary>
    [FhirElement("date", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// When the report was generated
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Who is reporting the data
    /// </summary>
    [FhirElement("reportingOrganization", InSummary=true, Order=150)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ReportingOrganization
    {
      get { return _ReportingOrganization; }
      set { _ReportingOrganization = value; OnPropertyChanged("ReportingOrganization"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ReportingOrganization;

    /// <summary>
    /// What period the report covers
    /// </summary>
    [FhirElement("period", InSummary=true, Order=160)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// Measure results for each group
    /// </summary>
    [FhirElement("group", Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MeasureReport.GroupComponent> Group
    {
      get { if(_Group==null) _Group = new List<Hl7.Fhir.Model.MeasureReport.GroupComponent>(); return _Group; }
      set { _Group = value; OnPropertyChanged("Group"); }
    }

    private List<Hl7.Fhir.Model.MeasureReport.GroupComponent> _Group;

    /// <summary>
    /// What data was evaluated to produce the measure score
    /// </summary>
    [FhirElement("evaluatedResources", Order=180)]
    [CLSCompliant(false)]
    [References("Bundle")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference EvaluatedResources
    {
      get { return _EvaluatedResources; }
      set { _EvaluatedResources = value; OnPropertyChanged("EvaluatedResources"); }
    }

    private Hl7.Fhir.Model.ResourceReference _EvaluatedResources;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MeasureReport;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.MeasureReport.MeasureReportStatus>)StatusElement.DeepCopy();
      if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.MeasureReport.MeasureReportType>)TypeElement.DeepCopy();
      if(Measure != null) dest.Measure = (Hl7.Fhir.Model.ResourceReference)Measure.DeepCopy();
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(ReportingOrganization != null) dest.ReportingOrganization = (Hl7.Fhir.Model.ResourceReference)ReportingOrganization.DeepCopy();
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(Group != null) dest.Group = new List<Hl7.Fhir.Model.MeasureReport.GroupComponent>(Group.DeepCopy());
      if(EvaluatedResources != null) dest.EvaluatedResources = (Hl7.Fhir.Model.ResourceReference)EvaluatedResources.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MeasureReport());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MeasureReport;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(Measure, otherT.Measure)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(ReportingOrganization, otherT.ReportingOrganization)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(Group, otherT.Group)) return false;
      if( !DeepComparable.Matches(EvaluatedResources, otherT.EvaluatedResources)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MeasureReport;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(Measure, otherT.Measure)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(ReportingOrganization, otherT.ReportingOrganization)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(Group, otherT.Group)) return false;
      if( !DeepComparable.IsExactly(EvaluatedResources, otherT.EvaluatedResources)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (StatusElement != null) yield return StatusElement;
        if (TypeElement != null) yield return TypeElement;
        if (Measure != null) yield return Measure;
        if (Patient != null) yield return Patient;
        if (DateElement != null) yield return DateElement;
        if (ReportingOrganization != null) yield return ReportingOrganization;
        if (Period != null) yield return Period;
        foreach (var elem in Group) { if (elem != null) yield return elem; }
        if (EvaluatedResources != null) yield return EvaluatedResources;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        if (Measure != null) yield return new ElementValue("measure", Measure);
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (ReportingOrganization != null) yield return new ElementValue("reportingOrganization", ReportingOrganization);
        if (Period != null) yield return new ElementValue("period", Period);
        foreach (var elem in Group) { if (elem != null) yield return new ElementValue("group", elem); }
        if (EvaluatedResources != null) yield return new ElementValue("evaluatedResources", EvaluatedResources);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "type":
          value = TypeElement;
          return TypeElement is not null;
        case "measure":
          value = Measure;
          return Measure is not null;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "reportingOrganization":
          value = ReportingOrganization;
          return ReportingOrganization is not null;
        case "period":
          value = Period;
          return Period is not null;
        case "group":
          value = Group;
          return Group?.Any() == true;
        case "evaluatedResources":
          value = EvaluatedResources;
          return EvaluatedResources is not null;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      if (Measure is not null) yield return new KeyValuePair<string,object>("measure",Measure);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (ReportingOrganization is not null) yield return new KeyValuePair<string,object>("reportingOrganization",ReportingOrganization);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (Group?.Any() == true) yield return new KeyValuePair<string,object>("group",Group);
      if (EvaluatedResources is not null) yield return new KeyValuePair<string,object>("evaluatedResources",EvaluatedResources);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Ordering of medication for patient or group
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MedicationRequest","http://hl7.org/fhir/StructureDefinition/MedicationRequest", IsResource=true)]
  public partial class MedicationRequest : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MedicationRequest"; } }

    /// <summary>
    /// A coded concept specifying the state of the prescribing event. Describes the lifecycle of the prescription
    /// (url: http://hl7.org/fhir/ValueSet/medication-request-status)
    /// (system: http://hl7.org/fhir/medication-request-status)
    /// </summary>
    [FhirEnumeration("MedicationRequestStatus")]
    public enum MedicationRequestStatus
    {
      /// <summary>
      /// The prescription is 'actionable', but not all actions that are implied by it have occurred yet.
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("active", "http://hl7.org/fhir/medication-request-status"), Description("Active")]
      Active,
      /// <summary>
      /// Actions implied by the prescription are to be temporarily halted, but are expected to continue later.  May also be called "suspended".
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("on-hold", "http://hl7.org/fhir/medication-request-status"), Description("On Hold")]
      OnHold,
      /// <summary>
      /// The prescription has been withdrawn.
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("cancelled", "http://hl7.org/fhir/medication-request-status"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// All actions that are implied by the prescription have occurred.
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("completed", "http://hl7.org/fhir/medication-request-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// The prescription was entered in error.
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/medication-request-status"), Description("Entered In Error")]
      EnteredInError,
      /// <summary>
      /// Actions implied by the prescription are to be permanently halted, before all of them occurred.
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("stopped", "http://hl7.org/fhir/medication-request-status"), Description("Stopped")]
      Stopped,
      /// <summary>
      /// The prescription is not yet 'actionable', i.e. it is a work in progress, requires sign-off or verification, and needs to be run through decision support process.
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("draft", "http://hl7.org/fhir/medication-request-status"), Description("Draft")]
      Draft,
      /// <summary>
      /// The authoring system does not know which of the status values currently applies for this request
      /// (system: http://hl7.org/fhir/medication-request-status)
      /// </summary>
      [EnumLiteral("unknown", "http://hl7.org/fhir/medication-request-status"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// The kind of medication order
    /// (url: http://hl7.org/fhir/ValueSet/medication-request-intent)
    /// (system: http://hl7.org/fhir/medication-request-intent)
    /// </summary>
    [FhirEnumeration("MedicationRequestIntent")]
    public enum MedicationRequestIntent
    {
      /// <summary>
      /// The request is a suggestion made by someone/something that doesn't have an intention to ensure it occurs and without providing an authorization to act
      /// (system: http://hl7.org/fhir/medication-request-intent)
      /// </summary>
      [EnumLiteral("proposal", "http://hl7.org/fhir/medication-request-intent"), Description("Proposal")]
      Proposal,
      /// <summary>
      /// The request represents an intension to ensure something occurs without providing an authorization for others to act
      /// (system: http://hl7.org/fhir/medication-request-intent)
      /// </summary>
      [EnumLiteral("plan", "http://hl7.org/fhir/medication-request-intent"), Description("Plan")]
      Plan,
      /// <summary>
      /// The request represents a request/demand and authorization for action
      /// (system: http://hl7.org/fhir/medication-request-intent)
      /// </summary>
      [EnumLiteral("order", "http://hl7.org/fhir/medication-request-intent"), Description("Order")]
      Order,
      /// <summary>
      /// The request represents an instance for the particular order, for example a medication administration record.
      /// (system: http://hl7.org/fhir/medication-request-intent)
      /// </summary>
      [EnumLiteral("instance-order", "http://hl7.org/fhir/medication-request-intent"), Description("Instance Order")]
      InstanceOrder,
    }

    /// <summary>
    /// Identifies the level of importance to be assigned to actioning the request
    /// (url: http://hl7.org/fhir/ValueSet/medication-request-priority)
    /// (system: http://hl7.org/fhir/medication-request-priority)
    /// </summary>
    [FhirEnumeration("MedicationRequestPriority")]
    public enum MedicationRequestPriority
    {
      /// <summary>
      /// The order has a normal priority .
      /// (system: http://hl7.org/fhir/medication-request-priority)
      /// </summary>
      [EnumLiteral("routine", "http://hl7.org/fhir/medication-request-priority"), Description("Routine")]
      Routine,
      /// <summary>
      /// The order should be urgently.
      /// (system: http://hl7.org/fhir/medication-request-priority)
      /// </summary>
      [EnumLiteral("urgent", "http://hl7.org/fhir/medication-request-priority"), Description("Urgent")]
      Urgent,
      /// <summary>
      /// The order is time-critical.
      /// (system: http://hl7.org/fhir/medication-request-priority)
      /// </summary>
      [EnumLiteral("stat", "http://hl7.org/fhir/medication-request-priority"), Description("Stat")]
      Stat,
      /// <summary>
      /// The order should be acted on as soon as possible.
      /// (system: http://hl7.org/fhir/medication-request-priority)
      /// </summary>
      [EnumLiteral("asap", "http://hl7.org/fhir/medication-request-priority"), Description("ASAP")]
      Asap,
    }

    /// <summary>
    /// Who/What requested the Request
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationRequest#Requester", IsNestedType=true)]
    public partial class RequesterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationRequest#Requester"; } }

      /// <summary>
      /// Who ordered the initial medication(s)
      /// </summary>
      [FhirElement("agent", InSummary=true, Order=40)]
      [CLSCompliant(false)]
      [References("Practitioner","Organization","Patient","RelatedPerson","Device")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Agent
      {
        get { return _Agent; }
        set { _Agent = value; OnPropertyChanged("Agent"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Agent;

      /// <summary>
      /// Organization agent is acting for
      /// </summary>
      [FhirElement("onBehalfOf", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference OnBehalfOf
      {
        get { return _OnBehalfOf; }
        set { _OnBehalfOf = value; OnPropertyChanged("OnBehalfOf"); }
      }

      private Hl7.Fhir.Model.ResourceReference _OnBehalfOf;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RequesterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Agent != null) dest.Agent = (Hl7.Fhir.Model.ResourceReference)Agent.DeepCopy();
        if(OnBehalfOf != null) dest.OnBehalfOf = (Hl7.Fhir.Model.ResourceReference)OnBehalfOf.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RequesterComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RequesterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Agent, otherT.Agent)) return false;
        if( !DeepComparable.Matches(OnBehalfOf, otherT.OnBehalfOf)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RequesterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Agent, otherT.Agent)) return false;
        if( !DeepComparable.IsExactly(OnBehalfOf, otherT.OnBehalfOf)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Agent != null) yield return Agent;
          if (OnBehalfOf != null) yield return OnBehalfOf;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Agent != null) yield return new ElementValue("agent", Agent);
          if (OnBehalfOf != null) yield return new ElementValue("onBehalfOf", OnBehalfOf);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "agent":
            value = Agent;
            return Agent is not null;
          case "onBehalfOf":
            value = OnBehalfOf;
            return OnBehalfOf is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Agent is not null) yield return new KeyValuePair<string,object>("agent",Agent);
        if (OnBehalfOf is not null) yield return new KeyValuePair<string,object>("onBehalfOf",OnBehalfOf);
      }

    }

    /// <summary>
    /// Medication supply authorization
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationRequest#DispenseRequest", IsNestedType=true)]
    public partial class DispenseRequestComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationRequest#DispenseRequest"; } }

      /// <summary>
      /// Time period supply is authorized for
      /// </summary>
      [FhirElement("validityPeriod", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Period ValidityPeriod
      {
        get { return _ValidityPeriod; }
        set { _ValidityPeriod = value; OnPropertyChanged("ValidityPeriod"); }
      }

      private Hl7.Fhir.Model.Period _ValidityPeriod;

      /// <summary>
      /// Number of refills authorized
      /// </summary>
      [FhirElement("numberOfRepeatsAllowed", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt NumberOfRepeatsAllowedElement
      {
        get { return _NumberOfRepeatsAllowedElement; }
        set { _NumberOfRepeatsAllowedElement = value; OnPropertyChanged("NumberOfRepeatsAllowedElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _NumberOfRepeatsAllowedElement;

      /// <summary>
      /// Number of refills authorized
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberOfRepeatsAllowed
      {
        get { return NumberOfRepeatsAllowedElement != null ? NumberOfRepeatsAllowedElement.Value : null; }
        set
        {
          if (value == null)
            NumberOfRepeatsAllowedElement = null;
          else
            NumberOfRepeatsAllowedElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("NumberOfRepeatsAllowed");
        }
      }

      /// <summary>
      /// Amount of medication to supply per dispense
      /// </summary>
      [FhirElement("quantity", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Number of days supply per dispense
      /// </summary>
      [FhirElement("expectedSupplyDuration", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Duration ExpectedSupplyDuration
      {
        get { return _ExpectedSupplyDuration; }
        set { _ExpectedSupplyDuration = value; OnPropertyChanged("ExpectedSupplyDuration"); }
      }

      private Hl7.Fhir.Model.Duration _ExpectedSupplyDuration;

      /// <summary>
      /// Intended dispenser
      /// </summary>
      [FhirElement("performer", Order=80)]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Performer
      {
        get { return _Performer; }
        set { _Performer = value; OnPropertyChanged("Performer"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Performer;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DispenseRequestComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ValidityPeriod != null) dest.ValidityPeriod = (Hl7.Fhir.Model.Period)ValidityPeriod.DeepCopy();
        if(NumberOfRepeatsAllowedElement != null) dest.NumberOfRepeatsAllowedElement = (Hl7.Fhir.Model.PositiveInt)NumberOfRepeatsAllowedElement.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(ExpectedSupplyDuration != null) dest.ExpectedSupplyDuration = (Hl7.Fhir.Model.Duration)ExpectedSupplyDuration.DeepCopy();
        if(Performer != null) dest.Performer = (Hl7.Fhir.Model.ResourceReference)Performer.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DispenseRequestComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DispenseRequestComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ValidityPeriod, otherT.ValidityPeriod)) return false;
        if( !DeepComparable.Matches(NumberOfRepeatsAllowedElement, otherT.NumberOfRepeatsAllowedElement)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(ExpectedSupplyDuration, otherT.ExpectedSupplyDuration)) return false;
        if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DispenseRequestComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ValidityPeriod, otherT.ValidityPeriod)) return false;
        if( !DeepComparable.IsExactly(NumberOfRepeatsAllowedElement, otherT.NumberOfRepeatsAllowedElement)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(ExpectedSupplyDuration, otherT.ExpectedSupplyDuration)) return false;
        if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ValidityPeriod != null) yield return ValidityPeriod;
          if (NumberOfRepeatsAllowedElement != null) yield return NumberOfRepeatsAllowedElement;
          if (Quantity != null) yield return Quantity;
          if (ExpectedSupplyDuration != null) yield return ExpectedSupplyDuration;
          if (Performer != null) yield return Performer;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ValidityPeriod != null) yield return new ElementValue("validityPeriod", ValidityPeriod);
          if (NumberOfRepeatsAllowedElement != null) yield return new ElementValue("numberOfRepeatsAllowed", NumberOfRepeatsAllowedElement);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (ExpectedSupplyDuration != null) yield return new ElementValue("expectedSupplyDuration", ExpectedSupplyDuration);
          if (Performer != null) yield return new ElementValue("performer", Performer);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "validityPeriod":
            value = ValidityPeriod;
            return ValidityPeriod is not null;
          case "numberOfRepeatsAllowed":
            value = NumberOfRepeatsAllowedElement;
            return NumberOfRepeatsAllowedElement is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "expectedSupplyDuration":
            value = ExpectedSupplyDuration;
            return ExpectedSupplyDuration is not null;
          case "performer":
            value = Performer;
            return Performer is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ValidityPeriod is not null) yield return new KeyValuePair<string,object>("validityPeriod",ValidityPeriod);
        if (NumberOfRepeatsAllowedElement is not null) yield return new KeyValuePair<string,object>("numberOfRepeatsAllowed",NumberOfRepeatsAllowedElement);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (ExpectedSupplyDuration is not null) yield return new KeyValuePair<string,object>("expectedSupplyDuration",ExpectedSupplyDuration);
        if (Performer is not null) yield return new KeyValuePair<string,object>("performer",Performer);
      }

    }

    /// <summary>
    /// Any restrictions on medication substitution
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationRequest#Substitution", IsNestedType=true)]
    public partial class SubstitutionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationRequest#Substitution"; } }

      /// <summary>
      /// Whether substitution is allowed or not
      /// </summary>
      [FhirElement("allowed", IsModifier=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AllowedElement
      {
        get { return _AllowedElement; }
        set { _AllowedElement = value; OnPropertyChanged("AllowedElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AllowedElement;

      /// <summary>
      /// Whether substitution is allowed or not
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Allowed
      {
        get { return AllowedElement != null ? AllowedElement.Value : null; }
        set
        {
          if (value == null)
            AllowedElement = null;
          else
            AllowedElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Allowed");
        }
      }

      /// <summary>
      /// Why should (not) substitution be made
      /// </summary>
      [FhirElement("reason", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Reason
      {
        get { return _Reason; }
        set { _Reason = value; OnPropertyChanged("Reason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Reason;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SubstitutionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(AllowedElement != null) dest.AllowedElement = (Hl7.Fhir.Model.FhirBoolean)AllowedElement.DeepCopy();
        if(Reason != null) dest.Reason = (Hl7.Fhir.Model.CodeableConcept)Reason.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SubstitutionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SubstitutionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(AllowedElement, otherT.AllowedElement)) return false;
        if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SubstitutionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(AllowedElement, otherT.AllowedElement)) return false;
        if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (AllowedElement != null) yield return AllowedElement;
          if (Reason != null) yield return Reason;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (AllowedElement != null) yield return new ElementValue("allowed", AllowedElement);
          if (Reason != null) yield return new ElementValue("reason", Reason);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "allowed":
            value = AllowedElement;
            return AllowedElement is not null;
          case "reason":
            value = Reason;
            return Reason is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (AllowedElement is not null) yield return new KeyValuePair<string,object>("allowed",AllowedElement);
        if (Reason is not null) yield return new KeyValuePair<string,object>("reason",Reason);
      }

    }

    /// <summary>
    /// External ids for this request
    /// </summary>
    [FhirElement("identifier", Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Protocol or definition
    /// </summary>
    [FhirElement("definition", InSummary=true, Order=100)]
    [CLSCompliant(false)]
    [References("ActivityDefinition","PlanDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Definition
    {
      get { if(_Definition==null) _Definition = new List<Hl7.Fhir.Model.ResourceReference>(); return _Definition; }
      set { _Definition = value; OnPropertyChanged("Definition"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Definition;

    /// <summary>
    /// What request fulfills
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("CarePlan","MedicationRequest","ProcedureRequest","ReferralRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Composite request this is part of
    /// </summary>
    [FhirElement("groupIdentifier", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier GroupIdentifier
    {
      get { return _GroupIdentifier; }
      set { _GroupIdentifier = value; OnPropertyChanged("GroupIdentifier"); }
    }

    private Hl7.Fhir.Model.Identifier _GroupIdentifier;

    /// <summary>
    /// active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=130)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestStatus> _StatusElement;

    /// <summary>
    /// active | on-hold | cancelled | completed | entered-in-error | stopped | draft | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationRequest.MedicationRequestStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// proposal | plan | order | instance-order
    /// </summary>
    [FhirElement("intent", InSummary=true, IsModifier=true, Order=140)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent> _IntentElement;

    /// <summary>
    /// proposal | plan | order | instance-order
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// Type of medication usage
    /// </summary>
    [FhirElement("category", Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Category
    {
      get { return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Category;

    /// <summary>
    /// routine | urgent | stat | asap
    /// </summary>
    [FhirElement("priority", InSummary=true, Order=160)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestPriority> PriorityElement
    {
      get { return _PriorityElement; }
      set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestPriority> _PriorityElement;

    /// <summary>
    /// routine | urgent | stat | asap
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationRequest.MedicationRequestPriority? Priority
    {
      get { return PriorityElement != null ? PriorityElement.Value : null; }
      set
      {
        if (value == null)
          PriorityElement = null;
        else
          PriorityElement = new Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestPriority>(value);
        OnPropertyChanged("Priority");
      }
    }

    /// <summary>
    /// Medication to be taken
    /// </summary>
    [FhirElement("medication", InSummary=true, Order=170, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Medication")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.DataType Medication
    {
      get { return _Medication; }
      set { _Medication = value; OnPropertyChanged("Medication"); }
    }

    private Hl7.Fhir.Model.DataType _Medication;

    /// <summary>
    /// Who or group medication request is for
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=180)]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Created during encounter/admission/stay
    /// </summary>
    [FhirElement("context", Order=190)]
    [CLSCompliant(false)]
    [References("Encounter","EpisodeOfCare")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Context
    {
      get { return _Context; }
      set { _Context = value; OnPropertyChanged("Context"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Context;

    /// <summary>
    /// Information to support ordering of the medication
    /// </summary>
    [FhirElement("supportingInformation", Order=200)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// When request was initially authored
    /// </summary>
    [FhirElement("authoredOn", InSummary=true, Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime AuthoredOnElement
    {
      get { return _AuthoredOnElement; }
      set { _AuthoredOnElement = value; OnPropertyChanged("AuthoredOnElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _AuthoredOnElement;

    /// <summary>
    /// When request was initially authored
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string AuthoredOn
    {
      get { return AuthoredOnElement != null ? AuthoredOnElement.Value : null; }
      set
      {
        if (value == null)
          AuthoredOnElement = null;
        else
          AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("AuthoredOn");
      }
    }

    /// <summary>
    /// Who/What requested the Request
    /// </summary>
    [FhirElement("requester", InSummary=true, Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationRequest.RequesterComponent Requester
    {
      get { return _Requester; }
      set { _Requester = value; OnPropertyChanged("Requester"); }
    }

    private Hl7.Fhir.Model.MedicationRequest.RequesterComponent _Requester;

    /// <summary>
    /// Person who entered the request
    /// </summary>
    [FhirElement("recorder", Order=230)]
    [CLSCompliant(false)]
    [References("Practitioner")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Recorder
    {
      get { return _Recorder; }
      set { _Recorder = value; OnPropertyChanged("Recorder"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Recorder;

    /// <summary>
    /// Reason or indication for writing the prescription
    /// </summary>
    [FhirElement("reasonCode", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ReasonCode
    {
      get { if(_ReasonCode==null) _ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ReasonCode; }
      set { _ReasonCode = value; OnPropertyChanged("ReasonCode"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ReasonCode;

    /// <summary>
    /// Condition or Observation that supports why the prescription is being written
    /// </summary>
    [FhirElement("reasonReference", Order=250)]
    [CLSCompliant(false)]
    [References("Condition","Observation")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ReasonReference
    {
      get { if(_ReasonReference==null) _ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _ReasonReference; }
      set { _ReasonReference = value; OnPropertyChanged("ReasonReference"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ReasonReference;

    /// <summary>
    /// Information about the prescription
    /// </summary>
    [FhirElement("note", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// How the medication should be taken
    /// </summary>
    [FhirElement("dosageInstruction", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Dosage> DosageInstruction
    {
      get { if(_DosageInstruction==null) _DosageInstruction = new List<Hl7.Fhir.Model.Dosage>(); return _DosageInstruction; }
      set { _DosageInstruction = value; OnPropertyChanged("DosageInstruction"); }
    }

    private List<Hl7.Fhir.Model.Dosage> _DosageInstruction;

    /// <summary>
    /// Medication supply authorization
    /// </summary>
    [FhirElement("dispenseRequest", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent DispenseRequest
    {
      get { return _DispenseRequest; }
      set { _DispenseRequest = value; OnPropertyChanged("DispenseRequest"); }
    }

    private Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent _DispenseRequest;

    /// <summary>
    /// Any restrictions on medication substitution
    /// </summary>
    [FhirElement("substitution", Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent Substitution
    {
      get { return _Substitution; }
      set { _Substitution = value; OnPropertyChanged("Substitution"); }
    }

    private Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent _Substitution;

    /// <summary>
    /// An order/prescription that is being replaced
    /// </summary>
    [FhirElement("priorPrescription", Order=300)]
    [CLSCompliant(false)]
    [References("MedicationRequest")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference PriorPrescription
    {
      get { return _PriorPrescription; }
      set { _PriorPrescription = value; OnPropertyChanged("PriorPrescription"); }
    }

    private Hl7.Fhir.Model.ResourceReference _PriorPrescription;

    /// <summary>
    /// Clinical Issue with action
    /// </summary>
    [FhirElement("detectedIssue", Order=310)]
    [CLSCompliant(false)]
    [References("DetectedIssue")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> DetectedIssue
    {
      get { if(_DetectedIssue==null) _DetectedIssue = new List<Hl7.Fhir.Model.ResourceReference>(); return _DetectedIssue; }
      set { _DetectedIssue = value; OnPropertyChanged("DetectedIssue"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _DetectedIssue;

    /// <summary>
    /// A list of events of interest in the lifecycle
    /// </summary>
    [FhirElement("eventHistory", Order=320)]
    [CLSCompliant(false)]
    [References("Provenance")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> EventHistory
    {
      get { if(_EventHistory==null) _EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(); return _EventHistory; }
      set { _EventHistory = value; OnPropertyChanged("EventHistory"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _EventHistory;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MedicationRequest;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Definition != null) dest.Definition = new List<Hl7.Fhir.Model.ResourceReference>(Definition.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(GroupIdentifier != null) dest.GroupIdentifier = (Hl7.Fhir.Model.Identifier)GroupIdentifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestStatus>)StatusElement.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestIntent>)IntentElement.DeepCopy();
      if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
      if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.MedicationRequest.MedicationRequestPriority>)PriorityElement.DeepCopy();
      if(Medication != null) dest.Medication = (Hl7.Fhir.Model.DataType)Medication.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Context != null) dest.Context = (Hl7.Fhir.Model.ResourceReference)Context.DeepCopy();
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(AuthoredOnElement != null) dest.AuthoredOnElement = (Hl7.Fhir.Model.FhirDateTime)AuthoredOnElement.DeepCopy();
      if(Requester != null) dest.Requester = (Hl7.Fhir.Model.MedicationRequest.RequesterComponent)Requester.DeepCopy();
      if(Recorder != null) dest.Recorder = (Hl7.Fhir.Model.ResourceReference)Recorder.DeepCopy();
      if(ReasonCode != null) dest.ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(ReasonCode.DeepCopy());
      if(ReasonReference != null) dest.ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(ReasonReference.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(DosageInstruction != null) dest.DosageInstruction = new List<Hl7.Fhir.Model.Dosage>(DosageInstruction.DeepCopy());
      if(DispenseRequest != null) dest.DispenseRequest = (Hl7.Fhir.Model.MedicationRequest.DispenseRequestComponent)DispenseRequest.DeepCopy();
      if(Substitution != null) dest.Substitution = (Hl7.Fhir.Model.MedicationRequest.SubstitutionComponent)Substitution.DeepCopy();
      if(PriorPrescription != null) dest.PriorPrescription = (Hl7.Fhir.Model.ResourceReference)PriorPrescription.DeepCopy();
      if(DetectedIssue != null) dest.DetectedIssue = new List<Hl7.Fhir.Model.ResourceReference>(DetectedIssue.DeepCopy());
      if(EventHistory != null) dest.EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(EventHistory.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MedicationRequest());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MedicationRequest;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Definition, otherT.Definition)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.Matches(Medication, otherT.Medication)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Context, otherT.Context)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.Matches(Requester, otherT.Requester)) return false;
      if( !DeepComparable.Matches(Recorder, otherT.Recorder)) return false;
      if( !DeepComparable.Matches(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.Matches(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(DosageInstruction, otherT.DosageInstruction)) return false;
      if( !DeepComparable.Matches(DispenseRequest, otherT.DispenseRequest)) return false;
      if( !DeepComparable.Matches(Substitution, otherT.Substitution)) return false;
      if( !DeepComparable.Matches(PriorPrescription, otherT.PriorPrescription)) return false;
      if( !DeepComparable.Matches(DetectedIssue, otherT.DetectedIssue)) return false;
      if( !DeepComparable.Matches(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MedicationRequest;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Definition, otherT.Definition)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.IsExactly(Medication, otherT.Medication)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Context, otherT.Context)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.IsExactly(Requester, otherT.Requester)) return false;
      if( !DeepComparable.IsExactly(Recorder, otherT.Recorder)) return false;
      if( !DeepComparable.IsExactly(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.IsExactly(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(DosageInstruction, otherT.DosageInstruction)) return false;
      if( !DeepComparable.IsExactly(DispenseRequest, otherT.DispenseRequest)) return false;
      if( !DeepComparable.IsExactly(Substitution, otherT.Substitution)) return false;
      if( !DeepComparable.IsExactly(PriorPrescription, otherT.PriorPrescription)) return false;
      if( !DeepComparable.IsExactly(DetectedIssue, otherT.DetectedIssue)) return false;
      if( !DeepComparable.IsExactly(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in Definition) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (GroupIdentifier != null) yield return GroupIdentifier;
        if (StatusElement != null) yield return StatusElement;
        if (IntentElement != null) yield return IntentElement;
        if (Category != null) yield return Category;
        if (PriorityElement != null) yield return PriorityElement;
        if (Medication != null) yield return Medication;
        if (Subject != null) yield return Subject;
        if (Context != null) yield return Context;
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        if (AuthoredOnElement != null) yield return AuthoredOnElement;
        if (Requester != null) yield return Requester;
        if (Recorder != null) yield return Recorder;
        foreach (var elem in ReasonCode) { if (elem != null) yield return elem; }
        foreach (var elem in ReasonReference) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in DosageInstruction) { if (elem != null) yield return elem; }
        if (DispenseRequest != null) yield return DispenseRequest;
        if (Substitution != null) yield return Substitution;
        if (PriorPrescription != null) yield return PriorPrescription;
        foreach (var elem in DetectedIssue) { if (elem != null) yield return elem; }
        foreach (var elem in EventHistory) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in Definition) { if (elem != null) yield return new ElementValue("definition", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (GroupIdentifier != null) yield return new ElementValue("groupIdentifier", GroupIdentifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        if (Category != null) yield return new ElementValue("category", Category);
        if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        if (Medication != null) yield return new ElementValue("medication", Medication);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Context != null) yield return new ElementValue("context", Context);
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        if (AuthoredOnElement != null) yield return new ElementValue("authoredOn", AuthoredOnElement);
        if (Requester != null) yield return new ElementValue("requester", Requester);
        if (Recorder != null) yield return new ElementValue("recorder", Recorder);
        foreach (var elem in ReasonCode) { if (elem != null) yield return new ElementValue("reasonCode", elem); }
        foreach (var elem in ReasonReference) { if (elem != null) yield return new ElementValue("reasonReference", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in DosageInstruction) { if (elem != null) yield return new ElementValue("dosageInstruction", elem); }
        if (DispenseRequest != null) yield return new ElementValue("dispenseRequest", DispenseRequest);
        if (Substitution != null) yield return new ElementValue("substitution", Substitution);
        if (PriorPrescription != null) yield return new ElementValue("priorPrescription", PriorPrescription);
        foreach (var elem in DetectedIssue) { if (elem != null) yield return new ElementValue("detectedIssue", elem); }
        foreach (var elem in EventHistory) { if (elem != null) yield return new ElementValue("eventHistory", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "definition":
          value = Definition;
          return Definition?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "groupIdentifier":
          value = GroupIdentifier;
          return GroupIdentifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "category":
          value = Category;
          return Category is not null;
        case "priority":
          value = PriorityElement;
          return PriorityElement is not null;
        case "medication":
          value = Medication;
          return Medication is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "context":
          value = Context;
          return Context is not null;
        case "supportingInformation":
          value = SupportingInformation;
          return SupportingInformation?.Any() == true;
        case "authoredOn":
          value = AuthoredOnElement;
          return AuthoredOnElement is not null;
        case "requester":
          value = Requester;
          return Requester is not null;
        case "recorder":
          value = Recorder;
          return Recorder is not null;
        case "reasonCode":
          value = ReasonCode;
          return ReasonCode?.Any() == true;
        case "reasonReference":
          value = ReasonReference;
          return ReasonReference?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "dosageInstruction":
          value = DosageInstruction;
          return DosageInstruction?.Any() == true;
        case "dispenseRequest":
          value = DispenseRequest;
          return DispenseRequest is not null;
        case "substitution":
          value = Substitution;
          return Substitution is not null;
        case "priorPrescription":
          value = PriorPrescription;
          return PriorPrescription is not null;
        case "detectedIssue":
          value = DetectedIssue;
          return DetectedIssue?.Any() == true;
        case "eventHistory":
          value = EventHistory;
          return EventHistory?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Definition?.Any() == true) yield return new KeyValuePair<string,object>("definition",Definition);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (GroupIdentifier is not null) yield return new KeyValuePair<string,object>("groupIdentifier",GroupIdentifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
      if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      if (Medication is not null) yield return new KeyValuePair<string,object>("medication",Medication);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Context is not null) yield return new KeyValuePair<string,object>("context",Context);
      if (SupportingInformation?.Any() == true) yield return new KeyValuePair<string,object>("supportingInformation",SupportingInformation);
      if (AuthoredOnElement is not null) yield return new KeyValuePair<string,object>("authoredOn",AuthoredOnElement);
      if (Requester is not null) yield return new KeyValuePair<string,object>("requester",Requester);
      if (Recorder is not null) yield return new KeyValuePair<string,object>("recorder",Recorder);
      if (ReasonCode?.Any() == true) yield return new KeyValuePair<string,object>("reasonCode",ReasonCode);
      if (ReasonReference?.Any() == true) yield return new KeyValuePair<string,object>("reasonReference",ReasonReference);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (DosageInstruction?.Any() == true) yield return new KeyValuePair<string,object>("dosageInstruction",DosageInstruction);
      if (DispenseRequest is not null) yield return new KeyValuePair<string,object>("dispenseRequest",DispenseRequest);
      if (Substitution is not null) yield return new KeyValuePair<string,object>("substitution",Substitution);
      if (PriorPrescription is not null) yield return new KeyValuePair<string,object>("priorPrescription",PriorPrescription);
      if (DetectedIssue?.Any() == true) yield return new KeyValuePair<string,object>("detectedIssue",DetectedIssue);
      if (EventHistory?.Any() == true) yield return new KeyValuePair<string,object>("eventHistory",EventHistory);
    }

  }

}

// end of file

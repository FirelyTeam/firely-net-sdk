<snapshot-generation-tests>
  <test gen="true" id="t1">
    <rule text="The snapshot must have the same number of elements, in the same order, with matching paths" fhirpath="fixture('t1-output').snapshot.element.select(path) = fixture('patient').snapshot.element.select(path)"/>
    <rule text="The snapshot elements must be the same - check short description" fhirpath="fixture('t1-output').snapshot.element.all(aliasAs('A').short = fixture('patient').snapshot.element.where(path = alias('A').path).short)"/>
    <rule text="The snapshot elements must be the same - check min cardinality" fhirpath="fixture('t1-output').snapshot.element.all(aliasAs('A').min = fixture('patient').snapshot.element.where(path = alias('A').path).min)"/>
    <rule text="The snapshot elements must be the same - check max cardinality" fhirpath="fixture('t1-output').snapshot.element.all(aliasAs('A').max = fixture('patient').snapshot.element.where(path = alias('A').path).max)"/>
    <rule text="The snapshot elements must be the same - check binding" fhirpath="fixture('t1-output').snapshot.element.where(binding.valueSet.exists()).all(aliasAs('A').binding.valueSet.trace('A') = fixture('patient').snapshot.element.where(path = alias('A').path).binding.valueSet.trace('B'))"/>
  </test>
  <test gen="true" id="t2">
    <rule text="The snapshot must have the same number of elements, in the same order, with matching paths" fhirpath="fixture('t2-output').snapshot.element.select(path) = fixture('valueset').snapshot.element.select(path)"/>
    <rule text="The snapshot elements must be the same" fhirpath="fixture('t2-output').snapshot.element.all(aliasAs('A').short = fixture('valueset').snapshot.element.where(path = alias('A').path).short)"/>
  </test>
  <test gen="true" id="t3">
    <rule text="The snapshot must have the same number of elements, in the same order, with matching paths" fhirpath="fixture('t3-output').snapshot.element.select(path) = fixture('patient').snapshot.element.select(path)"/>
    <rule text="The snapshot elements must be the same" fhirpath="fixture('t3-output').snapshot.element.all(aliasAs('A').short = fixture('patient').snapshot.element.where(path = alias('A').path).short)"/>
    <rule text="The patient.identifier cardinality must be right" fhirpath="fixture('t3-output').snapshot.element.where(path = 'Patient.identifier').min = 1"/>
  </test>
  <test gen="true" id="t4">
    <rule text="The patient.identifier documentation must be right" fhirpath="fixture('t4-output').snapshot.element.where(path = 'Patient.identifier').definition.trace('definition') != '... some more doco'"/>
  </test>
  <test gen="true" id="t4a">
    <rule text="The patient.contact.identifier documentation must be right" fhirpath="fixture('t4a-output').snapshot.element.where(path = 'Patient.contact.telecom').definition.trace('definition') != '... some more doco'"/>
  </test>
  <test gen="true" id="t5">
    <rule text="The patient.deceased type must be right" fhirpath="fixture('t5-output').snapshot.element.where(base.path = 'Patient.deceased[x]').type.code = 'dateTime'"/>
    <rule text="The patient.deceased path must be right" fhirpath="fixture('t5-output').snapshot.element.where(base.path = 'Patient.deceased[x]').path = 'Patient.deceased[x]'"/>
  </test>
  <test gen="true" id="t6">
    <rule text="The patient.deceased type must be right" fhirpath="fixture('t6-output').snapshot.element.where(path = 'Patient.deceased[x]' and sliceName.exists()).type.code.trace('code') = 'dateTime'"/>
    <rule text="The patient.deceased path must be right" fhirpath="fixture('t6-output').snapshot.element.where(path = 'Patient.deceased[x]' and sliceName.exists()).path.trace('path') = 'Patient.deceased[x]'"/>
  </test>
  <test gen="true" id="t7">
    <rule text="The mapping must be made" fhirpath="fixture('t7-output').snapshot.element.where(base.path = 'Patient.identifier').mapping.count() = fixture('t1-output').snapshot.element.where(base.path = 'Patient.identifier').mapping.count() + 1"/>
  </test>
  <test gen="true" id="t8">
    <rule text="Mustsupport must be true on Patient.identifier" fhirpath="fixture('t8-output').snapshot.element.where(path = 'Patient.identifier').mustSupport"/>
    <rule text="Mustsupport must be true on Patient.identifier.system" fhirpath="fixture('t8-output').snapshot.element.where(path = 'Patient.identifier.system').mustSupport"/>
  </test>
  <test gen="true" id="t9">
    <rule text="Mustsupport must not be true on Patient.identifier" fhirpath="fixture('t9-output').snapshot.element.where(path = 'Patient.identifier').mustSupport.not()"/>
    <rule text="Mustsupport must be true on Patient.identifier.system" fhirpath="fixture('t9-output').snapshot.element.where(path = 'Patient.identifier.system').mustSupport"/>
  </test>
  <test gen="true" id="t10">
    <rule text="Patient.identifier must be sliced" fhirpath="fixture('t10-output').snapshot.element.where(path = 'Patient.identifier').first().slicing.exists()"/>
    <rule text="Patient.identifier must not have a slice name" fhirpath="fixture('t10-output').snapshot.element.where(path = 'Patient.identifier').first().sliceName.empty()"/>
    <rule text="Patient.identifier must be sliced into two slices" fhirpath="fixture('t10-output').snapshot.element.where(path = 'Patient.identifier').count() = 3"/>
    <rule text="Patient.identifier slice must not have a slice name" fhirpath="fixture('t10-output').snapshot.element.where(path = 'Patient.identifier').tail().slicing.empty()"/>
    <rule text="Patient.identifier tail must have a slice name" fhirpath="fixture('t10-output').snapshot.element.where(path = 'Patient.identifier').tail().all(sliceName.empty().not())"/>
    <rule text="Patient.identifier.use must be fixed" fhirpath="fixture('t10-output').snapshot.element.where(path = 'Patient.identifier.use').all(fixed.empty().not())"/>
  </test>
  <test gen="true" id="t11">
    <rule text="Patient.extension must be sliced" fhirpath="fixture('t11-output').snapshot.element.where(path = 'Patient.extension').first().slicing.exists()"/>
    <rule text="Patient.extension first must not have a slice name" fhirpath="fixture('t11-output').snapshot.element.where(path = 'Patient.extension').first().sliceName.empty()"/>
    <rule text="Patient.extension must be sliced into two slices" fhirpath="fixture('t11-output').snapshot.element.where(path = 'Patient.extension').count() = 3"/>
    <rule text="Patient.extension must not have a slice name" fhirpath="fixture('t11-output').snapshot.element.where(path = 'Patient.extension').tail().slicing.empty()"/>
    <rule text="Patient.extension tail must not have a slice name" fhirpath="fixture('t11-output').snapshot.element.where(path = 'Patient.extension').tail().all(sliceName.empty().not())"/>
    <rule text="Patient.extension cardinality must be correct" fhirpath="fixture('t11-output').snapshot.element.where(path = 'Patient.extension').first().max.exists()"/>
    <rule text="Patient.extension cardinality must be correct" fhirpath="fixture('t11-output').snapshot.element.where(path = 'Patient.extension')[1].min.exists()"/>
  </test>
  <test gen="true" id="t12">
    <rule text="Patient.extension must be sliced" fhirpath="fixture('t12-output').snapshot.element.where(path = 'Patient.extension').first().slicing.exists()"/>
    <rule text="Patient.extension first must not have a slice name" fhirpath="fixture('t12-output').snapshot.element.where(path = 'Patient.extension').first().sliceName.empty()"/>
    <rule text="Patient.extension must be sliced into two slices" fhirpath="fixture('t12-output').snapshot.element.where(path = 'Patient.extension').count() = 3"/>
    <rule text="Patient.extension must not have a slice name" fhirpath="fixture('t12-output').snapshot.element.where(path = 'Patient.extension').tail().slicing.empty()"/>
    <rule text="Patient.extension tail must not have a slice name" fhirpath="fixture('t12-output').snapshot.element.where(path = 'Patient.extension').tail().all(sliceName.empty().not())"/>
    <rule text="Patient.extension cardinality must be correct" fhirpath="fixture('t12-output').snapshot.element.where(path = 'Patient.extension')[1].min.exists()"/>
  </test>
  <test gen="true" id="t12a">
    <rule text="Patient.extension must be sliced" fhirpath="fixture('t12a-output').snapshot.element.where(path = 'Patient.extension').first().slicing.exists()"/>
    <rule text="Patient.extension first must not have a slice name" fhirpath="fixture('t12a-output').snapshot.element.where(path = 'Patient.extension').first().sliceName.empty()"/>
    <rule text="Patient.extension must be sliced into two slices" fhirpath="fixture('t12a-output').snapshot.element.where(path = 'Patient.extension').count() = 2"/>
    <rule text="Patient.extension must not have a slice name" fhirpath="fixture('t12a-output').snapshot.element.where(path = 'Patient.extension').tail().slicing.empty()"/>
    <rule text="Patient.extension tail must not have a slice name" fhirpath="fixture('t12a-output').snapshot.element.where(path = 'Patient.extension').tail().all(sliceName.empty().not())"/>
  </test>
  <test gen="true" id="t13">
    <rule text="element 7 (base) path" fhirpath="fixture('t13-output').snapshot.element[7].path = 'Patient.extension'"/>
    <rule text="element 7 slicing" fhirpath="fixture('t13-output').snapshot.element[7].slicing.exists()"/>
    <rule text="element 8 (1st slice) path" fhirpath="fixture('t13-output').snapshot.element[8].path = 'Patient.extension'"/>
    <rule text="element 8 (1st slice) name" fhirpath="fixture('t13-output').snapshot.element[8].sliceName = 't'"/>
    <rule text="element 9 (2nd slice) profile name" fhirpath="fixture('t13-output').snapshot.element[8].type[0].profile = 'http://hl7.org/fhir/StructureDefinition/patient-birthTime'"/>
    <rule text="element 9 (2nd slice) path" fhirpath="fixture('t13-output').snapshot.element[9].path = 'Patient.extension'"/>
    <rule text="element 8 (1st slice) name" fhirpath="fixture('t13-output').snapshot.element[9].sliceName = 'complex'"/>
    <rule text="element 9 (2nd slice) profile name" fhirpath="fixture('t13-output').snapshot.element[9].type[0].profile = 'http://hl7.org/fhir/StructureDefinition/patient-nationality'"/>
    <rule text="element 10 (2nd slice).id path" fhirpath="fixture('t13-output').snapshot.element[10].path = 'Patient.extension.id'"/>
    <rule text="element 11 (2nd slice).extension path" fhirpath="fixture('t13-output').snapshot.element[11].path = 'Patient.extension.extension'"/>
    <rule text="element 12 (2nd slice).extension path" fhirpath="fixture('t13-output').snapshot.element[12].path = 'Patient.extension.extension'"/>
    <rule text="element 12 (2nd slice).extension must support" fhirpath="fixture('t13-output').snapshot.element[12].mustSupport"/>
    <rule text="element 13 (2nd slice).extension.id path" fhirpath="fixture('t13-output').snapshot.element[13].path = 'Patient.extension.extension.id'"/>
    <rule text="element 14 (2nd slice).extension.extension path" fhirpath="fixture('t13-output').snapshot.element[14].path = 'Patient.extension.extension.extension'"/>
    <rule text="element 15 (2nd slice).extension.url path" fhirpath="fixture('t13-output').snapshot.element[15].path = 'Patient.extension.extension.url'"/>
    <rule text="element 16 (2nd slice).extension.valueCodeableConcept path" fhirpath="fixture('t13-output').snapshot.element[16].path = 'Patient.extension.extension.valueCodeableConcept'"/>
    <rule text="element 17 (2nd slice).extension path" fhirpath="fixture('t13-output').snapshot.element[17].path = 'Patient.extension.extension'"/>
    <rule text="element 17 (2nd slice).extension cardinality" fhirpath="fixture('t13-output').snapshot.element[17].max = '0'"/>
    <rule text="element 18 (2nd slice).extension.id path" fhirpath="fixture('t13-output').snapshot.element[18].path = 'Patient.extension.extension.id'"/>
    <rule text="element 19 (2nd slice).extension.extension path" fhirpath="fixture('t13-output').snapshot.element[19].path = 'Patient.extension.extension.extension'"/>
    <rule text="element 20 (2nd slice).extension.url path" fhirpath="fixture('t13-output').snapshot.element[20].path = 'Patient.extension.extension.url'"/>
    <rule text="element 21 (2nd slice).extension.valuePeriod path" fhirpath="fixture('t13-output').snapshot.element[21].path = 'Patient.extension.extension.valuePeriod'"/>
    <rule text="element 22.url path" fhirpath="fixture('t13-output').snapshot.element[22].path = 'Patient.extension.url'"/>
    <rule text="element 22.value path" fhirpath="fixture('t13-output').snapshot.element[23].path = 'Patient.extension.value[x]'"/>
  </test>
  <test gen="true" id="t14">
    <rule text="element count increased by 13" fhirpath="fixture('t14-output').snapshot.element.count() = fixture('organization').snapshot.element.count() + 13"/>
  </test>
  <test gen="true" id="t15">
    <rule text="element count increased by 27" fhirpath="fixture('t15-output').snapshot.element.count() = fixture('patient').snapshot.element.count() + 27"/>
  </test>
  <test gen="true" id="t16">
    <rule text="element count increased by 17" fhirpath="fixture('t16-output').snapshot.element.count() = fixture('t15-output').snapshot.element.count() + 17"/>
  </test>
  <test gen="true" id="t17">
    <rule text="Patient.modifierExtension must be sliced" fhirpath="fixture('t17-output').snapshot.element.where(path = 'Patient.modifierExtension').first().slicing.exists()"/>
    <rule text="Patient.modifierExtension first must not have a slice name" fhirpath="fixture('t17-output').snapshot.element.where(path = 'Patient.modifierExtension').first().sliceName.empty()"/>
    <rule text="Patient.modifierExtension must be sliced into two slices" fhirpath="fixture('t17-output').snapshot.element.where(path = 'Patient.modifierExtension').count() = 3"/>
    <rule text="Patient.modifierExtension must not have a slice name" fhirpath="fixture('t17-output').snapshot.element.where(path = 'Patient.modifierExtension').tail().slicing.empty()"/>
    <rule text="Patient.modifierExtension tail must not have a slice name" fhirpath="fixture('t17-output').snapshot.element.where(path = 'Patient.modifierExtension').tail().all(sliceName.empty().not())"/>
    <rule text="Patient.modifierExtension cardinality must be correct" fhirpath="fixture('t17-output').snapshot.element.where(path = 'Patient.modifierExtension').first().max.exists()"/>
    <rule text="Patient.modifierExtension cardinality must be correct" fhirpath="fixture('t17-output').snapshot.element.where(path = 'Patient.modifierExtension')[1].min.exists()"/>
  </test>
  <test gen="true" id="t18">
    <rule text="Patient.modifierExtension must be sliced" fhirpath="fixture('t18-output').snapshot.element.where(path = 'Patient.modifierExtension').first().slicing.exists()"/>
    <rule text="Patient.modifierExtension first must not have a slice name" fhirpath="fixture('t18-output').snapshot.element.where(path = 'Patient.modifierExtension').first().sliceName.empty()"/>
    <rule text="Patient.modifierExtension must be sliced into two slices" fhirpath="fixture('t18-output').snapshot.element.where(path = 'Patient.modifierExtension').count() = 3"/>
    <rule text="Patient.modifierExtension must not have a slice name" fhirpath="fixture('t18-output').snapshot.element.where(path = 'Patient.modifierExtension').tail().slicing.empty()"/>
    <rule text="Patient.modifierExtension tail must not have a slice name" fhirpath="fixture('t18-output').snapshot.element.where(path = 'Patient.modifierExtension').tail().all(sliceName.empty().not())"/>
    <rule text="Patient.modifierExtension cardinality must be correct" fhirpath="fixture('t18-output').snapshot.element.where(path = 'Patient.modifierExtension').first().max.exists()"/>
    <rule text="Patient.modifierExtension cardinality must be correct" fhirpath="fixture('t18-output').snapshot.element.where(path = 'Patient.modifierExtension')[1].min.exists()"/>
  </test>
  <test gen="true" id="t19">
    <rule text="Patient.modifierExtension must be sliced" fhirpath="fixture('t19-output').snapshot.element.where(path = 'Patient.modifierExtension').first().slicing.exists()"/>
    <rule text="Patient.modifierExtension first must not have a slice name" fhirpath="fixture('t19-output').snapshot.element.where(path = 'Patient.modifierExtension').first().sliceName.empty()"/>
    <rule text="Patient.modifierExtension must be sliced into one slices" fhirpath="fixture('t19-output').snapshot.element.where(path = 'Patient.modifierExtension').count() = 2"/>
    <rule text="Patient.modifierExtension must not have a slice name" fhirpath="fixture('t19-output').snapshot.element.where(path = 'Patient.modifierExtension').tail().slicing.empty()"/>
    <rule text="Patient.modifierExtension tail must not have a slice name" fhirpath="fixture('t19-output').snapshot.element.where(path = 'Patient.modifierExtension').tail().all(sliceName.empty().not())"/>
  </test>
  <test gen="true" id="t21">
    <rule text="PlanDefinition.action.action must be sliced" fhirpath="fixture('t21-output').snapshot.element.where(path = 'PlanDefinition.action.action').first().slicing.exists()"/>
    <rule text="PlanDefinition.action.action first must not have a slice name" fhirpath="fixture('t21-output').snapshot.element.where(path = 'PlanDefinition.action.action').first().sliceName.empty()"/>
    <rule text="PlanDefinition.action.action must be sliced into two slices" fhirpath="fixture('t21-output').snapshot.element.where(path = 'PlanDefinition.action.action').count() = 3"/>
    <rule text="PlanDefinition.action.action tail must not have a slice name" fhirpath="fixture('t21-output').snapshot.element.where(path = 'PlanDefinition.action.action').tail().slicing.empty()"/>
    <rule text="PlanDefinition.action.action tail must not have a slice name" fhirpath="fixture('t21-output').snapshot.element.where(path = 'PlanDefinition.action.action').tail().all(sliceName.empty().not())"/>
  </test>
  <test gen="true" id="t22">
    <rule text="element count increased by 76" fhirpath="fixture('t22-output').snapshot.element.count().trace('t22o') = fixture('patient').snapshot.element.count().trace('t22patient') + 76"/>
  </test>
  <test gen="true" sort="true" id="t23">
    <rule text="element count increased by ??" fhirpath="fixture('t23-output').snapshot.element.count().trace('t23o') = fixture('patient').snapshot.element.count().trace('t23patient') + 11"/>
  </test>
  <test gen="true" id="t23a" fail="true"/>
  <test gen="true" id="t24b" register="t24a">
    <rule text="Element count of profile a is increased by 22 from base Patient" fhirpath="fixture('t24b-output').snapshot.element.count().trace('t24ao') = fixture('patient').snapshot.element.count().trace('t24Patient') + 22"/>
    <rule text="Element count of profile b is identical to profile a" fhirpath="fixture('t24b-output').snapshot.element.count().trace('t24bo') = fixture('t24b-include').snapshot.element.count().trace('t24ao')"/>
  </test>
  <test sort="true" id="t26">
    <rule text="differential element count the same" fhirpath="fixture('t26-output').differential.element.count() = fixture('t26').differential.element.count()"/>
  </test>
  <test gen="true" id="t27">
    <rule text="Contract.type.coding.code must have a pattern" fhirpath="fixture('t27-output').snapshot.element.where(path = 'Contract.type.coding.code').pattern.exists()"/>
    <rule text="Contract.type.coding.system must have a pattern" fhirpath="fixture('t27-output').snapshot.element.where(path = 'Contract.type.coding.system').pattern.exists()"/>
  </test>
  <test gen="true" sort="true" id="t28">
    <rule text="Element count must be increased by 16" fhirpath="fixture('t28-output').snapshot.element.count().trace('t28o') = fixture('operationoutcome').snapshot.element.count().trace('t28') + 17"/>
  </test>
  <test gen="true" sort="true" id="t29">
    <rule text="Element count must be increased by 15" fhirpath="fixture('t29-output').snapshot.element.count().trace('t29o') = fixture('parameters').snapshot.element.count().trace('t29') + 16"/>
    <rule text="There is an element with id 'Parameters.parameter.part:foo.id'" fhirpath="fixture('t29-output').snapshot.element.where(id = 'Parameters.parameter.part:foo.id').count()=1"/>
  </test>
  <test gen="true" sort="true" id="t29a" fail="true"/>
  <test gen="true" sort="true" id="t30b" include="t30a">
    <rule text="Snapshot doesn't result in an error'" fhirpath="fixture('t30b-output').snapshot.element.count().trace('t30bo')&gt;1"/>
  </test>
  <test gen="true" sort="true" id="t31">
    <rule text="Snapshot contains regex extension'" fhirpath="fixture('t31-output').snapshot.element.extension('http://hl7.org/fhir/StructureDefinition/regex').count().trace('t31o ext count')=2"/>
  </test>
  <test gen="true" sort="true" id="t32">
    <rule text="Snapshot Questionnaire.item element has slicing'" fhirpath="fixture('t32-output').snapshot.element.where(id = 'Questionnaire.item').slicing.count().trace('t32o item slicing count')=1"/>
  </test>
  <test gen="true" sort="true" id="t33">
    <rule text="Snapshot contains referenced item children with correct path'" fhirpath="fixture('t33-output').snapshot.element.where(id = 'ExplanationOfBenefit.addItem.adjudication.extension').exists()"/>
  </test>
  <test gen="true" sort="true" id="t34" register="t34-defn">
    <rule text="There must be 2 elements on Basic.identifier.extension in the snapshot" fhirpath="fixture('t34-output').snapshot.element.where(path = 'Basic.identifier.extension').count() = 2"/>
    <rule text="The narrative must mention the extension URL (http://www.fhir.org/guides/test3/StructureDefinition/extension-identifier-status)" fhirpath="fixture('t34-output').text.div.contains('http://www.fhir.org/guides/test3/StructureDefinition/extension-identifier-status')"/>
  </test>
  <test gen="true" sort="true" id="t35" register="t35-defn">
    <rule text="There must be 2 elements on Basic.identifier.extension in the snapshot" fhirpath="fixture('t35-output').snapshot.element.where(path = 'Basic.identifier.extension').count() = 2"/>
    <rule text="The narrative must mention the extension URL (http://www.fhir.org/guides/test3/StructureDefinition/extension-identifier-status)" fhirpath="fixture('t35-output').text.div.contains('http://www.fhir.org/guides/test3/StructureDefinition/extension-identifier-status')"/>
  </test>
  <test gen="true" sort="true" id="t36">
    <rule text="Snapshot generation didn't blow up" fhirpath="fixture('t36-output').snapshot.element.count() &gt; 0"/>
  </test>
  <test gen="true" sort="true" id="t37" fail="true"/>
  <test gen="true" sort="true" id="t38">
    <rule text="Snapshot generation didn't blow up" fhirpath="fixture('t38-output').snapshot.element.count() &gt; 0"/>
  </test>
  <test gen="true" sort="true" id="t40">
    <rule text="There should only be one element definition for value[x]" fhirpath="fixture('t40-output').snapshot.element.where(path.startsWith('Observation.value')).count() = 1"/>
    <rule text="The element definition for value[x] should have min = 1" fhirpath="fixture('t40-output').snapshot.element.where(path.startsWith('Observation.value')).min = 1"/>
  </test>
  <test gen="true" sort="true" id="t41">
    <rule text="There should only be one element definition for value[x]" fhirpath="fixture('t41-output').snapshot.element.where(path.startsWith('Observation.value')).count() = 1"/>
    <rule text="The element definition for value[x] should have 2 types" fhirpath="fixture('t41-output').snapshot.element.where(path.startsWith('Observation.value')).type.count() = 2"/>
  </test>
  <test gen="true" sort="true" id="t42">
    <rule text="There should only be one element definition for value[x]" fhirpath="fixture('t42-output').snapshot.element.where(path.startsWith('Observation.value')).count() = 1"/>
    <rule text="The element definition for value[x] should have 1 type" fhirpath="fixture('t42-output').snapshot.element.where(path.startsWith('Observation.value')).type.count() = 1"/>
    <rule text="The element definition for value[x] should have short = 'some text'" fhirpath="fixture('t42-output').snapshot.element.where(path.startsWith('Observation.value')).short = 'some text'"/>
  </test>
  <test gen="true" sort="true" id="t43">
    <rule text="There should be 9 element definitions for value[x] (base + quantity + walking into quantity" fhirpath="fixture('t43-output').snapshot.element.where(path.startsWith('Observation.value')).count() = 9"/>
    <rule text="The element definition for value[x] should have 1 type" fhirpath="fixture('t43-output').snapshot.element.where(id = 'Observation.value[x]').type.count().trace('count') = 1"/>
    <rule text="The element definition for value[x] should have short = 'some text'" fhirpath="fixture('t43-output').snapshot.element.where(id = 'Observation.value[x]').short = 'some text'"/>
    <rule text="The element definition for value[x] quantity slice should have sliceName = 'Quantity'" fhirpath="fixture('t43-output').snapshot.element.where(id = 'Observation.value[x]:valueQuantity').check(exists(), 'no slice').sliceName = 'valueQuantity'"/>
    <rule text="The element definition for value[x].value quantity slice should have sliceName = 'Quantity'" fhirpath="fixture('t43-output').snapshot.element.where(id = 'Observation.value[x]:valueQuantity.value').check(exists(), 'no slice').min = 1"/>
  </test>
  <test gen="true" sort="true" id="t43a" fail="true"/>
  <test gen="true" sort="true" id="t44">
    <rule text="There should be 9 element definitions for value[x] (base + quantity + walking into quantity" fhirpath="fixture('t44-output').snapshot.element.where(path.startsWith('Observation.value')).count() = 9"/>
    <rule text="The element definition for value[x] should have 1 type" fhirpath="fixture('t44-output').snapshot.element.where(id = 'Observation.value[x]').type.count().trace('count') = 1"/>
    <rule text="The element definition for value[x] should have short = 'some text'" fhirpath="fixture('t44-output').snapshot.element.where(id = 'Observation.value[x]').short = 'some text'"/>
    <rule text="The element definition for value[x] quantity slice should have sliceName = 'Quantity'" fhirpath="fixture('t44-output').snapshot.element.where(id = 'Observation.value[x]:valueQuantity').check(exists(), 'no slice').sliceName = 'valueQuantity'"/>
    <rule text="The element definition for value[x].value quantity slice should have sliceName = 'Quantity'" fhirpath="fixture('t44-output').snapshot.element.where(id = 'Observation.value[x]:valueQuantity.value').check(exists(), 'no slice').min = 1"/>
  </test>
  <test gen="true" sort="true" id="t45" register="t45-defn"/>
  <test gen="true" id="samply1"/>
  <!-- <test gen="true" id="au1" include="au1a"/> -->
  <test gen="true" id="au2"/>
  <test gen="true" id="au3"/>
  <test gen="true" id="dv1"/>
  
  <!--type slice tests-->
  <test gen="true" id="obs-1" description="closed type slicing"/>
  <test gen="true" id="obs-1-1" description="re-constraining closed type slicing"/>
  <test gen="true" id="obs-1-2" fail="true" reason="trying to profile a type already profiled out" description="trying to profile a type already profiled out"/>
  <test gen="true" id="obs-2" description="open type slicing"/>
  <test gen="true" id="obs-2a" description="open type slicing + constain base"/>
  <test gen="true" id="obs-2b" description="open type slicing + min on slice"/>
  <test gen="true" id="obs-2-1" description="reslciing choice to closed"/>
  <test gen="true" id="obs-2-2" description="reslicing slice a different type"/>
  <test gen="true" id="obs-2-3" fail="true" reason="trying to profile an illegal type" description="trying to profile an illegal type (not in slices remaining)"/>
  <test gen="true" id="obs-3" fail="true" reason="trying to profile an illegal type" description="trying to profile an illegal type (not in element)"/>
  <test gen="true" id="obs-4" description="open with min cardinality"/>
  <test gen="true" id="obs-5" fail="true" reason="More than one type slice has min=1" description="More than one type slice has min=1"/>
</snapshot-generation-tests>

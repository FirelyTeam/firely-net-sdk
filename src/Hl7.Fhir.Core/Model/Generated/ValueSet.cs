// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A set of codes drawn from one or more code systems
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ValueSet","http://hl7.org/fhir/StructureDefinition/ValueSet", IsResource=true)]
  public partial class ValueSet : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ValueSet"; } }

    /// <summary>
    /// Content logical definition of the value set (CLD)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Compose", IsNestedType=true)]
    public partial class ComposeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Compose"; } }

      /// <summary>
      /// Fixed date for references with no specified version (transitive)
      /// </summary>
      [FhirElement("lockedDate", InSummary=true, Order=40, FiveWs="FiveWs.init")]
      [DataMember]
      public Hl7.Fhir.Model.Date LockedDateElement
      {
        get { return _LockedDateElement; }
        set { _LockedDateElement = value; OnPropertyChanged("LockedDateElement"); }
      }

      private Hl7.Fhir.Model.Date _LockedDateElement;

      /// <summary>
      /// Fixed date for references with no specified version (transitive)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string LockedDate
      {
        get { return LockedDateElement != null ? LockedDateElement.Value : null; }
        set
        {
          if (value == null)
            LockedDateElement = null;
          else
            LockedDateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("LockedDate");
        }
      }

      /// <summary>
      /// Whether inactive codes are in the value set
      /// </summary>
      [FhirElement("inactive", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean InactiveElement
      {
        get { return _InactiveElement; }
        set { _InactiveElement = value; OnPropertyChanged("InactiveElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _InactiveElement;

      /// <summary>
      /// Whether inactive codes are in the value set
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Inactive
      {
        get { return InactiveElement != null ? InactiveElement.Value : null; }
        set
        {
          if (value == null)
            InactiveElement = null;
          else
            InactiveElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Inactive");
        }
      }

      /// <summary>
      /// Include one or more codes from a code system or other value set(s)
      /// </summary>
      [FhirElement("include", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent> Include
      {
        get { if(_Include==null) _Include = new List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent>(); return _Include; }
        set { _Include = value; OnPropertyChanged("Include"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent> _Include;

      /// <summary>
      /// Explicitly exclude codes from a code system or other value sets
      /// </summary>
      [FhirElement("exclude", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent> Exclude
      {
        get { if(_Exclude==null) _Exclude = new List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent>(); return _Exclude; }
        set { _Exclude = value; OnPropertyChanged("Exclude"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent> _Exclude;

      /// <summary>
      /// Property to return if client doesn't override
      /// </summary>
      [FhirElement("property", Order=80, Since=FhirRelease.R5)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirString> PropertyElement
      {
        get { if(_PropertyElement==null) _PropertyElement = new List<Hl7.Fhir.Model.FhirString>(); return _PropertyElement; }
        set { _PropertyElement = value; OnPropertyChanged("PropertyElement"); }
      }

      private List<Hl7.Fhir.Model.FhirString> _PropertyElement;

      /// <summary>
      /// Property to return if client doesn't override
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> Property
      {
        get { return PropertyElement != null ? PropertyElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            PropertyElement = null;
          else
            PropertyElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
          OnPropertyChanged("Property");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ComposeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LockedDateElement != null) dest.LockedDateElement = (Hl7.Fhir.Model.Date)LockedDateElement.DeepCopy();
        if(InactiveElement != null) dest.InactiveElement = (Hl7.Fhir.Model.FhirBoolean)InactiveElement.DeepCopy();
        if(Include != null) dest.Include = new List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent>(Include.DeepCopy());
        if(Exclude != null) dest.Exclude = new List<Hl7.Fhir.Model.ValueSet.ConceptSetComponent>(Exclude.DeepCopy());
        if(PropertyElement != null) dest.PropertyElement = new List<Hl7.Fhir.Model.FhirString>(PropertyElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ComposeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ComposeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LockedDateElement, otherT.LockedDateElement)) return false;
        if( !DeepComparable.Matches(InactiveElement, otherT.InactiveElement)) return false;
        if( !DeepComparable.Matches(Include, otherT.Include)) return false;
        if( !DeepComparable.Matches(Exclude, otherT.Exclude)) return false;
        if( !DeepComparable.Matches(PropertyElement, otherT.PropertyElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ComposeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LockedDateElement, otherT.LockedDateElement)) return false;
        if( !DeepComparable.IsExactly(InactiveElement, otherT.InactiveElement)) return false;
        if( !DeepComparable.IsExactly(Include, otherT.Include)) return false;
        if( !DeepComparable.IsExactly(Exclude, otherT.Exclude)) return false;
        if( !DeepComparable.IsExactly(PropertyElement, otherT.PropertyElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LockedDateElement != null) yield return LockedDateElement;
          if (InactiveElement != null) yield return InactiveElement;
          foreach (var elem in Include) { if (elem != null) yield return elem; }
          foreach (var elem in Exclude) { if (elem != null) yield return elem; }
          foreach (var elem in PropertyElement) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LockedDateElement != null) yield return new ElementValue("lockedDate", LockedDateElement);
          if (InactiveElement != null) yield return new ElementValue("inactive", InactiveElement);
          foreach (var elem in Include) { if (elem != null) yield return new ElementValue("include", elem); }
          foreach (var elem in Exclude) { if (elem != null) yield return new ElementValue("exclude", elem); }
          foreach (var elem in PropertyElement) { if (elem != null) yield return new ElementValue("property", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "lockedDate":
            value = LockedDateElement;
            return LockedDateElement is not null;
          case "inactive":
            value = InactiveElement;
            return InactiveElement is not null;
          case "include":
            value = Include;
            return Include?.Any() == true;
          case "exclude":
            value = Exclude;
            return Exclude?.Any() == true;
          case "property":
            value = PropertyElement;
            return PropertyElement?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LockedDateElement is not null) yield return new KeyValuePair<string,object>("lockedDate",LockedDateElement);
        if (InactiveElement is not null) yield return new KeyValuePair<string,object>("inactive",InactiveElement);
        if (Include?.Any() == true) yield return new KeyValuePair<string,object>("include",Include);
        if (Exclude?.Any() == true) yield return new KeyValuePair<string,object>("exclude",Exclude);
        if (PropertyElement?.Any() == true) yield return new KeyValuePair<string,object>("property",PropertyElement);
      }

    }

    /// <summary>
    /// Include one or more codes from a code system or other value set(s)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#ConceptSet", IsNestedType=true)]
    public partial class ConceptSetComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#ConceptSet"; } }

      /// <summary>
      /// The system the codes come from
      /// </summary>
      [FhirElement("system", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri SystemElement
      {
        get { return _SystemElement; }
        set { _SystemElement = value; OnPropertyChanged("SystemElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _SystemElement;

      /// <summary>
      /// The system the codes come from
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string System
      {
        get { return SystemElement != null ? SystemElement.Value : null; }
        set
        {
          if (value == null)
            SystemElement = null;
          else
            SystemElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("System");
        }
      }

      /// <summary>
      /// Specific version of the code system referred to
      /// </summary>
      [FhirElement("version", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString VersionElement
      {
        get { return _VersionElement; }
        set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _VersionElement;

      /// <summary>
      /// Specific version of the code system referred to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Version
      {
        get { return VersionElement != null ? VersionElement.Value : null; }
        set
        {
          if (value == null)
            VersionElement = null;
          else
            VersionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Version");
        }
      }

      /// <summary>
      /// A concept defined in the system
      /// </summary>
      [FhirElement("concept", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent> Concept
      {
        get { if(_Concept==null) _Concept = new List<Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent>(); return _Concept; }
        set { _Concept = value; OnPropertyChanged("Concept"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent> _Concept;

      /// <summary>
      /// Select codes/concepts by their properties (including relationships)
      /// </summary>
      [FhirElement("filter", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.FilterComponent> Filter
      {
        get { if(_Filter==null) _Filter = new List<Hl7.Fhir.Model.ValueSet.FilterComponent>(); return _Filter; }
        set { _Filter = value; OnPropertyChanged("Filter"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.FilterComponent> _Filter;

      /// <summary>
      /// Select the contents included in this value set
      /// </summary>
      [FhirElement("valueSet", InSummary=true, Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Canonical> ValueSetElement
      {
        get { if(_ValueSetElement==null) _ValueSetElement = new List<Hl7.Fhir.Model.Canonical>(); return _ValueSetElement; }
        set { _ValueSetElement = value; OnPropertyChanged("ValueSetElement"); }
      }

      private List<Hl7.Fhir.Model.Canonical> _ValueSetElement;

      /// <summary>
      /// Select the contents included in this value set
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> ValueSet
      {
        get { return ValueSetElement != null ? ValueSetElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ValueSetElement = null;
          else
            ValueSetElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
          OnPropertyChanged("ValueSet");
        }
      }

      /// <summary>
      /// A copyright statement for the specific code system included in the value set
      /// </summary>
      [FhirElement("copyright", Order=90, Since =FhirRelease.R5)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CopyrightElement
      {
        get { return _CopyrightElement; }
        set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CopyrightElement;

      /// <summary>
      /// A copyright statement for the specific code system included in the value set
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Copyright
      {
        get { return CopyrightElement != null ? CopyrightElement.Value : null; }
        set
        {
          if (value == null)
            CopyrightElement = null;
          else
            CopyrightElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Copyright");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConceptSetComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SystemElement != null) dest.SystemElement = (Hl7.Fhir.Model.FhirUri)SystemElement.DeepCopy();
        if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
        if(Concept != null) dest.Concept = new List<Hl7.Fhir.Model.ValueSet.ConceptReferenceComponent>(Concept.DeepCopy());
        if(Filter != null) dest.Filter = new List<Hl7.Fhir.Model.ValueSet.FilterComponent>(Filter.DeepCopy());
        if(ValueSetElement != null) dest.ValueSetElement = new List<Hl7.Fhir.Model.Canonical>(ValueSetElement.DeepCopy());
        if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.FhirString)CopyrightElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConceptSetComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConceptSetComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SystemElement, otherT.SystemElement)) return false;
        if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
        if( !DeepComparable.Matches(Concept, otherT.Concept)) return false;
        if( !DeepComparable.Matches(Filter, otherT.Filter)) return false;
        if( !DeepComparable.Matches(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConceptSetComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SystemElement, otherT.SystemElement)) return false;
        if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
        if( !DeepComparable.IsExactly(Concept, otherT.Concept)) return false;
        if( !DeepComparable.IsExactly(Filter, otherT.Filter)) return false;
        if( !DeepComparable.IsExactly(ValueSetElement, otherT.ValueSetElement)) return false;
        if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SystemElement != null) yield return SystemElement;
          if (VersionElement != null) yield return VersionElement;
          foreach (var elem in Concept) { if (elem != null) yield return elem; }
          foreach (var elem in Filter) { if (elem != null) yield return elem; }
          foreach (var elem in ValueSetElement) { if (elem != null) yield return elem; }
          if (CopyrightElement != null) yield return CopyrightElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SystemElement != null) yield return new ElementValue("system", SystemElement);
          if (VersionElement != null) yield return new ElementValue("version", VersionElement);
          foreach (var elem in Concept) { if (elem != null) yield return new ElementValue("concept", elem); }
          foreach (var elem in Filter) { if (elem != null) yield return new ElementValue("filter", elem); }
          foreach (var elem in ValueSetElement) { if (elem != null) yield return new ElementValue("valueSet", elem); }
          if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "system":
            value = SystemElement;
            return SystemElement is not null;
          case "version":
            value = VersionElement;
            return VersionElement is not null;
          case "concept":
            value = Concept;
            return Concept?.Any() == true;
          case "filter":
            value = Filter;
            return Filter?.Any() == true;
          case "valueSet":
            value = ValueSetElement;
            return ValueSetElement?.Any() == true;
          case "copyright":
            value = CopyrightElement;
            return CopyrightElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SystemElement is not null) yield return new KeyValuePair<string,object>("system",SystemElement);
        if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
        if (Concept?.Any() == true) yield return new KeyValuePair<string,object>("concept",Concept);
        if (Filter?.Any() == true) yield return new KeyValuePair<string,object>("filter",Filter);
        if (ValueSetElement?.Any() == true) yield return new KeyValuePair<string,object>("valueSet",ValueSetElement);
        if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      }

    }

    /// <summary>
    /// A concept defined in the system
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#ConceptReference", IsNestedType=true)]
    public partial class ConceptReferenceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#ConceptReference"; } }

      /// <summary>
      /// Code or expression from system
      /// </summary>
      [FhirElement("code", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Code or expression from system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Text to display for this code for this value set in this valueset
      /// </summary>
      [FhirElement("display", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DisplayElement
      {
        get { return _DisplayElement; }
        set { _DisplayElement = value; OnPropertyChanged("DisplayElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DisplayElement;

      /// <summary>
      /// Text to display for this code for this value set in this valueset
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Display
      {
        get { return DisplayElement != null ? DisplayElement.Value : null; }
        set
        {
          if (value == null)
            DisplayElement = null;
          else
            DisplayElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Display");
        }
      }

      /// <summary>
      /// Additional representations for this concept
      /// </summary>
      [FhirElement("designation", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.DesignationComponent> Designation
      {
        get { if(_Designation==null) _Designation = new List<Hl7.Fhir.Model.ValueSet.DesignationComponent>(); return _Designation; }
        set { _Designation = value; OnPropertyChanged("Designation"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.DesignationComponent> _Designation;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConceptReferenceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(DisplayElement != null) dest.DisplayElement = (Hl7.Fhir.Model.FhirString)DisplayElement.DeepCopy();
        if(Designation != null) dest.Designation = new List<Hl7.Fhir.Model.ValueSet.DesignationComponent>(Designation.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConceptReferenceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConceptReferenceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.Matches(Designation, otherT.Designation)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConceptReferenceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.IsExactly(Designation, otherT.Designation)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (DisplayElement != null) yield return DisplayElement;
          foreach (var elem in Designation) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (DisplayElement != null) yield return new ElementValue("display", DisplayElement);
          foreach (var elem in Designation) { if (elem != null) yield return new ElementValue("designation", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "display":
            value = DisplayElement;
            return DisplayElement is not null;
          case "designation":
            value = Designation;
            return Designation?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (DisplayElement is not null) yield return new KeyValuePair<string,object>("display",DisplayElement);
        if (Designation?.Any() == true) yield return new KeyValuePair<string,object>("designation",Designation);
      }

    }

    /// <summary>
    /// Additional representations for this concept
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Designation", IsNestedType=true)]
    public partial class DesignationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Designation"; } }

      /// <summary>
      /// Human language of the designation
      /// </summary>
      [FhirElement("language", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Code LanguageElement
      {
        get { return _LanguageElement; }
        set { _LanguageElement = value; OnPropertyChanged("LanguageElement"); }
      }

      private Hl7.Fhir.Model.Code _LanguageElement;

      /// <summary>
      /// Human language of the designation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Language
      {
        get { return LanguageElement != null ? LanguageElement.Value : null; }
        set
        {
          if (value == null)
            LanguageElement = null;
          else
            LanguageElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Language");
        }
      }

      /// <summary>
      /// Types of uses of designations
      /// </summary>
      [FhirElement("use", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Use
      {
        get { return _Use; }
        set { _Use = value; OnPropertyChanged("Use"); }
      }

      private Hl7.Fhir.Model.Coding _Use;

      /// <summary>
      /// The text value for this designation
      /// </summary>
      [FhirElement("value", Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The text value for this designation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DesignationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LanguageElement != null) dest.LanguageElement = (Hl7.Fhir.Model.Code)LanguageElement.DeepCopy();
        if(Use != null) dest.Use = (Hl7.Fhir.Model.Coding)Use.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DesignationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DesignationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.Matches(Use, otherT.Use)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DesignationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.IsExactly(Use, otherT.Use)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LanguageElement != null) yield return LanguageElement;
          if (Use != null) yield return Use;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LanguageElement != null) yield return new ElementValue("language", LanguageElement);
          if (Use != null) yield return new ElementValue("use", Use);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "language":
            value = LanguageElement;
            return LanguageElement is not null;
          case "use":
            value = Use;
            return Use is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LanguageElement is not null) yield return new KeyValuePair<string,object>("language",LanguageElement);
        if (Use is not null) yield return new KeyValuePair<string,object>("use",Use);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// Select codes/concepts by their properties (including relationships)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Filter", IsNestedType=true)]
    public partial class FilterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Filter"; } }

      /// <summary>
      /// A property/filter defined by the code system
      /// </summary>
      [FhirElement("property", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code PropertyElement
      {
        get { return _PropertyElement; }
        set { _PropertyElement = value; OnPropertyChanged("PropertyElement"); }
      }

      private Hl7.Fhir.Model.Code _PropertyElement;

      /// <summary>
      /// A property/filter defined by the code system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Property
      {
        get { return PropertyElement != null ? PropertyElement.Value : null; }
        set
        {
          if (value == null)
            PropertyElement = null;
          else
            PropertyElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Property");
        }
      }

      /// <summary>
      /// = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | child-of | descendent-leaf | exists
      /// </summary>
      [FhirElement("op", InSummary=true, Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.FilterOperator> OpElement
      {
        get { return _OpElement; }
        set { _OpElement = value; OnPropertyChanged("OpElement"); }
      }

      private Code<Hl7.Fhir.Model.FilterOperator> _OpElement;

      /// <summary>
      /// = | is-a | descendent-of | is-not-a | regex | in | not-in | generalizes | child-of | descendent-leaf | exists
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.FilterOperator? Op
      {
        get { return OpElement != null ? OpElement.Value : null; }
        set
        {
          if (value == null)
            OpElement = null;
          else
            OpElement = new Code<Hl7.Fhir.Model.FilterOperator>(value);
          OnPropertyChanged("Op");
        }
      }

      /// <summary>
      /// Code from the system, or regex criteria, or boolean value for exists
      /// </summary>
      [FhirElement("value", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// Code from the system, or regex criteria, or boolean value for exists
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as FilterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PropertyElement != null) dest.PropertyElement = (Hl7.Fhir.Model.Code)PropertyElement.DeepCopy();
        if(OpElement != null) dest.OpElement = (Code<Hl7.Fhir.Model.FilterOperator>)OpElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new FilterComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as FilterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PropertyElement, otherT.PropertyElement)) return false;
        if( !DeepComparable.Matches(OpElement, otherT.OpElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as FilterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PropertyElement, otherT.PropertyElement)) return false;
        if( !DeepComparable.IsExactly(OpElement, otherT.OpElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PropertyElement != null) yield return PropertyElement;
          if (OpElement != null) yield return OpElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PropertyElement != null) yield return new ElementValue("property", PropertyElement);
          if (OpElement != null) yield return new ElementValue("op", OpElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "property":
            value = PropertyElement;
            return PropertyElement is not null;
          case "op":
            value = OpElement;
            return OpElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (PropertyElement is not null) yield return new KeyValuePair<string,object>("property",PropertyElement);
        if (OpElement is not null) yield return new KeyValuePair<string,object>("op",OpElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// Used when the value set is "expanded"
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Expansion", IsNestedType=true)]
    public partial class ExpansionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Expansion"; } }

      /// <summary>
      /// Identifies the value set expansion (business identifier)
      /// </summary>
      [FhirElement("identifier", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri IdentifierElement
      {
        get { return _IdentifierElement; }
        set { _IdentifierElement = value; OnPropertyChanged("IdentifierElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _IdentifierElement;

      /// <summary>
      /// Identifies the value set expansion (business identifier)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Identifier
      {
        get { return IdentifierElement != null ? IdentifierElement.Value : null; }
        set
        {
          if (value == null)
            IdentifierElement = null;
          else
            IdentifierElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Identifier");
        }
      }

      /// <summary>
      /// Time ValueSet expansion happened
      /// </summary>
      [FhirElement("timestamp", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime TimestampElement
      {
        get { return _TimestampElement; }
        set { _TimestampElement = value; OnPropertyChanged("TimestampElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _TimestampElement;

      /// <summary>
      /// Time ValueSet expansion happened
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Timestamp
      {
        get { return TimestampElement != null ? TimestampElement.Value : null; }
        set
        {
          if (value == null)
            TimestampElement = null;
          else
            TimestampElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Timestamp");
        }
      }

      /// <summary>
      /// Total number of codes in the expansion
      /// </summary>
      [FhirElement("total", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer TotalElement
      {
        get { return _TotalElement; }
        set { _TotalElement = value; OnPropertyChanged("TotalElement"); }
      }

      private Hl7.Fhir.Model.Integer _TotalElement;

      /// <summary>
      /// Total number of codes in the expansion
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Total
      {
        get { return TotalElement != null ? TotalElement.Value : null; }
        set
        {
          if (value == null)
            TotalElement = null;
          else
            TotalElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Total");
        }
      }

      /// <summary>
      /// Offset at which this resource starts
      /// </summary>
      [FhirElement("offset", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Integer OffsetElement
      {
        get { return _OffsetElement; }
        set { _OffsetElement = value; OnPropertyChanged("OffsetElement"); }
      }

      private Hl7.Fhir.Model.Integer _OffsetElement;

      /// <summary>
      /// Offset at which this resource starts
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Offset
      {
        get { return OffsetElement != null ? OffsetElement.Value : null; }
        set
        {
          if (value == null)
            OffsetElement = null;
          else
            OffsetElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Offset");
        }
      }

      /// <summary>
      /// Parameter that controlled the expansion process
      /// </summary>
      [FhirElement("parameter", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.ParameterComponent> Parameter
      {
        get { if(_Parameter==null) _Parameter = new List<Hl7.Fhir.Model.ValueSet.ParameterComponent>(); return _Parameter; }
        set { _Parameter = value; OnPropertyChanged("Parameter"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.ParameterComponent> _Parameter;

      /// <summary>
      /// Additional information supplied about each concept
      /// </summary>
      [FhirElement("property", Order = 90, Since = FhirRelease.R5)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.PropertyComponent> Property
      {
        get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.ValueSet.PropertyComponent>(); return _Property; }
        set { _Property = value; OnPropertyChanged("Property"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.PropertyComponent> _Property;

      /// <summary>
      /// Codes in the value set
      /// </summary>
      [FhirElement("contains", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.ContainsComponent> Contains
      {
        get { if(_Contains==null) _Contains = new List<Hl7.Fhir.Model.ValueSet.ContainsComponent>(); return _Contains; }
        set { _Contains = value; OnPropertyChanged("Contains"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.ContainsComponent> _Contains;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ExpansionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(IdentifierElement != null) dest.IdentifierElement = (Hl7.Fhir.Model.FhirUri)IdentifierElement.DeepCopy();
        if(TimestampElement != null) dest.TimestampElement = (Hl7.Fhir.Model.FhirDateTime)TimestampElement.DeepCopy();
        if(TotalElement != null) dest.TotalElement = (Hl7.Fhir.Model.Integer)TotalElement.DeepCopy();
        if(OffsetElement != null) dest.OffsetElement = (Hl7.Fhir.Model.Integer)OffsetElement.DeepCopy();
        if(Parameter != null) dest.Parameter = new List<Hl7.Fhir.Model.ValueSet.ParameterComponent>(Parameter.DeepCopy());
        if(Property != null) dest.Property = new List<Hl7.Fhir.Model.ValueSet.PropertyComponent>(Property.DeepCopy());
        if(Contains != null) dest.Contains = new List<Hl7.Fhir.Model.ValueSet.ContainsComponent>(Contains.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ExpansionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ExpansionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(IdentifierElement, otherT.IdentifierElement)) return false;
        if( !DeepComparable.Matches(TimestampElement, otherT.TimestampElement)) return false;
        if( !DeepComparable.Matches(TotalElement, otherT.TotalElement)) return false;
        if( !DeepComparable.Matches(OffsetElement, otherT.OffsetElement)) return false;
        if( !DeepComparable.Matches(Parameter, otherT.Parameter)) return false;
        if( !DeepComparable.Matches(Property, otherT.Property)) return false;
        if( !DeepComparable.Matches(Contains, otherT.Contains)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ExpansionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(IdentifierElement, otherT.IdentifierElement)) return false;
        if( !DeepComparable.IsExactly(TimestampElement, otherT.TimestampElement)) return false;
        if( !DeepComparable.IsExactly(TotalElement, otherT.TotalElement)) return false;
        if( !DeepComparable.IsExactly(OffsetElement, otherT.OffsetElement)) return false;
        if( !DeepComparable.IsExactly(Parameter, otherT.Parameter)) return false;
        if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
        if( !DeepComparable.IsExactly(Contains, otherT.Contains)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (IdentifierElement != null) yield return IdentifierElement;
          if (TimestampElement != null) yield return TimestampElement;
          if (TotalElement != null) yield return TotalElement;
          if (OffsetElement != null) yield return OffsetElement;
          foreach (var elem in Parameter) { if (elem != null) yield return elem; }
          foreach (var elem in Property) { if (elem != null) yield return elem; }
          foreach (var elem in Contains) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (IdentifierElement != null) yield return new ElementValue("identifier", IdentifierElement);
          if (TimestampElement != null) yield return new ElementValue("timestamp", TimestampElement);
          if (TotalElement != null) yield return new ElementValue("total", TotalElement);
          if (OffsetElement != null) yield return new ElementValue("offset", OffsetElement);
          foreach (var elem in Parameter) { if (elem != null) yield return new ElementValue("parameter", elem); }
          foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
          foreach (var elem in Contains) { if (elem != null) yield return new ElementValue("contains", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = IdentifierElement;
            return IdentifierElement is not null;
          case "timestamp":
            value = TimestampElement;
            return TimestampElement is not null;
          case "total":
            value = TotalElement;
            return TotalElement is not null;
          case "offset":
            value = OffsetElement;
            return OffsetElement is not null;
          case "parameter":
            value = Parameter;
            return Parameter?.Any() == true;
          case "property":
            value = Property;
            return Property?.Any() == true;
          case "contains":
            value = Contains;
            return Contains?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (IdentifierElement is not null) yield return new KeyValuePair<string,object>("identifier",IdentifierElement);
        if (TimestampElement is not null) yield return new KeyValuePair<string,object>("timestamp",TimestampElement);
        if (TotalElement is not null) yield return new KeyValuePair<string,object>("total",TotalElement);
        if (OffsetElement is not null) yield return new KeyValuePair<string,object>("offset",OffsetElement);
        if (Parameter?.Any() == true) yield return new KeyValuePair<string,object>("parameter",Parameter);
        if (Property?.Any() == true) yield return new KeyValuePair<string,object>("property",Property);
        if (Contains?.Any() == true) yield return new KeyValuePair<string,object>("contains",Contains);
      }

    }

    /// <summary>
    /// Parameter that controlled the expansion process
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Parameter", IsNestedType=true)]
    public partial class ParameterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Parameter"; } }

      /// <summary>
      /// Name as assigned by the client or server
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Name as assigned by the client or server
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Value of the named parameter
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.FhirDecimal),typeof(Hl7.Fhir.Model.FhirUri),typeof(Hl7.Fhir.Model.Code),typeof(Hl7.Fhir.Model.FhirDateTime))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParameterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParameterComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParameterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParameterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Additional information supplied about each concept
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Property", IsNestedType=true)]
    public partial class PropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Property"; } }

      /// <summary>
      /// Identifies the property on the concepts, and when referred to in operations
      /// </summary>
      [FhirElement("code", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Identifies the property on the concepts, and when referred to in operations
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Formal identifier for the property
      /// </summary>
      [FhirElement("uri", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UriElement
      {
        get { return _UriElement; }
        set { _UriElement = value; OnPropertyChanged("UriElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UriElement;

      /// <summary>
      /// Formal identifier for the property
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Uri
      {
        get { return UriElement != null ? UriElement.Value : null; }
        set
        {
          if (value == null)
            UriElement = null;
          else
            UriElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Uri");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(UriElement != null) dest.UriElement = (Hl7.Fhir.Model.FhirUri)UriElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(UriElement, otherT.UriElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(UriElement, otherT.UriElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (UriElement != null) yield return UriElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (UriElement != null) yield return new ElementValue("uri", UriElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "uri":
            value = UriElement;
            return UriElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (UriElement is not null) yield return new KeyValuePair<string,object>("uri",UriElement);
      }

    }

    /// <summary>
    /// Codes in the value set
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Contains", IsNestedType=true)]
    public partial class ContainsComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Contains"; } }

      /// <summary>
      /// System value for the code
      /// </summary>
      [FhirElement("system", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri SystemElement
      {
        get { return _SystemElement; }
        set { _SystemElement = value; OnPropertyChanged("SystemElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _SystemElement;

      /// <summary>
      /// System value for the code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string System
      {
        get { return SystemElement != null ? SystemElement.Value : null; }
        set
        {
          if (value == null)
            SystemElement = null;
          else
            SystemElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("System");
        }
      }

      /// <summary>
      /// If user cannot select this entry
      /// </summary>
      [FhirElement("abstract", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AbstractElement
      {
        get { return _AbstractElement; }
        set { _AbstractElement = value; OnPropertyChanged("AbstractElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AbstractElement;

      /// <summary>
      /// If user cannot select this entry
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Abstract
      {
        get { return AbstractElement != null ? AbstractElement.Value : null; }
        set
        {
          if (value == null)
            AbstractElement = null;
          else
            AbstractElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Abstract");
        }
      }

      /// <summary>
      /// If concept is inactive in the code system
      /// </summary>
      [FhirElement("inactive", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean InactiveElement
      {
        get { return _InactiveElement; }
        set { _InactiveElement = value; OnPropertyChanged("InactiveElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _InactiveElement;

      /// <summary>
      /// If concept is inactive in the code system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Inactive
      {
        get { return InactiveElement != null ? InactiveElement.Value : null; }
        set
        {
          if (value == null)
            InactiveElement = null;
          else
            InactiveElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Inactive");
        }
      }

      /// <summary>
      /// Version in which this code/display is defined
      /// </summary>
      [FhirElement("version", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString VersionElement
      {
        get { return _VersionElement; }
        set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _VersionElement;

      /// <summary>
      /// Version in which this code/display is defined
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Version
      {
        get { return VersionElement != null ? VersionElement.Value : null; }
        set
        {
          if (value == null)
            VersionElement = null;
          else
            VersionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Version");
        }
      }

      /// <summary>
      /// Code - if blank, this is not a selectable code
      /// </summary>
      [FhirElement("code", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Code - if blank, this is not a selectable code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// User display for the concept
      /// </summary>
      [FhirElement("display", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DisplayElement
      {
        get { return _DisplayElement; }
        set { _DisplayElement = value; OnPropertyChanged("DisplayElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DisplayElement;

      /// <summary>
      /// User display for the concept
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Display
      {
        get { return DisplayElement != null ? DisplayElement.Value : null; }
        set
        {
          if (value == null)
            DisplayElement = null;
          else
            DisplayElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Display");
        }
      }

      /// <summary>
      /// Additional representations for this item
      /// </summary>
      [FhirElement("designation", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.DesignationComponent> Designation
      {
        get { if(_Designation==null) _Designation = new List<Hl7.Fhir.Model.ValueSet.DesignationComponent>(); return _Designation; }
        set { _Designation = value; OnPropertyChanged("Designation"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.DesignationComponent> _Designation;

      /// <summary>
      /// Property value for the concept
      /// </summary>
      [FhirElement("property", Order = 110, Since = FhirRelease.R5)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.ConceptPropertyComponent> Property
      {
        get { if(_Property==null) _Property = new List<Hl7.Fhir.Model.ValueSet.ConceptPropertyComponent>(); return _Property; }
        set { _Property = value; OnPropertyChanged("Property"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.ConceptPropertyComponent> _Property;

      /// <summary>
      /// Codes contained under this entry
      /// </summary>
      [FhirElement("contains", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ValueSet.ContainsComponent> Contains
      {
        get { if(_Contains==null) _Contains = new List<Hl7.Fhir.Model.ValueSet.ContainsComponent>(); return _Contains; }
        set { _Contains = value; OnPropertyChanged("Contains"); }
      }

      private List<Hl7.Fhir.Model.ValueSet.ContainsComponent> _Contains;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContainsComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SystemElement != null) dest.SystemElement = (Hl7.Fhir.Model.FhirUri)SystemElement.DeepCopy();
        if(AbstractElement != null) dest.AbstractElement = (Hl7.Fhir.Model.FhirBoolean)AbstractElement.DeepCopy();
        if(InactiveElement != null) dest.InactiveElement = (Hl7.Fhir.Model.FhirBoolean)InactiveElement.DeepCopy();
        if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(DisplayElement != null) dest.DisplayElement = (Hl7.Fhir.Model.FhirString)DisplayElement.DeepCopy();
        if(Designation != null) dest.Designation = new List<Hl7.Fhir.Model.ValueSet.DesignationComponent>(Designation.DeepCopy());
        if(Property != null) dest.Property = new List<Hl7.Fhir.Model.ValueSet.ConceptPropertyComponent>(Property.DeepCopy());
        if(Contains != null) dest.Contains = new List<Hl7.Fhir.Model.ValueSet.ContainsComponent>(Contains.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContainsComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContainsComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SystemElement, otherT.SystemElement)) return false;
        if( !DeepComparable.Matches(AbstractElement, otherT.AbstractElement)) return false;
        if( !DeepComparable.Matches(InactiveElement, otherT.InactiveElement)) return false;
        if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.Matches(Designation, otherT.Designation)) return false;
        if( !DeepComparable.Matches(Property, otherT.Property)) return false;
        if( !DeepComparable.Matches(Contains, otherT.Contains)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContainsComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SystemElement, otherT.SystemElement)) return false;
        if( !DeepComparable.IsExactly(AbstractElement, otherT.AbstractElement)) return false;
        if( !DeepComparable.IsExactly(InactiveElement, otherT.InactiveElement)) return false;
        if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(DisplayElement, otherT.DisplayElement)) return false;
        if( !DeepComparable.IsExactly(Designation, otherT.Designation)) return false;
        if( !DeepComparable.IsExactly(Property, otherT.Property)) return false;
        if( !DeepComparable.IsExactly(Contains, otherT.Contains)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SystemElement != null) yield return SystemElement;
          if (AbstractElement != null) yield return AbstractElement;
          if (InactiveElement != null) yield return InactiveElement;
          if (VersionElement != null) yield return VersionElement;
          if (CodeElement != null) yield return CodeElement;
          if (DisplayElement != null) yield return DisplayElement;
          foreach (var elem in Designation) { if (elem != null) yield return elem; }
          foreach (var elem in Property) { if (elem != null) yield return elem; }
          foreach (var elem in Contains) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SystemElement != null) yield return new ElementValue("system", SystemElement);
          if (AbstractElement != null) yield return new ElementValue("abstract", AbstractElement);
          if (InactiveElement != null) yield return new ElementValue("inactive", InactiveElement);
          if (VersionElement != null) yield return new ElementValue("version", VersionElement);
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (DisplayElement != null) yield return new ElementValue("display", DisplayElement);
          foreach (var elem in Designation) { if (elem != null) yield return new ElementValue("designation", elem); }
          foreach (var elem in Property) { if (elem != null) yield return new ElementValue("property", elem); }
          foreach (var elem in Contains) { if (elem != null) yield return new ElementValue("contains", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "system":
            value = SystemElement;
            return SystemElement is not null;
          case "abstract":
            value = AbstractElement;
            return AbstractElement is not null;
          case "inactive":
            value = InactiveElement;
            return InactiveElement is not null;
          case "version":
            value = VersionElement;
            return VersionElement is not null;
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "display":
            value = DisplayElement;
            return DisplayElement is not null;
          case "designation":
            value = Designation;
            return Designation?.Any() == true;
          case "property":
            value = Property;
            return Property?.Any() == true;
          case "contains":
            value = Contains;
            return Contains?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SystemElement is not null) yield return new KeyValuePair<string,object>("system",SystemElement);
        if (AbstractElement is not null) yield return new KeyValuePair<string,object>("abstract",AbstractElement);
        if (InactiveElement is not null) yield return new KeyValuePair<string,object>("inactive",InactiveElement);
        if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (DisplayElement is not null) yield return new KeyValuePair<string,object>("display",DisplayElement);
        if (Designation?.Any() == true) yield return new KeyValuePair<string,object>("designation",Designation);
        if (Property?.Any() == true) yield return new KeyValuePair<string,object>("property",Property);
        if (Contains?.Any() == true) yield return new KeyValuePair<string,object>("contains",Contains);
      }

    }

    /// <summary>
    /// Property value for the concept
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#ConceptProperty", IsNestedType=true)]
    public partial class ConceptPropertyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#ConceptProperty"; } }

      /// <summary>
      /// Reference to ValueSet.expansion.property.code
      /// </summary>
      [FhirElement("code", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Hl7.Fhir.Model.Code _CodeElement;

      /// <summary>
      /// Reference to ValueSet.expansion.property.code
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Value of the property for this concept
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Code),typeof(Hl7.Fhir.Model.Coding),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Integer),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.FhirDecimal))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConceptPropertyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConceptPropertyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConceptPropertyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConceptPropertyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Description of the semantic space the Value Set Expansion is intended to cover
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ValueSet#Scope", IsNestedType=true)]
    public partial class ScopeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ValueSet#Scope"; } }

      /// <summary>
      /// General focus of the Value Set as it relates to the intended semantic space
      /// </summary>
      [FhirElement("focus", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString FocusElement
      {
        get { return _FocusElement; }
        set { _FocusElement = value; OnPropertyChanged("FocusElement"); }
      }

      private Hl7.Fhir.Model.FhirString _FocusElement;

      /// <summary>
      /// General focus of the Value Set as it relates to the intended semantic space
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Focus
      {
        get { return FocusElement != null ? FocusElement.Value : null; }
        set
        {
          if (value == null)
            FocusElement = null;
          else
            FocusElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Focus");
        }
      }

      /// <summary>
      /// Criteria describing which concepts or codes should be included and why
      /// </summary>
      [FhirElement("inclusionCriteria", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString InclusionCriteriaElement
      {
        get { return _InclusionCriteriaElement; }
        set { _InclusionCriteriaElement = value; OnPropertyChanged("InclusionCriteriaElement"); }
      }

      private Hl7.Fhir.Model.FhirString _InclusionCriteriaElement;

      /// <summary>
      /// Criteria describing which concepts or codes should be included and why
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string InclusionCriteria
      {
        get { return InclusionCriteriaElement != null ? InclusionCriteriaElement.Value : null; }
        set
        {
          if (value == null)
            InclusionCriteriaElement = null;
          else
            InclusionCriteriaElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("InclusionCriteria");
        }
      }

      /// <summary>
      /// Criteria describing which concepts or codes should be excluded and why
      /// </summary>
      [FhirElement("exclusionCriteria", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ExclusionCriteriaElement
      {
        get { return _ExclusionCriteriaElement; }
        set { _ExclusionCriteriaElement = value; OnPropertyChanged("ExclusionCriteriaElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ExclusionCriteriaElement;

      /// <summary>
      /// Criteria describing which concepts or codes should be excluded and why
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ExclusionCriteria
      {
        get { return ExclusionCriteriaElement != null ? ExclusionCriteriaElement.Value : null; }
        set
        {
          if (value == null)
            ExclusionCriteriaElement = null;
          else
            ExclusionCriteriaElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("ExclusionCriteria");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ScopeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(FocusElement != null) dest.FocusElement = (Hl7.Fhir.Model.FhirString)FocusElement.DeepCopy();
        if(InclusionCriteriaElement != null) dest.InclusionCriteriaElement = (Hl7.Fhir.Model.FhirString)InclusionCriteriaElement.DeepCopy();
        if(ExclusionCriteriaElement != null) dest.ExclusionCriteriaElement = (Hl7.Fhir.Model.FhirString)ExclusionCriteriaElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ScopeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ScopeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(FocusElement, otherT.FocusElement)) return false;
        if( !DeepComparable.Matches(InclusionCriteriaElement, otherT.InclusionCriteriaElement)) return false;
        if( !DeepComparable.Matches(ExclusionCriteriaElement, otherT.ExclusionCriteriaElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ScopeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(FocusElement, otherT.FocusElement)) return false;
        if( !DeepComparable.IsExactly(InclusionCriteriaElement, otherT.InclusionCriteriaElement)) return false;
        if( !DeepComparable.IsExactly(ExclusionCriteriaElement, otherT.ExclusionCriteriaElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (FocusElement != null) yield return FocusElement;
          if (InclusionCriteriaElement != null) yield return InclusionCriteriaElement;
          if (ExclusionCriteriaElement != null) yield return ExclusionCriteriaElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (FocusElement != null) yield return new ElementValue("focus", FocusElement);
          if (InclusionCriteriaElement != null) yield return new ElementValue("inclusionCriteria", InclusionCriteriaElement);
          if (ExclusionCriteriaElement != null) yield return new ElementValue("exclusionCriteria", ExclusionCriteriaElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "focus":
            value = FocusElement;
            return FocusElement is not null;
          case "inclusionCriteria":
            value = InclusionCriteriaElement;
            return InclusionCriteriaElement is not null;
          case "exclusionCriteria":
            value = ExclusionCriteriaElement;
            return ExclusionCriteriaElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (FocusElement is not null) yield return new KeyValuePair<string,object>("focus",FocusElement);
        if (InclusionCriteriaElement is not null) yield return new KeyValuePair<string,object>("inclusionCriteria",InclusionCriteriaElement);
        if (ExclusionCriteriaElement is not null) yield return new KeyValuePair<string,object>("exclusionCriteria",ExclusionCriteriaElement);
      }

    }

    /// <summary>
    /// Canonical identifier for this value set, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this value set, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the value set (business identifier)
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the value set
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the value set
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this value set (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this value set (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this value set (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this value set (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=140, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=150, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=160, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=170, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the value set
    /// </summary>
    [FhirElement("description", Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for value set (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Indicates whether or not any change to the content logical definition may occur
    /// </summary>
    [FhirElement("immutable", InSummary=true, Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ImmutableElement
    {
      get { return _ImmutableElement; }
      set { _ImmutableElement = value; OnPropertyChanged("ImmutableElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ImmutableElement;

    /// <summary>
    /// Indicates whether or not any change to the content logical definition may occur
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Immutable
    {
      get { return ImmutableElement != null ? ImmutableElement.Value : null; }
      set
      {
        if (value == null)
          ImmutableElement = null;
        else
          ImmutableElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Immutable");
      }
    }

    /// <summary>
    /// Why this value set is defined
    /// </summary>
    [FhirElement("purpose", Order=230, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Purpose
    {
      get { return _Purpose; }
      set { _Purpose = value; OnPropertyChanged("Purpose"); }
    }

    private Hl7.Fhir.Model.Markdown _Purpose;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Copyright
    {
      get { return _Copyright; }
      set { _Copyright = value; OnPropertyChanged("Copyright"); }
    }

    private Hl7.Fhir.Model.Markdown _Copyright;

    /// <summary>
    /// Content logical definition of the value set (CLD)
    /// </summary>
    [FhirElement("compose", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.ValueSet.ComposeComponent Compose
    {
      get { return _Compose; }
      set { _Compose = value; OnPropertyChanged("Compose"); }
    }

    private Hl7.Fhir.Model.ValueSet.ComposeComponent _Compose;

    /// <summary>
    /// Used when the value set is "expanded"
    /// </summary>
    [FhirElement("expansion", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.ValueSet.ExpansionComponent Expansion
    {
      get { return _Expansion; }
      set { _Expansion = value; OnPropertyChanged("Expansion"); }
    }

    private Hl7.Fhir.Model.ValueSet.ExpansionComponent _Expansion;

    /// <summary>
    /// Description of the semantic space the Value Set Expansion is intended to cover
    /// </summary>
    [FhirElement("scope", Order=270, Since = FhirRelease.R5)]
    [DataMember]
    public Hl7.Fhir.Model.ValueSet.ScopeComponent Scope
    {
      get { return _Scope; }
      set { _Scope = value; OnPropertyChanged("Scope"); }
    }

    private Hl7.Fhir.Model.ValueSet.ScopeComponent _Scope;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ValueSet;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(ImmutableElement != null) dest.ImmutableElement = (Hl7.Fhir.Model.FhirBoolean)ImmutableElement.DeepCopy();
      if(Purpose != null) dest.Purpose = (Hl7.Fhir.Model.Markdown)Purpose.DeepCopy();
      if(Copyright != null) dest.Copyright = (Hl7.Fhir.Model.Markdown)Copyright.DeepCopy();
      if(Compose != null) dest.Compose = (Hl7.Fhir.Model.ValueSet.ComposeComponent)Compose.DeepCopy();
      if(Expansion != null) dest.Expansion = (Hl7.Fhir.Model.ValueSet.ExpansionComponent)Expansion.DeepCopy();
      if(Scope != null) dest.Scope = (Hl7.Fhir.Model.ValueSet.ScopeComponent)Scope.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ValueSet());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ValueSet;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(ImmutableElement, otherT.ImmutableElement)) return false;
      if( !DeepComparable.Matches(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.Matches(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.Matches(Compose, otherT.Compose)) return false;
      if( !DeepComparable.Matches(Expansion, otherT.Expansion)) return false;
      if( !DeepComparable.Matches(Scope, otherT.Scope)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ValueSet;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(ImmutableElement, otherT.ImmutableElement)) return false;
      if( !DeepComparable.IsExactly(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.IsExactly(Copyright, otherT.Copyright)) return false;
      if( !DeepComparable.IsExactly(Compose, otherT.Compose)) return false;
      if( !DeepComparable.IsExactly(Expansion, otherT.Expansion)) return false;
      if( !DeepComparable.IsExactly(Scope, otherT.Scope)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (Description != null) yield return Description;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (ImmutableElement != null) yield return ImmutableElement;
        if (Purpose != null) yield return Purpose;
        if (Copyright != null) yield return Copyright;
        if (Compose != null) yield return Compose;
        if (Expansion != null) yield return Expansion;
        if (Scope != null) yield return Scope;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (ImmutableElement != null) yield return new ElementValue("immutable", ImmutableElement);
        if (Purpose != null) yield return new ElementValue("purpose", Purpose);
        if (Copyright != null) yield return new ElementValue("copyright", Copyright);
        if (Compose != null) yield return new ElementValue("compose", Compose);
        if (Expansion != null) yield return new ElementValue("expansion", Expansion);
        if (Scope != null) yield return new ElementValue("scope", Scope);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = Description;
          return Description is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "immutable":
          value = ImmutableElement;
          return ImmutableElement is not null;
        case "purpose":
          value = Purpose;
          return Purpose is not null;
        case "copyright":
          value = Copyright;
          return Copyright is not null;
        case "compose":
          value = Compose;
          return Compose is not null;
        case "expansion":
          value = Expansion;
          return Expansion is not null;
        case "scope":
          value = Scope;
          return Scope is not null;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (ImmutableElement is not null) yield return new KeyValuePair<string,object>("immutable",ImmutableElement);
      if (Purpose is not null) yield return new KeyValuePair<string,object>("purpose",Purpose);
      if (Copyright is not null) yield return new KeyValuePair<string,object>("copyright",Copyright);
      if (Compose is not null) yield return new KeyValuePair<string,object>("compose",Compose);
      if (Expansion is not null) yield return new KeyValuePair<string,object>("expansion",Expansion);
      if (Scope is not null) yield return new KeyValuePair<string,object>("scope",Scope);
    }

  }

}

// end of file

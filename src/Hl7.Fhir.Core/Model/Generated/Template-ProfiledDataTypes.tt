<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	var manager = TemplateFileManager.Create(this);

	// Load in the Source definitions from the XML documents
	System.Xml.XmlDocument docResources = new	System.Xml.XmlDocument();
    docResources.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\profiles-types.xml");
    System.Xml.XmlNamespaceManager nsR = new System.Xml.XmlNamespaceManager(docResources.NameTable);
    nsR.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docRealResources = new	System.Xml.XmlDocument();
    docRealResources.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\profiles-resources.xml");
    System.Xml.XmlNamespaceManager nsRR = new System.Xml.XmlNamespaceManager(docRealResources.NameTable);
    nsRR.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docExpansions = new	System.Xml.XmlDocument();
    docExpansions.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\expansions.xml");
    System.Xml.XmlNamespaceManager nsE = new System.Xml.XmlNamespaceManager(docExpansions.NameTable);
    nsE.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docTypes = new	System.Xml.XmlDocument();
    docTypes.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\profiles-types.xml");
    System.Xml.XmlNamespaceManager nsT = new System.Xml.XmlNamespaceManager(docTypes.NameTable);
    nsT.AddNamespace("fhir", "http://hl7.org/fhir");

	string fhirVersion = docResources.SelectSingleNode("//fhir:fhirVersion/@value", nsE).Value;
	// string fhirVersion = "1.0.2";
#>
//
// Model Generated on <#= DateTime.Now.ToString("R") #> for FHIR v<#= fhirVersion #>
//
<#
	Dictionary<string, string> enums = new Dictionary<string, string>();
	System.Collections.Generic.List<string> generatedSets = new System.Collections.Generic.List<string>();
	foreach (System.Xml.XmlElement valueset in docExpansions.SelectNodes(
		"/fhir:Bundle/fhir:entry/fhir:resource/fhir:ValueSet", nsE))
    {
		if (valueset != null)
		{
			string enumName = valueset.SelectSingleNode("fhir:name/@value", nsE).InnerText;
			string valuesetDescription = valueset.SelectSingleNode("fhir:description/@value", nsE).InnerText;
			string valuesetUrl = valueset.SelectSingleNode("fhir:url/@value", nsE).Value;
			// reformat the name so that it is a valid .NET enumeration name
			enumName = enumName.Replace(" ", "").Replace("-", "_");

			// Check to see if this is used in more than one resource
			var nodes = docRealResources.DocumentElement.SelectNodes(
				"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding[fhir:strength/@value = 'required' and fhir:valueSetReference/fhir:reference/@value = '"+valuesetUrl+"']]]", nsR);
			var nodesTypes = docTypes.DocumentElement.SelectNodes(
				"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding[fhir:strength/@value = 'required' and fhir:valueSetReference/fhir:reference/@value = '"+valuesetUrl+"']]]", nsT);
			var nodePaths = docResources.DocumentElement.SelectNodes(
				"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition/fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding[fhir:strength/@value = 'required' and fhir:valueSetReference/fhir:reference/@value = '"+valuesetUrl+"']]", nsR);
			var nodePathTypes = docTypes.DocumentElement.SelectNodes(
				"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition/fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding[fhir:strength/@value = 'required' and fhir:valueSetReference/fhir:reference/@value = '"+valuesetUrl+"']]", nsT);
			if (nodes.Count + nodesTypes.Count > 1)
			{
				enums.Add(valuesetUrl, "Hl7.Fhir.Model." + enumName);
				generatedSets.Add(enumName);
				WriteLine("// Generated Shared Enumeration: " + enumName);
				// foreach (XmlElement node in nodePaths)
                // {
				// 	WriteLine("	// Used in model class (resource): " + node.SelectSingleNode("fhir:path/@value", nsR).Value);
                // }
				foreach (XmlElement node in nodePathTypes)
                {
					WriteLine("	// Used in model class (type): " + node.SelectSingleNode("fhir:path/@value", nsR).Value);
                }
				WriteLine("");
            }
		}
    }

	foreach (System.Xml.XmlNode e in docResources.DocumentElement.SelectNodes(
		"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:baseDefinition/@value = 'http://hl7.org/fhir/StructureDefinition/Quantity']", nsR))
    {
		if (e is System.Xml.XmlElement)
        {
			var resourceName = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value;
			string resourceDescription = "";
			string rawResourceName = resourceName;
			string primitiveTypeName = null;
			bool isConstraintProfile = ((e as System.Xml.XmlElement).SelectSingleNode("fhir:derivation[@value='constraint']", nsR) != null);

			if ((e as System.Xml.XmlElement).SelectSingleNode("fhir:differential/fhir:element[fhir:path/@value='"+rawResourceName+"']/fhir:short/@value", nsR) != null)
				resourceDescription = (e as System.Xml.XmlElement).SelectSingleNode("fhir:differential/fhir:element[fhir:path/@value='"+rawResourceName+"']/fhir:short/@value", nsR).Value;
			manager.StartNewFile(resourceName + ".cs");

			string resourceBaseType = "Hl7.Fhir.Model.DomainResource";
			bool isPrimitive = false;
			if((e as System.Xml.XmlElement).SelectSingleNode("fhir:baseDefinition/@value", nsR) != null)
            {
				var definedBaseType = (e as System.Xml.XmlElement).SelectSingleNode("fhir:baseDefinition/@value", nsR).Value;
				resourceBaseType = definedBaseType;
				if (resourceBaseType == "http://hl7.org/fhir/StructureDefinition/Element")
                {
					if (rawResourceName.Substring(0,1).ToLower() == rawResourceName.Substring(0,1))
                    {
						resourceBaseType = "Hl7.Fhir.Model.Primitive<" + primitiveTypeName + ">";
						// isPrimitive = true;
                    }
					else
						resourceBaseType = "Hl7.Fhir.Model.Element";
                }
				else
					resourceBaseType = "Hl7.Fhir.Model.Primitive<" + primitiveTypeName + ">";
				if (resourceBaseType == "Hl7.Fhir.Model.Quantity")
					continue;
            }

			if ((e as System.Xml.XmlElement).SelectSingleNode("fhir:differential/fhir:element[fhir:path/@value='"+rawResourceName+"']/fhir:short/@value", nsR) != null)
				resourceDescription = (e as System.Xml.XmlElement).SelectSingleNode("fhir:differential/fhir:element[fhir:path/@value='"+rawResourceName+"']/fhir:short/@value", nsR).Value;
#>
using System;
using System.Collections.Generic;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Validation;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Utility;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  

*/

//
// Generated for FHIR v<#= fhirVersion #>
//
namespace Hl7.Fhir.Model
{
<# if (!string.IsNullOrEmpty(resourceDescription)) { #>    /// <summary>
    /// <#= resourceDescription.Replace("&", "&amp;") #>
    /// </summary>
<# } 
#>    [FhirType("<#= isConstraintProfile ? "Quantity" : rawResourceName #>")]
    public partial class <#= resourceName #> : Quantity
    {
        [NotMapped]
        public override string TypeName { get { return "<#= rawResourceName #>"; } }
        
        public override IDeepCopyable DeepCopy()
        {
            return CopyTo(new <#= resourceName #>());
        }
        
        // TODO: Add code to enforce these constraints:
<#
   			if ((e as System.Xml.XmlElement).SelectSingleNode("fhir:differential/fhir:element/fhir:definition/@value", nsR) != null)
            {
#>
        // * <#= (e as System.Xml.XmlElement).SelectSingleNode("fhir:differential/fhir:element/fhir:definition/@value", nsR).Value #>
<#
            }
#>    }
}
<#
        }
	}
	manager.Process();
#>

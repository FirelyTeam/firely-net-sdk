<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using Hl7.Fhir.Introspection;
using System.ComponentModel;
/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

//
// Generated on Tue, Sep 1, 2015 21:04+1000 for FHIR v1.0.0
//
<#
	// Notes: Brian/Ewout
	// canonical URL into an attribute

	// Load in the Source definitions from the XML documents
	System.Xml.XmlDocument docResources = new	System.Xml.XmlDocument();
    docResources.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\profiles-resources.xml");
    System.Xml.XmlNamespaceManager nsR = new System.Xml.XmlNamespaceManager(docResources.NameTable);
    nsR.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docExpansions = new	System.Xml.XmlDocument();
    docExpansions.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\expansions.xml");
    System.Xml.XmlNamespaceManager nsE = new System.Xml.XmlNamespaceManager(docExpansions.NameTable);
    nsE.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docTypes = new	System.Xml.XmlDocument();
    docTypes.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\profiles-types.xml");
    System.Xml.XmlNamespaceManager nsT = new System.Xml.XmlNamespaceManager(docTypes.NameTable);
    nsT.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Collections.Generic.List<string> generatedSets = new System.Collections.Generic.List<string>();
#>
namespace Hl7.Fhir.Model
{

<#
	var nodesResources = docResources.DocumentElement.SelectNodes(
		"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding/fhir:strength/@value='required']]", nsR);
	var nodesTypesRoot = docTypes.DocumentElement.SelectNodes(
		"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding/fhir:strength/@value='required']]", nsT);
	List<System.Xml.XmlNode> allTypes = new List<System.Xml.XmlNode>();
	foreach (System.Xml.XmlNode item in nodesResources)
		allTypes.Add(item);
	foreach (System.Xml.XmlNode item in nodesTypesRoot)
		allTypes.Add(item);

	foreach (System.Xml.XmlNode e in allTypes)
    {
		if (e is System.Xml.XmlElement)
        {
			var n = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR);
			// WriteLine("// " + n.Value);

			foreach (System.Xml.XmlNode eProp in 
				(e as System.Xml.XmlElement).SelectNodes( //and fhir:min/@value = '1' and fhir:max/@value = '1' 
				"fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding]", nsR))
			{
				if (eProp is System.Xml.XmlElement)
				{
					var n2 = (eProp as System.Xml.XmlElement).SelectSingleNode("fhir:path/@value", nsR);
					// if (n2.Value.EndsWith("language"))
					//	continue;
					// WriteLine("//		" + n2.Value);
					string valuesetUrl = null;
					var n3 = (eProp as System.Xml.XmlElement).SelectSingleNode("fhir:binding/fhir:valueSetUri/@value", nsR);
					if (n3 != null)
                    {
						// WriteLine("//		VSU: " + n3.Value);
						valuesetUrl = n3.Value;
                    }
					var n4 = (eProp as System.Xml.XmlElement).SelectSingleNode("fhir:binding/fhir:valueSetReference/fhir:reference/@value", nsR);
					if (n4 != null)
                    {
						// WriteLine("//		VSR: " + n4.Value);
						valuesetUrl = n4.Value;
                    }

					var nodes = docResources.DocumentElement.SelectNodes(
						"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding[fhir:strength/@value = 'required' and fhir:valueSetReference/fhir:reference/@value = '"+valuesetUrl+"']]]", nsR);
					var nodesTypes = docTypes.DocumentElement.SelectNodes(
						"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:differential/fhir:element[fhir:type/fhir:code/@value = 'code' and fhir:binding[fhir:strength/@value = 'required' and fhir:valueSetReference/fhir:reference/@value = '"+valuesetUrl+"']]]", nsT);
					if (nodes.Count + nodesTypes.Count < 2)
						continue;

					System.Xml.XmlElement valueset = docExpansions.SelectSingleNode(
						"/fhir:Bundle/fhir:entry/fhir:resource/fhir:ValueSet[fhir:url/@value = '"+valuesetUrl+"']", nsE)
						 as System.Xml.XmlElement;
					if (valueset != null)
                    {
					string enumName = valueset.SelectSingleNode("fhir:name/@value", nsE).InnerText;
					string valuesetDescription = valueset.SelectSingleNode("fhir:description/@value", nsE).InnerText;
					
					// reformat the name so that it is a valid .NET enumeration name
					enumName = enumName.Replace(" ", "").Replace("-", "_");

					if (generatedSets.Contains(enumName))
						continue;
					generatedSets.Add(enumName);
					if (enumName == "ParameterTypesusedinOperationDefinitions")
                    {
					//	WriteLine("// TODO: the enumeration ParameterTypesusedinOperationDefinitions contains an expansion that has duplicates");
					//	continue;
                    }
#>
    /// <summary>
    /// <#= valuesetDescription.Replace("\r\n", "\n").Replace("\n\n", "\n").Replace("\n", "\r\n    /// ") #>
    /// (url: <#= valuesetUrl #>)
    /// </summary>
    [FhirEnumeration("<#= enumName #>")]
    public enum <#= enumName #>
    {
<#
	System.Collections.Generic.List<string> codedValues = new System.Collections.Generic.List<string>();
	
	foreach (System.Xml.XmlElement eval in valueset.SelectNodes("fhir:expansion/fhir:contains", nsE))
    {
		string system = eval.SelectSingleNode("fhir:system/@value", nsE).Value;
		string code = eval.SelectSingleNode("fhir:code/@value", nsE).Value;

		if (codedValues.Contains(ConvertEnumValue(code))) // system + "#" + code))
			continue;
		codedValues.Add(ConvertEnumValue(code)); // system + "#" + code);

		string display = eval.SelectSingleNode("fhir:display/@value", nsE).Value;
		string defintion = "MISSING DESCRIPTION";
		if (valueset.SelectSingleNode("fhir:codeSystem[fhir:system/@value = '"+system+"']/fhir:concept[fhir:code/@value = '"+code+"']/fhir:definition/@value", nsE) != null)
			defintion = valueset.SelectSingleNode("fhir:codeSystem[fhir:system/@value = '"+system+"']/fhir:concept[fhir:code/@value = '"+code+"']/fhir:definition/@value", nsE).Value;
		if (defintion == "MISSING DESCRIPTION" && valueset.SelectSingleNode("fhir:codeSystem[fhir:system/@value = '"+system+"']/fhir:concept/fhir:concept[fhir:code/@value = '"+code+"']/fhir:definition/@value", nsE) != null)
			defintion = valueset.SelectSingleNode("fhir:codeSystem[fhir:system/@value = '"+system+"']/fhir:concept/fhir:concept[fhir:code/@value = '"+code+"']/fhir:definition/@value", nsE).Value;
		if (string.IsNullOrEmpty(defintion))
			defintion = "MISSING DESCRIPTION";
#>
        /// <summary>
        /// <#= defintion.Replace("\r", "\n").Replace("\n\n", "\n").Replace("<", "&lt;").Replace(">", "&gt;").Replace("\n", "<br/>\r\n        /// ") #><br/>
        /// (system: <#= system #>)
        /// </summary>
        [EnumLiteral("<#= code #>"), Description("<#= display #>")]
        <#= ConvertEnumValue(code) #>,
<#
    }
#>
    }

<#					}
                }
			}
        }
    }
#>
}
<#+

	// convert the name into a valid Enum Value
	string ConvertEnumValue(string name)
	{
		if (name.StartsWith("_"))
			name = name.Substring(1);
		if (name == "=")
			return "Equal";
		if (name == "<")
			return "LessThan";
		if (name == "<=")
			return "LessOrEqual";
		if (name == ">=")
			return "GreaterOrEqual";
		if (name == ">")
			return "GreaterThan";
		string[] bits = name.Split(new char[] {' ', '-'});
		string result = null;
		foreach (var bit in bits)
        {
			result += bit.Substring(0, 1).ToUpper();
			result += bit.Substring(1);
        }
		int IsIntegerValue;
		if (int.TryParse(result, out IsIntegerValue))
			result = "N" + result;
		return result;
	}

#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#+
	// [WMR 20160818] NEW - Recursively yield all child elements, including elements inherited from base resource(s)

	public void YieldChildren(System.Xml.XmlDocument docBaseTypes, System.Xml.XmlElement structDefElem, System.Xml.XmlNamespaceManager nsR, 
		Dictionary<string, string> enums, string indent, bool withName)
	{
		// only emit local properties, the base class will be called to enumerate their children first
		var resourceName = structDefElem.SelectSingleNode("fhir:name/@value", nsR).Value;
		List<PropertyDetails> props = new List<PropertyDetails>();
		foreach (System.Xml.XmlElement element in structDefElem.SelectNodes("fhir:differential/fhir:element", nsR))
		{
			PropertyDetails pd = PropertyDetails.Parse(resourceName, element, nsR, enums);
			YieldChild(pd, indent, withName);
		}
	}

	public void YieldComponent(System.Xml.XmlDocument docBaseTypes, string componentName, string componentType, 
		List<PropertyDetails> component, System.Xml.XmlNamespaceManager nsR, Dictionary<string, string> enums, string indent, bool withName)
	{
		// only emit local properties, the base class will be called to enumerate their children first
		// WriteLine("{0}// {1} elements", indent, componentName);
        foreach (PropertyDetails pd in component)
        {
            YieldChild(pd, indent, withName);
        }
	}

	public void YieldChild(PropertyDetails pd, string indent, bool withName)
	{
			if (pd == null) { }
			// Exclude special properties encoded as Xml attributes (Element.Id) - not derived from Base
			else if (pd.isXmlAttribute) { }
			else if (pd.IsMultiCard())
			{
				if(withName)
					WriteLine("{0}foreach (var elem in {1}) {{ if (elem != null) yield return new ElementValue(\"{2}\", true, elem); }}", indent, pd.Name, pd.FhirName);
				else
					WriteLine("{0}foreach (var elem in {1}) {{ if (elem != null) yield return elem; }}", indent, pd.Name);
			}
			else
			{
				if(withName)
					WriteLine("{0}if ({1} != null) yield return new ElementValue(\"{2}\", false, {1});", indent, pd.Name, pd.FhirName);
				else
					WriteLine("{0}if ({1} != null) yield return {1};", indent, pd.Name);
			}
	}
#>
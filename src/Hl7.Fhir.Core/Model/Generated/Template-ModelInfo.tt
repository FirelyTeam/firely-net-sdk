<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq"#>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#
	// Load in the Source definitions from the XML documents
	System.Xml.XmlDocument docResources = new	System.Xml.XmlDocument();
    docResources.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\profiles-resources.xml");
    System.Xml.XmlNamespaceManager nsR = new System.Xml.XmlNamespaceManager(docResources.NameTable);
    nsR.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docExpansions = new	System.Xml.XmlDocument();
    docExpansions.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\expansions.xml");
    System.Xml.XmlNamespaceManager nsE = new System.Xml.XmlNamespaceManager(docExpansions.NameTable);
    nsE.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docTypes = new	System.Xml.XmlDocument();
    docTypes.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\profiles-types.xml");
    System.Xml.XmlNamespaceManager nsT = new System.Xml.XmlNamespaceManager(docTypes.NameTable);
    nsT.AddNamespace("fhir", "http://hl7.org/fhir");

	System.Xml.XmlDocument docSearch = new	System.Xml.XmlDocument();
    docSearch.Load(System.IO.Path.GetDirectoryName(this.Host.TemplateFile) + "\\..\\Source\\search-parameters.xml");
    System.Xml.XmlNamespaceManager nsS = new System.Xml.XmlNamespaceManager(docSearch.NameTable);
    nsS.AddNamespace("fhir", "http://hl7.org/fhir");

	string fhirVersion = docResources.SelectSingleNode("//fhir:fhirVersion/@value", nsE).Value;

	XmlNodeList nodeResources = docResources.DocumentElement.SelectNodes(
		"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:kind/@value != 'logical']", nsR);

	List<System.Xml.XmlElement> sortedResources = new List<System.Xml.XmlElement>();
	foreach (System.Xml.XmlElement e in nodeResources)
		sortedResources.Add(e);
	sortedResources.Sort((a, b)=> string.Compare((a as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value, (b as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value));

	XmlNodeList nodeTypes = docTypes.DocumentElement.SelectNodes(
		"/fhir:Bundle/fhir:entry/fhir:resource/fhir:StructureDefinition[fhir:kind/@value != 'logical']", nsR);

	List<System.Xml.XmlElement> sortedTypes = new List<System.Xml.XmlElement>();
	foreach (System.Xml.XmlElement e in nodeTypes)
		sortedTypes.Add(e);
	sortedTypes.Sort((a, b)=> string.Compare(
			(a as System.Xml.XmlElement).SelectSingleNode("fhir:baseDefinition/@value", nsR) != null && (a as System.Xml.XmlElement).SelectSingleNode("fhir:baseDefinition/@value", nsR).Value == "http://hl7.org/fhir/StructureDefinition/Element" ? "1ob-" : "dt-" + (a as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value, 
			(b as System.Xml.XmlElement).SelectSingleNode("fhir:baseDefinition/@value", nsR) != null && (b as System.Xml.XmlElement).SelectSingleNode("fhir:baseDefinition/@value", nsR).Value == "http://hl7.org/fhir/StructureDefinition/Element" ? "1ob-" : "dt-" + (b as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value));
	sortedTypes.Sort((a, b)=> string.Compare((a as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value, (b as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value));

	XmlElement elemConformance = docResources.DocumentElement.SelectSingleNode("/fhir:Bundle/fhir:entry/fhir:resource/fhir:Conformance", nsR) as XmlElement;
#>
using System;
using System.Collections.Generic;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Validation;
using System.Linq;
using System.Runtime.Serialization;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  

*/

//
// Generated on <#= DateTime.Now.ToString("R") #> for FHIR v<#= fhirVersion #>
//

using Hl7.Fhir.Model;

namespace Hl7.Fhir.Model
{
    /*
    * A class with methods to retrieve information about the
    * FHIR definitions based on which this assembly was generated.
    */
    public static partial class ModelInfo
    {
        public static List<string> SupportedResources = 
            new List<string>
            {
<#
	foreach (System.Xml.XmlNode e in sortedResources)
    {
		if (e is System.Xml.XmlElement)
        {
			var resourceName = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value;
			if (resourceName == "Resource" || resourceName == "DomainResource")
				continue;

#>                "<#= resourceName #>",
<#
        }
    }
#>
            };
        
        public static string Version
        {
            get { return "<#= fhirVersion #>"; }
        }
        
        public static Dictionary<string,Type> FhirTypeToCsType =
            new Dictionary<string,Type>()
            {
<#
	foreach (System.Xml.XmlNode e in sortedTypes)
    {
		if (e is System.Xml.XmlElement)
        {
			var resourceName = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value;
			//if(resourceName == "xhtml") continue;

#>                { "<#= resourceName #>", typeof(<#= ConvertPropertyType(resourceName, e as XmlElement, nsR) #>) },
<#
        }
    }
#>

<#
	foreach (System.Xml.XmlNode e in sortedResources)
    {
		if (e is System.Xml.XmlElement)
        {
			var resourceName = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value;

#>                { "<#= resourceName #>", typeof(Hl7.Fhir.Model.<#= resourceName #>) },
<#
        }
    }
#>
            };
        
        public static Dictionary<Type,string> FhirCsTypeToString =
            new Dictionary<Type,string>()
            {
<#
	foreach (System.Xml.XmlNode e in sortedTypes)
    {
		if (e is System.Xml.XmlElement)
        {
			var resourceName = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value;
			//if (resourceName == "xhtml") continue;

#>                { typeof(<#= ConvertPropertyType(resourceName, e as XmlElement, nsR) #>), "<#= resourceName #>" },
<#
        }
    }
#>

<#
	foreach (System.Xml.XmlNode e in sortedResources)
    {
		if (e is System.Xml.XmlElement)
        {
			var resourceName = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value;
			// if (resourceName == "Resource" || resourceName == "DomainResource")
			// 	continue;

#>                { typeof(Hl7.Fhir.Model.<#= resourceName #>), "<#= resourceName #>" },
<#
        }
    }
#>
            };
        
		// http://build.fhir.org/searchparameter-registry.html
        public static List<SearchParamDefinition> SearchParameters = 
            new List<SearchParamDefinition>
            {
<#
	foreach (System.Xml.XmlNode e in sortedResources)
    {
		if (e is System.Xml.XmlElement)
        {
			var resourceName = (e as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value;
			if (resourceName == "Resource" || resourceName == "DomainResource")
				continue;

			List<System.Xml.XmlElement> sortedSPs = new List<System.Xml.XmlElement>();
			foreach (System.Xml.XmlElement e2 in docSearch.DocumentElement.SelectNodes("/fhir:Bundle/fhir:entry/fhir:resource/fhir:SearchParameter[fhir:base/@value = '" + resourceName +"']", nsS))
				sortedSPs.Add(e2);
			// sortedSPs.Sort((a, b)=> string.Compare((a as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value, (b as System.Xml.XmlElement).SelectSingleNode("fhir:name/@value", nsR).Value));

			foreach (XmlElement sp in sortedSPs)
            {
				string name = sp.SelectSingleNode("fhir:name/@value", nsS).Value;
				string url = sp.SelectSingleNode("fhir:url/@value", nsS).Value;
				string description = sp.SelectSingleNode("fhir:description/@value", nsS).Value;
				if (description.StartsWith("Multiple"))
					description = "";
				string searchType = sp.SelectSingleNode("fhir:type/@value", nsS).Value;
				string outputType = "";
				switch (searchType)
                {
					case "number" : outputType = "Number"; break;
					case "date" : outputType = "Date"; break;
					case "string" : outputType = "String"; break;
					case "token" : outputType = "Token"; break;
					case "reference" : outputType = "Reference"; break;
					case "composite" : outputType = "Composite"; break;
					case "quantity" : outputType = "Quantity"; break;
					case "uri" : outputType = "Uri"; break;
                }
				string path = ""; // "ResourceType.Patient, ";
				string xpath= "";
				foreach(XmlAttribute et in sp.SelectNodes("fhir:xpath/@value", nsS))
                {
					xpath = et.Value;
					string temp = et.Value.Replace("f:", "").Replace("/", ".").Replace("(", "[").Replace(")", "]");
					var split = temp.Split(new char[] {'|', ' '}, StringSplitOptions.RemoveEmptyEntries).Where(s => s.StartsWith(resourceName + "."));
					path += "\"" + string.Join("\", \"", split) + "\", ";
				}
				string target = ""; // "ResourceType.Patient, ";
				string expression = "";
				var sc = new System.Collections.Generic.SortedSet<String>();
				foreach(XmlAttribute et in sp.SelectNodes("fhir:target/@value", nsS))
                {
					sc.Add("ResourceType." + et.Value);
					target += "ResourceType." + et.Value + ", ";
				}
				var exprNode = sp.SelectSingleNode("fhir:expression/@value", nsR);
				if (exprNode != null)
					expression = exprNode.Value;
				if (!string.IsNullOrEmpty(target))
                {
					// target = ", Target = new ResourceType[] { " + target + "}";
					target = ", Target = new ResourceType[] { " + string.Join(", ", sc) + ", }";
                }
				// string path = sp.SelectSingleNode("fhir:xpath/@value", nsR).Value;
#>                new SearchParamDefinition() { Resource = "<#= resourceName #>", Name = "<#= name #>", Description = @"<#= description.Replace("\"", "\"\"") #>", Type = SearchParamType.<#= outputType #>, Path = new string[] { <#= path #>}<#= target #><#= !string.IsNullOrEmpty(xpath) ? ", XPath = \"" + xpath + "\"" : "" #><#= !string.IsNullOrEmpty(expression) ? ", Expression = \"" + expression + "\"" : "" #>, Url = "<#= url #>" },
<#
            }
        }
    }
#>
            };
        }
}
<#+
		public static string ConvertPropertyType(string propType, System.Xml.XmlElement element, System.Xml.XmlNamespaceManager nsR)
        {
			switch (propType)
            {
				case "id" : return "Hl7.Fhir.Model.Id";
				case "Identifier" : return "Hl7.Fhir.Model.Identifier";
				case "CodeableConcept" : return "Hl7.Fhir.Model.CodeableConcept";
				case "Reference" : return "Hl7.Fhir.Model.ResourceReference";
				case "Resource" : return "Hl7.Fhir.Model.Resource"; 
				case "code" : return "Hl7.Fhir.Model.Code"; 
				case "Extension" : return "Hl7.Fhir.Model.Extension"; 
				case "Code" : return "Hl7.Fhir.Model.Code"; 
				case "HumanName" : return "Hl7.Fhir.Model.HumanName"; 
				case "ContactPoint" : return "Hl7.Fhir.Model.ContactPoint"; 
				case "Address" : return "Hl7.Fhir.Model.Address"; 
				case "Attachment" : return "Hl7.Fhir.Model.Attachment"; 
				case "Ratio" : return "Hl7.Fhir.Model.Ratio"; 
				case "Timing" : return "Hl7.Fhir.Model.Timing"; 
				case "oid" : return "Hl7.Fhir.Model.Oid";
				case "Annotation" : return "Hl7.Fhir.Model.Annotation";
				case "uri" : return "Hl7.Fhir.Model.FhirUri";
				case "uuid" : return "Hl7.Fhir.Model.Uuid";
				case "boolean" : return "Hl7.Fhir.Model.FhirBoolean"; 
				case "dateTime" : return "Hl7.Fhir.Model.FhirDateTime"; 
				case "date" : return "Hl7.Fhir.Model.Date"; 
				case "time" : return "Hl7.Fhir.Model.Time";
				case "Period" : return "Hl7.Fhir.Model.Period";
				case "SampledData" : return "Hl7.Fhir.Model.SampledData"; 
				case "base64Binary" : return "Hl7.Fhir.Model.Base64Binary"; 
				case "Signature" : return "Hl7.Fhir.Model.Signature";
				case "Coding" : return "Hl7.Fhir.Model.Coding";
				case "Meta" : return "Hl7.Fhir.Model.Meta";
				case "decimal" : return "Hl7.Fhir.Model.FhirDecimal"; 
				case "markdown" : return "Hl7.Fhir.Model.Markdown";
//				case "xhtml" : return "Hl7.Fhir.Model.Xhtml";
				case "instant" : return "Hl7.Fhir.Model.Instant";
				case "integer" : return "Hl7.Fhir.Model.Integer";
				case "unsignedInt" : return "Hl7.Fhir.Model.UnsignedInt";
				case "positiveInt" : return "Hl7.Fhir.Model.PositiveInt"; 
				case "Range" : return "Hl7.Fhir.Model.Range";
				case "string" : return "Hl7.Fhir.Model.FhirString";
				case "xhtml" : return "Hl7.Fhir.Model.XHtml";
				case "ElementDefinition" : return "Hl7.Fhir.Model.ElementDefinition";
//				case "BackboneElement" : result.PropType = result.BackboneComponentType;
//								break;
				case "Quantity" :
								XmlAttribute typeProfile = (XmlAttribute)element.SelectSingleNode("fhir:type/fhir:profile/@value", nsR);
								if (typeProfile == null)
                                {
									// result.PropType = "Hl7.Fhir.Model.FhirString";
                                }
								else if (typeProfile.Value == "http://hl7.org/fhir/StructureDefinition/SimpleQuantity")
                                {
									return "Hl7.Fhir.Model.SimpleQuantity";
                                }
								else if (typeProfile.Value == "http://hl7.org/fhir/StructureDefinition/Money")
                                {
									return "Hl7.Fhir.Model.Money";
                                }
								else if (typeProfile.Value == "http://hl7.org/fhir/StructureDefinition/Age")
                                {
									return "Hl7.Fhir.Model.Age";
                                }
								else if (typeProfile.Value == "http://hl7.org/fhir/StructureDefinition/Duration")
                                {
									return "Hl7.Fhir.Model.Duration";
                                }
								break;
            }
			return propType;
        }

#>
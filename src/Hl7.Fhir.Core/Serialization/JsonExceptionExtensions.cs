using System;
using System.Text.Json;

namespace Hl7.Fhir.Serialization
{
    public static class JsonExceptionExtensions
    {
        /// <summary>
        /// Converts a JsonException thrown by the new JSON parser into a FormatException similar to those thrown by the old JSON parser
        /// </summary>
        public static FormatException ToFormatException(this JsonException jsonException)
        {
            if (jsonException == null)
            {
                return null;
            }

            // Json exceptions generated by the framework already contain the path and position,
            // so check for that before adding them
            var jsonExceptionMessage = jsonException.Message;
            var pathIndex = jsonExceptionMessage.IndexOf(" Path:");
            var message =  pathIndex < 0 ?
                jsonExceptionMessage :
                jsonExceptionMessage.Substring(0, pathIndex);
            if (!string.IsNullOrEmpty(jsonException.Path) || jsonException.LineNumber != null)
            {
                message += " (at";
                if (!string.IsNullOrEmpty(jsonException.Path) && jsonException.Path != "$")
                {
                    message += " ";
                    message += jsonException.Path;
                }
                if (jsonException.LineNumber != null)
                {
                    message += $" line {jsonException.LineNumber + 1}, {jsonException.BytePositionInLine+1}";  // 1-based line and byte numbers
                }
                message += ")";
            }
            return new FormatException(message, jsonException);
        }
    }
}

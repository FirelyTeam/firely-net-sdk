using System;

namespace Hl7.Fhir.Serialization
{
    internal class SourceException : Exception
    {
        public SourceException(string message, string path, long? lineNumber, long? bytePositionInLine) : base(message)
        {
            Path = path;
            LineNumber = lineNumber;
            BytePositionInLine = bytePositionInLine;
        }

        public string Path { get; }

        /// <summary>
        /// 0-based line number position of the error
        /// </summary>
        public long? LineNumber { get; }

        /// <summary>
        /// 0-based byte position of the error within the line
        /// </summary>
        public long? BytePositionInLine { get; }

        public FormatException ToFormatException()
        {
            // Json exceptions generated by the framework already contain the path and position,
            // so check for that before adding them
            var message = Message;
            if (!string.IsNullOrEmpty(Path) || LineNumber != null)
            {
                message += " (at";
                if (!string.IsNullOrEmpty(Path) && Path != "$")
                {
                    message += " ";
                    message += Path;
                }
                if (LineNumber != null)
                {
                    message += $" line {LineNumber + 1}, {BytePositionInLine + 1}";  // 1-based line and byte numbers
                }
                message += ")";
            }
            return new FormatException(message);
        }
    }
}
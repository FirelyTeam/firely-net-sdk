// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Device Dispense
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("DeviceDispense","http://hl7.org/fhir/StructureDefinition/DeviceDispense", IsResource=true)]
  public partial class DeviceDispense : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "DeviceDispense"; } }

    /// <summary>
    /// DeviceDispense Status Codes
    /// (url: http://hl7.org/fhir/ValueSet/devicedispense-status)
    /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
    /// </summary>
    [FhirEnumeration("DeviceDispenseStatusCodes")]
    public enum DeviceDispenseStatusCodes
    {
      /// <summary>
      /// The core event has not started yet, but some staging activities have begun (e.g. initial preparing of the device. Preparation stages may be tracked e.g. for planning, supply or billing purposes.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("preparation", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("Preparation")]
      Preparation,
      /// <summary>
      /// The dispensed product is ready for pickup.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("in-progress", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("In Progress")]
      InProgress,
      /// <summary>
      /// The dispensed product was not and will never be picked up by the patient.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("cancelled", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// The dispense process is paused while waiting for an external event to reactivate the dispense.  For example, new stock has arrived or the prescriber has called.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("on-hold", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("On Hold")]
      OnHold,
      /// <summary>
      /// The dispensed product has been picked up.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("completed", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// The dispense was entered in error and therefore nullified.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// Actions implied by the dispense have been permanently halted, before all of them occurred.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("stopped", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("Stopped")]
      Stopped,
      /// <summary>
      /// The dispense was declined and not performed.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("declined", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("Declined")]
      Declined,
      /// <summary>
      /// The authoring system does not know which of the status values applies for this dispense.  Note: this concept is not to be used for other - one of the listed statuses is presumed to apply, it's just now known which one.
      /// (system: http://terminology.hl7.org/CodeSystem/devicedispense-status)
      /// </summary>
      [EnumLiteral("unknown", "http://terminology.hl7.org/CodeSystem/devicedispense-status"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// Who performed event
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("DeviceDispense#Performer", IsNestedType=true)]
    public partial class PerformerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "DeviceDispense#Performer"; } }

      /// <summary>
      /// Who performed the dispense and what they did
      /// </summary>
      [FhirElement("function", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Function
      {
        get { return _Function; }
        set { _Function = value; OnPropertyChanged("Function"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Function;

      /// <summary>
      /// Individual who was performing
      /// </summary>
      [FhirElement("actor", Order=50)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","Patient","Device","RelatedPerson","CareTeam")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PerformerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Function != null) dest.Function = (Hl7.Fhir.Model.CodeableConcept)Function.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PerformerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Function, otherT.Function)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Function != null) yield return Function;
          if (Actor != null) yield return Actor;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Function != null) yield return new ElementValue("function", Function);
          if (Actor != null) yield return new ElementValue("actor", Actor);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "function":
            value = Function;
            return Function is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Function is not null) yield return new KeyValuePair<string,object>("function",Function);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
      }

    }

    /// <summary>
    /// Business identifier for this dispensation
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// The order or request that this dispense is fulfilling
    /// </summary>
    [FhirElement("basedOn", Order=100)]
    [CLSCompliant(false)]
    [References("CarePlan","DeviceRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// The bigger event that this dispense is a part of
    /// </summary>
    [FhirElement("partOf", Order=110)]
    [CLSCompliant(false)]
    [References("Procedure")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=120, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.DeviceDispense.DeviceDispenseStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.DeviceDispense.DeviceDispenseStatusCodes> _StatusElement;

    /// <summary>
    /// preparation | in-progress | cancelled | on-hold | completed | entered-in-error | stopped | declined | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.DeviceDispense.DeviceDispenseStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.DeviceDispense.DeviceDispenseStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Why a dispense was or was not performed
    /// </summary>
    [FhirElement("statusReason", Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference StatusReason
    {
      get { return _StatusReason; }
      set { _StatusReason = value; OnPropertyChanged("StatusReason"); }
    }

    private Hl7.Fhir.Model.CodeableReference _StatusReason;

    /// <summary>
    /// Type of device dispense
    /// </summary>
    [FhirElement("category", Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// What device was supplied
    /// </summary>
    [FhirElement("device", InSummary=true, Order=150, FiveWs="FiveWs.what[x]")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableReference Device
    {
      get { return _Device; }
      set { _Device = value; OnPropertyChanged("Device"); }
    }

    private Hl7.Fhir.Model.CodeableReference _Device;

    /// <summary>
    /// Who the dispense is for
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=160, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Encounter associated with event
    /// </summary>
    [FhirElement("encounter", Order=170)]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Information that supports the dispensing of the device
    /// </summary>
    [FhirElement("supportingInformation", Order=180, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// Who performed event
    /// </summary>
    [FhirElement("performer", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.DeviceDispense.PerformerComponent> Performer
    {
      get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.DeviceDispense.PerformerComponent>(); return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private List<Hl7.Fhir.Model.DeviceDispense.PerformerComponent> _Performer;

    /// <summary>
    /// Where the dispense occurred
    /// </summary>
    [FhirElement("location", Order=200)]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// Trial fill, partial fill, emergency fill, etc.
    /// </summary>
    [FhirElement("type", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// Amount dispensed
    /// </summary>
    [FhirElement("quantity", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.Quantity Quantity
    {
      get { return _Quantity; }
      set { _Quantity = value; OnPropertyChanged("Quantity"); }
    }

    private Hl7.Fhir.Model.Quantity _Quantity;

    /// <summary>
    /// When product was packaged and reviewed
    /// </summary>
    [FhirElement("preparedDate", InSummary=true, Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime PreparedDateElement
    {
      get { return _PreparedDateElement; }
      set { _PreparedDateElement = value; OnPropertyChanged("PreparedDateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _PreparedDateElement;

    /// <summary>
    /// When product was packaged and reviewed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string PreparedDate
    {
      get { return PreparedDateElement != null ? PreparedDateElement.Value : null; }
      set
      {
        if (value == null)
          PreparedDateElement = null;
        else
          PreparedDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("PreparedDate");
      }
    }

    /// <summary>
    /// When product was given out
    /// </summary>
    [FhirElement("whenHandedOver", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime WhenHandedOverElement
    {
      get { return _WhenHandedOverElement; }
      set { _WhenHandedOverElement = value; OnPropertyChanged("WhenHandedOverElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _WhenHandedOverElement;

    /// <summary>
    /// When product was given out
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string WhenHandedOver
    {
      get { return WhenHandedOverElement != null ? WhenHandedOverElement.Value : null; }
      set
      {
        if (value == null)
          WhenHandedOverElement = null;
        else
          WhenHandedOverElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("WhenHandedOver");
      }
    }

    /// <summary>
    /// Where the device was sent or should be sent
    /// </summary>
    [FhirElement("destination", Order=250)]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Destination
    {
      get { return _Destination; }
      set { _Destination = value; OnPropertyChanged("Destination"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Destination;

    /// <summary>
    /// Information about the dispense
    /// </summary>
    [FhirElement("note", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Full representation of the usage instructions
    /// </summary>
    [FhirElement("usageInstruction", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString UsageInstructionElement
    {
      get { return _UsageInstructionElement; }
      set { _UsageInstructionElement = value; OnPropertyChanged("UsageInstructionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _UsageInstructionElement;

    /// <summary>
    /// Full representation of the usage instructions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string UsageInstruction
    {
      get { return UsageInstructionElement != null ? UsageInstructionElement.Value : null; }
      set
      {
        if (value == null)
          UsageInstructionElement = null;
        else
          UsageInstructionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("UsageInstruction");
      }
    }

    /// <summary>
    /// A list of relevant lifecycle events
    /// </summary>
    [FhirElement("eventHistory", Order=280)]
    [CLSCompliant(false)]
    [References("Provenance")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> EventHistory
    {
      get { if(_EventHistory==null) _EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(); return _EventHistory; }
      set { _EventHistory = value; OnPropertyChanged("EventHistory"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _EventHistory;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as DeviceDispense;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.DeviceDispense.DeviceDispenseStatusCodes>)StatusElement.DeepCopy();
      if(StatusReason != null) dest.StatusReason = (Hl7.Fhir.Model.CodeableReference)StatusReason.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Device != null) dest.Device = (Hl7.Fhir.Model.CodeableReference)Device.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.DeviceDispense.PerformerComponent>(Performer.DeepCopy());
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
      if(PreparedDateElement != null) dest.PreparedDateElement = (Hl7.Fhir.Model.FhirDateTime)PreparedDateElement.DeepCopy();
      if(WhenHandedOverElement != null) dest.WhenHandedOverElement = (Hl7.Fhir.Model.FhirDateTime)WhenHandedOverElement.DeepCopy();
      if(Destination != null) dest.Destination = (Hl7.Fhir.Model.ResourceReference)Destination.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(UsageInstructionElement != null) dest.UsageInstructionElement = (Hl7.Fhir.Model.FhirString)UsageInstructionElement.DeepCopy();
      if(EventHistory != null) dest.EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(EventHistory.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new DeviceDispense());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as DeviceDispense;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Device, otherT.Device)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.Matches(PreparedDateElement, otherT.PreparedDateElement)) return false;
      if( !DeepComparable.Matches(WhenHandedOverElement, otherT.WhenHandedOverElement)) return false;
      if( !DeepComparable.Matches(Destination, otherT.Destination)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(UsageInstructionElement, otherT.UsageInstructionElement)) return false;
      if( !DeepComparable.Matches(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as DeviceDispense;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(StatusReason, otherT.StatusReason)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Device, otherT.Device)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.IsExactly(PreparedDateElement, otherT.PreparedDateElement)) return false;
      if( !DeepComparable.IsExactly(WhenHandedOverElement, otherT.WhenHandedOverElement)) return false;
      if( !DeepComparable.IsExactly(Destination, otherT.Destination)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(UsageInstructionElement, otherT.UsageInstructionElement)) return false;
      if( !DeepComparable.IsExactly(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (StatusReason != null) yield return StatusReason;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Device != null) yield return Device;
        if (Subject != null) yield return Subject;
        if (Encounter != null) yield return Encounter;
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        foreach (var elem in Performer) { if (elem != null) yield return elem; }
        if (Location != null) yield return Location;
        if (Type != null) yield return Type;
        if (Quantity != null) yield return Quantity;
        if (PreparedDateElement != null) yield return PreparedDateElement;
        if (WhenHandedOverElement != null) yield return WhenHandedOverElement;
        if (Destination != null) yield return Destination;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (UsageInstructionElement != null) yield return UsageInstructionElement;
        foreach (var elem in EventHistory) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (StatusReason != null) yield return new ElementValue("statusReason", StatusReason);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Device != null) yield return new ElementValue("device", Device);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
        if (Location != null) yield return new ElementValue("location", Location);
        if (Type != null) yield return new ElementValue("type", Type);
        if (Quantity != null) yield return new ElementValue("quantity", Quantity);
        if (PreparedDateElement != null) yield return new ElementValue("preparedDate", PreparedDateElement);
        if (WhenHandedOverElement != null) yield return new ElementValue("whenHandedOver", WhenHandedOverElement);
        if (Destination != null) yield return new ElementValue("destination", Destination);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (UsageInstructionElement != null) yield return new ElementValue("usageInstruction", UsageInstructionElement);
        foreach (var elem in EventHistory) { if (elem != null) yield return new ElementValue("eventHistory", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "statusReason":
          value = StatusReason;
          return StatusReason is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "device":
          value = Device;
          return Device is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "supportingInformation":
          value = SupportingInformation;
          return SupportingInformation?.Any() == true;
        case "performer":
          value = Performer;
          return Performer?.Any() == true;
        case "location":
          value = Location;
          return Location is not null;
        case "type":
          value = Type;
          return Type is not null;
        case "quantity":
          value = Quantity;
          return Quantity is not null;
        case "preparedDate":
          value = PreparedDateElement;
          return PreparedDateElement is not null;
        case "whenHandedOver":
          value = WhenHandedOverElement;
          return WhenHandedOverElement is not null;
        case "destination":
          value = Destination;
          return Destination is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "usageInstruction":
          value = UsageInstructionElement;
          return UsageInstructionElement is not null;
        case "eventHistory":
          value = EventHistory;
          return EventHistory?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (StatusReason is not null) yield return new KeyValuePair<string,object>("statusReason",StatusReason);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Device is not null) yield return new KeyValuePair<string,object>("device",Device);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (SupportingInformation?.Any() == true) yield return new KeyValuePair<string,object>("supportingInformation",SupportingInformation);
      if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
      if (PreparedDateElement is not null) yield return new KeyValuePair<string,object>("preparedDate",PreparedDateElement);
      if (WhenHandedOverElement is not null) yield return new KeyValuePair<string,object>("whenHandedOver",WhenHandedOverElement);
      if (Destination is not null) yield return new KeyValuePair<string,object>("destination",Destination);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (UsageInstructionElement is not null) yield return new KeyValuePair<string,object>("usageInstruction",UsageInstructionElement);
      if (EventHistory?.Any() == true) yield return new KeyValuePair<string,object>("eventHistory",EventHistory);
    }

  }

}

// end of file

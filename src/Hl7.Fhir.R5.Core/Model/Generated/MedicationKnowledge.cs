// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Definition of Medication Knowledge
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MedicationKnowledge","http://hl7.org/fhir/StructureDefinition/MedicationKnowledge", IsResource=true)]
  public partial class MedicationKnowledge : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MedicationKnowledge"; } }

    /// <summary>
    /// MedicationKnowledge Status Codes
    /// (url: http://hl7.org/fhir/ValueSet/medicationknowledge-status)
    /// (system: http://hl7.org/fhir/CodeSystem/medicationknowledge-status)
    /// </summary>
    [FhirEnumeration("MedicationKnowledgeStatusCodes")]
    public enum MedicationKnowledgeStatusCodes
    {
      /// <summary>
      /// The medication referred to by this MedicationKnowledge is in active use within the drug database or inventory system.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationknowledge-status)
      /// </summary>
      [EnumLiteral("active", "http://hl7.org/fhir/CodeSystem/medicationknowledge-status"), Description("Active")]
      Active,
      /// <summary>
      /// The medication referred to by this MedicationKnowledge was entered in error within the drug database or inventory system.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationknowledge-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/CodeSystem/medicationknowledge-status"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// The medication referred to by this MedicationKnowledge is not in active use within the drug database or inventory system.
      /// (system: http://hl7.org/fhir/CodeSystem/medicationknowledge-status)
      /// </summary>
      [EnumLiteral("inactive", "http://hl7.org/fhir/CodeSystem/medicationknowledge-status"), Description("Inactive")]
      Inactive,
    }

    /// <summary>
    /// Associated or related medication information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#RelatedMedicationKnowledge", IsNestedType=true)]
    public partial class RelatedMedicationKnowledgeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#RelatedMedicationKnowledge"; } }

      /// <summary>
      /// Category of medicationKnowledge
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Associated documentation about the associated medication knowledge
      /// </summary>
      [FhirElement("reference", Order=50)]
      [CLSCompliant(false)]
      [References("MedicationKnowledge")]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Reference
      {
        get { if(_Reference==null) _Reference = new List<Hl7.Fhir.Model.ResourceReference>(); return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Reference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatedMedicationKnowledgeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Reference != null) dest.Reference = new List<Hl7.Fhir.Model.ResourceReference>(Reference.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatedMedicationKnowledgeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatedMedicationKnowledgeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatedMedicationKnowledgeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Reference) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Reference) { if (elem != null) yield return new ElementValue("reference", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "reference":
            value = Reference;
            return Reference?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Reference?.Any() == true) yield return new KeyValuePair<string,object>("reference",Reference);
      }

    }

    /// <summary>
    /// Associated documentation about the medication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Monograph", IsNestedType=true)]
    public partial class MonographComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Monograph"; } }

      /// <summary>
      /// The category of medication document
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Associated documentation about the medication
      /// </summary>
      [FhirElement("source", Order=50)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Source
      {
        get { return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Source;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MonographComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Source != null) dest.Source = (Hl7.Fhir.Model.ResourceReference)Source.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MonographComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MonographComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MonographComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Source != null) yield return Source;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Source != null) yield return new ElementValue("source", Source);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "source":
            value = Source;
            return Source is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Source is not null) yield return new KeyValuePair<string,object>("source",Source);
      }

    }

    /// <summary>
    /// The pricing of the medication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Cost", IsNestedType=true)]
    public partial class CostComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Cost"; } }

      /// <summary>
      /// The date range for which the cost is effective
      /// </summary>
      [FhirElement("effectiveDate", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Period> EffectiveDate
      {
        get { if(_EffectiveDate==null) _EffectiveDate = new List<Hl7.Fhir.Model.Period>(); return _EffectiveDate; }
        set { _EffectiveDate = value; OnPropertyChanged("EffectiveDate"); }
      }

      private List<Hl7.Fhir.Model.Period> _EffectiveDate;

      /// <summary>
      /// The category of the cost information
      /// </summary>
      [FhirElement("type", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The source or owner for the price information
      /// </summary>
      [FhirElement("source", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString SourceElement
      {
        get { return _SourceElement; }
        set { _SourceElement = value; OnPropertyChanged("SourceElement"); }
      }

      private Hl7.Fhir.Model.FhirString _SourceElement;

      /// <summary>
      /// The source or owner for the price information
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Source
      {
        get { return SourceElement != null ? SourceElement.Value : null; }
        set
        {
          if (value == null)
            SourceElement = null;
          else
            SourceElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Source");
        }
      }

      /// <summary>
      /// The price or category of the cost of the medication
      /// </summary>
      [FhirElement("cost", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Money),typeof(Hl7.Fhir.Model.CodeableConcept))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Cost
      {
        get { return _Cost; }
        set { _Cost = value; OnPropertyChanged("Cost"); }
      }

      private Hl7.Fhir.Model.DataType _Cost;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CostComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(EffectiveDate != null) dest.EffectiveDate = new List<Hl7.Fhir.Model.Period>(EffectiveDate.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(SourceElement != null) dest.SourceElement = (Hl7.Fhir.Model.FhirString)SourceElement.DeepCopy();
        if(Cost != null) dest.Cost = (Hl7.Fhir.Model.DataType)Cost.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CostComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CostComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(EffectiveDate, otherT.EffectiveDate)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(SourceElement, otherT.SourceElement)) return false;
        if( !DeepComparable.Matches(Cost, otherT.Cost)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CostComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(EffectiveDate, otherT.EffectiveDate)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(SourceElement, otherT.SourceElement)) return false;
        if( !DeepComparable.IsExactly(Cost, otherT.Cost)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in EffectiveDate) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
          if (SourceElement != null) yield return SourceElement;
          if (Cost != null) yield return Cost;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in EffectiveDate) { if (elem != null) yield return new ElementValue("effectiveDate", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
          if (SourceElement != null) yield return new ElementValue("source", SourceElement);
          if (Cost != null) yield return new ElementValue("cost", Cost);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "effectiveDate":
            value = EffectiveDate;
            return EffectiveDate?.Any() == true;
          case "type":
            value = Type;
            return Type is not null;
          case "source":
            value = SourceElement;
            return SourceElement is not null;
          case "cost":
            value = Cost;
            return Cost is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (EffectiveDate?.Any() == true) yield return new KeyValuePair<string,object>("effectiveDate",EffectiveDate);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (SourceElement is not null) yield return new KeyValuePair<string,object>("source",SourceElement);
        if (Cost is not null) yield return new KeyValuePair<string,object>("cost",Cost);
      }

    }

    /// <summary>
    /// Program under which a medication is reviewed
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#MonitoringProgram", IsNestedType=true)]
    public partial class MonitoringProgramComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#MonitoringProgram"; } }

      /// <summary>
      /// Type of program under which the medication is monitored
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Name of the reviewing program
      /// </summary>
      [FhirElement("name", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Name of the reviewing program
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MonitoringProgramComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MonitoringProgramComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MonitoringProgramComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MonitoringProgramComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (NameElement != null) yield return NameElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (NameElement != null) yield return new ElementValue("name", NameElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "name":
            value = NameElement;
            return NameElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      }

    }

    /// <summary>
    /// Guidelines or protocols for administration of the medication for an indication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#IndicationGuideline", IsNestedType=true)]
    public partial class IndicationGuidelineComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#IndicationGuideline"; } }

      /// <summary>
      /// Indication for use that applies to the specific administration guideline
      /// </summary>
      [FhirElement("indication", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableReference> Indication
      {
        get { if(_Indication==null) _Indication = new List<Hl7.Fhir.Model.CodeableReference>(); return _Indication; }
        set { _Indication = value; OnPropertyChanged("Indication"); }
      }

      private List<Hl7.Fhir.Model.CodeableReference> _Indication;

      /// <summary>
      /// Guidelines for dosage of the medication
      /// </summary>
      [FhirElement("dosingGuideline", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicationKnowledge.DosingGuidelineComponent> DosingGuideline
      {
        get { if(_DosingGuideline==null) _DosingGuideline = new List<Hl7.Fhir.Model.MedicationKnowledge.DosingGuidelineComponent>(); return _DosingGuideline; }
        set { _DosingGuideline = value; OnPropertyChanged("DosingGuideline"); }
      }

      private List<Hl7.Fhir.Model.MedicationKnowledge.DosingGuidelineComponent> _DosingGuideline;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as IndicationGuidelineComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Indication != null) dest.Indication = new List<Hl7.Fhir.Model.CodeableReference>(Indication.DeepCopy());
        if(DosingGuideline != null) dest.DosingGuideline = new List<Hl7.Fhir.Model.MedicationKnowledge.DosingGuidelineComponent>(DosingGuideline.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new IndicationGuidelineComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as IndicationGuidelineComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Indication, otherT.Indication)) return false;
        if( !DeepComparable.Matches(DosingGuideline, otherT.DosingGuideline)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as IndicationGuidelineComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Indication, otherT.Indication)) return false;
        if( !DeepComparable.IsExactly(DosingGuideline, otherT.DosingGuideline)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Indication) { if (elem != null) yield return elem; }
          foreach (var elem in DosingGuideline) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Indication) { if (elem != null) yield return new ElementValue("indication", elem); }
          foreach (var elem in DosingGuideline) { if (elem != null) yield return new ElementValue("dosingGuideline", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "indication":
            value = Indication;
            return Indication?.Any() == true;
          case "dosingGuideline":
            value = DosingGuideline;
            return DosingGuideline?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Indication?.Any() == true) yield return new KeyValuePair<string,object>("indication",Indication);
        if (DosingGuideline?.Any() == true) yield return new KeyValuePair<string,object>("dosingGuideline",DosingGuideline);
      }

    }

    /// <summary>
    /// Guidelines for dosage of the medication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#DosingGuideline", IsNestedType=true)]
    public partial class DosingGuidelineComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#DosingGuideline"; } }

      /// <summary>
      /// Intention of the treatment
      /// </summary>
      [FhirElement("treatmentIntent", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept TreatmentIntent
      {
        get { return _TreatmentIntent; }
        set { _TreatmentIntent = value; OnPropertyChanged("TreatmentIntent"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _TreatmentIntent;

      /// <summary>
      /// Dosage for the medication for the specific guidelines
      /// </summary>
      [FhirElement("dosage", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicationKnowledge.DosageComponent> Dosage
      {
        get { if(_Dosage==null) _Dosage = new List<Hl7.Fhir.Model.MedicationKnowledge.DosageComponent>(); return _Dosage; }
        set { _Dosage = value; OnPropertyChanged("Dosage"); }
      }

      private List<Hl7.Fhir.Model.MedicationKnowledge.DosageComponent> _Dosage;

      /// <summary>
      /// Type of treatment the guideline applies to
      /// </summary>
      [FhirElement("administrationTreatment", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept AdministrationTreatment
      {
        get { return _AdministrationTreatment; }
        set { _AdministrationTreatment = value; OnPropertyChanged("AdministrationTreatment"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _AdministrationTreatment;

      /// <summary>
      /// Characteristics of the patient that are relevant to the administration guidelines
      /// </summary>
      [FhirElement("patientCharacteristic", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicComponent> PatientCharacteristic
      {
        get { if(_PatientCharacteristic==null) _PatientCharacteristic = new List<Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicComponent>(); return _PatientCharacteristic; }
        set { _PatientCharacteristic = value; OnPropertyChanged("PatientCharacteristic"); }
      }

      private List<Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicComponent> _PatientCharacteristic;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DosingGuidelineComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TreatmentIntent != null) dest.TreatmentIntent = (Hl7.Fhir.Model.CodeableConcept)TreatmentIntent.DeepCopy();
        if(Dosage != null) dest.Dosage = new List<Hl7.Fhir.Model.MedicationKnowledge.DosageComponent>(Dosage.DeepCopy());
        if(AdministrationTreatment != null) dest.AdministrationTreatment = (Hl7.Fhir.Model.CodeableConcept)AdministrationTreatment.DeepCopy();
        if(PatientCharacteristic != null) dest.PatientCharacteristic = new List<Hl7.Fhir.Model.MedicationKnowledge.PatientCharacteristicComponent>(PatientCharacteristic.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DosingGuidelineComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DosingGuidelineComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TreatmentIntent, otherT.TreatmentIntent)) return false;
        if( !DeepComparable.Matches(Dosage, otherT.Dosage)) return false;
        if( !DeepComparable.Matches(AdministrationTreatment, otherT.AdministrationTreatment)) return false;
        if( !DeepComparable.Matches(PatientCharacteristic, otherT.PatientCharacteristic)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DosingGuidelineComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TreatmentIntent, otherT.TreatmentIntent)) return false;
        if( !DeepComparable.IsExactly(Dosage, otherT.Dosage)) return false;
        if( !DeepComparable.IsExactly(AdministrationTreatment, otherT.AdministrationTreatment)) return false;
        if( !DeepComparable.IsExactly(PatientCharacteristic, otherT.PatientCharacteristic)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TreatmentIntent != null) yield return TreatmentIntent;
          foreach (var elem in Dosage) { if (elem != null) yield return elem; }
          if (AdministrationTreatment != null) yield return AdministrationTreatment;
          foreach (var elem in PatientCharacteristic) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TreatmentIntent != null) yield return new ElementValue("treatmentIntent", TreatmentIntent);
          foreach (var elem in Dosage) { if (elem != null) yield return new ElementValue("dosage", elem); }
          if (AdministrationTreatment != null) yield return new ElementValue("administrationTreatment", AdministrationTreatment);
          foreach (var elem in PatientCharacteristic) { if (elem != null) yield return new ElementValue("patientCharacteristic", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "treatmentIntent":
            value = TreatmentIntent;
            return TreatmentIntent is not null;
          case "dosage":
            value = Dosage;
            return Dosage?.Any() == true;
          case "administrationTreatment":
            value = AdministrationTreatment;
            return AdministrationTreatment is not null;
          case "patientCharacteristic":
            value = PatientCharacteristic;
            return PatientCharacteristic?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TreatmentIntent is not null) yield return new KeyValuePair<string,object>("treatmentIntent",TreatmentIntent);
        if (Dosage?.Any() == true) yield return new KeyValuePair<string,object>("dosage",Dosage);
        if (AdministrationTreatment is not null) yield return new KeyValuePair<string,object>("administrationTreatment",AdministrationTreatment);
        if (PatientCharacteristic?.Any() == true) yield return new KeyValuePair<string,object>("patientCharacteristic",PatientCharacteristic);
      }

    }

    /// <summary>
    /// Dosage for the medication for the specific guidelines
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Dosage", IsNestedType=true)]
    public partial class DosageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Dosage"; } }

      /// <summary>
      /// Category of dosage for a medication
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Dosage for the medication for the specific guidelines
      /// </summary>
      [FhirElement("dosage", Order=50)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Dosage> Dosage
      {
        get { if(_Dosage==null) _Dosage = new List<Hl7.Fhir.Model.Dosage>(); return _Dosage; }
        set { _Dosage = value; OnPropertyChanged("Dosage"); }
      }

      private List<Hl7.Fhir.Model.Dosage> _Dosage;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DosageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Dosage != null) dest.Dosage = new List<Hl7.Fhir.Model.Dosage>(Dosage.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DosageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DosageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Dosage, otherT.Dosage)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DosageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Dosage, otherT.Dosage)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Dosage) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Dosage) { if (elem != null) yield return new ElementValue("dosage", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "dosage":
            value = Dosage;
            return Dosage?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Dosage?.Any() == true) yield return new KeyValuePair<string,object>("dosage",Dosage);
      }

    }

    /// <summary>
    /// Characteristics of the patient that are relevant to the administration guidelines
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#PatientCharacteristic", IsNestedType=true)]
    public partial class PatientCharacteristicComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#PatientCharacteristic"; } }

      /// <summary>
      /// Categorization of specific characteristic that is relevant to the administration guideline
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The specific characteristic
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PatientCharacteristicComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PatientCharacteristicComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PatientCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PatientCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Categorization of the medication within a formulary or classification system
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#MedicineClassification", IsNestedType=true)]
    public partial class MedicineClassificationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#MedicineClassification"; } }

      /// <summary>
      /// The type of category for the medication (for example, therapeutic classification, therapeutic sub-classification)
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The source of the classification
      /// </summary>
      [FhirElement("source", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.FhirUri))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Source
      {
        get { return _Source; }
        set { _Source = value; OnPropertyChanged("Source"); }
      }

      private Hl7.Fhir.Model.DataType _Source;

      /// <summary>
      /// Specific category assigned to the medication
      /// </summary>
      [FhirElement("classification", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Classification
      {
        get { if(_Classification==null) _Classification = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Classification; }
        set { _Classification = value; OnPropertyChanged("Classification"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Classification;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MedicineClassificationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Source != null) dest.Source = (Hl7.Fhir.Model.DataType)Source.DeepCopy();
        if(Classification != null) dest.Classification = new List<Hl7.Fhir.Model.CodeableConcept>(Classification.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MedicineClassificationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MedicineClassificationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Source, otherT.Source)) return false;
        if( !DeepComparable.Matches(Classification, otherT.Classification)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MedicineClassificationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Source, otherT.Source)) return false;
        if( !DeepComparable.IsExactly(Classification, otherT.Classification)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Source != null) yield return Source;
          foreach (var elem in Classification) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Source != null) yield return new ElementValue("source", Source);
          foreach (var elem in Classification) { if (elem != null) yield return new ElementValue("classification", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "source":
            value = Source;
            return Source is not null;
          case "classification":
            value = Classification;
            return Classification?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Source is not null) yield return new KeyValuePair<string,object>("source",Source);
        if (Classification?.Any() == true) yield return new KeyValuePair<string,object>("classification",Classification);
      }

    }

    /// <summary>
    /// Details about packaged medications
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Packaging", IsNestedType=true)]
    public partial class PackagingComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Packaging"; } }

      /// <summary>
      /// Cost of the packaged medication
      /// </summary>
      [FhirElement("cost", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent> Cost
      {
        get { if(_Cost==null) _Cost = new List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent>(); return _Cost; }
        set { _Cost = value; OnPropertyChanged("Cost"); }
      }

      private List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent> _Cost;

      /// <summary>
      /// The packaged medication that is being priced
      /// </summary>
      [FhirElement("packagedProduct", Order=50)]
      [CLSCompliant(false)]
      [References("PackagedProductDefinition")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference PackagedProduct
      {
        get { return _PackagedProduct; }
        set { _PackagedProduct = value; OnPropertyChanged("PackagedProduct"); }
      }

      private Hl7.Fhir.Model.ResourceReference _PackagedProduct;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PackagingComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Cost != null) dest.Cost = new List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent>(Cost.DeepCopy());
        if(PackagedProduct != null) dest.PackagedProduct = (Hl7.Fhir.Model.ResourceReference)PackagedProduct.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PackagingComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PackagingComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Cost, otherT.Cost)) return false;
        if( !DeepComparable.Matches(PackagedProduct, otherT.PackagedProduct)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PackagingComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Cost, otherT.Cost)) return false;
        if( !DeepComparable.IsExactly(PackagedProduct, otherT.PackagedProduct)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Cost) { if (elem != null) yield return elem; }
          if (PackagedProduct != null) yield return PackagedProduct;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Cost) { if (elem != null) yield return new ElementValue("cost", elem); }
          if (PackagedProduct != null) yield return new ElementValue("packagedProduct", PackagedProduct);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "cost":
            value = Cost;
            return Cost?.Any() == true;
          case "packagedProduct":
            value = PackagedProduct;
            return PackagedProduct is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Cost?.Any() == true) yield return new KeyValuePair<string,object>("cost",Cost);
        if (PackagedProduct is not null) yield return new KeyValuePair<string,object>("packagedProduct",PackagedProduct);
      }

    }

    /// <summary>
    /// Regulatory information about a medication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Regulatory", IsNestedType=true)]
    public partial class RegulatoryComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Regulatory"; } }

      /// <summary>
      /// Specifies the authority of the regulation
      /// </summary>
      [FhirElement("regulatoryAuthority", Order=40)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference RegulatoryAuthority
      {
        get { return _RegulatoryAuthority; }
        set { _RegulatoryAuthority = value; OnPropertyChanged("RegulatoryAuthority"); }
      }

      private Hl7.Fhir.Model.ResourceReference _RegulatoryAuthority;

      /// <summary>
      /// Specifies if changes are allowed when dispensing a medication from a regulatory perspective
      /// </summary>
      [FhirElement("substitution", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent> Substitution
      {
        get { if(_Substitution==null) _Substitution = new List<Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent>(); return _Substitution; }
        set { _Substitution = value; OnPropertyChanged("Substitution"); }
      }

      private List<Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent> _Substitution;

      /// <summary>
      /// Specifies the schedule of a medication in jurisdiction
      /// </summary>
      [FhirElement("schedule", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Schedule
      {
        get { if(_Schedule==null) _Schedule = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Schedule; }
        set { _Schedule = value; OnPropertyChanged("Schedule"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Schedule;

      /// <summary>
      /// The maximum number of units of the medication that can be dispensed in a period
      /// </summary>
      [FhirElement("maxDispense", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent MaxDispense
      {
        get { return _MaxDispense; }
        set { _MaxDispense = value; OnPropertyChanged("MaxDispense"); }
      }

      private Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent _MaxDispense;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RegulatoryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RegulatoryAuthority != null) dest.RegulatoryAuthority = (Hl7.Fhir.Model.ResourceReference)RegulatoryAuthority.DeepCopy();
        if(Substitution != null) dest.Substitution = new List<Hl7.Fhir.Model.MedicationKnowledge.SubstitutionComponent>(Substitution.DeepCopy());
        if(Schedule != null) dest.Schedule = new List<Hl7.Fhir.Model.CodeableConcept>(Schedule.DeepCopy());
        if(MaxDispense != null) dest.MaxDispense = (Hl7.Fhir.Model.MedicationKnowledge.MaxDispenseComponent)MaxDispense.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RegulatoryComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RegulatoryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RegulatoryAuthority, otherT.RegulatoryAuthority)) return false;
        if( !DeepComparable.Matches(Substitution, otherT.Substitution)) return false;
        if( !DeepComparable.Matches(Schedule, otherT.Schedule)) return false;
        if( !DeepComparable.Matches(MaxDispense, otherT.MaxDispense)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RegulatoryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RegulatoryAuthority, otherT.RegulatoryAuthority)) return false;
        if( !DeepComparable.IsExactly(Substitution, otherT.Substitution)) return false;
        if( !DeepComparable.IsExactly(Schedule, otherT.Schedule)) return false;
        if( !DeepComparable.IsExactly(MaxDispense, otherT.MaxDispense)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RegulatoryAuthority != null) yield return RegulatoryAuthority;
          foreach (var elem in Substitution) { if (elem != null) yield return elem; }
          foreach (var elem in Schedule) { if (elem != null) yield return elem; }
          if (MaxDispense != null) yield return MaxDispense;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RegulatoryAuthority != null) yield return new ElementValue("regulatoryAuthority", RegulatoryAuthority);
          foreach (var elem in Substitution) { if (elem != null) yield return new ElementValue("substitution", elem); }
          foreach (var elem in Schedule) { if (elem != null) yield return new ElementValue("schedule", elem); }
          if (MaxDispense != null) yield return new ElementValue("maxDispense", MaxDispense);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "regulatoryAuthority":
            value = RegulatoryAuthority;
            return RegulatoryAuthority is not null;
          case "substitution":
            value = Substitution;
            return Substitution?.Any() == true;
          case "schedule":
            value = Schedule;
            return Schedule?.Any() == true;
          case "maxDispense":
            value = MaxDispense;
            return MaxDispense is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RegulatoryAuthority is not null) yield return new KeyValuePair<string,object>("regulatoryAuthority",RegulatoryAuthority);
        if (Substitution?.Any() == true) yield return new KeyValuePair<string,object>("substitution",Substitution);
        if (Schedule?.Any() == true) yield return new KeyValuePair<string,object>("schedule",Schedule);
        if (MaxDispense is not null) yield return new KeyValuePair<string,object>("maxDispense",MaxDispense);
      }

    }

    /// <summary>
    /// Specifies if changes are allowed when dispensing a medication from a regulatory perspective
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Substitution", IsNestedType=true)]
    public partial class SubstitutionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Substitution"; } }

      /// <summary>
      /// Specifies the type of substitution allowed
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Specifies if regulation allows for changes in the medication when dispensing
      /// </summary>
      [FhirElement("allowed", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AllowedElement
      {
        get { return _AllowedElement; }
        set { _AllowedElement = value; OnPropertyChanged("AllowedElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AllowedElement;

      /// <summary>
      /// Specifies if regulation allows for changes in the medication when dispensing
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Allowed
      {
        get { return AllowedElement != null ? AllowedElement.Value : null; }
        set
        {
          if (value == null)
            AllowedElement = null;
          else
            AllowedElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Allowed");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SubstitutionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(AllowedElement != null) dest.AllowedElement = (Hl7.Fhir.Model.FhirBoolean)AllowedElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SubstitutionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SubstitutionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(AllowedElement, otherT.AllowedElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SubstitutionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(AllowedElement, otherT.AllowedElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (AllowedElement != null) yield return AllowedElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (AllowedElement != null) yield return new ElementValue("allowed", AllowedElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "allowed":
            value = AllowedElement;
            return AllowedElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (AllowedElement is not null) yield return new KeyValuePair<string,object>("allowed",AllowedElement);
      }

    }

    /// <summary>
    /// The maximum number of units of the medication that can be dispensed in a period
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#MaxDispense", IsNestedType=true)]
    public partial class MaxDispenseComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#MaxDispense"; } }

      /// <summary>
      /// The maximum number of units of the medication that can be dispensed
      /// </summary>
      [FhirElement("quantity", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// The period that applies to the maximum number of units
      /// </summary>
      [FhirElement("period", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Duration Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Duration _Period;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MaxDispenseComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Duration)Period.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MaxDispenseComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MaxDispenseComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MaxDispenseComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Quantity != null) yield return Quantity;
          if (Period != null) yield return Period;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (Period != null) yield return new ElementValue("period", Period);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "period":
            value = Period;
            return Period is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      }

    }

    /// <summary>
    /// Minimal definition information about the medication
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Definitional", IsNestedType=true)]
    public partial class DefinitionalComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Definitional"; } }

      /// <summary>
      /// Definitional resources that provide more information about this medication
      /// </summary>
      [FhirElement("definition", Order=40)]
      [CLSCompliant(false)]
      [References("MedicinalProductDefinition")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Definition
      {
        get { if(_Definition==null) _Definition = new List<Hl7.Fhir.Model.ResourceReference>(); return _Definition; }
        set { _Definition = value; OnPropertyChanged("Definition"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Definition;

      /// <summary>
      /// powder | tablets | capsule +
      /// </summary>
      [FhirElement("doseForm", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept DoseForm
      {
        get { return _DoseForm; }
        set { _DoseForm = value; OnPropertyChanged("DoseForm"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _DoseForm;

      /// <summary>
      /// The intended or approved route of administration
      /// </summary>
      [FhirElement("intendedRoute", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> IntendedRoute
      {
        get { if(_IntendedRoute==null) _IntendedRoute = new List<Hl7.Fhir.Model.CodeableConcept>(); return _IntendedRoute; }
        set { _IntendedRoute = value; OnPropertyChanged("IntendedRoute"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _IntendedRoute;

      /// <summary>
      /// Active or inactive ingredient
      /// </summary>
      [FhirElement("ingredient", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent> Ingredient
      {
        get { if(_Ingredient==null) _Ingredient = new List<Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent>(); return _Ingredient; }
        set { _Ingredient = value; OnPropertyChanged("Ingredient"); }
      }

      private List<Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent> _Ingredient;

      /// <summary>
      /// Specifies descriptive properties of the medicine
      /// </summary>
      [FhirElement("drugCharacteristic", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent> DrugCharacteristic
      {
        get { if(_DrugCharacteristic==null) _DrugCharacteristic = new List<Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent>(); return _DrugCharacteristic; }
        set { _DrugCharacteristic = value; OnPropertyChanged("DrugCharacteristic"); }
      }

      private List<Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent> _DrugCharacteristic;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DefinitionalComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Definition != null) dest.Definition = new List<Hl7.Fhir.Model.ResourceReference>(Definition.DeepCopy());
        if(DoseForm != null) dest.DoseForm = (Hl7.Fhir.Model.CodeableConcept)DoseForm.DeepCopy();
        if(IntendedRoute != null) dest.IntendedRoute = new List<Hl7.Fhir.Model.CodeableConcept>(IntendedRoute.DeepCopy());
        if(Ingredient != null) dest.Ingredient = new List<Hl7.Fhir.Model.MedicationKnowledge.IngredientComponent>(Ingredient.DeepCopy());
        if(DrugCharacteristic != null) dest.DrugCharacteristic = new List<Hl7.Fhir.Model.MedicationKnowledge.DrugCharacteristicComponent>(DrugCharacteristic.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DefinitionalComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DefinitionalComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Definition, otherT.Definition)) return false;
        if( !DeepComparable.Matches(DoseForm, otherT.DoseForm)) return false;
        if( !DeepComparable.Matches(IntendedRoute, otherT.IntendedRoute)) return false;
        if( !DeepComparable.Matches(Ingredient, otherT.Ingredient)) return false;
        if( !DeepComparable.Matches(DrugCharacteristic, otherT.DrugCharacteristic)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DefinitionalComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Definition, otherT.Definition)) return false;
        if( !DeepComparable.IsExactly(DoseForm, otherT.DoseForm)) return false;
        if( !DeepComparable.IsExactly(IntendedRoute, otherT.IntendedRoute)) return false;
        if( !DeepComparable.IsExactly(Ingredient, otherT.Ingredient)) return false;
        if( !DeepComparable.IsExactly(DrugCharacteristic, otherT.DrugCharacteristic)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Definition) { if (elem != null) yield return elem; }
          if (DoseForm != null) yield return DoseForm;
          foreach (var elem in IntendedRoute) { if (elem != null) yield return elem; }
          foreach (var elem in Ingredient) { if (elem != null) yield return elem; }
          foreach (var elem in DrugCharacteristic) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Definition) { if (elem != null) yield return new ElementValue("definition", elem); }
          if (DoseForm != null) yield return new ElementValue("doseForm", DoseForm);
          foreach (var elem in IntendedRoute) { if (elem != null) yield return new ElementValue("intendedRoute", elem); }
          foreach (var elem in Ingredient) { if (elem != null) yield return new ElementValue("ingredient", elem); }
          foreach (var elem in DrugCharacteristic) { if (elem != null) yield return new ElementValue("drugCharacteristic", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "definition":
            value = Definition;
            return Definition?.Any() == true;
          case "doseForm":
            value = DoseForm;
            return DoseForm is not null;
          case "intendedRoute":
            value = IntendedRoute;
            return IntendedRoute?.Any() == true;
          case "ingredient":
            value = Ingredient;
            return Ingredient?.Any() == true;
          case "drugCharacteristic":
            value = DrugCharacteristic;
            return DrugCharacteristic?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Definition?.Any() == true) yield return new KeyValuePair<string,object>("definition",Definition);
        if (DoseForm is not null) yield return new KeyValuePair<string,object>("doseForm",DoseForm);
        if (IntendedRoute?.Any() == true) yield return new KeyValuePair<string,object>("intendedRoute",IntendedRoute);
        if (Ingredient?.Any() == true) yield return new KeyValuePair<string,object>("ingredient",Ingredient);
        if (DrugCharacteristic?.Any() == true) yield return new KeyValuePair<string,object>("drugCharacteristic",DrugCharacteristic);
      }

    }

    /// <summary>
    /// Active or inactive ingredient
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#Ingredient", IsNestedType=true)]
    public partial class IngredientComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#Ingredient"; } }

      /// <summary>
      /// Substances contained in the medication
      /// </summary>
      [FhirElement("item", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Item
      {
        get { return _Item; }
        set { _Item = value; OnPropertyChanged("Item"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Item;

      /// <summary>
      /// A code that defines the type of ingredient, active, base, etc.
      /// </summary>
      [FhirElement("type", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Quantity of ingredient present
      /// </summary>
      [FhirElement("strength", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Strength
      {
        get { return _Strength; }
        set { _Strength = value; OnPropertyChanged("Strength"); }
      }

      private Hl7.Fhir.Model.DataType _Strength;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as IngredientComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Item != null) dest.Item = (Hl7.Fhir.Model.CodeableReference)Item.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Strength != null) dest.Strength = (Hl7.Fhir.Model.DataType)Strength.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new IngredientComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as IngredientComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Item, otherT.Item)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Strength, otherT.Strength)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as IngredientComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Item, otherT.Item)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Strength, otherT.Strength)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Item != null) yield return Item;
          if (Type != null) yield return Type;
          if (Strength != null) yield return Strength;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Item != null) yield return new ElementValue("item", Item);
          if (Type != null) yield return new ElementValue("type", Type);
          if (Strength != null) yield return new ElementValue("strength", Strength);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "item":
            value = Item;
            return Item is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "strength":
            value = Strength;
            return Strength is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Item is not null) yield return new KeyValuePair<string,object>("item",Item);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Strength is not null) yield return new KeyValuePair<string,object>("strength",Strength);
      }

    }

    /// <summary>
    /// Specifies descriptive properties of the medicine
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationKnowledge#DrugCharacteristic", IsNestedType=true)]
    public partial class DrugCharacteristicComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationKnowledge#DrugCharacteristic"; } }

      /// <summary>
      /// Code specifying the type of characteristic of medication
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Description of the characteristic
      /// </summary>
      [FhirElement("value", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Base64Binary),typeof(Hl7.Fhir.Model.Attachment))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DrugCharacteristicComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DrugCharacteristicComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DrugCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DrugCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Business identifier for this medication
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Code that identifies this medication
    /// </summary>
    [FhirElement("code", InSummary=true, Order=100, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// active | entered-in-error | inactive
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=110)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes> _StatusElement;

    /// <summary>
    /// active | entered-in-error | inactive
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Creator or owner of the knowledge or information about the medication
    /// </summary>
    [FhirElement("author", Order=120, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Author
    {
      get { return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Author;

    /// <summary>
    /// Codes that identify the different jurisdictions for which the information of this resource was created
    /// </summary>
    [FhirElement("intendedJurisdiction", Order=130)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> IntendedJurisdiction
    {
      get { if(_IntendedJurisdiction==null) _IntendedJurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _IntendedJurisdiction; }
      set { _IntendedJurisdiction = value; OnPropertyChanged("IntendedJurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _IntendedJurisdiction;

    /// <summary>
    /// A name associated with the medication being described
    /// </summary>
    [FhirElement("name", InSummary=true, Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirString> NameElement
    {
      get { if(_NameElement==null) _NameElement = new List<Hl7.Fhir.Model.FhirString>(); return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private List<Hl7.Fhir.Model.FhirString> _NameElement;

    /// <summary>
    /// A name associated with the medication being described
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Name
    {
      get { return NameElement != null ? NameElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Associated or related medication information
    /// </summary>
    [FhirElement("relatedMedicationKnowledge", Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent> RelatedMedicationKnowledge
    {
      get { if(_RelatedMedicationKnowledge==null) _RelatedMedicationKnowledge = new List<Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent>(); return _RelatedMedicationKnowledge; }
      set { _RelatedMedicationKnowledge = value; OnPropertyChanged("RelatedMedicationKnowledge"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent> _RelatedMedicationKnowledge;

    /// <summary>
    /// The set of medication resources that are associated with this medication
    /// </summary>
    [FhirElement("associatedMedication", Order=160)]
    [CLSCompliant(false)]
    [References("Medication")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> AssociatedMedication
    {
      get { if(_AssociatedMedication==null) _AssociatedMedication = new List<Hl7.Fhir.Model.ResourceReference>(); return _AssociatedMedication; }
      set { _AssociatedMedication = value; OnPropertyChanged("AssociatedMedication"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _AssociatedMedication;

    /// <summary>
    /// Category of the medication or product
    /// </summary>
    [FhirElement("productType", Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ProductType
    {
      get { if(_ProductType==null) _ProductType = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProductType; }
      set { _ProductType = value; OnPropertyChanged("ProductType"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ProductType;

    /// <summary>
    /// Associated documentation about the medication
    /// </summary>
    [FhirElement("monograph", Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.MonographComponent> Monograph
    {
      get { if(_Monograph==null) _Monograph = new List<Hl7.Fhir.Model.MedicationKnowledge.MonographComponent>(); return _Monograph; }
      set { _Monograph = value; OnPropertyChanged("Monograph"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.MonographComponent> _Monograph;

    /// <summary>
    /// The instructions for preparing the medication
    /// </summary>
    [FhirElement("preparationInstruction", Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PreparationInstruction
    {
      get { return _PreparationInstruction; }
      set { _PreparationInstruction = value; OnPropertyChanged("PreparationInstruction"); }
    }

    private Hl7.Fhir.Model.Markdown _PreparationInstruction;

    /// <summary>
    /// The pricing of the medication
    /// </summary>
    [FhirElement("cost", Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent> Cost
    {
      get { if(_Cost==null) _Cost = new List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent>(); return _Cost; }
      set { _Cost = value; OnPropertyChanged("Cost"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent> _Cost;

    /// <summary>
    /// Program under which a medication is reviewed
    /// </summary>
    [FhirElement("monitoringProgram", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent> MonitoringProgram
    {
      get { if(_MonitoringProgram==null) _MonitoringProgram = new List<Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent>(); return _MonitoringProgram; }
      set { _MonitoringProgram = value; OnPropertyChanged("MonitoringProgram"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent> _MonitoringProgram;

    /// <summary>
    /// Guidelines or protocols for administration of the medication for an indication
    /// </summary>
    [FhirElement("indicationGuideline", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.IndicationGuidelineComponent> IndicationGuideline
    {
      get { if(_IndicationGuideline==null) _IndicationGuideline = new List<Hl7.Fhir.Model.MedicationKnowledge.IndicationGuidelineComponent>(); return _IndicationGuideline; }
      set { _IndicationGuideline = value; OnPropertyChanged("IndicationGuideline"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.IndicationGuidelineComponent> _IndicationGuideline;

    /// <summary>
    /// Categorization of the medication within a formulary or classification system
    /// </summary>
    [FhirElement("medicineClassification", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent> MedicineClassification
    {
      get { if(_MedicineClassification==null) _MedicineClassification = new List<Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent>(); return _MedicineClassification; }
      set { _MedicineClassification = value; OnPropertyChanged("MedicineClassification"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent> _MedicineClassification;

    /// <summary>
    /// Details about packaged medications
    /// </summary>
    [FhirElement("packaging", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent> Packaging
    {
      get { if(_Packaging==null) _Packaging = new List<Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent>(); return _Packaging; }
      set { _Packaging = value; OnPropertyChanged("Packaging"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent> _Packaging;

    /// <summary>
    /// Potential clinical issue with or between medication(s)
    /// </summary>
    [FhirElement("clinicalUseIssue", Order=250)]
    [CLSCompliant(false)]
    [References("ClinicalUseDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ClinicalUseIssue
    {
      get { if(_ClinicalUseIssue==null) _ClinicalUseIssue = new List<Hl7.Fhir.Model.ResourceReference>(); return _ClinicalUseIssue; }
      set { _ClinicalUseIssue = value; OnPropertyChanged("ClinicalUseIssue"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ClinicalUseIssue;

    /// <summary>
    /// Regulatory information about a medication
    /// </summary>
    [FhirElement("regulatory", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent> Regulatory
    {
      get { if(_Regulatory==null) _Regulatory = new List<Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent>(); return _Regulatory; }
      set { _Regulatory = value; OnPropertyChanged("Regulatory"); }
    }

    private List<Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent> _Regulatory;

    /// <summary>
    /// Minimal definition information about the medication
    /// </summary>
    [FhirElement("definitional", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationKnowledge.DefinitionalComponent Definitional
    {
      get { return _Definitional; }
      set { _Definitional = value; OnPropertyChanged("Definitional"); }
    }

    private Hl7.Fhir.Model.MedicationKnowledge.DefinitionalComponent _Definitional;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MedicationKnowledge;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.MedicationKnowledge.MedicationKnowledgeStatusCodes>)StatusElement.DeepCopy();
      if(Author != null) dest.Author = (Hl7.Fhir.Model.ResourceReference)Author.DeepCopy();
      if(IntendedJurisdiction != null) dest.IntendedJurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(IntendedJurisdiction.DeepCopy());
      if(NameElement != null) dest.NameElement = new List<Hl7.Fhir.Model.FhirString>(NameElement.DeepCopy());
      if(RelatedMedicationKnowledge != null) dest.RelatedMedicationKnowledge = new List<Hl7.Fhir.Model.MedicationKnowledge.RelatedMedicationKnowledgeComponent>(RelatedMedicationKnowledge.DeepCopy());
      if(AssociatedMedication != null) dest.AssociatedMedication = new List<Hl7.Fhir.Model.ResourceReference>(AssociatedMedication.DeepCopy());
      if(ProductType != null) dest.ProductType = new List<Hl7.Fhir.Model.CodeableConcept>(ProductType.DeepCopy());
      if(Monograph != null) dest.Monograph = new List<Hl7.Fhir.Model.MedicationKnowledge.MonographComponent>(Monograph.DeepCopy());
      if(PreparationInstruction != null) dest.PreparationInstruction = (Hl7.Fhir.Model.Markdown)PreparationInstruction.DeepCopy();
      if(Cost != null) dest.Cost = new List<Hl7.Fhir.Model.MedicationKnowledge.CostComponent>(Cost.DeepCopy());
      if(MonitoringProgram != null) dest.MonitoringProgram = new List<Hl7.Fhir.Model.MedicationKnowledge.MonitoringProgramComponent>(MonitoringProgram.DeepCopy());
      if(IndicationGuideline != null) dest.IndicationGuideline = new List<Hl7.Fhir.Model.MedicationKnowledge.IndicationGuidelineComponent>(IndicationGuideline.DeepCopy());
      if(MedicineClassification != null) dest.MedicineClassification = new List<Hl7.Fhir.Model.MedicationKnowledge.MedicineClassificationComponent>(MedicineClassification.DeepCopy());
      if(Packaging != null) dest.Packaging = new List<Hl7.Fhir.Model.MedicationKnowledge.PackagingComponent>(Packaging.DeepCopy());
      if(ClinicalUseIssue != null) dest.ClinicalUseIssue = new List<Hl7.Fhir.Model.ResourceReference>(ClinicalUseIssue.DeepCopy());
      if(Regulatory != null) dest.Regulatory = new List<Hl7.Fhir.Model.MedicationKnowledge.RegulatoryComponent>(Regulatory.DeepCopy());
      if(Definitional != null) dest.Definitional = (Hl7.Fhir.Model.MedicationKnowledge.DefinitionalComponent)Definitional.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MedicationKnowledge());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MedicationKnowledge;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(IntendedJurisdiction, otherT.IntendedJurisdiction)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(RelatedMedicationKnowledge, otherT.RelatedMedicationKnowledge)) return false;
      if( !DeepComparable.Matches(AssociatedMedication, otherT.AssociatedMedication)) return false;
      if( !DeepComparable.Matches(ProductType, otherT.ProductType)) return false;
      if( !DeepComparable.Matches(Monograph, otherT.Monograph)) return false;
      if( !DeepComparable.Matches(PreparationInstruction, otherT.PreparationInstruction)) return false;
      if( !DeepComparable.Matches(Cost, otherT.Cost)) return false;
      if( !DeepComparable.Matches(MonitoringProgram, otherT.MonitoringProgram)) return false;
      if( !DeepComparable.Matches(IndicationGuideline, otherT.IndicationGuideline)) return false;
      if( !DeepComparable.Matches(MedicineClassification, otherT.MedicineClassification)) return false;
      if( !DeepComparable.Matches(Packaging, otherT.Packaging)) return false;
      if( !DeepComparable.Matches(ClinicalUseIssue, otherT.ClinicalUseIssue)) return false;
      if( !DeepComparable.Matches(Regulatory, otherT.Regulatory)) return false;
      if( !DeepComparable.Matches(Definitional, otherT.Definitional)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MedicationKnowledge;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(IntendedJurisdiction, otherT.IntendedJurisdiction)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(RelatedMedicationKnowledge, otherT.RelatedMedicationKnowledge)) return false;
      if( !DeepComparable.IsExactly(AssociatedMedication, otherT.AssociatedMedication)) return false;
      if( !DeepComparable.IsExactly(ProductType, otherT.ProductType)) return false;
      if( !DeepComparable.IsExactly(Monograph, otherT.Monograph)) return false;
      if( !DeepComparable.IsExactly(PreparationInstruction, otherT.PreparationInstruction)) return false;
      if( !DeepComparable.IsExactly(Cost, otherT.Cost)) return false;
      if( !DeepComparable.IsExactly(MonitoringProgram, otherT.MonitoringProgram)) return false;
      if( !DeepComparable.IsExactly(IndicationGuideline, otherT.IndicationGuideline)) return false;
      if( !DeepComparable.IsExactly(MedicineClassification, otherT.MedicineClassification)) return false;
      if( !DeepComparable.IsExactly(Packaging, otherT.Packaging)) return false;
      if( !DeepComparable.IsExactly(ClinicalUseIssue, otherT.ClinicalUseIssue)) return false;
      if( !DeepComparable.IsExactly(Regulatory, otherT.Regulatory)) return false;
      if( !DeepComparable.IsExactly(Definitional, otherT.Definitional)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (Code != null) yield return Code;
        if (StatusElement != null) yield return StatusElement;
        if (Author != null) yield return Author;
        foreach (var elem in IntendedJurisdiction) { if (elem != null) yield return elem; }
        foreach (var elem in NameElement) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedMedicationKnowledge) { if (elem != null) yield return elem; }
        foreach (var elem in AssociatedMedication) { if (elem != null) yield return elem; }
        foreach (var elem in ProductType) { if (elem != null) yield return elem; }
        foreach (var elem in Monograph) { if (elem != null) yield return elem; }
        if (PreparationInstruction != null) yield return PreparationInstruction;
        foreach (var elem in Cost) { if (elem != null) yield return elem; }
        foreach (var elem in MonitoringProgram) { if (elem != null) yield return elem; }
        foreach (var elem in IndicationGuideline) { if (elem != null) yield return elem; }
        foreach (var elem in MedicineClassification) { if (elem != null) yield return elem; }
        foreach (var elem in Packaging) { if (elem != null) yield return elem; }
        foreach (var elem in ClinicalUseIssue) { if (elem != null) yield return elem; }
        foreach (var elem in Regulatory) { if (elem != null) yield return elem; }
        if (Definitional != null) yield return Definitional;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (Code != null) yield return new ElementValue("code", Code);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Author != null) yield return new ElementValue("author", Author);
        foreach (var elem in IntendedJurisdiction) { if (elem != null) yield return new ElementValue("intendedJurisdiction", elem); }
        foreach (var elem in NameElement) { if (elem != null) yield return new ElementValue("name", elem); }
        foreach (var elem in RelatedMedicationKnowledge) { if (elem != null) yield return new ElementValue("relatedMedicationKnowledge", elem); }
        foreach (var elem in AssociatedMedication) { if (elem != null) yield return new ElementValue("associatedMedication", elem); }
        foreach (var elem in ProductType) { if (elem != null) yield return new ElementValue("productType", elem); }
        foreach (var elem in Monograph) { if (elem != null) yield return new ElementValue("monograph", elem); }
        if (PreparationInstruction != null) yield return new ElementValue("preparationInstruction", PreparationInstruction);
        foreach (var elem in Cost) { if (elem != null) yield return new ElementValue("cost", elem); }
        foreach (var elem in MonitoringProgram) { if (elem != null) yield return new ElementValue("monitoringProgram", elem); }
        foreach (var elem in IndicationGuideline) { if (elem != null) yield return new ElementValue("indicationGuideline", elem); }
        foreach (var elem in MedicineClassification) { if (elem != null) yield return new ElementValue("medicineClassification", elem); }
        foreach (var elem in Packaging) { if (elem != null) yield return new ElementValue("packaging", elem); }
        foreach (var elem in ClinicalUseIssue) { if (elem != null) yield return new ElementValue("clinicalUseIssue", elem); }
        foreach (var elem in Regulatory) { if (elem != null) yield return new ElementValue("regulatory", elem); }
        if (Definitional != null) yield return new ElementValue("definitional", Definitional);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "code":
          value = Code;
          return Code is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "author":
          value = Author;
          return Author is not null;
        case "intendedJurisdiction":
          value = IntendedJurisdiction;
          return IntendedJurisdiction?.Any() == true;
        case "name":
          value = NameElement;
          return NameElement?.Any() == true;
        case "relatedMedicationKnowledge":
          value = RelatedMedicationKnowledge;
          return RelatedMedicationKnowledge?.Any() == true;
        case "associatedMedication":
          value = AssociatedMedication;
          return AssociatedMedication?.Any() == true;
        case "productType":
          value = ProductType;
          return ProductType?.Any() == true;
        case "monograph":
          value = Monograph;
          return Monograph?.Any() == true;
        case "preparationInstruction":
          value = PreparationInstruction;
          return PreparationInstruction is not null;
        case "cost":
          value = Cost;
          return Cost?.Any() == true;
        case "monitoringProgram":
          value = MonitoringProgram;
          return MonitoringProgram?.Any() == true;
        case "indicationGuideline":
          value = IndicationGuideline;
          return IndicationGuideline?.Any() == true;
        case "medicineClassification":
          value = MedicineClassification;
          return MedicineClassification?.Any() == true;
        case "packaging":
          value = Packaging;
          return Packaging?.Any() == true;
        case "clinicalUseIssue":
          value = ClinicalUseIssue;
          return ClinicalUseIssue?.Any() == true;
        case "regulatory":
          value = Regulatory;
          return Regulatory?.Any() == true;
        case "definitional":
          value = Definitional;
          return Definitional is not null;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Author is not null) yield return new KeyValuePair<string,object>("author",Author);
      if (IntendedJurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("intendedJurisdiction",IntendedJurisdiction);
      if (NameElement?.Any() == true) yield return new KeyValuePair<string,object>("name",NameElement);
      if (RelatedMedicationKnowledge?.Any() == true) yield return new KeyValuePair<string,object>("relatedMedicationKnowledge",RelatedMedicationKnowledge);
      if (AssociatedMedication?.Any() == true) yield return new KeyValuePair<string,object>("associatedMedication",AssociatedMedication);
      if (ProductType?.Any() == true) yield return new KeyValuePair<string,object>("productType",ProductType);
      if (Monograph?.Any() == true) yield return new KeyValuePair<string,object>("monograph",Monograph);
      if (PreparationInstruction is not null) yield return new KeyValuePair<string,object>("preparationInstruction",PreparationInstruction);
      if (Cost?.Any() == true) yield return new KeyValuePair<string,object>("cost",Cost);
      if (MonitoringProgram?.Any() == true) yield return new KeyValuePair<string,object>("monitoringProgram",MonitoringProgram);
      if (IndicationGuideline?.Any() == true) yield return new KeyValuePair<string,object>("indicationGuideline",IndicationGuideline);
      if (MedicineClassification?.Any() == true) yield return new KeyValuePair<string,object>("medicineClassification",MedicineClassification);
      if (Packaging?.Any() == true) yield return new KeyValuePair<string,object>("packaging",Packaging);
      if (ClinicalUseIssue?.Any() == true) yield return new KeyValuePair<string,object>("clinicalUseIssue",ClinicalUseIssue);
      if (Regulatory?.Any() == true) yield return new KeyValuePair<string,object>("regulatory",Regulatory);
      if (Definitional is not null) yield return new KeyValuePair<string,object>("definitional",Definitional);
    }

  }

}

// end of file

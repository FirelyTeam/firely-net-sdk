// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s)
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Appointment","http://hl7.org/fhir/StructureDefinition/Appointment", IsResource=true)]
  public partial class Appointment : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Appointment"; } }

    /// <summary>
    /// The free/busy status of an appointment.
    /// (url: http://hl7.org/fhir/ValueSet/appointmentstatus)
    /// (system: http://hl7.org/fhir/appointmentstatus)
    /// </summary>
    [FhirEnumeration("AppointmentStatus")]
    public enum AppointmentStatus
    {
      /// <summary>
      /// None of the participant(s) have finalized their acceptance of the appointment request, and the start/end time might not be set yet.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("proposed", "http://hl7.org/fhir/appointmentstatus"), Description("Proposed")]
      Proposed,
      /// <summary>
      /// Some or all of the participant(s) have not finalized their acceptance of the appointment request.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("pending", "http://hl7.org/fhir/appointmentstatus"), Description("Pending")]
      Pending,
      /// <summary>
      /// All participant(s) have been considered and the appointment is confirmed to go ahead at the date/times specified.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("booked", "http://hl7.org/fhir/appointmentstatus"), Description("Booked")]
      Booked,
      /// <summary>
      /// The patient/patients has/have arrived and is/are waiting to be seen.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("arrived", "http://hl7.org/fhir/appointmentstatus"), Description("Arrived")]
      Arrived,
      /// <summary>
      /// The planning stages of the appointment are now complete, the encounter resource will exist and will track further status changes. Note that an encounter may exist before the appointment status is fulfilled for many reasons.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("fulfilled", "http://hl7.org/fhir/appointmentstatus"), Description("Fulfilled")]
      Fulfilled,
      /// <summary>
      /// The appointment has been cancelled.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("cancelled", "http://hl7.org/fhir/appointmentstatus"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// Some or all of the participant(s) have not/did not appear for the appointment (usually the patient).
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("noshow", "http://hl7.org/fhir/appointmentstatus"), Description("No Show")]
      Noshow,
      /// <summary>
      /// This instance should not have been part of this patient's medical record.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/appointmentstatus"), Description("Entered in error")]
      EnteredInError,
      /// <summary>
      /// When checked in, all pre-encounter administrative work is complete, and the encounter may begin. (where multiple patients are involved, they are all present).
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("checked-in", "http://hl7.org/fhir/appointmentstatus"), Description("Checked In")]
      CheckedIn,
      /// <summary>
      /// The appointment has been placed on a waitlist, to be scheduled/confirmed in the future when a slot/service is available.
      /// A specific time might or might not be pre-allocated.
      /// (system: http://hl7.org/fhir/appointmentstatus)
      /// </summary>
      [EnumLiteral("waitlist", "http://hl7.org/fhir/appointmentstatus"), Description("Waitlisted")]
      Waitlist,
    }

    /// <summary>
    /// Participants involved in appointment
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Appointment#Participant", IsNestedType=true)]
    public partial class ParticipantComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Appointment#Participant"; } }

      /// <summary>
      /// Role of participant in the appointment
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// Participation period of the actor
      /// </summary>
      [FhirElement("period", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      /// <summary>
      /// Person, Location/HealthcareService or Device
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=60, FiveWs="FiveWs.who")]
      [CLSCompliant(false)]
      [References("Patient","Group","Practitioner","PractitionerRole","CareTeam","RelatedPerson","Device","HealthcareService","Location")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      /// <summary>
      /// The participant is required to attend (optional when false)
      /// </summary>
      [FhirElement("required", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean RequiredElement
      {
        get { return _RequiredElement; }
        set { _RequiredElement = value; OnPropertyChanged("RequiredElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _RequiredElement;

      /// <summary>
      /// The participant is required to attend (optional when false)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Required
      {
        get { return RequiredElement != null ? RequiredElement.Value : null; }
        set
        {
          if (value == null)
            RequiredElement = null;
          else
            RequiredElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Required");
        }
      }

      /// <summary>
      /// accepted | declined | tentative | needs-action
      /// </summary>
      [FhirElement("status", InSummary=true, Order=80)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ParticipationStatus> StatusElement
      {
        get { return _StatusElement; }
        set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
      }

      private Code<Hl7.Fhir.Model.ParticipationStatus> _StatusElement;

      /// <summary>
      /// accepted | declined | tentative | needs-action
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ParticipationStatus? Status
      {
        get { return StatusElement != null ? StatusElement.Value : null; }
        set
        {
          if (value == null)
            StatusElement = null;
          else
            StatusElement = new Code<Hl7.Fhir.Model.ParticipationStatus>(value);
          OnPropertyChanged("Status");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParticipantComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        if(RequiredElement != null) dest.RequiredElement = (Hl7.Fhir.Model.FhirBoolean)RequiredElement.DeepCopy();
        if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.ParticipationStatus>)StatusElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParticipantComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
        if( !DeepComparable.Matches(RequiredElement, otherT.RequiredElement)) return false;
        if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
        if( !DeepComparable.IsExactly(RequiredElement, otherT.RequiredElement)) return false;
        if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (Period != null) yield return Period;
          if (Actor != null) yield return Actor;
          if (RequiredElement != null) yield return RequiredElement;
          if (StatusElement != null) yield return StatusElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (Period != null) yield return new ElementValue("period", Period);
          if (Actor != null) yield return new ElementValue("actor", Actor);
          if (RequiredElement != null) yield return new ElementValue("required", RequiredElement);
          if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "period":
            value = Period;
            return Period is not null;
          case "actor":
            value = Actor;
            return Actor is not null;
          case "required":
            value = RequiredElement;
            return RequiredElement is not null;
          case "status":
            value = StatusElement;
            return StatusElement is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
        if (RequiredElement is not null) yield return new KeyValuePair<string,object>("required",RequiredElement);
        if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      }

    }

    /// <summary>
    /// External Ids for this item
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Appointment.AppointmentStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Appointment.AppointmentStatus> _StatusElement;

    /// <summary>
    /// proposed | pending | booked | arrived | fulfilled | cancelled | noshow | entered-in-error | checked-in | waitlist
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Appointment.AppointmentStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Appointment.AppointmentStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// The coded reason for the appointment being cancelled
    /// </summary>
    [FhirElement("cancellationReason", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept CancellationReason
    {
      get { return _CancellationReason; }
      set { _CancellationReason = value; OnPropertyChanged("CancellationReason"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _CancellationReason;

    /// <summary>
    /// A broad categorization of the service that is to be performed during this appointment
    /// </summary>
    [FhirElement("serviceCategory", InSummary=true, Order=120)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ServiceCategory
    {
      get { if(_ServiceCategory==null) _ServiceCategory = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ServiceCategory; }
      set { _ServiceCategory = value; OnPropertyChanged("ServiceCategory"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ServiceCategory;

    /// <summary>
    /// The specific service that is to be performed during this appointment
    /// </summary>
    [FhirElement("serviceType", InSummary=true, Order=130)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ServiceType
    {
      get { if(_ServiceType==null) _ServiceType = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ServiceType; }
      set { _ServiceType = value; OnPropertyChanged("ServiceType"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ServiceType;

    /// <summary>
    /// The specialty of a practitioner that would be required to perform the service requested in this appointment
    /// </summary>
    [FhirElement("specialty", InSummary=true, Order=140, FiveWs="FiveWs.class")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Specialty
    {
      get { if(_Specialty==null) _Specialty = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Specialty; }
      set { _Specialty = value; OnPropertyChanged("Specialty"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Specialty;

    /// <summary>
    /// The style of appointment or patient that has been booked in the slot (not service type)
    /// </summary>
    [FhirElement("appointmentType", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept AppointmentType
    {
      get { return _AppointmentType; }
      set { _AppointmentType = value; OnPropertyChanged("AppointmentType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _AppointmentType;

    /// <summary>
    /// Reason this appointment is scheduled
    /// </summary>
    [FhirElement("reason", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Reason
    {
      get { if(_Reason==null) _Reason = new List<Hl7.Fhir.Model.CodeableReference>(); return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Reason;

    /// <summary>
    /// Used to make informed decisions if needing to re-prioritize
    /// </summary>
    [FhirElement("priority", Order=170, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Priority
    {
      get { return _Priority; }
      set { _Priority = value; OnPropertyChanged("Priority"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Priority;

    /// <summary>
    /// Shown on a subject line in a meeting request, or appointment list
    /// </summary>
    [FhirElement("description", Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Shown on a subject line in a meeting request, or appointment list
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Appointment replaced by this Appointment
    /// </summary>
    [FhirElement("replaces", Order=190, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Appointment")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Replaces
    {
      get { if(_Replaces==null) _Replaces = new List<Hl7.Fhir.Model.ResourceReference>(); return _Replaces; }
      set { _Replaces = value; OnPropertyChanged("Replaces"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Replaces;

    /// <summary>
    /// Additional information to support the appointment
    /// </summary>
    [FhirElement("supportingInformation", Order=200, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// When appointment is to take place
    /// </summary>
    [FhirElement("start", InSummary=true, Order=210, FiveWs="FiveWs.init")]
    [DataMember]
    public Hl7.Fhir.Model.Instant StartElement
    {
      get { return _StartElement; }
      set { _StartElement = value; OnPropertyChanged("StartElement"); }
    }

    private Hl7.Fhir.Model.Instant _StartElement;

    /// <summary>
    /// When appointment is to take place
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public DateTimeOffset? Start
    {
      get { return StartElement != null ? StartElement.Value : null; }
      set
      {
        if (value == null)
          StartElement = null;
        else
          StartElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("Start");
      }
    }

    /// <summary>
    /// When appointment is to conclude
    /// </summary>
    [FhirElement("end", InSummary=true, Order=220, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Instant EndElement
    {
      get { return _EndElement; }
      set { _EndElement = value; OnPropertyChanged("EndElement"); }
    }

    private Hl7.Fhir.Model.Instant _EndElement;

    /// <summary>
    /// When appointment is to conclude
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public DateTimeOffset? End
    {
      get { return EndElement != null ? EndElement.Value : null; }
      set
      {
        if (value == null)
          EndElement = null;
        else
          EndElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("End");
      }
    }

    /// <summary>
    /// Can be less than start/end (e.g. estimate)
    /// </summary>
    [FhirElement("minutesDuration", Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.PositiveInt MinutesDurationElement
    {
      get { return _MinutesDurationElement; }
      set { _MinutesDurationElement = value; OnPropertyChanged("MinutesDurationElement"); }
    }

    private Hl7.Fhir.Model.PositiveInt _MinutesDurationElement;

    /// <summary>
    /// Can be less than start/end (e.g. estimate)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public int? MinutesDuration
    {
      get { return MinutesDurationElement != null ? MinutesDurationElement.Value : null; }
      set
      {
        if (value == null)
          MinutesDurationElement = null;
        else
          MinutesDurationElement = new Hl7.Fhir.Model.PositiveInt(value);
        OnPropertyChanged("MinutesDuration");
      }
    }

    /// <summary>
    /// The slots that this appointment is filling
    /// </summary>
    [FhirElement("slot", Order=240)]
    [CLSCompliant(false)]
    [References("Slot")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Slot
    {
      get { if(_Slot==null) _Slot = new List<Hl7.Fhir.Model.ResourceReference>(); return _Slot; }
      set { _Slot = value; OnPropertyChanged("Slot"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Slot;

    /// <summary>
    /// The set of accounts that may be used for billing for this Appointment
    /// </summary>
    [FhirElement("account", Order=250)]
    [CLSCompliant(false)]
    [References("Account")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Account
    {
      get { if(_Account==null) _Account = new List<Hl7.Fhir.Model.ResourceReference>(); return _Account; }
      set { _Account = value; OnPropertyChanged("Account"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Account;

    /// <summary>
    /// The date that this appointment was initially created
    /// </summary>
    [FhirElement("created", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CreatedElement
    {
      get { return _CreatedElement; }
      set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

    /// <summary>
    /// The date that this appointment was initially created
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Created
    {
      get { return CreatedElement != null ? CreatedElement.Value : null; }
      set
      {
        if (value == null)
          CreatedElement = null;
        else
          CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Created");
      }
    }

    /// <summary>
    /// Additional comments
    /// </summary>
    [FhirElement("note", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Detailed information and instructions for the patient
    /// </summary>
    [FhirElement("patientInstruction", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> PatientInstruction
    {
      get { if(_PatientInstruction==null) _PatientInstruction = new List<Hl7.Fhir.Model.CodeableReference>(); return _PatientInstruction; }
      set { _PatientInstruction = value; OnPropertyChanged("PatientInstruction"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _PatientInstruction;

    /// <summary>
    /// The service request this appointment is allocated to assess
    /// </summary>
    [FhirElement("basedOn", Order=290)]
    [CLSCompliant(false)]
    [References("ServiceRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// The patient or group associated with the appointment
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=300, FiveWs="FiveWs.who")]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Participants involved in appointment
    /// </summary>
    [FhirElement("participant", Order=310)]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Appointment.ParticipantComponent> Participant
    {
      get { if(_Participant==null) _Participant = new List<Hl7.Fhir.Model.Appointment.ParticipantComponent>(); return _Participant; }
      set { _Participant = value; OnPropertyChanged("Participant"); }
    }

    private List<Hl7.Fhir.Model.Appointment.ParticipantComponent> _Participant;

    /// <summary>
    /// Potential date/time interval(s) requested to allocate the appointment within
    /// </summary>
    [FhirElement("requestedPeriod", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Period> RequestedPeriod
    {
      get { if(_RequestedPeriod==null) _RequestedPeriod = new List<Hl7.Fhir.Model.Period>(); return _RequestedPeriod; }
      set { _RequestedPeriod = value; OnPropertyChanged("RequestedPeriod"); }
    }

    private List<Hl7.Fhir.Model.Period> _RequestedPeriod;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Appointment;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Appointment.AppointmentStatus>)StatusElement.DeepCopy();
      if(CancellationReason != null) dest.CancellationReason = (Hl7.Fhir.Model.CodeableConcept)CancellationReason.DeepCopy();
      if(ServiceCategory != null) dest.ServiceCategory = new List<Hl7.Fhir.Model.CodeableConcept>(ServiceCategory.DeepCopy());
      if(ServiceType != null) dest.ServiceType = new List<Hl7.Fhir.Model.CodeableConcept>(ServiceType.DeepCopy());
      if(Specialty != null) dest.Specialty = new List<Hl7.Fhir.Model.CodeableConcept>(Specialty.DeepCopy());
      if(AppointmentType != null) dest.AppointmentType = (Hl7.Fhir.Model.CodeableConcept)AppointmentType.DeepCopy();
      if(Reason != null) dest.Reason = new List<Hl7.Fhir.Model.CodeableReference>(Reason.DeepCopy());
      if(Priority != null) dest.Priority = (Hl7.Fhir.Model.CodeableConcept)Priority.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(Replaces != null) dest.Replaces = new List<Hl7.Fhir.Model.ResourceReference>(Replaces.DeepCopy());
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(StartElement != null) dest.StartElement = (Hl7.Fhir.Model.Instant)StartElement.DeepCopy();
      if(EndElement != null) dest.EndElement = (Hl7.Fhir.Model.Instant)EndElement.DeepCopy();
      if(MinutesDurationElement != null) dest.MinutesDurationElement = (Hl7.Fhir.Model.PositiveInt)MinutesDurationElement.DeepCopy();
      if(Slot != null) dest.Slot = new List<Hl7.Fhir.Model.ResourceReference>(Slot.DeepCopy());
      if(Account != null) dest.Account = new List<Hl7.Fhir.Model.ResourceReference>(Account.DeepCopy());
      if(CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(PatientInstruction != null) dest.PatientInstruction = new List<Hl7.Fhir.Model.CodeableReference>(PatientInstruction.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Participant != null) dest.Participant = new List<Hl7.Fhir.Model.Appointment.ParticipantComponent>(Participant.DeepCopy());
      if(RequestedPeriod != null) dest.RequestedPeriod = new List<Hl7.Fhir.Model.Period>(RequestedPeriod.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Appointment());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Appointment;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(CancellationReason, otherT.CancellationReason)) return false;
      if( !DeepComparable.Matches(ServiceCategory, otherT.ServiceCategory)) return false;
      if( !DeepComparable.Matches(ServiceType, otherT.ServiceType)) return false;
      if( !DeepComparable.Matches(Specialty, otherT.Specialty)) return false;
      if( !DeepComparable.Matches(AppointmentType, otherT.AppointmentType)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(Priority, otherT.Priority)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(StartElement, otherT.StartElement)) return false;
      if( !DeepComparable.Matches(EndElement, otherT.EndElement)) return false;
      if( !DeepComparable.Matches(MinutesDurationElement, otherT.MinutesDurationElement)) return false;
      if( !DeepComparable.Matches(Slot, otherT.Slot)) return false;
      if( !DeepComparable.Matches(Account, otherT.Account)) return false;
      if( !DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(PatientInstruction, otherT.PatientInstruction)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Participant, otherT.Participant)) return false;
      if( !DeepComparable.Matches(RequestedPeriod, otherT.RequestedPeriod)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Appointment;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(CancellationReason, otherT.CancellationReason)) return false;
      if( !DeepComparable.IsExactly(ServiceCategory, otherT.ServiceCategory)) return false;
      if( !DeepComparable.IsExactly(ServiceType, otherT.ServiceType)) return false;
      if( !DeepComparable.IsExactly(Specialty, otherT.Specialty)) return false;
      if( !DeepComparable.IsExactly(AppointmentType, otherT.AppointmentType)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(Priority, otherT.Priority)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(StartElement, otherT.StartElement)) return false;
      if( !DeepComparable.IsExactly(EndElement, otherT.EndElement)) return false;
      if( !DeepComparable.IsExactly(MinutesDurationElement, otherT.MinutesDurationElement)) return false;
      if( !DeepComparable.IsExactly(Slot, otherT.Slot)) return false;
      if( !DeepComparable.IsExactly(Account, otherT.Account)) return false;
      if( !DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(PatientInstruction, otherT.PatientInstruction)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Participant, otherT.Participant)) return false;
      if( !DeepComparable.IsExactly(RequestedPeriod, otherT.RequestedPeriod)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (CancellationReason != null) yield return CancellationReason;
        foreach (var elem in ServiceCategory) { if (elem != null) yield return elem; }
        foreach (var elem in ServiceType) { if (elem != null) yield return elem; }
        foreach (var elem in Specialty) { if (elem != null) yield return elem; }
        if (AppointmentType != null) yield return AppointmentType;
        foreach (var elem in Reason) { if (elem != null) yield return elem; }
        if (Priority != null) yield return Priority;
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in Replaces) { if (elem != null) yield return elem; }
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        if (StartElement != null) yield return StartElement;
        if (EndElement != null) yield return EndElement;
        if (MinutesDurationElement != null) yield return MinutesDurationElement;
        foreach (var elem in Slot) { if (elem != null) yield return elem; }
        foreach (var elem in Account) { if (elem != null) yield return elem; }
        if (CreatedElement != null) yield return CreatedElement;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in PatientInstruction) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        if (Subject != null) yield return Subject;
        foreach (var elem in Participant) { if (elem != null) yield return elem; }
        foreach (var elem in RequestedPeriod) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (CancellationReason != null) yield return new ElementValue("cancellationReason", CancellationReason);
        foreach (var elem in ServiceCategory) { if (elem != null) yield return new ElementValue("serviceCategory", elem); }
        foreach (var elem in ServiceType) { if (elem != null) yield return new ElementValue("serviceType", elem); }
        foreach (var elem in Specialty) { if (elem != null) yield return new ElementValue("specialty", elem); }
        if (AppointmentType != null) yield return new ElementValue("appointmentType", AppointmentType);
        foreach (var elem in Reason) { if (elem != null) yield return new ElementValue("reason", elem); }
        if (Priority != null) yield return new ElementValue("priority", Priority);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in Replaces) { if (elem != null) yield return new ElementValue("replaces", elem); }
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        if (StartElement != null) yield return new ElementValue("start", StartElement);
        if (EndElement != null) yield return new ElementValue("end", EndElement);
        if (MinutesDurationElement != null) yield return new ElementValue("minutesDuration", MinutesDurationElement);
        foreach (var elem in Slot) { if (elem != null) yield return new ElementValue("slot", elem); }
        foreach (var elem in Account) { if (elem != null) yield return new ElementValue("account", elem); }
        if (CreatedElement != null) yield return new ElementValue("created", CreatedElement);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in PatientInstruction) { if (elem != null) yield return new ElementValue("patientInstruction", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        if (Subject != null) yield return new ElementValue("subject", Subject);
        foreach (var elem in Participant) { if (elem != null) yield return new ElementValue("participant", elem); }
        foreach (var elem in RequestedPeriod) { if (elem != null) yield return new ElementValue("requestedPeriod", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "cancellationReason":
          value = CancellationReason;
          return CancellationReason is not null;
        case "serviceCategory":
          value = ServiceCategory;
          return ServiceCategory?.Any() == true;
        case "serviceType":
          value = ServiceType;
          return ServiceType?.Any() == true;
        case "specialty":
          value = Specialty;
          return Specialty?.Any() == true;
        case "appointmentType":
          value = AppointmentType;
          return AppointmentType is not null;
        case "reason":
          value = Reason;
          return Reason?.Any() == true;
        case "priority":
          value = Priority;
          return Priority is not null;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "replaces":
          value = Replaces;
          return Replaces?.Any() == true;
        case "supportingInformation":
          value = SupportingInformation;
          return SupportingInformation?.Any() == true;
        case "start":
          value = StartElement;
          return StartElement is not null;
        case "end":
          value = EndElement;
          return EndElement is not null;
        case "minutesDuration":
          value = MinutesDurationElement;
          return MinutesDurationElement is not null;
        case "slot":
          value = Slot;
          return Slot?.Any() == true;
        case "account":
          value = Account;
          return Account?.Any() == true;
        case "created":
          value = CreatedElement;
          return CreatedElement is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "patientInstruction":
          value = PatientInstruction;
          return PatientInstruction?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "participant":
          value = Participant;
          return Participant?.Any() == true;
        case "requestedPeriod":
          value = RequestedPeriod;
          return RequestedPeriod?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (CancellationReason is not null) yield return new KeyValuePair<string,object>("cancellationReason",CancellationReason);
      if (ServiceCategory?.Any() == true) yield return new KeyValuePair<string,object>("serviceCategory",ServiceCategory);
      if (ServiceType?.Any() == true) yield return new KeyValuePair<string,object>("serviceType",ServiceType);
      if (Specialty?.Any() == true) yield return new KeyValuePair<string,object>("specialty",Specialty);
      if (AppointmentType is not null) yield return new KeyValuePair<string,object>("appointmentType",AppointmentType);
      if (Reason?.Any() == true) yield return new KeyValuePair<string,object>("reason",Reason);
      if (Priority is not null) yield return new KeyValuePair<string,object>("priority",Priority);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (Replaces?.Any() == true) yield return new KeyValuePair<string,object>("replaces",Replaces);
      if (SupportingInformation?.Any() == true) yield return new KeyValuePair<string,object>("supportingInformation",SupportingInformation);
      if (StartElement is not null) yield return new KeyValuePair<string,object>("start",StartElement);
      if (EndElement is not null) yield return new KeyValuePair<string,object>("end",EndElement);
      if (MinutesDurationElement is not null) yield return new KeyValuePair<string,object>("minutesDuration",MinutesDurationElement);
      if (Slot?.Any() == true) yield return new KeyValuePair<string,object>("slot",Slot);
      if (Account?.Any() == true) yield return new KeyValuePair<string,object>("account",Account);
      if (CreatedElement is not null) yield return new KeyValuePair<string,object>("created",CreatedElement);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (PatientInstruction?.Any() == true) yield return new KeyValuePair<string,object>("patientInstruction",PatientInstruction);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Participant?.Any() == true) yield return new KeyValuePair<string,object>("participant",Participant);
      if (RequestedPeriod?.Any() == true) yield return new KeyValuePair<string,object>("requestedPeriod",RequestedPeriod);
    }

  }

}

// end of file

<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Target Name="CleanBinObj" AfterTargets="Clean">
    <!-- <RemoveDir Directories="$(OutputPath);$(IntermediateOutputPath)" /> -->
    <RemoveDir Directories="$(MSBuildProjectDirectory)\bin;$(MSBuildProjectDirectory)\obj" />
  </Target>

  <Target Name="CopyPackage" AfterTargets="Pack">
    <PropertyGroup>
      <PackageOutputDirectory>..\..\dist</PackageOutputDirectory>
    </PropertyGroup>    
    <Copy SourceFiles="$(OutputPath)$(PackageId).$(PackageVersion).nupkg" DestinationFolder="$(PackageOutputDirectory)" />
    <Copy SourceFiles="$(OutputPath)$(PackageId).$(PackageVersion).symbols.nupkg" DestinationFolder="$(PackageOutputDirectory)" />
  </Target>

    <Choose>  
        <When Condition="$(APPVEYOR)=='True' ">
          <PropertyGroup>
            <VSTestLogger>/logger:Appveyor</VSTestLogger>
            <TestCaseFilter>/TestCaseFilter:"TestCategory!=IntegrationTest&amp;TestCategory!=FhirClient"</TestCaseFilter>
          </PropertyGroup>
        </When>
        <Otherwise>
          <PropertyGroup>
            <VSTestLogger>/logger:Console</VSTestLogger>
            <TestCaseFilter />
          </PropertyGroup>
        </Otherwise>
    </Choose>

  <Target Name="VSTest" DependsOnTargets="Build" Condition="$(ContainsTests) == 'true'">
    <Message Text="Appveyor = $(APPVEYOR)" Importance="high" />  
    <Message Text="Logger = $(VSTestLogger), Filter = $(TestCaseFilter)" Importance="high" />
    <Exec Command='vstest.console.exe $(VSTestLogger) $(TestCaseFilter) $(OutputPath)$(AssemblyName).dll' />
  </Target>

  <UsingTask TaskName="ZipDir" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <ZipFileName ParameterType="System.String" Required="true" />
      <DirectoryName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression.FileSystem" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs"><![CDATA[
		  try
		  {
			Log.LogMessage(string.Format("Zipping Directory {0} to {1}", DirectoryName, ZipFileName));
			if(File.Exists(ZipFileName)) File.Delete(ZipFileName);
			ZipFile.CreateFromDirectory( DirectoryName, ZipFileName );
			return true;
		  }
		  catch(Exception ex)
		  {
			Log.LogErrorFromException(ex);
			return false;
		  }
		]]></Code>
    </Task>
  </UsingTask>


  <UsingTask TaskName="CleanSpecFiles" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
    <ParameterGroup>
      <DirectoryName ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.XML" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System.Xml.Linq" />
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs"><![CDATA[
          try
          {
            Log.LogMessage(string.Format("Cleaning spec files in directory {0}", DirectoryName));

            var fhirns = XNamespace.Get("http://hl7.org/fhir");
            var xmlns = XNamespace.Get("http://www.w3.org/1999/xhtml");
            
            var files = Directory.EnumerateFiles(DirectoryName, "*.xml");

            Log.LogMessage(string.Format("Cleaning {0} files", files.Count()));
            foreach(var file in files)
            {
                var xdoc = XDocument.Load(file);
                var sizeBefore = xdoc.ToString().Length;
                
                var narrative = xdoc.Elements(fhirns + "Bundle").Elements(fhirns + "entry").Elements(fhirns + "resource")
                        .Elements().Elements(fhirns + "text").Elements(xmlns + "div");
                foreach(var narrativeElement in narrative)
                {
                    narrativeElement.RemoveNodes();
                    narrativeElement.Add(new XElement(xmlns + "p",
                        new XText("The narrative has been removed to reduce the size of the distribution of the Hl7.Fhir.Specification library")));
                }

                var sizeAfter = xdoc.ToString().Length;
                Log.LogMessage(string.Format("File {0} shrunk from {1} to {2} bytes", file, sizeBefore, sizeAfter));
                xdoc.Save(file);
            }
          }
          catch(Exception ex)
          {
            Log.LogMessage("Crap!");
            Log.LogErrorFromException(ex);
            return false;
          }
        ]]></Code>
    </Task>
  </UsingTask>

  </Project>
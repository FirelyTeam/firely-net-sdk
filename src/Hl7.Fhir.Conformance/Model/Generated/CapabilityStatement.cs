// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A statement of system capabilities
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("CapabilityStatement","http://hl7.org/fhir/StructureDefinition/CapabilityStatement", IsResource=true)]
  public partial class CapabilityStatement : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "CapabilityStatement"; } }

    /// <summary>
    /// The mode of a RESTful capability statement.
    /// (url: http://hl7.org/fhir/ValueSet/restful-capability-mode)
    /// (system: http://hl7.org/fhir/restful-capability-mode)
    /// </summary>
    [FhirEnumeration("RestfulCapabilityMode", "http://hl7.org/fhir/ValueSet/restful-capability-mode")]
    public enum RestfulCapabilityMode
    {
      /// <summary>
      /// The application acts as a client for this resource.
      /// (system: http://hl7.org/fhir/restful-capability-mode)
      /// </summary>
      [EnumLiteral("client", "http://hl7.org/fhir/restful-capability-mode"), Description("Client")]
      Client,
      /// <summary>
      /// The application acts as a server for this resource.
      /// (system: http://hl7.org/fhir/restful-capability-mode)
      /// </summary>
      [EnumLiteral("server", "http://hl7.org/fhir/restful-capability-mode"), Description("Server")]
      Server,
    }

    /// <summary>
    /// How the system supports versioning for a resource.
    /// (url: http://hl7.org/fhir/ValueSet/versioning-policy)
    /// (system: http://hl7.org/fhir/versioning-policy)
    /// </summary>
    [FhirEnumeration("ResourceVersionPolicy", "http://hl7.org/fhir/ValueSet/versioning-policy")]
    public enum ResourceVersionPolicy
    {
      /// <summary>
      /// VersionId meta-property is not supported (server) or used (client).
      /// (system: http://hl7.org/fhir/versioning-policy)
      /// </summary>
      [EnumLiteral("no-version", "http://hl7.org/fhir/versioning-policy"), Description("No VersionId Support")]
      NoVersion,
      /// <summary>
      /// VersionId meta-property is supported (server) or used (client).
      /// (system: http://hl7.org/fhir/versioning-policy)
      /// </summary>
      [EnumLiteral("versioned", "http://hl7.org/fhir/versioning-policy"), Description("Versioned")]
      Versioned,
      /// <summary>
      /// Supports version-aware updates (server) or will be specified (If-match header) for updates (client).
      /// (system: http://hl7.org/fhir/versioning-policy)
      /// </summary>
      [EnumLiteral("versioned-update", "http://hl7.org/fhir/versioning-policy"), Description("VersionId tracked fully")]
      VersionedUpdate,
    }

    /// <summary>
    /// A code that indicates how the server supports conditional read.
    /// (url: http://hl7.org/fhir/ValueSet/conditional-read-status)
    /// (system: http://hl7.org/fhir/conditional-read-status)
    /// </summary>
    [FhirEnumeration("ConditionalReadStatus", "http://hl7.org/fhir/ValueSet/conditional-read-status")]
    public enum ConditionalReadStatus
    {
      /// <summary>
      /// No support for conditional reads.
      /// (system: http://hl7.org/fhir/conditional-read-status)
      /// </summary>
      [EnumLiteral("not-supported", "http://hl7.org/fhir/conditional-read-status"), Description("Not Supported")]
      NotSupported,
      /// <summary>
      /// Conditional reads are supported, but only with the If-Modified-Since HTTP Header.
      /// (system: http://hl7.org/fhir/conditional-read-status)
      /// </summary>
      [EnumLiteral("modified-since", "http://hl7.org/fhir/conditional-read-status"), Description("If-Modified-Since")]
      ModifiedSince,
      /// <summary>
      /// Conditional reads are supported, but only with the If-None-Match HTTP Header.
      /// (system: http://hl7.org/fhir/conditional-read-status)
      /// </summary>
      [EnumLiteral("not-match", "http://hl7.org/fhir/conditional-read-status"), Description("If-None-Match")]
      NotMatch,
      /// <summary>
      /// Conditional reads are supported, with both If-Modified-Since and If-None-Match HTTP Headers.
      /// (system: http://hl7.org/fhir/conditional-read-status)
      /// </summary>
      [EnumLiteral("full-support", "http://hl7.org/fhir/conditional-read-status"), Description("Full Support")]
      FullSupport,
    }

    /// <summary>
    /// A code that indicates how the server supports conditional delete.
    /// (url: http://hl7.org/fhir/ValueSet/conditional-delete-status)
    /// (system: http://hl7.org/fhir/conditional-delete-status)
    /// </summary>
    [FhirEnumeration("ConditionalDeleteStatus", "http://hl7.org/fhir/ValueSet/conditional-delete-status")]
    public enum ConditionalDeleteStatus
    {
      /// <summary>
      /// No support for conditional deletes.
      /// (system: http://hl7.org/fhir/conditional-delete-status)
      /// </summary>
      [EnumLiteral("not-supported", "http://hl7.org/fhir/conditional-delete-status"), Description("Not Supported")]
      NotSupported,
      /// <summary>
      /// Conditional deletes are supported, but only single resources at a time.
      /// (system: http://hl7.org/fhir/conditional-delete-status)
      /// </summary>
      [EnumLiteral("single", "http://hl7.org/fhir/conditional-delete-status"), Description("Single Deletes Supported")]
      Single,
      /// <summary>
      /// Conditional deletes are supported, and multiple resources can be deleted in a single interaction.
      /// (system: http://hl7.org/fhir/conditional-delete-status)
      /// </summary>
      [EnumLiteral("multiple", "http://hl7.org/fhir/conditional-delete-status"), Description("Multiple Deletes Supported")]
      Multiple,
    }

    /// <summary>
    /// A set of flags that defines how references are supported.
    /// (url: http://hl7.org/fhir/ValueSet/reference-handling-policy)
    /// (system: http://hl7.org/fhir/reference-handling-policy)
    /// </summary>
    [FhirEnumeration("ReferenceHandlingPolicy", "http://hl7.org/fhir/ValueSet/reference-handling-policy")]
    public enum ReferenceHandlingPolicy
    {
      /// <summary>
      /// The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
      /// (system: http://hl7.org/fhir/reference-handling-policy)
      /// </summary>
      [EnumLiteral("literal", "http://hl7.org/fhir/reference-handling-policy"), Description("Literal References")]
      Literal,
      /// <summary>
      /// The server allows logical references (i.e. using Reference.identifier).
      /// (system: http://hl7.org/fhir/reference-handling-policy)
      /// </summary>
      [EnumLiteral("logical", "http://hl7.org/fhir/reference-handling-policy"), Description("Logical References")]
      Logical,
      /// <summary>
      /// The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
      /// (system: http://hl7.org/fhir/reference-handling-policy)
      /// </summary>
      [EnumLiteral("resolves", "http://hl7.org/fhir/reference-handling-policy"), Description("Resolves References")]
      Resolves,
      /// <summary>
      /// The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
      /// (system: http://hl7.org/fhir/reference-handling-policy)
      /// </summary>
      [EnumLiteral("enforced", "http://hl7.org/fhir/reference-handling-policy"), Description("Reference Integrity Enforced")]
      Enforced,
      /// <summary>
      /// The server does not support references that point to other servers.
      /// (system: http://hl7.org/fhir/reference-handling-policy)
      /// </summary>
      [EnumLiteral("local", "http://hl7.org/fhir/reference-handling-policy"), Description("Local References Only")]
      Local,
    }

    /// <summary>
    /// Operations supported by REST at the type or instance level.
    /// (url: http://hl7.org/fhir/ValueSet/type-restful-interaction)
    /// (system: http://hl7.org/fhir/restful-interaction)
    /// </summary>
    [FhirEnumeration("TypeRestfulInteraction", "http://hl7.org/fhir/ValueSet/type-restful-interaction")]
    public enum TypeRestfulInteraction
    {
      /// <summary>
      /// Read the current state of the resource.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("read", "http://hl7.org/fhir/restful-interaction"), Description("read")]
      Read,
      /// <summary>
      /// Read the state of a specific version of the resource.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("vread", "http://hl7.org/fhir/restful-interaction"), Description("vread")]
      Vread,
      /// <summary>
      /// Update an existing resource by its id (or create it if it is new).
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("update", "http://hl7.org/fhir/restful-interaction"), Description("update")]
      Update,
      /// <summary>
      /// Update an existing resource by posting a set of changes to it.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("patch", "http://hl7.org/fhir/restful-interaction"), Description("patch")]
      Patch,
      /// <summary>
      /// Delete a resource.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("delete", "http://hl7.org/fhir/restful-interaction"), Description("delete")]
      Delete,
      /// <summary>
      /// Retrieve the change history for a particular resource.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("history-instance", "http://hl7.org/fhir/restful-interaction"), Description("history-instance")]
      HistoryInstance,
      /// <summary>
      /// Retrieve the change history for all resources of a particular type.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("history-type", "http://hl7.org/fhir/restful-interaction"), Description("history-type")]
      HistoryType,
      /// <summary>
      /// Create a new resource with a server assigned id.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("create", "http://hl7.org/fhir/restful-interaction"), Description("create")]
      Create,
      /// <summary>
      /// Search all resources of the specified type based on some filter criteria.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("search-type", "http://hl7.org/fhir/restful-interaction"), Description("search-type")]
      SearchType,
    }

    /// <summary>
    /// Operations supported by REST at the system level.
    /// (url: http://hl7.org/fhir/ValueSet/system-restful-interaction)
    /// (system: http://hl7.org/fhir/restful-interaction)
    /// </summary>
    [FhirEnumeration("SystemRestfulInteraction", "http://hl7.org/fhir/ValueSet/system-restful-interaction")]
    public enum SystemRestfulInteraction
    {
      /// <summary>
      /// Update, create or delete a set of resources as a single transaction.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("transaction", "http://hl7.org/fhir/restful-interaction"), Description("transaction")]
      Transaction,
      /// <summary>
      /// perform a set of a separate interactions in a single http operation
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("batch", "http://hl7.org/fhir/restful-interaction"), Description("batch")]
      Batch,
      /// <summary>
      /// Search all resources based on some filter criteria.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("search-system", "http://hl7.org/fhir/restful-interaction"), Description("search-system")]
      SearchSystem,
      /// <summary>
      /// Retrieve the change history for all resources on a system.
      /// (system: http://hl7.org/fhir/restful-interaction)
      /// </summary>
      [EnumLiteral("history-system", "http://hl7.org/fhir/restful-interaction"), Description("history-system")]
      HistorySystem,
    }

    /// <summary>
    /// The mode of a message capability statement.
    /// (url: http://hl7.org/fhir/ValueSet/event-capability-mode)
    /// (system: http://hl7.org/fhir/event-capability-mode)
    /// </summary>
    [FhirEnumeration("EventCapabilityMode", "http://hl7.org/fhir/ValueSet/event-capability-mode")]
    public enum EventCapabilityMode
    {
      /// <summary>
      /// The application sends requests and receives responses.
      /// (system: http://hl7.org/fhir/event-capability-mode)
      /// </summary>
      [EnumLiteral("sender", "http://hl7.org/fhir/event-capability-mode"), Description("Sender")]
      Sender,
      /// <summary>
      /// The application receives requests and sends responses.
      /// (system: http://hl7.org/fhir/event-capability-mode)
      /// </summary>
      [EnumLiteral("receiver", "http://hl7.org/fhir/event-capability-mode"), Description("Receiver")]
      Receiver,
    }

    /// <summary>
    /// Whether the application produces or consumes documents.
    /// (url: http://hl7.org/fhir/ValueSet/document-mode)
    /// (system: http://hl7.org/fhir/document-mode)
    /// </summary>
    [FhirEnumeration("DocumentMode", "http://hl7.org/fhir/ValueSet/document-mode")]
    public enum DocumentMode
    {
      /// <summary>
      /// The application produces documents of the specified type.
      /// (system: http://hl7.org/fhir/document-mode)
      /// </summary>
      [EnumLiteral("producer", "http://hl7.org/fhir/document-mode"), Description("Producer")]
      Producer,
      /// <summary>
      /// The application consumes documents of the specified type.
      /// (system: http://hl7.org/fhir/document-mode)
      /// </summary>
      [EnumLiteral("consumer", "http://hl7.org/fhir/document-mode"), Description("Consumer")]
      Consumer,
    }

    /// <summary>
    /// Software that is covered by this capability statement
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Software", IsNestedType=true)]
    [BackboneType("CapabilityStatement.software")]
    public partial class SoftwareComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Software"; } }

      /// <summary>
      /// A name the software is known by
      /// </summary>
      [FhirElement("name", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// A name the software is known by
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Version covered by this statement
      /// </summary>
      [FhirElement("version", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString VersionElement
      {
        get { return _VersionElement; }
        set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _VersionElement;

      /// <summary>
      /// Version covered by this statement
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Version
      {
        get { return VersionElement != null ? VersionElement.Value : null; }
        set
        {
          if (value == null)
            VersionElement = null;
          else
            VersionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Version");
        }
      }

      /// <summary>
      /// Date this version was released
      /// </summary>
      [FhirElement("releaseDate", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime ReleaseDateElement
      {
        get { return _ReleaseDateElement; }
        set { _ReleaseDateElement = value; OnPropertyChanged("ReleaseDateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _ReleaseDateElement;

      /// <summary>
      /// Date this version was released
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ReleaseDate
      {
        get { return ReleaseDateElement != null ? ReleaseDateElement.Value : null; }
        set
        {
          if (value == null)
            ReleaseDateElement = null;
          else
            ReleaseDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("ReleaseDate");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SoftwareComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
        if(ReleaseDateElement != null) dest.ReleaseDateElement = (Hl7.Fhir.Model.FhirDateTime)ReleaseDateElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SoftwareComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SoftwareComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
        if( !DeepComparable.Matches(ReleaseDateElement, otherT.ReleaseDateElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SoftwareComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
        if( !DeepComparable.IsExactly(ReleaseDateElement, otherT.ReleaseDateElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (VersionElement != null) yield return VersionElement;
          if (ReleaseDateElement != null) yield return ReleaseDateElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (VersionElement != null) yield return new ElementValue("version", VersionElement);
          if (ReleaseDateElement != null) yield return new ElementValue("releaseDate", ReleaseDateElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "version":
            value = VersionElement;
            return VersionElement is not null;
          case "releaseDate":
            value = ReleaseDateElement;
            return ReleaseDateElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
        if (ReleaseDateElement is not null) yield return new KeyValuePair<string,object>("releaseDate",ReleaseDateElement);
      }

    }

    /// <summary>
    /// If this describes a specific instance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Implementation", IsNestedType=true)]
    [BackboneType("CapabilityStatement.implementation")]
    public partial class ImplementationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Implementation"; } }

      /// <summary>
      /// Describes this specific instance
      /// </summary>
      [FhirElement("description", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(FhirString))]
      [DeclaredType(Type = typeof(Markdown), Since = FhirRelease.R5)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// Describes this specific instance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Base URL for the installation
      /// </summary>
      [FhirElement("url", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUrl UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUrl _UrlElement;

      /// <summary>
      /// Base URL for the installation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUrl(value);
          OnPropertyChanged("Url");
        }
      }

      /// <summary>
      /// Organization that manages the data
      /// </summary>
      [FhirElement("custodian", InSummary=true, Order=60)]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Custodian
      {
        get { return _Custodian; }
        set { _Custodian = value; OnPropertyChanged("Custodian"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Custodian;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ImplementationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUrl)UrlElement.DeepCopy();
        if(Custodian != null) dest.Custodian = (Hl7.Fhir.Model.ResourceReference)Custodian.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ImplementationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ImplementationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.Matches(Custodian, otherT.Custodian)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ImplementationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.IsExactly(Custodian, otherT.Custodian)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (UrlElement != null) yield return UrlElement;
          if (Custodian != null) yield return Custodian;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
          if (Custodian != null) yield return new ElementValue("custodian", Custodian);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "url":
            value = UrlElement;
            return UrlElement is not null;
          case "custodian":
            value = Custodian;
            return Custodian is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
        if (Custodian is not null) yield return new KeyValuePair<string,object>("custodian",Custodian);
      }

    }

    /// <summary>
    /// If the endpoint is a RESTful one
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Rest", IsNestedType=true)]
    [BackboneType("CapabilityStatement.rest")]
    public partial class RestComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Rest"; } }

      /// <summary>
      /// client | server
      /// </summary>
      [FhirElement("mode", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("RestfulCapabilityMode")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode> _ModeElement;

      /// <summary>
      /// client | server
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>(value);
          OnPropertyChanged("Mode");
        }
      }

      /// <summary>
      /// General description of implementation
      /// </summary>
      [FhirElement("documentation", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// General description of implementation
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      /// <summary>
      /// Information about security of implementation
      /// </summary>
      [FhirElement("security", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CapabilityStatement.SecurityComponent Security
      {
        get { return _Security; }
        set { _Security = value; OnPropertyChanged("Security"); }
      }

      private Hl7.Fhir.Model.CapabilityStatement.SecurityComponent _Security;

      /// <summary>
      /// Resource served on the REST interface
      /// </summary>
      [FhirElement("resource", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.ResourceComponent> Resource
      {
        get { if(_Resource==null) _Resource = new List<Hl7.Fhir.Model.CapabilityStatement.ResourceComponent>(); return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.ResourceComponent> _Resource;

      /// <summary>
      /// What operations are supported?
      /// </summary>
      [FhirElement("interaction", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent> Interaction
      {
        get { if(_Interaction==null) _Interaction = new List<Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent>(); return _Interaction; }
        set { _Interaction = value; OnPropertyChanged("Interaction"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent> _Interaction;

      /// <summary>
      /// Search parameters for searching all resources
      /// </summary>
      [FhirElement("searchParam", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent> SearchParam
      {
        get { if(_SearchParam==null) _SearchParam = new List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent>(); return _SearchParam; }
        set { _SearchParam = value; OnPropertyChanged("SearchParam"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent> _SearchParam;

      /// <summary>
      /// Definition of a system level operation
      /// </summary>
      [FhirElement("operation", InSummary=true, Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent> Operation
      {
        get { if(_Operation==null) _Operation = new List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent>(); return _Operation; }
        set { _Operation = value; OnPropertyChanged("Operation"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent> _Operation;

      /// <summary>
      /// Compartments served/used by system
      /// </summary>
      [FhirElement("compartment", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Canonical> CompartmentElement
      {
        get { if(_CompartmentElement==null) _CompartmentElement = new List<Hl7.Fhir.Model.Canonical>(); return _CompartmentElement; }
        set { _CompartmentElement = value; OnPropertyChanged("CompartmentElement"); }
      }

      private List<Hl7.Fhir.Model.Canonical> _CompartmentElement;

      /// <summary>
      /// Compartments served/used by system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> Compartment
      {
        get { return CompartmentElement != null ? CompartmentElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            CompartmentElement = null;
          else
            CompartmentElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
          OnPropertyChanged("Compartment");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RestComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.CapabilityStatement.RestfulCapabilityMode>)ModeElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        if(Security != null) dest.Security = (Hl7.Fhir.Model.CapabilityStatement.SecurityComponent)Security.DeepCopy();
        if(Resource != null) dest.Resource = new List<Hl7.Fhir.Model.CapabilityStatement.ResourceComponent>(Resource.DeepCopy());
        if(Interaction != null) dest.Interaction = new List<Hl7.Fhir.Model.CapabilityStatement.SystemInteractionComponent>(Interaction.DeepCopy());
        if(SearchParam != null) dest.SearchParam = new List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent>(SearchParam.DeepCopy());
        if(Operation != null) dest.Operation = new List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent>(Operation.DeepCopy());
        if(CompartmentElement != null) dest.CompartmentElement = new List<Hl7.Fhir.Model.Canonical>(CompartmentElement.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RestComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RestComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.Matches(Security, otherT.Security)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;
        if( !DeepComparable.Matches(Interaction, otherT.Interaction)) return false;
        if( !DeepComparable.Matches(SearchParam, otherT.SearchParam)) return false;
        if( !DeepComparable.Matches(Operation, otherT.Operation)) return false;
        if( !DeepComparable.Matches(CompartmentElement, otherT.CompartmentElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RestComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.IsExactly(Security, otherT.Security)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;
        if( !DeepComparable.IsExactly(Interaction, otherT.Interaction)) return false;
        if( !DeepComparable.IsExactly(SearchParam, otherT.SearchParam)) return false;
        if( !DeepComparable.IsExactly(Operation, otherT.Operation)) return false;
        if( !DeepComparable.IsExactly(CompartmentElement, otherT.CompartmentElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ModeElement != null) yield return ModeElement;
          if (DocumentationElement != null) yield return DocumentationElement;
          if (Security != null) yield return Security;
          foreach (var elem in Resource) { if (elem != null) yield return elem; }
          foreach (var elem in Interaction) { if (elem != null) yield return elem; }
          foreach (var elem in SearchParam) { if (elem != null) yield return elem; }
          foreach (var elem in Operation) { if (elem != null) yield return elem; }
          foreach (var elem in CompartmentElement) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
          if (Security != null) yield return new ElementValue("security", Security);
          foreach (var elem in Resource) { if (elem != null) yield return new ElementValue("resource", elem); }
          foreach (var elem in Interaction) { if (elem != null) yield return new ElementValue("interaction", elem); }
          foreach (var elem in SearchParam) { if (elem != null) yield return new ElementValue("searchParam", elem); }
          foreach (var elem in Operation) { if (elem != null) yield return new ElementValue("operation", elem); }
          foreach (var elem in CompartmentElement) { if (elem != null) yield return new ElementValue("compartment", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = ModeElement;
            return ModeElement is not null;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          case "security":
            value = Security;
            return Security is not null;
          case "resource":
            value = Resource;
            return Resource?.Any() == true;
          case "interaction":
            value = Interaction;
            return Interaction?.Any() == true;
          case "searchParam":
            value = SearchParam;
            return SearchParam?.Any() == true;
          case "operation":
            value = Operation;
            return Operation?.Any() == true;
          case "compartment":
            value = CompartmentElement;
            return CompartmentElement?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ModeElement is not null) yield return new KeyValuePair<string,object>("mode",ModeElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
        if (Security is not null) yield return new KeyValuePair<string,object>("security",Security);
        if (Resource?.Any() == true) yield return new KeyValuePair<string,object>("resource",Resource);
        if (Interaction?.Any() == true) yield return new KeyValuePair<string,object>("interaction",Interaction);
        if (SearchParam?.Any() == true) yield return new KeyValuePair<string,object>("searchParam",SearchParam);
        if (Operation?.Any() == true) yield return new KeyValuePair<string,object>("operation",Operation);
        if (CompartmentElement?.Any() == true) yield return new KeyValuePair<string,object>("compartment",CompartmentElement);
      }

    }

    /// <summary>
    /// Information about security of implementation
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Security", IsNestedType=true)]
    [BackboneType("CapabilityStatement.rest.security")]
    public partial class SecurityComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Security"; } }

      /// <summary>
      /// Adds CORS Headers (http://enable-cors.org/)
      /// </summary>
      [FhirElement("cors", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean CorsElement
      {
        get { return _CorsElement; }
        set { _CorsElement = value; OnPropertyChanged("CorsElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _CorsElement;

      /// <summary>
      /// Adds CORS Headers (http://enable-cors.org/)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Cors
      {
        get { return CorsElement != null ? CorsElement.Value : null; }
        set
        {
          if (value == null)
            CorsElement = null;
          else
            CorsElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Cors");
        }
      }

      /// <summary>
      /// OAuth | SMART-on-FHIR | NTLM | Basic | Kerberos | Certificates
      /// </summary>
      [FhirElement("service", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Service
      {
        get { if(_Service==null) _Service = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Service; }
        set { _Service = value; OnPropertyChanged("Service"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Service;

      /// <summary>
      /// General description of how security works
      /// </summary>
      [FhirElement("description", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// General description of how security works
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SecurityComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CorsElement != null) dest.CorsElement = (Hl7.Fhir.Model.FhirBoolean)CorsElement.DeepCopy();
        if(Service != null) dest.Service = new List<Hl7.Fhir.Model.CodeableConcept>(Service.DeepCopy());
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SecurityComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SecurityComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CorsElement, otherT.CorsElement)) return false;
        if( !DeepComparable.Matches(Service, otherT.Service)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SecurityComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CorsElement, otherT.CorsElement)) return false;
        if( !DeepComparable.IsExactly(Service, otherT.Service)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CorsElement != null) yield return CorsElement;
          foreach (var elem in Service) { if (elem != null) yield return elem; }
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CorsElement != null) yield return new ElementValue("cors", CorsElement);
          foreach (var elem in Service) { if (elem != null) yield return new ElementValue("service", elem); }
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "cors":
            value = CorsElement;
            return CorsElement is not null;
          case "service":
            value = Service;
            return Service?.Any() == true;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CorsElement is not null) yield return new KeyValuePair<string,object>("cors",CorsElement);
        if (Service?.Any() == true) yield return new KeyValuePair<string,object>("service",Service);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// Resource served on the REST interface
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Resource", IsNestedType=true)]
    [BackboneType("CapabilityStatement.rest.resource")]
    public partial class ResourceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Resource"; } }

      /// <summary>
      /// A resource type that is supported
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Binding("ResourceType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Code TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Hl7.Fhir.Model.Code _TypeElement;

      /// <summary>
      /// A resource type that is supported
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Hl7.Fhir.Model.Code(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// System-wide profile
      /// </summary>
      [FhirElement("profile", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical ProfileElement
      {
        get { return _ProfileElement; }
        set { _ProfileElement = value; OnPropertyChanged("ProfileElement"); }
      }

      private Hl7.Fhir.Model.Canonical _ProfileElement;

      /// <summary>
      /// System-wide profile
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Profile
      {
        get { return ProfileElement != null ? ProfileElement.Value : null; }
        set
        {
          if (value == null)
            ProfileElement = null;
          else
            ProfileElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Profile");
        }
      }

      /// <summary>
      /// Use-case specific profiles
      /// </summary>
      [FhirElement("supportedProfile", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Canonical> SupportedProfileElement
      {
        get { if(_SupportedProfileElement==null) _SupportedProfileElement = new List<Hl7.Fhir.Model.Canonical>(); return _SupportedProfileElement; }
        set { _SupportedProfileElement = value; OnPropertyChanged("SupportedProfileElement"); }
      }

      private List<Hl7.Fhir.Model.Canonical> _SupportedProfileElement;

      /// <summary>
      /// Use-case specific profiles
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> SupportedProfile
      {
        get { return SupportedProfileElement != null ? SupportedProfileElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            SupportedProfileElement = null;
          else
            SupportedProfileElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
          OnPropertyChanged("SupportedProfile");
        }
      }

      /// <summary>
      /// Additional information about the use of the resource type
      /// </summary>
      [FhirElement("documentation", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// Additional information about the use of the resource type
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      /// <summary>
      /// What operations are supported?
      /// </summary>
      [FhirElement("interaction", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent> Interaction
      {
        get { if(_Interaction==null) _Interaction = new List<Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent>(); return _Interaction; }
        set { _Interaction = value; OnPropertyChanged("Interaction"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent> _Interaction;

      /// <summary>
      /// no-version | versioned | versioned-update
      /// </summary>
      [FhirElement("versioning", Order=90)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ResourceVersionPolicy")]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy> VersioningElement
      {
        get { return _VersioningElement; }
        set { _VersioningElement = value; OnPropertyChanged("VersioningElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy> _VersioningElement;

      /// <summary>
      /// no-version | versioned | versioned-update
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy? Versioning
      {
        get { return VersioningElement != null ? VersioningElement.Value : null; }
        set
        {
          if (value == null)
            VersioningElement = null;
          else
            VersioningElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>(value);
          OnPropertyChanged("Versioning");
        }
      }

      /// <summary>
      /// Whether vRead can return past versions
      /// </summary>
      [FhirElement("readHistory", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ReadHistoryElement
      {
        get { return _ReadHistoryElement; }
        set { _ReadHistoryElement = value; OnPropertyChanged("ReadHistoryElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ReadHistoryElement;

      /// <summary>
      /// Whether vRead can return past versions
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? ReadHistory
      {
        get { return ReadHistoryElement != null ? ReadHistoryElement.Value : null; }
        set
        {
          if (value == null)
            ReadHistoryElement = null;
          else
            ReadHistoryElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("ReadHistory");
        }
      }

      /// <summary>
      /// If update can commit to a new identity
      /// </summary>
      [FhirElement("updateCreate", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean UpdateCreateElement
      {
        get { return _UpdateCreateElement; }
        set { _UpdateCreateElement = value; OnPropertyChanged("UpdateCreateElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _UpdateCreateElement;

      /// <summary>
      /// If update can commit to a new identity
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? UpdateCreate
      {
        get { return UpdateCreateElement != null ? UpdateCreateElement.Value : null; }
        set
        {
          if (value == null)
            UpdateCreateElement = null;
          else
            UpdateCreateElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("UpdateCreate");
        }
      }

      /// <summary>
      /// If allows/uses conditional create
      /// </summary>
      [FhirElement("conditionalCreate", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ConditionalCreateElement
      {
        get { return _ConditionalCreateElement; }
        set { _ConditionalCreateElement = value; OnPropertyChanged("ConditionalCreateElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ConditionalCreateElement;

      /// <summary>
      /// If allows/uses conditional create
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? ConditionalCreate
      {
        get { return ConditionalCreateElement != null ? ConditionalCreateElement.Value : null; }
        set
        {
          if (value == null)
            ConditionalCreateElement = null;
          else
            ConditionalCreateElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("ConditionalCreate");
        }
      }

      /// <summary>
      /// not-supported | modified-since | not-match | full-support
      /// </summary>
      [FhirElement("conditionalRead", Order=130)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ConditionalReadStatus")]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus> ConditionalReadElement
      {
        get { return _ConditionalReadElement; }
        set { _ConditionalReadElement = value; OnPropertyChanged("ConditionalReadElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus> _ConditionalReadElement;

      /// <summary>
      /// not-supported | modified-since | not-match | full-support
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus? ConditionalRead
      {
        get { return ConditionalReadElement != null ? ConditionalReadElement.Value : null; }
        set
        {
          if (value == null)
            ConditionalReadElement = null;
          else
            ConditionalReadElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>(value);
          OnPropertyChanged("ConditionalRead");
        }
      }

      /// <summary>
      /// If allows/uses conditional update
      /// </summary>
      [FhirElement("conditionalUpdate", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ConditionalUpdateElement
      {
        get { return _ConditionalUpdateElement; }
        set { _ConditionalUpdateElement = value; OnPropertyChanged("ConditionalUpdateElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ConditionalUpdateElement;

      /// <summary>
      /// If allows/uses conditional update
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? ConditionalUpdate
      {
        get { return ConditionalUpdateElement != null ? ConditionalUpdateElement.Value : null; }
        set
        {
          if (value == null)
            ConditionalUpdateElement = null;
          else
            ConditionalUpdateElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("ConditionalUpdate");
        }
      }

      /// <summary>
      /// If allows/uses conditional patch. Note: Element was introduced in R5, do not use when working with older releases.
      /// </summary>
      [FhirElement("conditionalPatch", Order=150, Since=FhirRelease.R5)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ConditionalPatchElement
      {
        get { return _ConditionalPatchElement; }
        set { _ConditionalPatchElement = value; OnPropertyChanged("ConditionalPatchElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ConditionalPatchElement;

      /// <summary>
      /// If allows/uses conditional patch
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? ConditionalPatch
      {
        get { return ConditionalPatchElement != null ? ConditionalPatchElement.Value : null; }
        set
        {
          if (value == null)
            ConditionalPatchElement = null;
          else
            ConditionalPatchElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("ConditionalPatch");
        }
      }

      /// <summary>
      /// not-supported | single | multiple - how conditional delete is supported
      /// </summary>
      [FhirElement("conditionalDelete", Order=160)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ConditionalDeleteStatus")]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus> ConditionalDeleteElement
      {
        get { return _ConditionalDeleteElement; }
        set { _ConditionalDeleteElement = value; OnPropertyChanged("ConditionalDeleteElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus> _ConditionalDeleteElement;

      /// <summary>
      /// not-supported | single | multiple - how conditional delete is supported
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus? ConditionalDelete
      {
        get { return ConditionalDeleteElement != null ? ConditionalDeleteElement.Value : null; }
        set
        {
          if (value == null)
            ConditionalDeleteElement = null;
          else
            ConditionalDeleteElement = new Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>(value);
          OnPropertyChanged("ConditionalDelete");
        }
      }

      /// <summary>
      /// literal | logical | resolves | enforced | local
      /// </summary>
      [FhirElement("referencePolicy", Order=170)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ReferenceHandlingPolicy")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>> ReferencePolicyElement
      {
        get { if(_ReferencePolicyElement==null) _ReferencePolicyElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>>(); return _ReferencePolicyElement; }
        set { _ReferencePolicyElement = value; OnPropertyChanged("ReferencePolicyElement"); }
      }

      private List<Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>> _ReferencePolicyElement;

      /// <summary>
      /// literal | logical | resolves | enforced | local
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy?> ReferencePolicy
      {
        get { return ReferencePolicyElement != null ? ReferencePolicyElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ReferencePolicyElement = null;
          else
            ReferencePolicyElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>(elem)));
          OnPropertyChanged("ReferencePolicy");
        }
      }

      /// <summary>
      /// _include values supported by the server
      /// </summary>
      [FhirElement("searchInclude", Order=180)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirString> SearchIncludeElement
      {
        get { if(_SearchIncludeElement==null) _SearchIncludeElement = new List<Hl7.Fhir.Model.FhirString>(); return _SearchIncludeElement; }
        set { _SearchIncludeElement = value; OnPropertyChanged("SearchIncludeElement"); }
      }

      private List<Hl7.Fhir.Model.FhirString> _SearchIncludeElement;

      /// <summary>
      /// _include values supported by the server
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> SearchInclude
      {
        get { return SearchIncludeElement != null ? SearchIncludeElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            SearchIncludeElement = null;
          else
            SearchIncludeElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
          OnPropertyChanged("SearchInclude");
        }
      }

      /// <summary>
      /// _revinclude values supported by the server
      /// </summary>
      [FhirElement("searchRevInclude", Order=190)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirString> SearchRevIncludeElement
      {
        get { if(_SearchRevIncludeElement==null) _SearchRevIncludeElement = new List<Hl7.Fhir.Model.FhirString>(); return _SearchRevIncludeElement; }
        set { _SearchRevIncludeElement = value; OnPropertyChanged("SearchRevIncludeElement"); }
      }

      private List<Hl7.Fhir.Model.FhirString> _SearchRevIncludeElement;

      /// <summary>
      /// _revinclude values supported by the server
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> SearchRevInclude
      {
        get { return SearchRevIncludeElement != null ? SearchRevIncludeElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            SearchRevIncludeElement = null;
          else
            SearchRevIncludeElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
          OnPropertyChanged("SearchRevInclude");
        }
      }

      /// <summary>
      /// Search parameters supported by implementation
      /// </summary>
      [FhirElement("searchParam", Order=200)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent> SearchParam
      {
        get { if(_SearchParam==null) _SearchParam = new List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent>(); return _SearchParam; }
        set { _SearchParam = value; OnPropertyChanged("SearchParam"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent> _SearchParam;

      /// <summary>
      /// Definition of a resource operation
      /// </summary>
      [FhirElement("operation", InSummary=true, Order=210)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent> Operation
      {
        get { if(_Operation==null) _Operation = new List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent>(); return _Operation; }
        set { _Operation = value; OnPropertyChanged("Operation"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent> _Operation;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ResourceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TypeElement != null) dest.TypeElement = (Hl7.Fhir.Model.Code)TypeElement.DeepCopy();
        if(ProfileElement != null) dest.ProfileElement = (Hl7.Fhir.Model.Canonical)ProfileElement.DeepCopy();
        if(SupportedProfileElement != null) dest.SupportedProfileElement = new List<Hl7.Fhir.Model.Canonical>(SupportedProfileElement.DeepCopy());
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        if(Interaction != null) dest.Interaction = new List<Hl7.Fhir.Model.CapabilityStatement.ResourceInteractionComponent>(Interaction.DeepCopy());
        if(VersioningElement != null) dest.VersioningElement = (Code<Hl7.Fhir.Model.CapabilityStatement.ResourceVersionPolicy>)VersioningElement.DeepCopy();
        if(ReadHistoryElement != null) dest.ReadHistoryElement = (Hl7.Fhir.Model.FhirBoolean)ReadHistoryElement.DeepCopy();
        if(UpdateCreateElement != null) dest.UpdateCreateElement = (Hl7.Fhir.Model.FhirBoolean)UpdateCreateElement.DeepCopy();
        if(ConditionalCreateElement != null) dest.ConditionalCreateElement = (Hl7.Fhir.Model.FhirBoolean)ConditionalCreateElement.DeepCopy();
        if(ConditionalReadElement != null) dest.ConditionalReadElement = (Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalReadStatus>)ConditionalReadElement.DeepCopy();
        if(ConditionalUpdateElement != null) dest.ConditionalUpdateElement = (Hl7.Fhir.Model.FhirBoolean)ConditionalUpdateElement.DeepCopy();
        if(ConditionalPatchElement != null) dest.ConditionalPatchElement = (Hl7.Fhir.Model.FhirBoolean)ConditionalPatchElement.DeepCopy();
        if(ConditionalDeleteElement != null) dest.ConditionalDeleteElement = (Code<Hl7.Fhir.Model.CapabilityStatement.ConditionalDeleteStatus>)ConditionalDeleteElement.DeepCopy();
        if(ReferencePolicyElement != null) dest.ReferencePolicyElement = new List<Code<Hl7.Fhir.Model.CapabilityStatement.ReferenceHandlingPolicy>>(ReferencePolicyElement.DeepCopy());
        if(SearchIncludeElement != null) dest.SearchIncludeElement = new List<Hl7.Fhir.Model.FhirString>(SearchIncludeElement.DeepCopy());
        if(SearchRevIncludeElement != null) dest.SearchRevIncludeElement = new List<Hl7.Fhir.Model.FhirString>(SearchRevIncludeElement.DeepCopy());
        if(SearchParam != null) dest.SearchParam = new List<Hl7.Fhir.Model.CapabilityStatement.SearchParamComponent>(SearchParam.DeepCopy());
        if(Operation != null) dest.Operation = new List<Hl7.Fhir.Model.CapabilityStatement.OperationComponent>(Operation.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ResourceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ResourceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(ProfileElement, otherT.ProfileElement)) return false;
        if( !DeepComparable.Matches(SupportedProfileElement, otherT.SupportedProfileElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.Matches(Interaction, otherT.Interaction)) return false;
        if( !DeepComparable.Matches(VersioningElement, otherT.VersioningElement)) return false;
        if( !DeepComparable.Matches(ReadHistoryElement, otherT.ReadHistoryElement)) return false;
        if( !DeepComparable.Matches(UpdateCreateElement, otherT.UpdateCreateElement)) return false;
        if( !DeepComparable.Matches(ConditionalCreateElement, otherT.ConditionalCreateElement)) return false;
        if( !DeepComparable.Matches(ConditionalReadElement, otherT.ConditionalReadElement)) return false;
        if( !DeepComparable.Matches(ConditionalUpdateElement, otherT.ConditionalUpdateElement)) return false;
        if( !DeepComparable.Matches(ConditionalPatchElement, otherT.ConditionalPatchElement)) return false;
        if( !DeepComparable.Matches(ConditionalDeleteElement, otherT.ConditionalDeleteElement)) return false;
        if( !DeepComparable.Matches(ReferencePolicyElement, otherT.ReferencePolicyElement)) return false;
        if( !DeepComparable.Matches(SearchIncludeElement, otherT.SearchIncludeElement)) return false;
        if( !DeepComparable.Matches(SearchRevIncludeElement, otherT.SearchRevIncludeElement)) return false;
        if( !DeepComparable.Matches(SearchParam, otherT.SearchParam)) return false;
        if( !DeepComparable.Matches(Operation, otherT.Operation)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ResourceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(ProfileElement, otherT.ProfileElement)) return false;
        if( !DeepComparable.IsExactly(SupportedProfileElement, otherT.SupportedProfileElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.IsExactly(Interaction, otherT.Interaction)) return false;
        if( !DeepComparable.IsExactly(VersioningElement, otherT.VersioningElement)) return false;
        if( !DeepComparable.IsExactly(ReadHistoryElement, otherT.ReadHistoryElement)) return false;
        if( !DeepComparable.IsExactly(UpdateCreateElement, otherT.UpdateCreateElement)) return false;
        if( !DeepComparable.IsExactly(ConditionalCreateElement, otherT.ConditionalCreateElement)) return false;
        if( !DeepComparable.IsExactly(ConditionalReadElement, otherT.ConditionalReadElement)) return false;
        if( !DeepComparable.IsExactly(ConditionalUpdateElement, otherT.ConditionalUpdateElement)) return false;
        if( !DeepComparable.IsExactly(ConditionalPatchElement, otherT.ConditionalPatchElement)) return false;
        if( !DeepComparable.IsExactly(ConditionalDeleteElement, otherT.ConditionalDeleteElement)) return false;
        if( !DeepComparable.IsExactly(ReferencePolicyElement, otherT.ReferencePolicyElement)) return false;
        if( !DeepComparable.IsExactly(SearchIncludeElement, otherT.SearchIncludeElement)) return false;
        if( !DeepComparable.IsExactly(SearchRevIncludeElement, otherT.SearchRevIncludeElement)) return false;
        if( !DeepComparable.IsExactly(SearchParam, otherT.SearchParam)) return false;
        if( !DeepComparable.IsExactly(Operation, otherT.Operation)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TypeElement != null) yield return TypeElement;
          if (ProfileElement != null) yield return ProfileElement;
          foreach (var elem in SupportedProfileElement) { if (elem != null) yield return elem; }
          if (DocumentationElement != null) yield return DocumentationElement;
          foreach (var elem in Interaction) { if (elem != null) yield return elem; }
          if (VersioningElement != null) yield return VersioningElement;
          if (ReadHistoryElement != null) yield return ReadHistoryElement;
          if (UpdateCreateElement != null) yield return UpdateCreateElement;
          if (ConditionalCreateElement != null) yield return ConditionalCreateElement;
          if (ConditionalReadElement != null) yield return ConditionalReadElement;
          if (ConditionalUpdateElement != null) yield return ConditionalUpdateElement;
          if (ConditionalPatchElement != null) yield return ConditionalPatchElement;
          if (ConditionalDeleteElement != null) yield return ConditionalDeleteElement;
          foreach (var elem in ReferencePolicyElement) { if (elem != null) yield return elem; }
          foreach (var elem in SearchIncludeElement) { if (elem != null) yield return elem; }
          foreach (var elem in SearchRevIncludeElement) { if (elem != null) yield return elem; }
          foreach (var elem in SearchParam) { if (elem != null) yield return elem; }
          foreach (var elem in Operation) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (ProfileElement != null) yield return new ElementValue("profile", ProfileElement);
          foreach (var elem in SupportedProfileElement) { if (elem != null) yield return new ElementValue("supportedProfile", elem); }
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
          foreach (var elem in Interaction) { if (elem != null) yield return new ElementValue("interaction", elem); }
          if (VersioningElement != null) yield return new ElementValue("versioning", VersioningElement);
          if (ReadHistoryElement != null) yield return new ElementValue("readHistory", ReadHistoryElement);
          if (UpdateCreateElement != null) yield return new ElementValue("updateCreate", UpdateCreateElement);
          if (ConditionalCreateElement != null) yield return new ElementValue("conditionalCreate", ConditionalCreateElement);
          if (ConditionalReadElement != null) yield return new ElementValue("conditionalRead", ConditionalReadElement);
          if (ConditionalUpdateElement != null) yield return new ElementValue("conditionalUpdate", ConditionalUpdateElement);
          if (ConditionalPatchElement != null) yield return new ElementValue("conditionalPatch", ConditionalPatchElement);
          if (ConditionalDeleteElement != null) yield return new ElementValue("conditionalDelete", ConditionalDeleteElement);
          foreach (var elem in ReferencePolicyElement) { if (elem != null) yield return new ElementValue("referencePolicy", elem); }
          foreach (var elem in SearchIncludeElement) { if (elem != null) yield return new ElementValue("searchInclude", elem); }
          foreach (var elem in SearchRevIncludeElement) { if (elem != null) yield return new ElementValue("searchRevInclude", elem); }
          foreach (var elem in SearchParam) { if (elem != null) yield return new ElementValue("searchParam", elem); }
          foreach (var elem in Operation) { if (elem != null) yield return new ElementValue("operation", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "profile":
            value = ProfileElement;
            return ProfileElement is not null;
          case "supportedProfile":
            value = SupportedProfileElement;
            return SupportedProfileElement?.Any() == true;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          case "interaction":
            value = Interaction;
            return Interaction?.Any() == true;
          case "versioning":
            value = VersioningElement;
            return VersioningElement is not null;
          case "readHistory":
            value = ReadHistoryElement;
            return ReadHistoryElement is not null;
          case "updateCreate":
            value = UpdateCreateElement;
            return UpdateCreateElement is not null;
          case "conditionalCreate":
            value = ConditionalCreateElement;
            return ConditionalCreateElement is not null;
          case "conditionalRead":
            value = ConditionalReadElement;
            return ConditionalReadElement is not null;
          case "conditionalUpdate":
            value = ConditionalUpdateElement;
            return ConditionalUpdateElement is not null;
          case "conditionalPatch":
            value = ConditionalPatchElement;
            return ConditionalPatchElement is not null;
          case "conditionalDelete":
            value = ConditionalDeleteElement;
            return ConditionalDeleteElement is not null;
          case "referencePolicy":
            value = ReferencePolicyElement;
            return ReferencePolicyElement?.Any() == true;
          case "searchInclude":
            value = SearchIncludeElement;
            return SearchIncludeElement?.Any() == true;
          case "searchRevInclude":
            value = SearchRevIncludeElement;
            return SearchRevIncludeElement?.Any() == true;
          case "searchParam":
            value = SearchParam;
            return SearchParam?.Any() == true;
          case "operation":
            value = Operation;
            return Operation?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (ProfileElement is not null) yield return new KeyValuePair<string,object>("profile",ProfileElement);
        if (SupportedProfileElement?.Any() == true) yield return new KeyValuePair<string,object>("supportedProfile",SupportedProfileElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
        if (Interaction?.Any() == true) yield return new KeyValuePair<string,object>("interaction",Interaction);
        if (VersioningElement is not null) yield return new KeyValuePair<string,object>("versioning",VersioningElement);
        if (ReadHistoryElement is not null) yield return new KeyValuePair<string,object>("readHistory",ReadHistoryElement);
        if (UpdateCreateElement is not null) yield return new KeyValuePair<string,object>("updateCreate",UpdateCreateElement);
        if (ConditionalCreateElement is not null) yield return new KeyValuePair<string,object>("conditionalCreate",ConditionalCreateElement);
        if (ConditionalReadElement is not null) yield return new KeyValuePair<string,object>("conditionalRead",ConditionalReadElement);
        if (ConditionalUpdateElement is not null) yield return new KeyValuePair<string,object>("conditionalUpdate",ConditionalUpdateElement);
        if (ConditionalPatchElement is not null) yield return new KeyValuePair<string,object>("conditionalPatch",ConditionalPatchElement);
        if (ConditionalDeleteElement is not null) yield return new KeyValuePair<string,object>("conditionalDelete",ConditionalDeleteElement);
        if (ReferencePolicyElement?.Any() == true) yield return new KeyValuePair<string,object>("referencePolicy",ReferencePolicyElement);
        if (SearchIncludeElement?.Any() == true) yield return new KeyValuePair<string,object>("searchInclude",SearchIncludeElement);
        if (SearchRevIncludeElement?.Any() == true) yield return new KeyValuePair<string,object>("searchRevInclude",SearchRevIncludeElement);
        if (SearchParam?.Any() == true) yield return new KeyValuePair<string,object>("searchParam",SearchParam);
        if (Operation?.Any() == true) yield return new KeyValuePair<string,object>("operation",Operation);
      }

    }

    /// <summary>
    /// What operations are supported?
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#ResourceInteraction", IsNestedType=true)]
    [BackboneType("CapabilityStatement.rest.resource.interaction")]
    public partial class ResourceInteractionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#ResourceInteraction"; } }

      /// <summary>
      /// read | vread | update | patch | delete | history-instance | history-type | create | search-type
      /// </summary>
      [FhirElement("code", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("TypeRestfulInteraction")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction> CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction> _CodeElement;

      /// <summary>
      /// read | vread | update | patch | delete | history-instance | history-type | create | search-type
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction? Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Anything special about operation behavior
      /// </summary>
      [FhirElement("documentation", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// Anything special about operation behavior
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ResourceInteractionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Code<Hl7.Fhir.Model.CapabilityStatement.TypeRestfulInteraction>)CodeElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ResourceInteractionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ResourceInteractionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ResourceInteractionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (DocumentationElement != null) yield return DocumentationElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
      }

    }

    /// <summary>
    /// Search parameters supported by implementation
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#SearchParam", IsNestedType=true)]
    [BackboneType("CapabilityStatement.rest.resource.searchParam")]
    public partial class SearchParamComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#SearchParam"; } }

      /// <summary>
      /// Name for parameter in search url
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Name for parameter in search url
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Source of definition for parameter
      /// </summary>
      [FhirElement("definition", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical DefinitionElement
      {
        get { return _DefinitionElement; }
        set { _DefinitionElement = value; OnPropertyChanged("DefinitionElement"); }
      }

      private Hl7.Fhir.Model.Canonical _DefinitionElement;

      /// <summary>
      /// Source of definition for parameter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Definition
      {
        get { return DefinitionElement != null ? DefinitionElement.Value : null; }
        set
        {
          if (value == null)
            DefinitionElement = null;
          else
            DefinitionElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Definition");
        }
      }

      /// <summary>
      /// number | date | string | token | reference | composite | quantity | uri | special
      /// </summary>
      [FhirElement("type", Order=60)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("SearchParamType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.SearchParamType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.SearchParamType> _TypeElement;

      /// <summary>
      /// number | date | string | token | reference | composite | quantity | uri | special
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.SearchParamType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.SearchParamType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// Server-specific usage
      /// </summary>
      [FhirElement("documentation", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// Server-specific usage
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SearchParamComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(DefinitionElement != null) dest.DefinitionElement = (Hl7.Fhir.Model.Canonical)DefinitionElement.DeepCopy();
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.SearchParamType>)TypeElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SearchParamComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SearchParamComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(DefinitionElement, otherT.DefinitionElement)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SearchParamComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(DefinitionElement, otherT.DefinitionElement)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (DefinitionElement != null) yield return DefinitionElement;
          if (TypeElement != null) yield return TypeElement;
          if (DocumentationElement != null) yield return DocumentationElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (DefinitionElement != null) yield return new ElementValue("definition", DefinitionElement);
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "definition":
            value = DefinitionElement;
            return DefinitionElement is not null;
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (DefinitionElement is not null) yield return new KeyValuePair<string,object>("definition",DefinitionElement);
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
      }

    }

    /// <summary>
    /// Definition of a resource operation
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Operation", IsNestedType=true)]
    [BackboneType("CapabilityStatement.rest.resource.operation")]
    public partial class OperationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Operation"; } }

      /// <summary>
      /// Name by which the operation/query is invoked
      /// </summary>
      [FhirElement("name", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Name by which the operation/query is invoked
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// The defined operation/query
      /// </summary>
      [FhirElement("definition", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical DefinitionElement
      {
        get { return _DefinitionElement; }
        set { _DefinitionElement = value; OnPropertyChanged("DefinitionElement"); }
      }

      private Hl7.Fhir.Model.Canonical _DefinitionElement;

      /// <summary>
      /// The defined operation/query
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Definition
      {
        get { return DefinitionElement != null ? DefinitionElement.Value : null; }
        set
        {
          if (value == null)
            DefinitionElement = null;
          else
            DefinitionElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Definition");
        }
      }

      /// <summary>
      /// Specific details about operation behavior
      /// </summary>
      [FhirElement("documentation", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// Specific details about operation behavior
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OperationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(DefinitionElement != null) dest.DefinitionElement = (Hl7.Fhir.Model.Canonical)DefinitionElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OperationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(DefinitionElement, otherT.DefinitionElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(DefinitionElement, otherT.DefinitionElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (DefinitionElement != null) yield return DefinitionElement;
          if (DocumentationElement != null) yield return DocumentationElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (DefinitionElement != null) yield return new ElementValue("definition", DefinitionElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "definition":
            value = DefinitionElement;
            return DefinitionElement is not null;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (DefinitionElement is not null) yield return new KeyValuePair<string,object>("definition",DefinitionElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
      }

    }

    /// <summary>
    /// What operations are supported?
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#SystemInteraction", IsNestedType=true)]
    [BackboneType("CapabilityStatement.rest.interaction")]
    public partial class SystemInteractionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#SystemInteraction"; } }

      /// <summary>
      /// transaction | batch | search-system | history-system
      /// </summary>
      [FhirElement("code", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("SystemRestfulInteraction")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction> CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction> _CodeElement;

      /// <summary>
      /// transaction | batch | search-system | history-system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction? Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Anything special about operation behavior
      /// </summary>
      [FhirElement("documentation", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// Anything special about operation behavior
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SystemInteractionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Code<Hl7.Fhir.Model.CapabilityStatement.SystemRestfulInteraction>)CodeElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SystemInteractionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SystemInteractionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SystemInteractionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (DocumentationElement != null) yield return DocumentationElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
      }

    }

    /// <summary>
    /// If messaging is supported
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Messaging", IsNestedType=true)]
    [BackboneType("CapabilityStatement.messaging")]
    public partial class MessagingComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Messaging"; } }

      /// <summary>
      /// Where messages should be sent
      /// </summary>
      [FhirElement("endpoint", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.EndpointComponent> Endpoint
      {
        get { if(_Endpoint==null) _Endpoint = new List<Hl7.Fhir.Model.CapabilityStatement.EndpointComponent>(); return _Endpoint; }
        set { _Endpoint = value; OnPropertyChanged("Endpoint"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.EndpointComponent> _Endpoint;

      /// <summary>
      /// Reliable Message Cache Length (min)
      /// </summary>
      [FhirElement("reliableCache", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt ReliableCacheElement
      {
        get { return _ReliableCacheElement; }
        set { _ReliableCacheElement = value; OnPropertyChanged("ReliableCacheElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _ReliableCacheElement;

      /// <summary>
      /// Reliable Message Cache Length (min)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? ReliableCache
      {
        get { return ReliableCacheElement != null ? ReliableCacheElement.Value : null; }
        set
        {
          if (value == null)
            ReliableCacheElement = null;
          else
            ReliableCacheElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("ReliableCache");
        }
      }

      /// <summary>
      /// Messaging interface behavior details
      /// </summary>
      [FhirElement("documentation", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// Messaging interface behavior details
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      /// <summary>
      /// Messages supported by this system
      /// </summary>
      [FhirElement("supportedMessage", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent> SupportedMessage
      {
        get { if(_SupportedMessage==null) _SupportedMessage = new List<Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent>(); return _SupportedMessage; }
        set { _SupportedMessage = value; OnPropertyChanged("SupportedMessage"); }
      }

      private List<Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent> _SupportedMessage;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MessagingComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Endpoint != null) dest.Endpoint = new List<Hl7.Fhir.Model.CapabilityStatement.EndpointComponent>(Endpoint.DeepCopy());
        if(ReliableCacheElement != null) dest.ReliableCacheElement = (Hl7.Fhir.Model.UnsignedInt)ReliableCacheElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        if(SupportedMessage != null) dest.SupportedMessage = new List<Hl7.Fhir.Model.CapabilityStatement.SupportedMessageComponent>(SupportedMessage.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MessagingComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MessagingComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Endpoint, otherT.Endpoint)) return false;
        if( !DeepComparable.Matches(ReliableCacheElement, otherT.ReliableCacheElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.Matches(SupportedMessage, otherT.SupportedMessage)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MessagingComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Endpoint, otherT.Endpoint)) return false;
        if( !DeepComparable.IsExactly(ReliableCacheElement, otherT.ReliableCacheElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.IsExactly(SupportedMessage, otherT.SupportedMessage)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Endpoint) { if (elem != null) yield return elem; }
          if (ReliableCacheElement != null) yield return ReliableCacheElement;
          if (DocumentationElement != null) yield return DocumentationElement;
          foreach (var elem in SupportedMessage) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Endpoint) { if (elem != null) yield return new ElementValue("endpoint", elem); }
          if (ReliableCacheElement != null) yield return new ElementValue("reliableCache", ReliableCacheElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
          foreach (var elem in SupportedMessage) { if (elem != null) yield return new ElementValue("supportedMessage", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "endpoint":
            value = Endpoint;
            return Endpoint?.Any() == true;
          case "reliableCache":
            value = ReliableCacheElement;
            return ReliableCacheElement is not null;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          case "supportedMessage":
            value = SupportedMessage;
            return SupportedMessage?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Endpoint?.Any() == true) yield return new KeyValuePair<string,object>("endpoint",Endpoint);
        if (ReliableCacheElement is not null) yield return new KeyValuePair<string,object>("reliableCache",ReliableCacheElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
        if (SupportedMessage?.Any() == true) yield return new KeyValuePair<string,object>("supportedMessage",SupportedMessage);
      }

    }

    /// <summary>
    /// Where messages should be sent
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Endpoint", IsNestedType=true)]
    [BackboneType("CapabilityStatement.messaging.endpoint")]
    public partial class EndpointComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Endpoint"; } }

      /// <summary>
      /// http | ftp | mllp +
      /// </summary>
      [FhirElement("protocol", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Protocol
      {
        get { return _Protocol; }
        set { _Protocol = value; OnPropertyChanged("Protocol"); }
      }

      private Hl7.Fhir.Model.Coding _Protocol;

      /// <summary>
      /// Network address or identifier of the end-point
      /// </summary>
      [FhirElement("address", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUrl AddressElement
      {
        get { return _AddressElement; }
        set { _AddressElement = value; OnPropertyChanged("AddressElement"); }
      }

      private Hl7.Fhir.Model.FhirUrl _AddressElement;

      /// <summary>
      /// Network address or identifier of the end-point
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Address
      {
        get { return AddressElement != null ? AddressElement.Value : null; }
        set
        {
          if (value == null)
            AddressElement = null;
          else
            AddressElement = new Hl7.Fhir.Model.FhirUrl(value);
          OnPropertyChanged("Address");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EndpointComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Protocol != null) dest.Protocol = (Hl7.Fhir.Model.Coding)Protocol.DeepCopy();
        if(AddressElement != null) dest.AddressElement = (Hl7.Fhir.Model.FhirUrl)AddressElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EndpointComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EndpointComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Protocol, otherT.Protocol)) return false;
        if( !DeepComparable.Matches(AddressElement, otherT.AddressElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EndpointComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Protocol, otherT.Protocol)) return false;
        if( !DeepComparable.IsExactly(AddressElement, otherT.AddressElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Protocol != null) yield return Protocol;
          if (AddressElement != null) yield return AddressElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Protocol != null) yield return new ElementValue("protocol", Protocol);
          if (AddressElement != null) yield return new ElementValue("address", AddressElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "protocol":
            value = Protocol;
            return Protocol is not null;
          case "address":
            value = AddressElement;
            return AddressElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Protocol is not null) yield return new KeyValuePair<string,object>("protocol",Protocol);
        if (AddressElement is not null) yield return new KeyValuePair<string,object>("address",AddressElement);
      }

    }

    /// <summary>
    /// Messages supported by this system
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#SupportedMessage", IsNestedType=true)]
    [BackboneType("CapabilityStatement.messaging.supportedMessage")]
    public partial class SupportedMessageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#SupportedMessage"; } }

      /// <summary>
      /// sender | receiver
      /// </summary>
      [FhirElement("mode", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("EventCapabilityMode")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode> _ModeElement;

      /// <summary>
      /// sender | receiver
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>(value);
          OnPropertyChanged("Mode");
        }
      }

      /// <summary>
      /// Message supported by this system
      /// </summary>
      [FhirElement("definition", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical DefinitionElement
      {
        get { return _DefinitionElement; }
        set { _DefinitionElement = value; OnPropertyChanged("DefinitionElement"); }
      }

      private Hl7.Fhir.Model.Canonical _DefinitionElement;

      /// <summary>
      /// Message supported by this system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Definition
      {
        get { return DefinitionElement != null ? DefinitionElement.Value : null; }
        set
        {
          if (value == null)
            DefinitionElement = null;
          else
            DefinitionElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Definition");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SupportedMessageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.CapabilityStatement.EventCapabilityMode>)ModeElement.DeepCopy();
        if(DefinitionElement != null) dest.DefinitionElement = (Hl7.Fhir.Model.Canonical)DefinitionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SupportedMessageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SupportedMessageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(DefinitionElement, otherT.DefinitionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SupportedMessageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(DefinitionElement, otherT.DefinitionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ModeElement != null) yield return ModeElement;
          if (DefinitionElement != null) yield return DefinitionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (DefinitionElement != null) yield return new ElementValue("definition", DefinitionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = ModeElement;
            return ModeElement is not null;
          case "definition":
            value = DefinitionElement;
            return DefinitionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ModeElement is not null) yield return new KeyValuePair<string,object>("mode",ModeElement);
        if (DefinitionElement is not null) yield return new KeyValuePair<string,object>("definition",DefinitionElement);
      }

    }

    /// <summary>
    /// Document definition
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CapabilityStatement#Document", IsNestedType=true)]
    [BackboneType("CapabilityStatement.document")]
    public partial class DocumentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CapabilityStatement#Document"; } }

      /// <summary>
      /// producer | consumer
      /// </summary>
      [FhirElement("mode", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("DocumentMode")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode> _ModeElement;

      /// <summary>
      /// producer | consumer
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CapabilityStatement.DocumentMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>(value);
          OnPropertyChanged("Mode");
        }
      }

      /// <summary>
      /// Description of document support
      /// </summary>
      [FhirElement("documentation", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DocumentationElement
      {
        get { return _DocumentationElement; }
        set { _DocumentationElement = value; OnPropertyChanged("DocumentationElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DocumentationElement;

      /// <summary>
      /// Description of document support
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Documentation
      {
        get { return DocumentationElement != null ? DocumentationElement.Value : null; }
        set
        {
          if (value == null)
            DocumentationElement = null;
          else
            DocumentationElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Documentation");
        }
      }

      /// <summary>
      /// Constraint on the resources used in the document
      /// </summary>
      [FhirElement("profile", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical ProfileElement
      {
        get { return _ProfileElement; }
        set { _ProfileElement = value; OnPropertyChanged("ProfileElement"); }
      }

      private Hl7.Fhir.Model.Canonical _ProfileElement;

      /// <summary>
      /// Constraint on the resources used in the document
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Profile
      {
        get { return ProfileElement != null ? ProfileElement.Value : null; }
        set
        {
          if (value == null)
            ProfileElement = null;
          else
            ProfileElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Profile");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DocumentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.CapabilityStatement.DocumentMode>)ModeElement.DeepCopy();
        if(DocumentationElement != null) dest.DocumentationElement = (Hl7.Fhir.Model.Markdown)DocumentationElement.DeepCopy();
        if(ProfileElement != null) dest.ProfileElement = (Hl7.Fhir.Model.Canonical)ProfileElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DocumentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DocumentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.Matches(ProfileElement, otherT.ProfileElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DocumentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(DocumentationElement, otherT.DocumentationElement)) return false;
        if( !DeepComparable.IsExactly(ProfileElement, otherT.ProfileElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ModeElement != null) yield return ModeElement;
          if (DocumentationElement != null) yield return DocumentationElement;
          if (ProfileElement != null) yield return ProfileElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (DocumentationElement != null) yield return new ElementValue("documentation", DocumentationElement);
          if (ProfileElement != null) yield return new ElementValue("profile", ProfileElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = ModeElement;
            return ModeElement is not null;
          case "documentation":
            value = DocumentationElement;
            return DocumentationElement is not null;
          case "profile":
            value = ProfileElement;
            return ProfileElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ModeElement is not null) yield return new KeyValuePair<string,object>("mode",ModeElement);
        if (DocumentationElement is not null) yield return new KeyValuePair<string,object>("documentation",DocumentationElement);
        if (ProfileElement is not null) yield return new KeyValuePair<string,object>("profile",ProfileElement);
      }

    }

    /// <summary>
    /// Canonical identifier for this capability statement, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this capability statement, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the CapabilityStatement (business identifier). Note: Element was introduced in R5, do not use when working with older releases.
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier", Since=FhirRelease.R5)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the capability statement
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the capability statement
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// How to compare versions. Note: Element was introduced in R5, do not use when working with older releases.
    /// </summary>
    [FhirElement("versionAlgorithm", InSummary=true, Order=120, Choice=ChoiceType.DatatypeChoice, Since=FhirRelease.R5)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Coding))]
    [DataMember]
    public Hl7.Fhir.Model.DataType VersionAlgorithm
    {
      get { return _VersionAlgorithm; }
      set { _VersionAlgorithm = value; OnPropertyChanged("VersionAlgorithm"); }
    }

    private Hl7.Fhir.Model.DataType _VersionAlgorithm;

    /// <summary>
    /// Name for this capability statement (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this capability statement (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this capability statement (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this capability statement (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=160, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=170, FiveWs="FiveWs.recorded")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=180, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the capability statement
    /// </summary>
    [FhirElement("description", Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the capability statement
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for capability statement (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this capability statement is defined
    /// </summary>
    [FhirElement("purpose", Order=230, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this capability statement is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Copyright holder and year(s). Note: Element was introduced in R5, do not use when working with older releases.
    /// </summary>
    [FhirElement("copyrightLabel", Order=250, Since=FhirRelease.R5)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightLabelElement
    {
      get { return _CopyrightLabelElement; }
      set { _CopyrightLabelElement = value; OnPropertyChanged("CopyrightLabelElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightLabelElement;

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CopyrightLabel
    {
      get { return CopyrightLabelElement != null ? CopyrightLabelElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightLabelElement = null;
        else
          CopyrightLabelElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CopyrightLabel");
      }
    }

    /// <summary>
    /// instance | capability | requirements
    /// </summary>
    [FhirElement("kind", InSummary=true, Order=260)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("CapabilityStatementKind")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.CapabilityStatementKind> KindElement
    {
      get { return _KindElement; }
      set { _KindElement = value; OnPropertyChanged("KindElement"); }
    }

    private Code<Hl7.Fhir.Model.CapabilityStatementKind> _KindElement;

    /// <summary>
    /// instance | capability | requirements
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.CapabilityStatementKind? Kind
    {
      get { return KindElement != null ? KindElement.Value : null; }
      set
      {
        if (value == null)
          KindElement = null;
        else
          KindElement = new Code<Hl7.Fhir.Model.CapabilityStatementKind>(value);
        OnPropertyChanged("Kind");
      }
    }

    /// <summary>
    /// Canonical URL of another capability statement this implements
    /// </summary>
    [FhirElement("instantiates", InSummary=true, Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> InstantiatesElement
    {
      get { if(_InstantiatesElement==null) _InstantiatesElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesElement; }
      set { _InstantiatesElement = value; OnPropertyChanged("InstantiatesElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _InstantiatesElement;

    /// <summary>
    /// Canonical URL of another capability statement this implements
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Instantiates
    {
      get { return InstantiatesElement != null ? InstantiatesElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesElement = null;
        else
          InstantiatesElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("Instantiates");
      }
    }

    /// <summary>
    /// Canonical URL of another capability statement this adds to
    /// </summary>
    [FhirElement("imports", InSummary=true, Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> ImportsElement
    {
      get { if(_ImportsElement==null) _ImportsElement = new List<Hl7.Fhir.Model.Canonical>(); return _ImportsElement; }
      set { _ImportsElement = value; OnPropertyChanged("ImportsElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _ImportsElement;

    /// <summary>
    /// Canonical URL of another capability statement this adds to
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Imports
    {
      get { return ImportsElement != null ? ImportsElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ImportsElement = null;
        else
          ImportsElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("Imports");
      }
    }

    /// <summary>
    /// Software that is covered by this capability statement
    /// </summary>
    [FhirElement("software", InSummary=true, Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent Software
    {
      get { return _Software; }
      set { _Software = value; OnPropertyChanged("Software"); }
    }

    private Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent _Software;

    /// <summary>
    /// If this describes a specific instance
    /// </summary>
    [FhirElement("implementation", InSummary=true, Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent Implementation
    {
      get { return _Implementation; }
      set { _Implementation = value; OnPropertyChanged("Implementation"); }
    }

    private Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent _Implementation;

    /// <summary>
    /// FHIR Version the system supports
    /// </summary>
    [FhirElement("fhirVersion", InSummary=true, Order=310)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("FHIRVersion")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.FHIRVersion> FhirVersionElement
    {
      get { return _FhirVersionElement; }
      set { _FhirVersionElement = value; OnPropertyChanged("FhirVersionElement"); }
    }

    private Code<Hl7.Fhir.Model.FHIRVersion> _FhirVersionElement;

    /// <summary>
    /// FHIR Version the system supports
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.FHIRVersion? FhirVersion
    {
      get { return FhirVersionElement != null ? FhirVersionElement.Value : null; }
      set
      {
        if (value == null)
          FhirVersionElement = null;
        else
          FhirVersionElement = new Code<Hl7.Fhir.Model.FHIRVersion>(value);
        OnPropertyChanged("FhirVersion");
      }
    }

    /// <summary>
    /// formats supported (xml | json | ttl | mime type)
    /// </summary>
    [FhirElement("format", InSummary=true, Order=320)]
    [Binding("MimeType")]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Code> FormatElement
    {
      get { if(_FormatElement==null) _FormatElement = new List<Hl7.Fhir.Model.Code>(); return _FormatElement; }
      set { _FormatElement = value; OnPropertyChanged("FormatElement"); }
    }

    private List<Hl7.Fhir.Model.Code> _FormatElement;

    /// <summary>
    /// formats supported (xml | json | ttl | mime type)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Format
    {
      get { return FormatElement != null ? FormatElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          FormatElement = null;
        else
          FormatElement = new List<Hl7.Fhir.Model.Code>(value.Select(elem=>new Hl7.Fhir.Model.Code(elem)));
        OnPropertyChanged("Format");
      }
    }

    /// <summary>
    /// Patch formats supported
    /// </summary>
    [FhirElement("patchFormat", InSummary=true, Order=330)]
    [Binding("MimeType")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Code> PatchFormatElement
    {
      get { if(_PatchFormatElement==null) _PatchFormatElement = new List<Hl7.Fhir.Model.Code>(); return _PatchFormatElement; }
      set { _PatchFormatElement = value; OnPropertyChanged("PatchFormatElement"); }
    }

    private List<Hl7.Fhir.Model.Code> _PatchFormatElement;

    /// <summary>
    /// Patch formats supported
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> PatchFormat
    {
      get { return PatchFormatElement != null ? PatchFormatElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          PatchFormatElement = null;
        else
          PatchFormatElement = new List<Hl7.Fhir.Model.Code>(value.Select(elem=>new Hl7.Fhir.Model.Code(elem)));
        OnPropertyChanged("PatchFormat");
      }
    }

    /// <summary>
    /// Languages supported. Note: Element was introduced in R5, do not use when working with older releases.
    /// </summary>
    [FhirElement("acceptLanguage", InSummary=true, Order=340, Since=FhirRelease.R5)]
    [Binding("Language")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Code> AcceptLanguageElement
    {
      get { if(_AcceptLanguageElement==null) _AcceptLanguageElement = new List<Hl7.Fhir.Model.Code>(); return _AcceptLanguageElement; }
      set { _AcceptLanguageElement = value; OnPropertyChanged("AcceptLanguageElement"); }
    }

    private List<Hl7.Fhir.Model.Code> _AcceptLanguageElement;

    /// <summary>
    /// Languages supported
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> AcceptLanguage
    {
      get { return AcceptLanguageElement != null ? AcceptLanguageElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          AcceptLanguageElement = null;
        else
          AcceptLanguageElement = new List<Hl7.Fhir.Model.Code>(value.Select(elem=>new Hl7.Fhir.Model.Code(elem)));
        OnPropertyChanged("AcceptLanguage");
      }
    }

    /// <summary>
    /// Implementation guides supported
    /// </summary>
    [FhirElement("implementationGuide", InSummary=true, Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> ImplementationGuideElement
    {
      get { if(_ImplementationGuideElement==null) _ImplementationGuideElement = new List<Hl7.Fhir.Model.Canonical>(); return _ImplementationGuideElement; }
      set { _ImplementationGuideElement = value; OnPropertyChanged("ImplementationGuideElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _ImplementationGuideElement;

    /// <summary>
    /// Implementation guides supported
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> ImplementationGuide
    {
      get { return ImplementationGuideElement != null ? ImplementationGuideElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ImplementationGuideElement = null;
        else
          ImplementationGuideElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("ImplementationGuide");
      }
    }

    /// <summary>
    /// If the endpoint is a RESTful one
    /// </summary>
    [FhirElement("rest", InSummary=true, Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CapabilityStatement.RestComponent> Rest
    {
      get { if(_Rest==null) _Rest = new List<Hl7.Fhir.Model.CapabilityStatement.RestComponent>(); return _Rest; }
      set { _Rest = value; OnPropertyChanged("Rest"); }
    }

    private List<Hl7.Fhir.Model.CapabilityStatement.RestComponent> _Rest;

    /// <summary>
    /// If messaging is supported
    /// </summary>
    [FhirElement("messaging", InSummary=true, Order=370)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CapabilityStatement.MessagingComponent> Messaging
    {
      get { if(_Messaging==null) _Messaging = new List<Hl7.Fhir.Model.CapabilityStatement.MessagingComponent>(); return _Messaging; }
      set { _Messaging = value; OnPropertyChanged("Messaging"); }
    }

    private List<Hl7.Fhir.Model.CapabilityStatement.MessagingComponent> _Messaging;

    /// <summary>
    /// Document definition
    /// </summary>
    [FhirElement("document", InSummary=true, Order=380)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CapabilityStatement.DocumentComponent> Document
    {
      get { if(_Document==null) _Document = new List<Hl7.Fhir.Model.CapabilityStatement.DocumentComponent>(); return _Document; }
      set { _Document = value; OnPropertyChanged("Document"); }
    }

    private List<Hl7.Fhir.Model.CapabilityStatement.DocumentComponent> _Document;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as CapabilityStatement;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(VersionAlgorithm != null) dest.VersionAlgorithm = (Hl7.Fhir.Model.DataType)VersionAlgorithm.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(CopyrightLabelElement != null) dest.CopyrightLabelElement = (Hl7.Fhir.Model.FhirString)CopyrightLabelElement.DeepCopy();
      if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.CapabilityStatementKind>)KindElement.DeepCopy();
      if(InstantiatesElement != null) dest.InstantiatesElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesElement.DeepCopy());
      if(ImportsElement != null) dest.ImportsElement = new List<Hl7.Fhir.Model.Canonical>(ImportsElement.DeepCopy());
      if(Software != null) dest.Software = (Hl7.Fhir.Model.CapabilityStatement.SoftwareComponent)Software.DeepCopy();
      if(Implementation != null) dest.Implementation = (Hl7.Fhir.Model.CapabilityStatement.ImplementationComponent)Implementation.DeepCopy();
      if(FhirVersionElement != null) dest.FhirVersionElement = (Code<Hl7.Fhir.Model.FHIRVersion>)FhirVersionElement.DeepCopy();
      if(FormatElement != null) dest.FormatElement = new List<Hl7.Fhir.Model.Code>(FormatElement.DeepCopy());
      if(PatchFormatElement != null) dest.PatchFormatElement = new List<Hl7.Fhir.Model.Code>(PatchFormatElement.DeepCopy());
      if(AcceptLanguageElement != null) dest.AcceptLanguageElement = new List<Hl7.Fhir.Model.Code>(AcceptLanguageElement.DeepCopy());
      if(ImplementationGuideElement != null) dest.ImplementationGuideElement = new List<Hl7.Fhir.Model.Canonical>(ImplementationGuideElement.DeepCopy());
      if(Rest != null) dest.Rest = new List<Hl7.Fhir.Model.CapabilityStatement.RestComponent>(Rest.DeepCopy());
      if(Messaging != null) dest.Messaging = new List<Hl7.Fhir.Model.CapabilityStatement.MessagingComponent>(Messaging.DeepCopy());
      if(Document != null) dest.Document = new List<Hl7.Fhir.Model.CapabilityStatement.DocumentComponent>(Document.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new CapabilityStatement());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as CapabilityStatement;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.Matches(InstantiatesElement, otherT.InstantiatesElement)) return false;
      if( !DeepComparable.Matches(ImportsElement, otherT.ImportsElement)) return false;
      if( !DeepComparable.Matches(Software, otherT.Software)) return false;
      if( !DeepComparable.Matches(Implementation, otherT.Implementation)) return false;
      if( !DeepComparable.Matches(FhirVersionElement, otherT.FhirVersionElement)) return false;
      if( !DeepComparable.Matches(FormatElement, otherT.FormatElement)) return false;
      if( !DeepComparable.Matches(PatchFormatElement, otherT.PatchFormatElement)) return false;
      if( !DeepComparable.Matches(AcceptLanguageElement, otherT.AcceptLanguageElement)) return false;
      if( !DeepComparable.Matches(ImplementationGuideElement, otherT.ImplementationGuideElement)) return false;
      if( !DeepComparable.Matches(Rest, otherT.Rest)) return false;
      if( !DeepComparable.Matches(Messaging, otherT.Messaging)) return false;
      if( !DeepComparable.Matches(Document, otherT.Document)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as CapabilityStatement;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesElement, otherT.InstantiatesElement)) return false;
      if( !DeepComparable.IsExactly(ImportsElement, otherT.ImportsElement)) return false;
      if( !DeepComparable.IsExactly(Software, otherT.Software)) return false;
      if( !DeepComparable.IsExactly(Implementation, otherT.Implementation)) return false;
      if( !DeepComparable.IsExactly(FhirVersionElement, otherT.FhirVersionElement)) return false;
      if( !DeepComparable.IsExactly(FormatElement, otherT.FormatElement)) return false;
      if( !DeepComparable.IsExactly(PatchFormatElement, otherT.PatchFormatElement)) return false;
      if( !DeepComparable.IsExactly(AcceptLanguageElement, otherT.AcceptLanguageElement)) return false;
      if( !DeepComparable.IsExactly(ImplementationGuideElement, otherT.ImplementationGuideElement)) return false;
      if( !DeepComparable.IsExactly(Rest, otherT.Rest)) return false;
      if( !DeepComparable.IsExactly(Messaging, otherT.Messaging)) return false;
      if( !DeepComparable.IsExactly(Document, otherT.Document)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (VersionAlgorithm != null) yield return VersionAlgorithm;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (CopyrightLabelElement != null) yield return CopyrightLabelElement;
        if (KindElement != null) yield return KindElement;
        foreach (var elem in InstantiatesElement) { if (elem != null) yield return elem; }
        foreach (var elem in ImportsElement) { if (elem != null) yield return elem; }
        if (Software != null) yield return Software;
        if (Implementation != null) yield return Implementation;
        if (FhirVersionElement != null) yield return FhirVersionElement;
        foreach (var elem in FormatElement) { if (elem != null) yield return elem; }
        foreach (var elem in PatchFormatElement) { if (elem != null) yield return elem; }
        foreach (var elem in AcceptLanguageElement) { if (elem != null) yield return elem; }
        foreach (var elem in ImplementationGuideElement) { if (elem != null) yield return elem; }
        foreach (var elem in Rest) { if (elem != null) yield return elem; }
        foreach (var elem in Messaging) { if (elem != null) yield return elem; }
        foreach (var elem in Document) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (VersionAlgorithm != null) yield return new ElementValue("versionAlgorithm", VersionAlgorithm);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (CopyrightLabelElement != null) yield return new ElementValue("copyrightLabel", CopyrightLabelElement);
        if (KindElement != null) yield return new ElementValue("kind", KindElement);
        foreach (var elem in InstantiatesElement) { if (elem != null) yield return new ElementValue("instantiates", elem); }
        foreach (var elem in ImportsElement) { if (elem != null) yield return new ElementValue("imports", elem); }
        if (Software != null) yield return new ElementValue("software", Software);
        if (Implementation != null) yield return new ElementValue("implementation", Implementation);
        if (FhirVersionElement != null) yield return new ElementValue("fhirVersion", FhirVersionElement);
        foreach (var elem in FormatElement) { if (elem != null) yield return new ElementValue("format", elem); }
        foreach (var elem in PatchFormatElement) { if (elem != null) yield return new ElementValue("patchFormat", elem); }
        foreach (var elem in AcceptLanguageElement) { if (elem != null) yield return new ElementValue("acceptLanguage", elem); }
        foreach (var elem in ImplementationGuideElement) { if (elem != null) yield return new ElementValue("implementationGuide", elem); }
        foreach (var elem in Rest) { if (elem != null) yield return new ElementValue("rest", elem); }
        foreach (var elem in Messaging) { if (elem != null) yield return new ElementValue("messaging", elem); }
        foreach (var elem in Document) { if (elem != null) yield return new ElementValue("document", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "versionAlgorithm":
          value = VersionAlgorithm;
          return VersionAlgorithm is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "copyrightLabel":
          value = CopyrightLabelElement;
          return CopyrightLabelElement is not null;
        case "kind":
          value = KindElement;
          return KindElement is not null;
        case "instantiates":
          value = InstantiatesElement;
          return InstantiatesElement?.Any() == true;
        case "imports":
          value = ImportsElement;
          return ImportsElement?.Any() == true;
        case "software":
          value = Software;
          return Software is not null;
        case "implementation":
          value = Implementation;
          return Implementation is not null;
        case "fhirVersion":
          value = FhirVersionElement;
          return FhirVersionElement is not null;
        case "format":
          value = FormatElement;
          return FormatElement?.Any() == true;
        case "patchFormat":
          value = PatchFormatElement;
          return PatchFormatElement?.Any() == true;
        case "acceptLanguage":
          value = AcceptLanguageElement;
          return AcceptLanguageElement?.Any() == true;
        case "implementationGuide":
          value = ImplementationGuideElement;
          return ImplementationGuideElement?.Any() == true;
        case "rest":
          value = Rest;
          return Rest?.Any() == true;
        case "messaging":
          value = Messaging;
          return Messaging?.Any() == true;
        case "document":
          value = Document;
          return Document?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (VersionAlgorithm is not null) yield return new KeyValuePair<string,object>("versionAlgorithm",VersionAlgorithm);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (CopyrightLabelElement is not null) yield return new KeyValuePair<string,object>("copyrightLabel",CopyrightLabelElement);
      if (KindElement is not null) yield return new KeyValuePair<string,object>("kind",KindElement);
      if (InstantiatesElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiates",InstantiatesElement);
      if (ImportsElement?.Any() == true) yield return new KeyValuePair<string,object>("imports",ImportsElement);
      if (Software is not null) yield return new KeyValuePair<string,object>("software",Software);
      if (Implementation is not null) yield return new KeyValuePair<string,object>("implementation",Implementation);
      if (FhirVersionElement is not null) yield return new KeyValuePair<string,object>("fhirVersion",FhirVersionElement);
      if (FormatElement?.Any() == true) yield return new KeyValuePair<string,object>("format",FormatElement);
      if (PatchFormatElement?.Any() == true) yield return new KeyValuePair<string,object>("patchFormat",PatchFormatElement);
      if (AcceptLanguageElement?.Any() == true) yield return new KeyValuePair<string,object>("acceptLanguage",AcceptLanguageElement);
      if (ImplementationGuideElement?.Any() == true) yield return new KeyValuePair<string,object>("implementationGuide",ImplementationGuideElement);
      if (Rest?.Any() == true) yield return new KeyValuePair<string,object>("rest",Rest);
      if (Messaging?.Any() == true) yield return new KeyValuePair<string,object>("messaging",Messaging);
      if (Document?.Any() == true) yield return new KeyValuePair<string,object>("document",Document);
    }

  }

}

// end of file

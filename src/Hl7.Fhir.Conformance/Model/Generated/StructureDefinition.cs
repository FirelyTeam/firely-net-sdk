// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Structural Definition
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("StructureDefinition","http://hl7.org/fhir/StructureDefinition/StructureDefinition", IsResource=true)]
  public partial class StructureDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "StructureDefinition"; } }

    /// <summary>
    /// Defines the type of structure that a definition is describing.
    /// (url: http://hl7.org/fhir/ValueSet/structure-definition-kind)
    /// (system: http://hl7.org/fhir/structure-definition-kind)
    /// </summary>
    [FhirEnumeration("StructureDefinitionKind", "http://hl7.org/fhir/ValueSet/structure-definition-kind")]
    public enum StructureDefinitionKind
    {
      /// <summary>
      /// A primitive type that has a value and an extension. These can be used throughout complex datatype, Resource and extension definitions. Only the base specification can define primitive types.
      /// (system: http://hl7.org/fhir/structure-definition-kind)
      /// </summary>
      [EnumLiteral("primitive-type", "http://hl7.org/fhir/structure-definition-kind"), Description("Primitive Data Type")]
      PrimitiveType,
      /// <summary>
      /// A  complex structure that defines a set of data elements that is suitable for use in 'resources'. The base specification defines a number of complex types, and other specifications can define additional types. These structures do not have a maintained identity.
      /// (system: http://hl7.org/fhir/structure-definition-kind)
      /// </summary>
      [EnumLiteral("complex-type", "http://hl7.org/fhir/structure-definition-kind"), Description("Complex Data Type")]
      ComplexType,
      /// <summary>
      /// A 'resource' - a directed acyclic graph of elements that aggregrates other types into an identifiable entity. The base FHIR resources are defined by the FHIR specification itself but other 'resources' can be defined in additional specifications (though these will not be recognized as 'resources' by the FHIR specification; i.e. they do not get end-points etc., or act as the targets of references in FHIR defined resources - though other specifications can treat them this way).
      /// (system: http://hl7.org/fhir/structure-definition-kind)
      /// </summary>
      [EnumLiteral("resource", "http://hl7.org/fhir/structure-definition-kind"), Description("Resource")]
      Resource,
      /// <summary>
      /// A pattern or a template that is not intended to be a real resource or complex type.
      /// (system: http://hl7.org/fhir/structure-definition-kind)
      /// </summary>
      [EnumLiteral("logical", "http://hl7.org/fhir/structure-definition-kind"), Description("Logical")]
      Logical,
    }

    /// <summary>
    /// How a type relates to its baseDefinition.
    /// (url: http://hl7.org/fhir/ValueSet/type-derivation-rule)
    /// (system: http://hl7.org/fhir/type-derivation-rule)
    /// </summary>
    [FhirEnumeration("TypeDerivationRule", "http://hl7.org/fhir/ValueSet/type-derivation-rule")]
    public enum TypeDerivationRule
    {
      /// <summary>
      /// This definition defines a new type that adds additional elements and optionally additional rules to the base type.
      /// (system: http://hl7.org/fhir/type-derivation-rule)
      /// </summary>
      [EnumLiteral("specialization", "http://hl7.org/fhir/type-derivation-rule"), Description("Specialization")]
      Specialization,
      /// <summary>
      /// This definition adds additional rules to an existing concrete type.
      /// (system: http://hl7.org/fhir/type-derivation-rule)
      /// </summary>
      [EnumLiteral("constraint", "http://hl7.org/fhir/type-derivation-rule"), Description("Constraint")]
      Constraint,
    }

    /// <summary>
    /// How an extension context is interpreted.
    /// (url: http://hl7.org/fhir/ValueSet/extension-context-type)
    /// (system: http://hl7.org/fhir/extension-context-type)
    /// </summary>
    [FhirEnumeration("ExtensionContextType", "http://hl7.org/fhir/ValueSet/extension-context-type")]
    public enum ExtensionContextType
    {
      /// <summary>
      /// The context is all elements that match the FHIRPath query found in the expression.
      /// (system: http://hl7.org/fhir/extension-context-type)
      /// </summary>
      [EnumLiteral("fhirpath", "http://hl7.org/fhir/extension-context-type"), Description("FHIRPath")]
      Fhirpath,
      /// <summary>
      /// The context is any element that has an ElementDefinition.id that matches that found in the expression. This includes ElementDefinition Ids that have slicing identifiers. The full path for the element is [url]#[elementid]. If there is no #, the Element id is one defined in the base specification.
      /// (system: http://hl7.org/fhir/extension-context-type)
      /// </summary>
      [EnumLiteral("element", "http://hl7.org/fhir/extension-context-type"), Description("Element ID")]
      Element,
      /// <summary>
      /// The context is a particular extension from a particular StructureDefinition, and the expression is just a uri that identifies the extension.
      /// (system: http://hl7.org/fhir/extension-context-type)
      /// </summary>
      [EnumLiteral("extension", "http://hl7.org/fhir/extension-context-type"), Description("Extension URL")]
      Extension,
    }

    /// <summary>
    /// External specification that the content is mapped to
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Mapping", IsNestedType=true)]
    [BackboneType("StructureDefinition.mapping")]
    public partial class MappingComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Mapping"; } }

      /// <summary>
      /// Internal id when this mapping is used
      /// </summary>
      [FhirElement("identity", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id IdentityElement
      {
        get { return _IdentityElement; }
        set { _IdentityElement = value; OnPropertyChanged("IdentityElement"); }
      }

      private Hl7.Fhir.Model.Id _IdentityElement;

      /// <summary>
      /// Internal id when this mapping is used
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Identity
      {
        get { return IdentityElement != null ? IdentityElement.Value : null; }
        set
        {
          if (value == null)
            IdentityElement = null;
          else
            IdentityElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("Identity");
        }
      }

      /// <summary>
      /// Identifies what this mapping refers to
      /// </summary>
      [FhirElement("uri", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UriElement
      {
        get { return _UriElement; }
        set { _UriElement = value; OnPropertyChanged("UriElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UriElement;

      /// <summary>
      /// Identifies what this mapping refers to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Uri
      {
        get { return UriElement != null ? UriElement.Value : null; }
        set
        {
          if (value == null)
            UriElement = null;
          else
            UriElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Uri");
        }
      }

      /// <summary>
      /// Names what this mapping refers to
      /// </summary>
      [FhirElement("name", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Names what this mapping refers to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Versions, Issues, Scope limitations etc
      /// </summary>
      [FhirElement("comment", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CommentElement
      {
        get { return _CommentElement; }
        set { _CommentElement = value; OnPropertyChanged("CommentElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CommentElement;

      /// <summary>
      /// Versions, Issues, Scope limitations etc
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Comment
      {
        get { return CommentElement != null ? CommentElement.Value : null; }
        set
        {
          if (value == null)
            CommentElement = null;
          else
            CommentElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Comment");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MappingComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(IdentityElement != null) dest.IdentityElement = (Hl7.Fhir.Model.Id)IdentityElement.DeepCopy();
        if(UriElement != null) dest.UriElement = (Hl7.Fhir.Model.FhirUri)UriElement.DeepCopy();
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(CommentElement != null) dest.CommentElement = (Hl7.Fhir.Model.FhirString)CommentElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MappingComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MappingComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(IdentityElement, otherT.IdentityElement)) return false;
        if( !DeepComparable.Matches(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(CommentElement, otherT.CommentElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MappingComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(IdentityElement, otherT.IdentityElement)) return false;
        if( !DeepComparable.IsExactly(UriElement, otherT.UriElement)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(CommentElement, otherT.CommentElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (IdentityElement != null) yield return IdentityElement;
          if (UriElement != null) yield return UriElement;
          if (NameElement != null) yield return NameElement;
          if (CommentElement != null) yield return CommentElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (IdentityElement != null) yield return new ElementValue("identity", IdentityElement);
          if (UriElement != null) yield return new ElementValue("uri", UriElement);
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (CommentElement != null) yield return new ElementValue("comment", CommentElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identity":
            value = IdentityElement;
            return IdentityElement is not null;
          case "uri":
            value = UriElement;
            return UriElement is not null;
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "comment":
            value = CommentElement;
            return CommentElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (IdentityElement is not null) yield return new KeyValuePair<string,object>("identity",IdentityElement);
        if (UriElement is not null) yield return new KeyValuePair<string,object>("uri",UriElement);
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (CommentElement is not null) yield return new KeyValuePair<string,object>("comment",CommentElement);
      }

    }

    /// <summary>
    /// If an extension, where it can be used in instances
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Context", IsNestedType=true)]
    [BackboneType("StructureDefinition.context")]
    public partial class ContextComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Context"; } }

      /// <summary>
      /// fhirpath | element | extension
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ExtensionContextType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContextType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContextType> _TypeElement;

      /// <summary>
      /// fhirpath | element | extension
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.StructureDefinition.ExtensionContextType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContextType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// Where the extension can be used in instances
      /// </summary>
      [FhirElement("expression", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ExpressionElement
      {
        get { return _ExpressionElement; }
        set { _ExpressionElement = value; OnPropertyChanged("ExpressionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ExpressionElement;

      /// <summary>
      /// Where the extension can be used in instances
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Expression
      {
        get { return ExpressionElement != null ? ExpressionElement.Value : null; }
        set
        {
          if (value == null)
            ExpressionElement = null;
          else
            ExpressionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Expression");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContextComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.StructureDefinition.ExtensionContextType>)TypeElement.DeepCopy();
        if(ExpressionElement != null) dest.ExpressionElement = (Hl7.Fhir.Model.FhirString)ExpressionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContextComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContextComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(ExpressionElement, otherT.ExpressionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContextComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(ExpressionElement, otherT.ExpressionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TypeElement != null) yield return TypeElement;
          if (ExpressionElement != null) yield return ExpressionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (ExpressionElement != null) yield return new ElementValue("expression", ExpressionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "expression":
            value = ExpressionElement;
            return ExpressionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (ExpressionElement is not null) yield return new KeyValuePair<string,object>("expression",ExpressionElement);
      }

    }

    /// <summary>
    /// Snapshot view of the structure
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Snapshot", IsNestedType=true)]
    [BackboneType("StructureDefinition.snapshot")]
    public partial class SnapshotComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Snapshot"; } }

      /// <summary>
      /// Definition of elements in the resource (if no StructureDefinition)
      /// </summary>
      [FhirElement("element", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ElementDefinition> Element
      {
        get { if(_Element==null) _Element = new List<Hl7.Fhir.Model.ElementDefinition>(); return _Element; }
        set { _Element = value; OnPropertyChanged("Element"); }
      }

      private List<Hl7.Fhir.Model.ElementDefinition> _Element;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SnapshotComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Element != null) dest.Element = new List<Hl7.Fhir.Model.ElementDefinition>(Element.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SnapshotComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SnapshotComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Element, otherT.Element)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SnapshotComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Element, otherT.Element)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return new ElementValue("element", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "element":
            value = Element;
            return Element?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Element?.Any() == true) yield return new KeyValuePair<string,object>("element",Element);
      }

    }

    /// <summary>
    /// Differential view of the structure
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("StructureDefinition#Differential", IsNestedType=true)]
    [BackboneType("StructureDefinition.differential")]
    public partial class DifferentialComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "StructureDefinition#Differential"; } }

      /// <summary>
      /// Definition of elements in the resource (if no StructureDefinition)
      /// </summary>
      [FhirElement("element", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ElementDefinition> Element
      {
        get { if(_Element==null) _Element = new List<Hl7.Fhir.Model.ElementDefinition>(); return _Element; }
        set { _Element = value; OnPropertyChanged("Element"); }
      }

      private List<Hl7.Fhir.Model.ElementDefinition> _Element;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DifferentialComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Element != null) dest.Element = new List<Hl7.Fhir.Model.ElementDefinition>(Element.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DifferentialComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DifferentialComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Element, otherT.Element)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DifferentialComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Element, otherT.Element)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Element) { if (elem != null) yield return new ElementValue("element", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "element":
            value = Element;
            return Element?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Element?.Any() == true) yield return new KeyValuePair<string,object>("element",Element);
      }

    }

    /// <summary>
    /// Canonical identifier for this structure definition, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this structure definition, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the structure definition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the structure definition
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the structure definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// How to compare versions. Note: Element was introduced in R5, do not use when working with older releases.
    /// </summary>
    [FhirElement("versionAlgorithm", InSummary=true, Order=120, Choice=ChoiceType.DatatypeChoice, Since=FhirRelease.R5)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Coding))]
    [DataMember]
    public Hl7.Fhir.Model.DataType VersionAlgorithm
    {
      get { return _VersionAlgorithm; }
      set { _VersionAlgorithm = value; OnPropertyChanged("VersionAlgorithm"); }
    }

    private Hl7.Fhir.Model.DataType _VersionAlgorithm;

    /// <summary>
    /// Name for this structure definition (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=130)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this structure definition (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this structure definition (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this structure definition (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=160, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=170, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=180, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher/steward (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the structure definition
    /// </summary>
    [FhirElement("description", Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the structure definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for structure definition (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this structure definition is defined
    /// </summary>
    [FhirElement("purpose", Order=230, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this structure definition is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=240)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// Copyright holder and year(s). Note: Element was introduced in R5, do not use when working with older releases.
    /// </summary>
    [FhirElement("copyrightLabel", Order=250, Since=FhirRelease.R5)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString CopyrightLabelElement
    {
      get { return _CopyrightLabelElement; }
      set { _CopyrightLabelElement = value; OnPropertyChanged("CopyrightLabelElement"); }
    }

    private Hl7.Fhir.Model.FhirString _CopyrightLabelElement;

    /// <summary>
    /// Copyright holder and year(s)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string CopyrightLabel
    {
      get { return CopyrightLabelElement != null ? CopyrightLabelElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightLabelElement = null;
        else
          CopyrightLabelElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("CopyrightLabel");
      }
    }

    /// <summary>
    /// Assist with indexing and finding
    /// </summary>
    [FhirElement("keyword", InSummary=true, Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Coding> Keyword
    {
      get { if(_Keyword==null) _Keyword = new List<Hl7.Fhir.Model.Coding>(); return _Keyword; }
      set { _Keyword = value; OnPropertyChanged("Keyword"); }
    }

    private List<Hl7.Fhir.Model.Coding> _Keyword;

    /// <summary>
    /// FHIR Version this StructureDefinition targets
    /// </summary>
    [FhirElement("fhirVersion", InSummary=true, Order=270)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("FHIRVersion")]
    [DataMember]
    public Code<Hl7.Fhir.Model.FHIRVersion> FhirVersionElement
    {
      get { return _FhirVersionElement; }
      set { _FhirVersionElement = value; OnPropertyChanged("FhirVersionElement"); }
    }

    private Code<Hl7.Fhir.Model.FHIRVersion> _FhirVersionElement;

    /// <summary>
    /// FHIR Version this StructureDefinition targets
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.FHIRVersion? FhirVersion
    {
      get { return FhirVersionElement != null ? FhirVersionElement.Value : null; }
      set
      {
        if (value == null)
          FhirVersionElement = null;
        else
          FhirVersionElement = new Code<Hl7.Fhir.Model.FHIRVersion>(value);
        OnPropertyChanged("FhirVersion");
      }
    }

    /// <summary>
    /// External specification that the content is mapped to
    /// </summary>
    [FhirElement("mapping", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.StructureDefinition.MappingComponent> Mapping
    {
      get { if(_Mapping==null) _Mapping = new List<Hl7.Fhir.Model.StructureDefinition.MappingComponent>(); return _Mapping; }
      set { _Mapping = value; OnPropertyChanged("Mapping"); }
    }

    private List<Hl7.Fhir.Model.StructureDefinition.MappingComponent> _Mapping;

    /// <summary>
    /// primitive-type | complex-type | resource | logical
    /// </summary>
    [FhirElement("kind", InSummary=true, Order=290)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("StructureDefinitionKind")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind> KindElement
    {
      get { return _KindElement; }
      set { _KindElement = value; OnPropertyChanged("KindElement"); }
    }

    private Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind> _KindElement;

    /// <summary>
    /// primitive-type | complex-type | resource | logical
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind? Kind
    {
      get { return KindElement != null ? KindElement.Value : null; }
      set
      {
        if (value == null)
          KindElement = null;
        else
          KindElement = new Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind>(value);
        OnPropertyChanged("Kind");
      }
    }

    /// <summary>
    /// Whether the structure is abstract
    /// </summary>
    [FhirElement("abstract", InSummary=true, Order=300)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean AbstractElement
    {
      get { return _AbstractElement; }
      set { _AbstractElement = value; OnPropertyChanged("AbstractElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _AbstractElement;

    /// <summary>
    /// Whether the structure is abstract
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Abstract
    {
      get { return AbstractElement != null ? AbstractElement.Value : null; }
      set
      {
        if (value == null)
          AbstractElement = null;
        else
          AbstractElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Abstract");
      }
    }

    /// <summary>
    /// If an extension, where it can be used in instances
    /// </summary>
    [FhirElement("context", InSummary=true, Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.StructureDefinition.ContextComponent> Context
    {
      get { if(_Context==null) _Context = new List<Hl7.Fhir.Model.StructureDefinition.ContextComponent>(); return _Context; }
      set { _Context = value; OnPropertyChanged("Context"); }
    }

    private List<Hl7.Fhir.Model.StructureDefinition.ContextComponent> _Context;

    /// <summary>
    /// FHIRPath invariants - when the extension can be used
    /// </summary>
    [FhirElement("contextInvariant", InSummary=true, Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirString> ContextInvariantElement
    {
      get { if(_ContextInvariantElement==null) _ContextInvariantElement = new List<Hl7.Fhir.Model.FhirString>(); return _ContextInvariantElement; }
      set { _ContextInvariantElement = value; OnPropertyChanged("ContextInvariantElement"); }
    }

    private List<Hl7.Fhir.Model.FhirString> _ContextInvariantElement;

    /// <summary>
    /// FHIRPath invariants - when the extension can be used
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> ContextInvariant
    {
      get { return ContextInvariantElement != null ? ContextInvariantElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ContextInvariantElement = null;
        else
          ContextInvariantElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
        OnPropertyChanged("ContextInvariant");
      }
    }

    /// <summary>
    /// Type defined or constrained by this structure
    /// </summary>
    [FhirElement("type", InSummary=true, Order=330)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri TypeElement
    {
      get { return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _TypeElement;

    /// <summary>
    /// Type defined or constrained by this structure
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Type
    {
      get { return TypeElement != null ? TypeElement.Value : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Type");
      }
    }

    /// <summary>
    /// Definition that this type is constrained/specialized from
    /// </summary>
    [FhirElement("baseDefinition", InSummary=true, Order=340)]
    [DataMember]
    public Hl7.Fhir.Model.Canonical BaseDefinitionElement
    {
      get { return _BaseDefinitionElement; }
      set { _BaseDefinitionElement = value; OnPropertyChanged("BaseDefinitionElement"); }
    }

    private Hl7.Fhir.Model.Canonical _BaseDefinitionElement;

    /// <summary>
    /// Definition that this type is constrained/specialized from
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string BaseDefinition
    {
      get { return BaseDefinitionElement != null ? BaseDefinitionElement.Value : null; }
      set
      {
        if (value == null)
          BaseDefinitionElement = null;
        else
          BaseDefinitionElement = new Hl7.Fhir.Model.Canonical(value);
        OnPropertyChanged("BaseDefinition");
      }
    }

    /// <summary>
    /// specialization | constraint - How relates to base definition
    /// </summary>
    [FhirElement("derivation", InSummary=true, Order=350)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("TypeDerivationRule")]
    [DataMember]
    public Code<Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule> DerivationElement
    {
      get { return _DerivationElement; }
      set { _DerivationElement = value; OnPropertyChanged("DerivationElement"); }
    }

    private Code<Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule> _DerivationElement;

    /// <summary>
    /// specialization | constraint - How relates to base definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule? Derivation
    {
      get { return DerivationElement != null ? DerivationElement.Value : null; }
      set
      {
        if (value == null)
          DerivationElement = null;
        else
          DerivationElement = new Code<Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule>(value);
        OnPropertyChanged("Derivation");
      }
    }

    /// <summary>
    /// Snapshot view of the structure
    /// </summary>
    [FhirElement("snapshot", Order=360)]
    [DataMember]
    public Hl7.Fhir.Model.StructureDefinition.SnapshotComponent Snapshot
    {
      get { return _Snapshot; }
      set { _Snapshot = value; OnPropertyChanged("Snapshot"); }
    }

    private Hl7.Fhir.Model.StructureDefinition.SnapshotComponent _Snapshot;

    /// <summary>
    /// Differential view of the structure
    /// </summary>
    [FhirElement("differential", Order=370)]
    [DataMember]
    public Hl7.Fhir.Model.StructureDefinition.DifferentialComponent Differential
    {
      get { return _Differential; }
      set { _Differential = value; OnPropertyChanged("Differential"); }
    }

    private Hl7.Fhir.Model.StructureDefinition.DifferentialComponent _Differential;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as StructureDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(VersionAlgorithm != null) dest.VersionAlgorithm = (Hl7.Fhir.Model.DataType)VersionAlgorithm.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(CopyrightLabelElement != null) dest.CopyrightLabelElement = (Hl7.Fhir.Model.FhirString)CopyrightLabelElement.DeepCopy();
      if(Keyword != null) dest.Keyword = new List<Hl7.Fhir.Model.Coding>(Keyword.DeepCopy());
      if(FhirVersionElement != null) dest.FhirVersionElement = (Code<Hl7.Fhir.Model.FHIRVersion>)FhirVersionElement.DeepCopy();
      if(Mapping != null) dest.Mapping = new List<Hl7.Fhir.Model.StructureDefinition.MappingComponent>(Mapping.DeepCopy());
      if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.StructureDefinition.StructureDefinitionKind>)KindElement.DeepCopy();
      if(AbstractElement != null) dest.AbstractElement = (Hl7.Fhir.Model.FhirBoolean)AbstractElement.DeepCopy();
      if(Context != null) dest.Context = new List<Hl7.Fhir.Model.StructureDefinition.ContextComponent>(Context.DeepCopy());
      if(ContextInvariantElement != null) dest.ContextInvariantElement = new List<Hl7.Fhir.Model.FhirString>(ContextInvariantElement.DeepCopy());
      if(TypeElement != null) dest.TypeElement = (Hl7.Fhir.Model.FhirUri)TypeElement.DeepCopy();
      if(BaseDefinitionElement != null) dest.BaseDefinitionElement = (Hl7.Fhir.Model.Canonical)BaseDefinitionElement.DeepCopy();
      if(DerivationElement != null) dest.DerivationElement = (Code<Hl7.Fhir.Model.StructureDefinition.TypeDerivationRule>)DerivationElement.DeepCopy();
      if(Snapshot != null) dest.Snapshot = (Hl7.Fhir.Model.StructureDefinition.SnapshotComponent)Snapshot.DeepCopy();
      if(Differential != null) dest.Differential = (Hl7.Fhir.Model.StructureDefinition.DifferentialComponent)Differential.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new StructureDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as StructureDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.Matches(Keyword, otherT.Keyword)) return false;
      if( !DeepComparable.Matches(FhirVersionElement, otherT.FhirVersionElement)) return false;
      if( !DeepComparable.Matches(Mapping, otherT.Mapping)) return false;
      if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.Matches(AbstractElement, otherT.AbstractElement)) return false;
      if( !DeepComparable.Matches(Context, otherT.Context)) return false;
      if( !DeepComparable.Matches(ContextInvariantElement, otherT.ContextInvariantElement)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(BaseDefinitionElement, otherT.BaseDefinitionElement)) return false;
      if( !DeepComparable.Matches(DerivationElement, otherT.DerivationElement)) return false;
      if( !DeepComparable.Matches(Snapshot, otherT.Snapshot)) return false;
      if( !DeepComparable.Matches(Differential, otherT.Differential)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as StructureDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(VersionAlgorithm, otherT.VersionAlgorithm)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightLabelElement, otherT.CopyrightLabelElement)) return false;
      if( !DeepComparable.IsExactly(Keyword, otherT.Keyword)) return false;
      if( !DeepComparable.IsExactly(FhirVersionElement, otherT.FhirVersionElement)) return false;
      if( !DeepComparable.IsExactly(Mapping, otherT.Mapping)) return false;
      if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.IsExactly(AbstractElement, otherT.AbstractElement)) return false;
      if( !DeepComparable.IsExactly(Context, otherT.Context)) return false;
      if( !DeepComparable.IsExactly(ContextInvariantElement, otherT.ContextInvariantElement)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(BaseDefinitionElement, otherT.BaseDefinitionElement)) return false;
      if( !DeepComparable.IsExactly(DerivationElement, otherT.DerivationElement)) return false;
      if( !DeepComparable.IsExactly(Snapshot, otherT.Snapshot)) return false;
      if( !DeepComparable.IsExactly(Differential, otherT.Differential)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (VersionAlgorithm != null) yield return VersionAlgorithm;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (CopyrightLabelElement != null) yield return CopyrightLabelElement;
        foreach (var elem in Keyword) { if (elem != null) yield return elem; }
        if (FhirVersionElement != null) yield return FhirVersionElement;
        foreach (var elem in Mapping) { if (elem != null) yield return elem; }
        if (KindElement != null) yield return KindElement;
        if (AbstractElement != null) yield return AbstractElement;
        foreach (var elem in Context) { if (elem != null) yield return elem; }
        foreach (var elem in ContextInvariantElement) { if (elem != null) yield return elem; }
        if (TypeElement != null) yield return TypeElement;
        if (BaseDefinitionElement != null) yield return BaseDefinitionElement;
        if (DerivationElement != null) yield return DerivationElement;
        if (Snapshot != null) yield return Snapshot;
        if (Differential != null) yield return Differential;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (VersionAlgorithm != null) yield return new ElementValue("versionAlgorithm", VersionAlgorithm);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (CopyrightLabelElement != null) yield return new ElementValue("copyrightLabel", CopyrightLabelElement);
        foreach (var elem in Keyword) { if (elem != null) yield return new ElementValue("keyword", elem); }
        if (FhirVersionElement != null) yield return new ElementValue("fhirVersion", FhirVersionElement);
        foreach (var elem in Mapping) { if (elem != null) yield return new ElementValue("mapping", elem); }
        if (KindElement != null) yield return new ElementValue("kind", KindElement);
        if (AbstractElement != null) yield return new ElementValue("abstract", AbstractElement);
        foreach (var elem in Context) { if (elem != null) yield return new ElementValue("context", elem); }
        foreach (var elem in ContextInvariantElement) { if (elem != null) yield return new ElementValue("contextInvariant", elem); }
        if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        if (BaseDefinitionElement != null) yield return new ElementValue("baseDefinition", BaseDefinitionElement);
        if (DerivationElement != null) yield return new ElementValue("derivation", DerivationElement);
        if (Snapshot != null) yield return new ElementValue("snapshot", Snapshot);
        if (Differential != null) yield return new ElementValue("differential", Differential);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "versionAlgorithm":
          value = VersionAlgorithm;
          return VersionAlgorithm is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "copyrightLabel":
          value = CopyrightLabelElement;
          return CopyrightLabelElement is not null;
        case "keyword":
          value = Keyword;
          return Keyword?.Any() == true;
        case "fhirVersion":
          value = FhirVersionElement;
          return FhirVersionElement is not null;
        case "mapping":
          value = Mapping;
          return Mapping?.Any() == true;
        case "kind":
          value = KindElement;
          return KindElement is not null;
        case "abstract":
          value = AbstractElement;
          return AbstractElement is not null;
        case "context":
          value = Context;
          return Context?.Any() == true;
        case "contextInvariant":
          value = ContextInvariantElement;
          return ContextInvariantElement?.Any() == true;
        case "type":
          value = TypeElement;
          return TypeElement is not null;
        case "baseDefinition":
          value = BaseDefinitionElement;
          return BaseDefinitionElement is not null;
        case "derivation":
          value = DerivationElement;
          return DerivationElement is not null;
        case "snapshot":
          value = Snapshot;
          return Snapshot is not null;
        case "differential":
          value = Differential;
          return Differential is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (VersionAlgorithm is not null) yield return new KeyValuePair<string,object>("versionAlgorithm",VersionAlgorithm);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (CopyrightLabelElement is not null) yield return new KeyValuePair<string,object>("copyrightLabel",CopyrightLabelElement);
      if (Keyword?.Any() == true) yield return new KeyValuePair<string,object>("keyword",Keyword);
      if (FhirVersionElement is not null) yield return new KeyValuePair<string,object>("fhirVersion",FhirVersionElement);
      if (Mapping?.Any() == true) yield return new KeyValuePair<string,object>("mapping",Mapping);
      if (KindElement is not null) yield return new KeyValuePair<string,object>("kind",KindElement);
      if (AbstractElement is not null) yield return new KeyValuePair<string,object>("abstract",AbstractElement);
      if (Context?.Any() == true) yield return new KeyValuePair<string,object>("context",Context);
      if (ContextInvariantElement?.Any() == true) yield return new KeyValuePair<string,object>("contextInvariant",ContextInvariantElement);
      if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      if (BaseDefinitionElement is not null) yield return new KeyValuePair<string,object>("baseDefinition",BaseDefinitionElement);
      if (DerivationElement is not null) yield return new KeyValuePair<string,object>("derivation",DerivationElement);
      if (Snapshot is not null) yield return new KeyValuePair<string,object>("snapshot",Snapshot);
      if (Differential is not null) yield return new KeyValuePair<string,object>("differential",Differential);
    }

  }

}

// end of file

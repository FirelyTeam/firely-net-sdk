// <auto-generated/>
// Contents of: hl7.fhir.r6.expansions@6.0.0-ballot2, hl7.fhir.r6.core@6.0.0-ballot2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;
using SystemPrimitive = Hl7.Fhir.ElementModel.Types;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Details of a Health Insurance product provided by an organization
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("InsuranceProduct","http://hl7.org/fhir/StructureDefinition/InsuranceProduct", IsResource=true)]
  public partial class InsuranceProduct : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "InsuranceProduct"; } }

    /// <summary>
    /// Coverage details
    /// </summary>
    /// <remarks>
    /// Details about the coverage offered by the insurance product.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsuranceProduct#Coverage", IsNestedType=true)]
    [BackboneType("InsuranceProduct.coverage")]
    public partial class CoverageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsuranceProduct#Coverage"; } }

      /// <summary>
      /// Classification of Coverage
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// What networks provide coverage
      /// </summary>
      [FhirElement("network", Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Network
      {
        get { if(_Network==null) _Network = new List<Hl7.Fhir.Model.ResourceReference>(); return _Network; }
        set { _Network = value; OnPropertyChanged("Network"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Network;

      /// <summary>
      /// List of benefits
      /// </summary>
      [FhirElement("benefit", Order=60)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.InsuranceProduct.CoverageBenefitComponent> Benefit
      {
        get { if(_Benefit==null) _Benefit = new List<Hl7.Fhir.Model.InsuranceProduct.CoverageBenefitComponent>(); return _Benefit; }
        set { _Benefit = value; OnPropertyChanged("Benefit"); }
      }

      private List<Hl7.Fhir.Model.InsuranceProduct.CoverageBenefitComponent> _Benefit;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CoverageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Network.Any()) dest.Network = new List<Hl7.Fhir.Model.ResourceReference>(Network.DeepCopy());
        if(Benefit.Any()) dest.Benefit = new List<Hl7.Fhir.Model.InsuranceProduct.CoverageBenefitComponent>(Benefit.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CoverageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CoverageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Network, otherT.Network)) return false;
        if( !DeepComparable.Matches(Benefit, otherT.Benefit)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CoverageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Network, otherT.Network)) return false;
        if( !DeepComparable.IsExactly(Benefit, otherT.Benefit)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Network) { if (elem != null) yield return elem; }
          foreach (var elem in Benefit) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Network) { if (elem != null) yield return new ElementValue("network", elem); }
          foreach (var elem in Benefit) { if (elem != null) yield return new ElementValue("benefit", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "network":
            value = Network;
            return Network?.Any() == true;
          case "benefit":
            value = Benefit;
            return Benefit?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Network?.Any() == true) yield return new KeyValuePair<string,object>("network",Network);
        if (Benefit?.Any() == true) yield return new KeyValuePair<string,object>("benefit",Benefit);
      }

    }

    /// <summary>
    /// List of benefits
    /// </summary>
    /// <remarks>
    /// Specific benefits under this type of coverage.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsuranceProduct#CoverageBenefit", IsNestedType=true)]
    [BackboneType("InsuranceProduct.coverage.benefit")]
    public partial class CoverageBenefitComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsuranceProduct#CoverageBenefit"; } }

      /// <summary>
      /// Classification of benefit provided
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Referral requirements
      /// </summary>
      [FhirElement("requirement", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RequirementElement
      {
        get { return _RequirementElement; }
        set { _RequirementElement = value; OnPropertyChanged("RequirementElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RequirementElement;

      /// <summary>
      /// Referral requirements
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Requirement
      {
        get { return RequirementElement != null ? RequirementElement.Value : null; }
        set
        {
          if (value == null)
            RequirementElement = null;
          else
            RequirementElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Requirement");
        }
      }

      /// <summary>
      /// Limits on the provided benefits
      /// </summary>
      [FhirElement("limit", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.InsuranceProduct.LimitComponent> Limit
      {
        get { if(_Limit==null) _Limit = new List<Hl7.Fhir.Model.InsuranceProduct.LimitComponent>(); return _Limit; }
        set { _Limit = value; OnPropertyChanged("Limit"); }
      }

      private List<Hl7.Fhir.Model.InsuranceProduct.LimitComponent> _Limit;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CoverageBenefitComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(RequirementElement != null) dest.RequirementElement = (Hl7.Fhir.Model.FhirString)RequirementElement.DeepCopy();
        if(Limit.Any()) dest.Limit = new List<Hl7.Fhir.Model.InsuranceProduct.LimitComponent>(Limit.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CoverageBenefitComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CoverageBenefitComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(RequirementElement, otherT.RequirementElement)) return false;
        if( !DeepComparable.Matches(Limit, otherT.Limit)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CoverageBenefitComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(RequirementElement, otherT.RequirementElement)) return false;
        if( !DeepComparable.IsExactly(Limit, otherT.Limit)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (RequirementElement != null) yield return RequirementElement;
          foreach (var elem in Limit) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (RequirementElement != null) yield return new ElementValue("requirement", RequirementElement);
          foreach (var elem in Limit) { if (elem != null) yield return new ElementValue("limit", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "requirement":
            value = RequirementElement;
            return RequirementElement is not null;
          case "limit":
            value = Limit;
            return Limit?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (RequirementElement is not null) yield return new KeyValuePair<string,object>("requirement",RequirementElement);
        if (Limit?.Any() == true) yield return new KeyValuePair<string,object>("limit",Limit);
      }

    }

    /// <summary>
    /// Limits on the provided benefits
    /// </summary>
    /// <remarks>
    /// The specific limits on the benefit.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsuranceProduct#Limit", IsNestedType=true)]
    [BackboneType("InsuranceProduct.coverage.benefit.limit")]
    public partial class LimitComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsuranceProduct#Limit"; } }

      /// <summary>
      /// Maximum value allowed
      /// </summary>
      [FhirElement("value", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.Quantity _Value;

      /// <summary>
      /// Benefit limit details
      /// </summary>
      [FhirElement("code", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LimitComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Value != null) dest.Value = (Hl7.Fhir.Model.Quantity)Value.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LimitComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LimitComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LimitComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Value != null) yield return Value;
          if (Code != null) yield return Code;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Value != null) yield return new ElementValue("value", Value);
          if (Code != null) yield return new ElementValue("code", Code);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "value":
            value = Value;
            return Value is not null;
          case "code":
            value = Code;
            return Code is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      }

    }

    /// <summary>
    /// Associated insurance product
    /// </summary>
    /// <remarks>
    /// Another product that is related to this product. Often used to create relationships to parents or families of products.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsuranceProduct#Related", IsNestedType=true)]
    [BackboneType("InsuranceProduct.related")]
    public partial class RelatedComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsuranceProduct#Related"; } }

      /// <summary>
      /// Related Product reference
      /// </summary>
      [FhirElement("product", Order=40)]
      [CLSCompliant(false)]
      [References("InsuranceProduct")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Product
      {
        get { return _Product; }
        set { _Product = value; OnPropertyChanged("Product"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Product;

      /// <summary>
      /// Relationship of this product to the related product
      /// </summary>
      [FhirElement("relationship", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Relationship
      {
        get { return _Relationship; }
        set { _Relationship = value; OnPropertyChanged("Relationship"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Relationship;

      /// <summary>
      /// Period that this Relationship is valid
      /// </summary>
      [FhirElement("period", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatedComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Product != null) dest.Product = (Hl7.Fhir.Model.ResourceReference)Product.DeepCopy();
        if(Relationship != null) dest.Relationship = (Hl7.Fhir.Model.CodeableConcept)Relationship.DeepCopy();
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatedComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatedComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Product, otherT.Product)) return false;
        if( !DeepComparable.Matches(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatedComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Product, otherT.Product)) return false;
        if( !DeepComparable.IsExactly(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Product != null) yield return Product;
          if (Relationship != null) yield return Relationship;
          if (Period != null) yield return Period;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Product != null) yield return new ElementValue("product", Product);
          if (Relationship != null) yield return new ElementValue("relationship", Relationship);
          if (Period != null) yield return new ElementValue("period", Period);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "product":
            value = Product;
            return Product is not null;
          case "relationship":
            value = Relationship;
            return Relationship is not null;
          case "period":
            value = Period;
            return Period is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Product is not null) yield return new KeyValuePair<string,object>("product",Product);
        if (Relationship is not null) yield return new KeyValuePair<string,object>("relationship",Relationship);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      }

    }

    /// <summary>
    /// Business Identifier for Product
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Kind of product
    /// </summary>
    [FhirElement("type", InSummary=true, Order=110, FiveWs="FiveWs.class")]
    [Binding("InsuranceProductType")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Type
    {
      get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Type;

    /// <summary>
    /// Official name
    /// </summary>
    [FhirElement("name", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Official name
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Alternate names
    /// </summary>
    [FhirElement("alias", Order=130)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirString> AliasElement
    {
      get { if(_AliasElement==null) _AliasElement = new List<Hl7.Fhir.Model.FhirString>(); return _AliasElement; }
      set { _AliasElement = value; OnPropertyChanged("AliasElement"); }
    }

    private List<Hl7.Fhir.Model.FhirString> _AliasElement;

    /// <summary>
    /// Alternate names
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Alias
    {
      get { return AliasElement != null ? AliasElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          AliasElement = null;
        else
          AliasElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
        OnPropertyChanged("Alias");
      }
    }

    /// <summary>
    /// When the product is available
    /// </summary>
    [FhirElement("period", Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// Product issuer
    /// </summary>
    [FhirElement("ownedBy", InSummary=true, Order=150)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference OwnedBy
    {
      get { return _OwnedBy; }
      set { _OwnedBy = value; OnPropertyChanged("OwnedBy"); }
    }

    private Hl7.Fhir.Model.ResourceReference _OwnedBy;

    /// <summary>
    /// Product administrator
    /// </summary>
    [FhirElement("administeredBy", InSummary=true, Order=160)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference AdministeredBy
    {
      get { return _AdministeredBy; }
      set { _AdministeredBy = value; OnPropertyChanged("AdministeredBy"); }
    }

    private Hl7.Fhir.Model.ResourceReference _AdministeredBy;

    /// <summary>
    /// Where product applies
    /// </summary>
    [FhirElement("coverageArea", InSummary=true, Order=170)]
    [CLSCompliant(false)]
    [References("Location")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> CoverageArea
    {
      get { if(_CoverageArea==null) _CoverageArea = new List<Hl7.Fhir.Model.ResourceReference>(); return _CoverageArea; }
      set { _CoverageArea = value; OnPropertyChanged("CoverageArea"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _CoverageArea;

    /// <summary>
    /// Official contact details relevant to the health insurance product
    /// </summary>
    [FhirElement("contact", Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ExtendedContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ExtendedContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ExtendedContactDetail> _Contact;

    /// <summary>
    /// Technical endpoint
    /// </summary>
    [FhirElement("endpoint", Order=190)]
    [CLSCompliant(false)]
    [References("Endpoint")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Endpoint
    {
      get { if(_Endpoint==null) _Endpoint = new List<Hl7.Fhir.Model.ResourceReference>(); return _Endpoint; }
      set { _Endpoint = value; OnPropertyChanged("Endpoint"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Endpoint;

    /// <summary>
    /// What networks are Included
    /// </summary>
    [FhirElement("network", Order=200)]
    [CLSCompliant(false)]
    [References("Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Network
    {
      get { if(_Network==null) _Network = new List<Hl7.Fhir.Model.ResourceReference>(); return _Network; }
      set { _Network = value; OnPropertyChanged("Network"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Network;

    /// <summary>
    /// Coverage details
    /// </summary>
    [FhirElement("coverage", Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InsuranceProduct.CoverageComponent> Coverage
    {
      get { if(_Coverage==null) _Coverage = new List<Hl7.Fhir.Model.InsuranceProduct.CoverageComponent>(); return _Coverage; }
      set { _Coverage = value; OnPropertyChanged("Coverage"); }
    }

    private List<Hl7.Fhir.Model.InsuranceProduct.CoverageComponent> _Coverage;

    /// <summary>
    /// Associated insurance product
    /// </summary>
    [FhirElement("related", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InsuranceProduct.RelatedComponent> Related
    {
      get { if(_Related==null) _Related = new List<Hl7.Fhir.Model.InsuranceProduct.RelatedComponent>(); return _Related; }
      set { _Related = value; OnPropertyChanged("Related"); }
    }

    private List<Hl7.Fhir.Model.InsuranceProduct.RelatedComponent> _Related;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as InsuranceProduct;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier.Any()) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(Type.Any()) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(AliasElement.Any()) dest.AliasElement = new List<Hl7.Fhir.Model.FhirString>(AliasElement.DeepCopy());
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(OwnedBy != null) dest.OwnedBy = (Hl7.Fhir.Model.ResourceReference)OwnedBy.DeepCopy();
      if(AdministeredBy != null) dest.AdministeredBy = (Hl7.Fhir.Model.ResourceReference)AdministeredBy.DeepCopy();
      if(CoverageArea.Any()) dest.CoverageArea = new List<Hl7.Fhir.Model.ResourceReference>(CoverageArea.DeepCopy());
      if(Contact.Any()) dest.Contact = new List<Hl7.Fhir.Model.ExtendedContactDetail>(Contact.DeepCopy());
      if(Endpoint.Any()) dest.Endpoint = new List<Hl7.Fhir.Model.ResourceReference>(Endpoint.DeepCopy());
      if(Network.Any()) dest.Network = new List<Hl7.Fhir.Model.ResourceReference>(Network.DeepCopy());
      if(Coverage.Any()) dest.Coverage = new List<Hl7.Fhir.Model.InsuranceProduct.CoverageComponent>(Coverage.DeepCopy());
      if(Related.Any()) dest.Related = new List<Hl7.Fhir.Model.InsuranceProduct.RelatedComponent>(Related.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new InsuranceProduct());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as InsuranceProduct;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(AliasElement, otherT.AliasElement)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(OwnedBy, otherT.OwnedBy)) return false;
      if( !DeepComparable.Matches(AdministeredBy, otherT.AdministeredBy)) return false;
      if( !DeepComparable.Matches(CoverageArea, otherT.CoverageArea)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Endpoint, otherT.Endpoint)) return false;
      if( !DeepComparable.Matches(Network, otherT.Network)) return false;
      if( !DeepComparable.Matches(Coverage, otherT.Coverage)) return false;
      if( !DeepComparable.Matches(Related, otherT.Related)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as InsuranceProduct;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(AliasElement, otherT.AliasElement)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(OwnedBy, otherT.OwnedBy)) return false;
      if( !DeepComparable.IsExactly(AdministeredBy, otherT.AdministeredBy)) return false;
      if( !DeepComparable.IsExactly(CoverageArea, otherT.CoverageArea)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Endpoint, otherT.Endpoint)) return false;
      if( !DeepComparable.IsExactly(Network, otherT.Network)) return false;
      if( !DeepComparable.IsExactly(Coverage, otherT.Coverage)) return false;
      if( !DeepComparable.IsExactly(Related, otherT.Related)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        foreach (var elem in Type) { if (elem != null) yield return elem; }
        if (NameElement != null) yield return NameElement;
        foreach (var elem in AliasElement) { if (elem != null) yield return elem; }
        if (Period != null) yield return Period;
        if (OwnedBy != null) yield return OwnedBy;
        if (AdministeredBy != null) yield return AdministeredBy;
        foreach (var elem in CoverageArea) { if (elem != null) yield return elem; }
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        foreach (var elem in Endpoint) { if (elem != null) yield return elem; }
        foreach (var elem in Network) { if (elem != null) yield return elem; }
        foreach (var elem in Coverage) { if (elem != null) yield return elem; }
        foreach (var elem in Related) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        foreach (var elem in AliasElement) { if (elem != null) yield return new ElementValue("alias", elem); }
        if (Period != null) yield return new ElementValue("period", Period);
        if (OwnedBy != null) yield return new ElementValue("ownedBy", OwnedBy);
        if (AdministeredBy != null) yield return new ElementValue("administeredBy", AdministeredBy);
        foreach (var elem in CoverageArea) { if (elem != null) yield return new ElementValue("coverageArea", elem); }
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        foreach (var elem in Endpoint) { if (elem != null) yield return new ElementValue("endpoint", elem); }
        foreach (var elem in Network) { if (elem != null) yield return new ElementValue("network", elem); }
        foreach (var elem in Coverage) { if (elem != null) yield return new ElementValue("coverage", elem); }
        foreach (var elem in Related) { if (elem != null) yield return new ElementValue("related", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "type":
          value = Type;
          return Type?.Any() == true;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "alias":
          value = AliasElement;
          return AliasElement?.Any() == true;
        case "period":
          value = Period;
          return Period is not null;
        case "ownedBy":
          value = OwnedBy;
          return OwnedBy is not null;
        case "administeredBy":
          value = AdministeredBy;
          return AdministeredBy is not null;
        case "coverageArea":
          value = CoverageArea;
          return CoverageArea?.Any() == true;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "endpoint":
          value = Endpoint;
          return Endpoint?.Any() == true;
        case "network":
          value = Network;
          return Network?.Any() == true;
        case "coverage":
          value = Coverage;
          return Coverage?.Any() == true;
        case "related":
          value = Related;
          return Related?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (AliasElement?.Any() == true) yield return new KeyValuePair<string,object>("alias",AliasElement);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (OwnedBy is not null) yield return new KeyValuePair<string,object>("ownedBy",OwnedBy);
      if (AdministeredBy is not null) yield return new KeyValuePair<string,object>("administeredBy",AdministeredBy);
      if (CoverageArea?.Any() == true) yield return new KeyValuePair<string,object>("coverageArea",CoverageArea);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Endpoint?.Any() == true) yield return new KeyValuePair<string,object>("endpoint",Endpoint);
      if (Network?.Any() == true) yield return new KeyValuePair<string,object>("network",Network);
      if (Coverage?.Any() == true) yield return new KeyValuePair<string,object>("coverage",Coverage);
      if (Related?.Any() == true) yield return new KeyValuePair<string,object>("related",Related);
    }

  }

}

// end of file

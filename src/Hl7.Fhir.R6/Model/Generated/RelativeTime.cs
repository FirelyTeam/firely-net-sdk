// <auto-generated/>
// Contents of: hl7.fhir.r6.expansions@6.0.0-ballot2, hl7.fhir.r6.core@6.0.0-ballot2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;
using SystemPrimitive = Hl7.Fhir.ElementModel.Types;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A point in time or an interval of time relative to an event
  /// </summary>
  /// <remarks>
  /// RelativeTime is used to express a point in time or an interval of time relative to an event defined in data types other than dateTime.
  /// </remarks>
  [Serializable]
  [DataContract]
  [FhirType("RelativeTime","http://hl7.org/fhir/StructureDefinition/RelativeTime")]
  public partial class RelativeTime : Hl7.Fhir.Model.BackboneType
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "RelativeTime"; } }

    /// <summary>
    /// The specific event occurrence or resource context used as a base point (reference point) in time
    /// </summary>
    [FhirElement("contextReference", Order=40)]
    [CLSCompliant(false)]
    [References("Resource")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ContextReference
    {
      get { return _ContextReference; }
      set { _ContextReference = value; OnPropertyChanged("ContextReference"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ContextReference;

    /// <summary>
    /// The type of event used as a base point
    /// </summary>
    [FhirElement("contextDefinition", Order=50)]
    [DataMember]
    public Hl7.Fhir.Model.Canonical ContextDefinitionElement
    {
      get { return _ContextDefinitionElement; }
      set { _ContextDefinitionElement = value; OnPropertyChanged("ContextDefinitionElement"); }
    }

    private Hl7.Fhir.Model.Canonical _ContextDefinitionElement;

    /// <summary>
    /// The type of event used as a base point
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ContextDefinition
    {
      get { return ContextDefinitionElement != null ? ContextDefinitionElement.Value : null; }
      set
      {
        if (value == null)
          ContextDefinitionElement = null;
        else
          ContextDefinitionElement = new Hl7.Fhir.Model.Canonical(value);
        OnPropertyChanged("ContextDefinition");
      }
    }

    /// <summary>
    /// Path to the element defining the point in time
    /// </summary>
    [FhirElement("contextPath", Order=60)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ContextPathElement
    {
      get { return _ContextPathElement; }
      set { _ContextPathElement = value; OnPropertyChanged("ContextPathElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ContextPathElement;

    /// <summary>
    /// Path to the element defining the point in time
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ContextPath
    {
      get { return ContextPathElement != null ? ContextPathElement.Value : null; }
      set
      {
        if (value == null)
          ContextPathElement = null;
        else
          ContextPathElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("ContextPath");
      }
    }

    /// <summary>
    /// Coded representation of the event used as a base point (reference point) in time
    /// </summary>
    [FhirElement("contextCode", Order=70)]
    [Binding("EvidenceVariableEvent")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept ContextCode
    {
      get { return _ContextCode; }
      set { _ContextCode = value; OnPropertyChanged("ContextCode"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _ContextCode;

    /// <summary>
    /// An offset or offset range before (negative values) or after (positive values) the event
    /// </summary>
    [FhirElement("offset", Order=80, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.Range))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Offset
    {
      get { return _Offset; }
      set { _Offset = value; OnPropertyChanged("Offset"); }
    }

    private Hl7.Fhir.Model.DataType _Offset;

    /// <summary>
    /// Free-text description
    /// </summary>
    [FhirElement("text", Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TextElement
    {
      get { return _TextElement; }
      set { _TextElement = value; OnPropertyChanged("TextElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TextElement;

    /// <summary>
    /// Free-text description
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Text
    {
      get { return TextElement != null ? TextElement.Value : null; }
      set
      {
        if (value == null)
          TextElement = null;
        else
          TextElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Text");
      }
    }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as RelativeTime;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(ContextReference != null) dest.ContextReference = (Hl7.Fhir.Model.ResourceReference)ContextReference.DeepCopy();
      if(ContextDefinitionElement != null) dest.ContextDefinitionElement = (Hl7.Fhir.Model.Canonical)ContextDefinitionElement.DeepCopy();
      if(ContextPathElement != null) dest.ContextPathElement = (Hl7.Fhir.Model.FhirString)ContextPathElement.DeepCopy();
      if(ContextCode != null) dest.ContextCode = (Hl7.Fhir.Model.CodeableConcept)ContextCode.DeepCopy();
      if(Offset != null) dest.Offset = (Hl7.Fhir.Model.DataType)Offset.DeepCopy();
      if(TextElement != null) dest.TextElement = (Hl7.Fhir.Model.FhirString)TextElement.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new RelativeTime());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as RelativeTime;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(ContextReference, otherT.ContextReference)) return false;
      if( !DeepComparable.Matches(ContextDefinitionElement, otherT.ContextDefinitionElement)) return false;
      if( !DeepComparable.Matches(ContextPathElement, otherT.ContextPathElement)) return false;
      if( !DeepComparable.Matches(ContextCode, otherT.ContextCode)) return false;
      if( !DeepComparable.Matches(Offset, otherT.Offset)) return false;
      if( !DeepComparable.Matches(TextElement, otherT.TextElement)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as RelativeTime;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(ContextReference, otherT.ContextReference)) return false;
      if( !DeepComparable.IsExactly(ContextDefinitionElement, otherT.ContextDefinitionElement)) return false;
      if( !DeepComparable.IsExactly(ContextPathElement, otherT.ContextPathElement)) return false;
      if( !DeepComparable.IsExactly(ContextCode, otherT.ContextCode)) return false;
      if( !DeepComparable.IsExactly(Offset, otherT.Offset)) return false;
      if( !DeepComparable.IsExactly(TextElement, otherT.TextElement)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (ContextReference != null) yield return ContextReference;
        if (ContextDefinitionElement != null) yield return ContextDefinitionElement;
        if (ContextPathElement != null) yield return ContextPathElement;
        if (ContextCode != null) yield return ContextCode;
        if (Offset != null) yield return Offset;
        if (TextElement != null) yield return TextElement;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (ContextReference != null) yield return new ElementValue("contextReference", ContextReference);
        if (ContextDefinitionElement != null) yield return new ElementValue("contextDefinition", ContextDefinitionElement);
        if (ContextPathElement != null) yield return new ElementValue("contextPath", ContextPathElement);
        if (ContextCode != null) yield return new ElementValue("contextCode", ContextCode);
        if (Offset != null) yield return new ElementValue("offset", Offset);
        if (TextElement != null) yield return new ElementValue("text", TextElement);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "contextReference":
          value = ContextReference;
          return ContextReference is not null;
        case "contextDefinition":
          value = ContextDefinitionElement;
          return ContextDefinitionElement is not null;
        case "contextPath":
          value = ContextPathElement;
          return ContextPathElement is not null;
        case "contextCode":
          value = ContextCode;
          return ContextCode is not null;
        case "offset":
          value = Offset;
          return Offset is not null;
        case "text":
          value = TextElement;
          return TextElement is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (ContextReference is not null) yield return new KeyValuePair<string,object>("contextReference",ContextReference);
      if (ContextDefinitionElement is not null) yield return new KeyValuePair<string,object>("contextDefinition",ContextDefinitionElement);
      if (ContextPathElement is not null) yield return new KeyValuePair<string,object>("contextPath",ContextPathElement);
      if (ContextCode is not null) yield return new KeyValuePair<string,object>("contextCode",ContextCode);
      if (Offset is not null) yield return new KeyValuePair<string,object>("offset",Offset);
      if (TextElement is not null) yield return new KeyValuePair<string,object>("text",TextElement);
    }

  }

}

// end of file

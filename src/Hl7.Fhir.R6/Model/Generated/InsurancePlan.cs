// <auto-generated/>
// Contents of: hl7.fhir.r6.expansions@6.0.0-ballot2, hl7.fhir.r6.core@6.0.0-ballot2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;
using SystemPrimitive = Hl7.Fhir.ElementModel.Types;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Plan details
  /// </summary>
  /// <remarks>
  /// Details about an insurance plan.
  /// </remarks>
  [Serializable]
  [DataContract]
  [FhirType("InsurancePlan","http://hl7.org/fhir/StructureDefinition/InsurancePlan", IsResource=true)]
  public partial class InsurancePlan : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "InsurancePlan"; } }

    /// <summary>
    /// Whether the cost applies to in-network or out-of-network providers.
    /// (url: http://hl7.org/fhir/ValueSet/insuranceplan-applicability)
    /// (system: http://terminology.hl7.org/CodeSystem/applicability)
    /// </summary>
    [FhirEnumeration("BenefitCostApplicability", "http://hl7.org/fhir/ValueSet/insuranceplan-applicability", "http://terminology.hl7.org/CodeSystem/applicability")]
    public enum BenefitCostApplicability
    {
      /// <summary>
      /// In Network
      /// (system: http://terminology.hl7.org/CodeSystem/applicability)
      /// </summary>
      [EnumLiteral("in-network"), Description("In Network")]
      InNetwork,
      /// <summary>
      /// Out of Network
      /// (system: http://terminology.hl7.org/CodeSystem/applicability)
      /// </summary>
      [EnumLiteral("out-of-network"), Description("Out of Network")]
      OutOfNetwork,
      /// <summary>
      /// Other
      /// (system: http://terminology.hl7.org/CodeSystem/applicability)
      /// </summary>
      [EnumLiteral("other"), Description("Other")]
      Other,
    }

    /// <summary>
    /// Overall costs
    /// </summary>
    /// <remarks>
    /// Overall costs associated with the plan.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsurancePlan#GeneralCost", IsNestedType=true)]
    [BackboneType("InsurancePlan.generalCost")]
    public partial class GeneralCostComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsurancePlan#GeneralCost"; } }

      /// <summary>
      /// Classification of specific cost
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Number of enrollees
      /// </summary>
      [FhirElement("groupSize", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt GroupSizeElement
      {
        get { return _GroupSizeElement; }
        set { _GroupSizeElement = value; OnPropertyChanged("GroupSizeElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _GroupSizeElement;

      /// <summary>
      /// Number of enrollees
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? GroupSize
      {
        get { return GroupSizeElement != null ? GroupSizeElement.Value : null; }
        set
        {
          if (value == null)
            GroupSizeElement = null;
          else
            GroupSizeElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("GroupSize");
        }
      }

      /// <summary>
      /// Cost value
      /// </summary>
      [FhirElement("cost", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Money Cost
      {
        get { return _Cost; }
        set { _Cost = value; OnPropertyChanged("Cost"); }
      }

      private Hl7.Fhir.Model.Money _Cost;

      /// <summary>
      /// Additional cost information
      /// </summary>
      [FhirElement("comment", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CommentElement
      {
        get { return _CommentElement; }
        set { _CommentElement = value; OnPropertyChanged("CommentElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CommentElement;

      /// <summary>
      /// Additional cost information
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Comment
      {
        get { return CommentElement != null ? CommentElement.Value : null; }
        set
        {
          if (value == null)
            CommentElement = null;
          else
            CommentElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Comment");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as GeneralCostComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(GroupSizeElement != null) dest.GroupSizeElement = (Hl7.Fhir.Model.PositiveInt)GroupSizeElement.DeepCopy();
        if(Cost != null) dest.Cost = (Hl7.Fhir.Model.Money)Cost.DeepCopy();
        if(CommentElement != null) dest.CommentElement = (Hl7.Fhir.Model.FhirString)CommentElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new GeneralCostComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as GeneralCostComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(GroupSizeElement, otherT.GroupSizeElement)) return false;
        if( !DeepComparable.Matches(Cost, otherT.Cost)) return false;
        if( !DeepComparable.Matches(CommentElement, otherT.CommentElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as GeneralCostComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(GroupSizeElement, otherT.GroupSizeElement)) return false;
        if( !DeepComparable.IsExactly(Cost, otherT.Cost)) return false;
        if( !DeepComparable.IsExactly(CommentElement, otherT.CommentElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (GroupSizeElement != null) yield return GroupSizeElement;
          if (Cost != null) yield return Cost;
          if (CommentElement != null) yield return CommentElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (GroupSizeElement != null) yield return new ElementValue("groupSize", GroupSizeElement);
          if (Cost != null) yield return new ElementValue("cost", Cost);
          if (CommentElement != null) yield return new ElementValue("comment", CommentElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "groupSize":
            value = GroupSizeElement;
            return GroupSizeElement is not null;
          case "cost":
            value = Cost;
            return Cost is not null;
          case "comment":
            value = CommentElement;
            return CommentElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (GroupSizeElement is not null) yield return new KeyValuePair<string,object>("groupSize",GroupSizeElement);
        if (Cost is not null) yield return new KeyValuePair<string,object>("cost",Cost);
        if (CommentElement is not null) yield return new KeyValuePair<string,object>("comment",CommentElement);
      }

    }

    /// <summary>
    /// Individual cost elements
    /// </summary>
    /// <remarks>
    /// Costs associated with the coverage provided by the product-plan.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsurancePlan#SpecificCost", IsNestedType=true)]
    [BackboneType("InsurancePlan.specificCost")]
    public partial class SpecificCostComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsurancePlan#SpecificCost"; } }

      /// <summary>
      /// General category of benefit
      /// </summary>
      [FhirElement("category", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Benefits list
      /// </summary>
      [FhirElement("benefit", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent> Benefit
      {
        get { if(_Benefit==null) _Benefit = new List<Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent>(); return _Benefit; }
        set { _Benefit = value; OnPropertyChanged("Benefit"); }
      }

      private List<Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent> _Benefit;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SpecificCostComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(Benefit.Any()) dest.Benefit = new List<Hl7.Fhir.Model.InsurancePlan.PlanBenefitComponent>(Benefit.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SpecificCostComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SpecificCostComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(Benefit, otherT.Benefit)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SpecificCostComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(Benefit, otherT.Benefit)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Category != null) yield return Category;
          foreach (var elem in Benefit) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Category != null) yield return new ElementValue("category", Category);
          foreach (var elem in Benefit) { if (elem != null) yield return new ElementValue("benefit", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "category":
            value = Category;
            return Category is not null;
          case "benefit":
            value = Benefit;
            return Benefit?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (Benefit?.Any() == true) yield return new KeyValuePair<string,object>("benefit",Benefit);
      }

    }

    /// <summary>
    /// Benefits list
    /// </summary>
    /// <remarks>
    /// List of the specific benefits under this category of benefit.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsurancePlan#PlanBenefit", IsNestedType=true)]
    [BackboneType("InsurancePlan.specificCost.benefit")]
    public partial class PlanBenefitComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsurancePlan#PlanBenefit"; } }

      /// <summary>
      /// Classification of benefit provided
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// List of the costs
      /// </summary>
      [FhirElement("cost", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.InsurancePlan.CostComponent> Cost
      {
        get { if(_Cost==null) _Cost = new List<Hl7.Fhir.Model.InsurancePlan.CostComponent>(); return _Cost; }
        set { _Cost = value; OnPropertyChanged("Cost"); }
      }

      private List<Hl7.Fhir.Model.InsurancePlan.CostComponent> _Cost;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PlanBenefitComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Cost.Any()) dest.Cost = new List<Hl7.Fhir.Model.InsurancePlan.CostComponent>(Cost.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PlanBenefitComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PlanBenefitComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Cost, otherT.Cost)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PlanBenefitComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Cost, otherT.Cost)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          foreach (var elem in Cost) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in Cost) { if (elem != null) yield return new ElementValue("cost", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "cost":
            value = Cost;
            return Cost?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Cost?.Any() == true) yield return new KeyValuePair<string,object>("cost",Cost);
      }

    }

    /// <summary>
    /// List of the costs
    /// </summary>
    /// <remarks>
    /// List of the costs associated with a specific benefit.
    /// </remarks>
    [Serializable]
    [DataContract]
    [FhirType("InsurancePlan#Cost", IsNestedType=true)]
    [BackboneType("InsurancePlan.specificCost.benefit.cost")]
    public partial class CostComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "InsurancePlan#Cost"; } }

      /// <summary>
      /// Classification of specific cost
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// in-network | out-of-network | other
      /// </summary>
      [FhirElement("applicability", Order=50)]
      [Binding("BenefitCostApplicability")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Applicability
      {
        get { return _Applicability; }
        set { _Applicability = value; OnPropertyChanged("Applicability"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Applicability;

      /// <summary>
      /// Additional information about the cost
      /// </summary>
      [FhirElement("qualifier", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Qualifier
      {
        get { if(_Qualifier==null) _Qualifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Qualifier; }
        set { _Qualifier = value; OnPropertyChanged("Qualifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Qualifier;

      /// <summary>
      /// The actual cost value
      /// </summary>
      [FhirElement("value", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.Quantity _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CostComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Applicability != null) dest.Applicability = (Hl7.Fhir.Model.CodeableConcept)Applicability.DeepCopy();
        if(Qualifier.Any()) dest.Qualifier = new List<Hl7.Fhir.Model.CodeableConcept>(Qualifier.DeepCopy());
        if(Value != null) dest.Value = (Hl7.Fhir.Model.Quantity)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CostComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CostComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Applicability, otherT.Applicability)) return false;
        if( !DeepComparable.Matches(Qualifier, otherT.Qualifier)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CostComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Applicability, otherT.Applicability)) return false;
        if( !DeepComparable.IsExactly(Qualifier, otherT.Qualifier)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Applicability != null) yield return Applicability;
          foreach (var elem in Qualifier) { if (elem != null) yield return elem; }
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Applicability != null) yield return new ElementValue("applicability", Applicability);
          foreach (var elem in Qualifier) { if (elem != null) yield return new ElementValue("qualifier", elem); }
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "applicability":
            value = Applicability;
            return Applicability is not null;
          case "qualifier":
            value = Qualifier;
            return Qualifier?.Any() == true;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Applicability is not null) yield return new KeyValuePair<string,object>("applicability",Applicability);
        if (Qualifier?.Any() == true) yield return new KeyValuePair<string,object>("qualifier",Qualifier);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Business Identifier for Plan
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Classification of Plan
    /// </summary>
    [FhirElement("type", Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// The product that this plan is available under
    /// </summary>
    [FhirElement("product", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("InsuranceProduct")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Product
    {
      get { return _Product; }
      set { _Product = value; OnPropertyChanged("Product"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Product;

    /// <summary>
    /// Where product-plan applies
    /// </summary>
    [FhirElement("coverageArea", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("Location")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> CoverageArea
    {
      get { if(_CoverageArea==null) _CoverageArea = new List<Hl7.Fhir.Model.ResourceReference>(); return _CoverageArea; }
      set { _CoverageArea = value; OnPropertyChanged("CoverageArea"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _CoverageArea;

    /// <summary>
    /// What networks provide coverage
    /// </summary>
    [FhirElement("network", Order=130)]
    [CLSCompliant(false)]
    [References("Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Network
    {
      get { if(_Network==null) _Network = new List<Hl7.Fhir.Model.ResourceReference>(); return _Network; }
      set { _Network = value; OnPropertyChanged("Network"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Network;

    /// <summary>
    /// Overall costs
    /// </summary>
    [FhirElement("generalCost", Order=140)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent> GeneralCost
    {
      get { if(_GeneralCost==null) _GeneralCost = new List<Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent>(); return _GeneralCost; }
      set { _GeneralCost = value; OnPropertyChanged("GeneralCost"); }
    }

    private List<Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent> _GeneralCost;

    /// <summary>
    /// Individual cost elements
    /// </summary>
    [FhirElement("specificCost", Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent> SpecificCost
    {
      get { if(_SpecificCost==null) _SpecificCost = new List<Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent>(); return _SpecificCost; }
      set { _SpecificCost = value; OnPropertyChanged("SpecificCost"); }
    }

    private List<Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent> _SpecificCost;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as InsurancePlan;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier.Any()) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(Product != null) dest.Product = (Hl7.Fhir.Model.ResourceReference)Product.DeepCopy();
      if(CoverageArea.Any()) dest.CoverageArea = new List<Hl7.Fhir.Model.ResourceReference>(CoverageArea.DeepCopy());
      if(Network.Any()) dest.Network = new List<Hl7.Fhir.Model.ResourceReference>(Network.DeepCopy());
      if(GeneralCost.Any()) dest.GeneralCost = new List<Hl7.Fhir.Model.InsurancePlan.GeneralCostComponent>(GeneralCost.DeepCopy());
      if(SpecificCost.Any()) dest.SpecificCost = new List<Hl7.Fhir.Model.InsurancePlan.SpecificCostComponent>(SpecificCost.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new InsurancePlan());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as InsurancePlan;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Product, otherT.Product)) return false;
      if( !DeepComparable.Matches(CoverageArea, otherT.CoverageArea)) return false;
      if( !DeepComparable.Matches(Network, otherT.Network)) return false;
      if( !DeepComparable.Matches(GeneralCost, otherT.GeneralCost)) return false;
      if( !DeepComparable.Matches(SpecificCost, otherT.SpecificCost)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as InsurancePlan;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Product, otherT.Product)) return false;
      if( !DeepComparable.IsExactly(CoverageArea, otherT.CoverageArea)) return false;
      if( !DeepComparable.IsExactly(Network, otherT.Network)) return false;
      if( !DeepComparable.IsExactly(GeneralCost, otherT.GeneralCost)) return false;
      if( !DeepComparable.IsExactly(SpecificCost, otherT.SpecificCost)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (Type != null) yield return Type;
        if (Product != null) yield return Product;
        foreach (var elem in CoverageArea) { if (elem != null) yield return elem; }
        foreach (var elem in Network) { if (elem != null) yield return elem; }
        foreach (var elem in GeneralCost) { if (elem != null) yield return elem; }
        foreach (var elem in SpecificCost) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (Type != null) yield return new ElementValue("type", Type);
        if (Product != null) yield return new ElementValue("product", Product);
        foreach (var elem in CoverageArea) { if (elem != null) yield return new ElementValue("coverageArea", elem); }
        foreach (var elem in Network) { if (elem != null) yield return new ElementValue("network", elem); }
        foreach (var elem in GeneralCost) { if (elem != null) yield return new ElementValue("generalCost", elem); }
        foreach (var elem in SpecificCost) { if (elem != null) yield return new ElementValue("specificCost", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "type":
          value = Type;
          return Type is not null;
        case "product":
          value = Product;
          return Product is not null;
        case "coverageArea":
          value = CoverageArea;
          return CoverageArea?.Any() == true;
        case "network":
          value = Network;
          return Network?.Any() == true;
        case "generalCost":
          value = GeneralCost;
          return GeneralCost?.Any() == true;
        case "specificCost":
          value = SpecificCost;
          return SpecificCost?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (Product is not null) yield return new KeyValuePair<string,object>("product",Product);
      if (CoverageArea?.Any() == true) yield return new KeyValuePair<string,object>("coverageArea",CoverageArea);
      if (Network?.Any() == true) yield return new KeyValuePair<string,object>("network",Network);
      if (GeneralCost?.Any() == true) yield return new KeyValuePair<string,object>("generalCost",GeneralCost);
      if (SpecificCost?.Any() == true) yield return new KeyValuePair<string,object>("specificCost",SpecificCost);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r5.core version: 5.0.0-snapshot1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Contains a collection of resources
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Bundle","http://hl7.org/fhir/StructureDefinition/Bundle", IsResource=true)]
  public partial class Bundle : Hl7.Fhir.Model.Resource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Bundle"; } }

    /// <summary>
    /// Indicates the purpose of a bundle - how it is intended to be used.
    /// (url: http://hl7.org/fhir/ValueSet/bundle-type)
    /// (system: http://hl7.org/fhir/bundle-type)
    /// </summary>
    [FhirEnumeration("BundleType")]
    public enum BundleType
    {
      /// <summary>
      /// The bundle is a document. The first resource is a Composition.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("document", "http://hl7.org/fhir/bundle-type"), Description("Document")]
      Document,
      /// <summary>
      /// The bundle is a message. The first resource is a MessageHeader.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("message", "http://hl7.org/fhir/bundle-type"), Description("Message")]
      Message,
      /// <summary>
      /// The bundle is a transaction - intended to be processed by a server as an atomic commit.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("transaction", "http://hl7.org/fhir/bundle-type"), Description("Transaction")]
      Transaction,
      /// <summary>
      /// The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("transaction-response", "http://hl7.org/fhir/bundle-type"), Description("Transaction Response")]
      TransactionResponse,
      /// <summary>
      /// The bundle is a set of actions - intended to be processed by a server as a group of independent actions.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("batch", "http://hl7.org/fhir/bundle-type"), Description("Batch")]
      Batch,
      /// <summary>
      /// The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("batch-response", "http://hl7.org/fhir/bundle-type"), Description("Batch Response")]
      BatchResponse,
      /// <summary>
      /// The bundle is a list of resources from a history interaction on a server.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("history", "http://hl7.org/fhir/bundle-type"), Description("History List")]
      History,
      /// <summary>
      /// The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("searchset", "http://hl7.org/fhir/bundle-type"), Description("Search Results")]
      Searchset,
      /// <summary>
      /// The bundle is a set of resources collected into a single package for ease of distribution that imposes no processing obligations or behavioral rules beyond persistence.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("collection", "http://hl7.org/fhir/bundle-type"), Description("Collection")]
      Collection,
      /// <summary>
      /// The bundle has been generated by a Subscription to communicate information to a client.
      /// (system: http://hl7.org/fhir/bundle-type)
      /// </summary>
      [EnumLiteral("subscription-notification", "http://hl7.org/fhir/bundle-type"), Description("Subscription Notification")]
      SubscriptionNotification,
    }

    /// <summary>
    /// Why an entry is in the result set - whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process.
    /// (url: http://hl7.org/fhir/ValueSet/search-entry-mode)
    /// (system: http://hl7.org/fhir/search-entry-mode)
    /// </summary>
    [FhirEnumeration("SearchEntryMode")]
    public enum SearchEntryMode
    {
      /// <summary>
      /// This resource matched the search specification.
      /// (system: http://hl7.org/fhir/search-entry-mode)
      /// </summary>
      [EnumLiteral("match", "http://hl7.org/fhir/search-entry-mode"), Description("Match")]
      Match,
      /// <summary>
      /// This resource is returned because it is referred to from another resource in the search set.
      /// (system: http://hl7.org/fhir/search-entry-mode)
      /// </summary>
      [EnumLiteral("include", "http://hl7.org/fhir/search-entry-mode"), Description("Include")]
      Include,
      /// <summary>
      /// An OperationOutcome that provides additional information about the processing of a search.
      /// (system: http://hl7.org/fhir/search-entry-mode)
      /// </summary>
      [EnumLiteral("outcome", "http://hl7.org/fhir/search-entry-mode"), Description("Outcome")]
      Outcome,
    }

    /// <summary>
    /// HTTP verbs (in the HTTP command line). See [HTTP rfc](https://tools.ietf.org/html/rfc7231) for details.
    /// (url: http://hl7.org/fhir/ValueSet/http-verb)
    /// (system: http://hl7.org/fhir/http-verb)
    /// </summary>
    [FhirEnumeration("HTTPVerb")]
    public enum HTTPVerb
    {
      /// <summary>
      /// HTTP GET Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("GET", "http://hl7.org/fhir/http-verb"), Description("GET")]
      GET,
      /// <summary>
      /// HTTP HEAD Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("HEAD", "http://hl7.org/fhir/http-verb"), Description("HEAD")]
      HEAD,
      /// <summary>
      /// HTTP POST Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("POST", "http://hl7.org/fhir/http-verb"), Description("POST")]
      POST,
      /// <summary>
      /// HTTP PUT Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("PUT", "http://hl7.org/fhir/http-verb"), Description("PUT")]
      PUT,
      /// <summary>
      /// HTTP DELETE Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("DELETE", "http://hl7.org/fhir/http-verb"), Description("DELETE")]
      DELETE,
      /// <summary>
      /// HTTP PATCH Command.
      /// (system: http://hl7.org/fhir/http-verb)
      /// </summary>
      [EnumLiteral("PATCH", "http://hl7.org/fhir/http-verb"), Description("PATCH")]
      PATCH,
    }

    /// <summary>
    /// Links related to this Bundle
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Bundle#Link", IsNestedType=true)]
    public partial class LinkComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Bundle#Link"; } }

      /// <summary>
      /// See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
      /// </summary>
      [FhirElement("relation", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RelationElement
      {
        get { return _RelationElement; }
        set { _RelationElement = value; OnPropertyChanged("RelationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RelationElement;

      /// <summary>
      /// See http://www.iana.org/assignments/link-relations/link-relations.xhtml#link-relations-1
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Relation
      {
        get { return RelationElement != null ? RelationElement.Value : null; }
        set
        {
          if (value == null)
            RelationElement = null;
          else
            RelationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Relation");
        }
      }

      /// <summary>
      /// Reference details for the link
      /// </summary>
      [FhirElement("url", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UrlElement;

      /// <summary>
      /// Reference details for the link
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Url");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LinkComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RelationElement != null) dest.RelationElement = (Hl7.Fhir.Model.FhirString)RelationElement.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LinkComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RelationElement, otherT.RelationElement)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RelationElement, otherT.RelationElement)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RelationElement != null) yield return RelationElement;
          if (UrlElement != null) yield return UrlElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RelationElement != null) yield return new ElementValue("relation", RelationElement);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "relation":
            value = RelationElement;
            return RelationElement is not null;
          case "url":
            value = UrlElement;
            return UrlElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RelationElement is not null) yield return new KeyValuePair<string,object>("relation",RelationElement);
        if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      }

    }

    /// <summary>
    /// Entry in the bundle - will have a resource or information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Bundle#Entry", IsNestedType=true)]
    public partial class EntryComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Bundle#Entry"; } }

      /// <summary>
      /// Links related to this entry
      /// </summary>
      [FhirElement("link", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Bundle.LinkComponent> Link
      {
        get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(); return _Link; }
        set { _Link = value; OnPropertyChanged("Link"); }
      }

      private List<Hl7.Fhir.Model.Bundle.LinkComponent> _Link;

      /// <summary>
      /// URI for resource (Absolute URL server address or URI for UUID/OID)
      /// </summary>
      [FhirElement("fullUrl", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri FullUrlElement
      {
        get { return _FullUrlElement; }
        set { _FullUrlElement = value; OnPropertyChanged("FullUrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _FullUrlElement;

      /// <summary>
      /// URI for resource (Absolute URL server address or URI for UUID/OID)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string FullUrl
      {
        get { return FullUrlElement != null ? FullUrlElement.Value : null; }
        set
        {
          if (value == null)
            FullUrlElement = null;
          else
            FullUrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("FullUrl");
        }
      }

      /// <summary>
      /// A resource in the bundle
      /// </summary>
      [FhirElement("resource", InSummary=true, Order=60, Choice=ChoiceType.ResourceChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Resource))]
      [DataMember]
      public Hl7.Fhir.Model.Resource Resource
      {
        get { return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private Hl7.Fhir.Model.Resource _Resource;

      /// <summary>
      /// Search related information
      /// </summary>
      [FhirElement("search", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Bundle.SearchComponent Search
      {
        get { return _Search; }
        set { _Search = value; OnPropertyChanged("Search"); }
      }

      private Hl7.Fhir.Model.Bundle.SearchComponent _Search;

      /// <summary>
      /// Additional execution information (transaction/batch/history)
      /// </summary>
      [FhirElement("request", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Bundle.RequestComponent Request
      {
        get { return _Request; }
        set { _Request = value; OnPropertyChanged("Request"); }
      }

      private Hl7.Fhir.Model.Bundle.RequestComponent _Request;

      /// <summary>
      /// Results of execution (transaction/batch/history)
      /// </summary>
      [FhirElement("response", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Bundle.ResponseComponent Response
      {
        get { return _Response; }
        set { _Response = value; OnPropertyChanged("Response"); }
      }

      private Hl7.Fhir.Model.Bundle.ResponseComponent _Response;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EntryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Link != null) dest.Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(Link.DeepCopy());
        if(FullUrlElement != null) dest.FullUrlElement = (Hl7.Fhir.Model.FhirUri)FullUrlElement.DeepCopy();
        if(Resource != null) dest.Resource = (Hl7.Fhir.Model.Resource)Resource.DeepCopy();
        if(Search != null) dest.Search = (Hl7.Fhir.Model.Bundle.SearchComponent)Search.DeepCopy();
        if(Request != null) dest.Request = (Hl7.Fhir.Model.Bundle.RequestComponent)Request.DeepCopy();
        if(Response != null) dest.Response = (Hl7.Fhir.Model.Bundle.ResponseComponent)Response.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EntryComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EntryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Link, otherT.Link)) return false;
        if( !DeepComparable.Matches(FullUrlElement, otherT.FullUrlElement)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;
        if( !DeepComparable.Matches(Search, otherT.Search)) return false;
        if( !DeepComparable.Matches(Request, otherT.Request)) return false;
        if( !DeepComparable.Matches(Response, otherT.Response)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EntryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;
        if( !DeepComparable.IsExactly(FullUrlElement, otherT.FullUrlElement)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;
        if( !DeepComparable.IsExactly(Search, otherT.Search)) return false;
        if( !DeepComparable.IsExactly(Request, otherT.Request)) return false;
        if( !DeepComparable.IsExactly(Response, otherT.Response)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Link) { if (elem != null) yield return elem; }
          if (FullUrlElement != null) yield return FullUrlElement;
          if (Resource != null) yield return Resource;
          if (Search != null) yield return Search;
          if (Request != null) yield return Request;
          if (Response != null) yield return Response;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
          if (FullUrlElement != null) yield return new ElementValue("fullUrl", FullUrlElement);
          if (Resource != null) yield return new ElementValue("resource", Resource);
          if (Search != null) yield return new ElementValue("search", Search);
          if (Request != null) yield return new ElementValue("request", Request);
          if (Response != null) yield return new ElementValue("response", Response);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "link":
            value = Link;
            return Link?.Any() == true;
          case "fullUrl":
            value = FullUrlElement;
            return FullUrlElement is not null;
          case "resource":
            value = Resource;
            return Resource is not null;
          case "search":
            value = Search;
            return Search is not null;
          case "request":
            value = Request;
            return Request is not null;
          case "response":
            value = Response;
            return Response is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Link?.Any() == true) yield return new KeyValuePair<string,object>("link",Link);
        if (FullUrlElement is not null) yield return new KeyValuePair<string,object>("fullUrl",FullUrlElement);
        if (Resource is not null) yield return new KeyValuePair<string,object>("resource",Resource);
        if (Search is not null) yield return new KeyValuePair<string,object>("search",Search);
        if (Request is not null) yield return new KeyValuePair<string,object>("request",Request);
        if (Response is not null) yield return new KeyValuePair<string,object>("response",Response);
      }

    }

    /// <summary>
    /// Search related information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Bundle#Search", IsNestedType=true)]
    public partial class SearchComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Bundle#Search"; } }

      /// <summary>
      /// match | include | outcome - why this is in the result set
      /// </summary>
      [FhirElement("mode", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.Bundle.SearchEntryMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.Bundle.SearchEntryMode> _ModeElement;

      /// <summary>
      /// match | include | outcome - why this is in the result set
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Bundle.SearchEntryMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>(value);
          OnPropertyChanged("Mode");
        }
      }

      /// <summary>
      /// Search ranking (between 0 and 1)
      /// </summary>
      [FhirElement("score", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal ScoreElement
      {
        get { return _ScoreElement; }
        set { _ScoreElement = value; OnPropertyChanged("ScoreElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _ScoreElement;

      /// <summary>
      /// Search ranking (between 0 and 1)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Score
      {
        get { return ScoreElement != null ? ScoreElement.Value : null; }
        set
        {
          if (value == null)
            ScoreElement = null;
          else
            ScoreElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Score");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SearchComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.Bundle.SearchEntryMode>)ModeElement.DeepCopy();
        if(ScoreElement != null) dest.ScoreElement = (Hl7.Fhir.Model.FhirDecimal)ScoreElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SearchComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SearchComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(ScoreElement, otherT.ScoreElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SearchComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(ScoreElement, otherT.ScoreElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ModeElement != null) yield return ModeElement;
          if (ScoreElement != null) yield return ScoreElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (ScoreElement != null) yield return new ElementValue("score", ScoreElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = ModeElement;
            return ModeElement is not null;
          case "score":
            value = ScoreElement;
            return ScoreElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ModeElement is not null) yield return new KeyValuePair<string,object>("mode",ModeElement);
        if (ScoreElement is not null) yield return new KeyValuePair<string,object>("score",ScoreElement);
      }

    }

    /// <summary>
    /// Additional execution information (transaction/batch/history)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Bundle#Request", IsNestedType=true)]
    public partial class RequestComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Bundle#Request"; } }

      /// <summary>
      /// GET | HEAD | POST | PUT | DELETE | PATCH
      /// </summary>
      [FhirElement("method", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.Bundle.HTTPVerb> MethodElement
      {
        get { return _MethodElement; }
        set { _MethodElement = value; OnPropertyChanged("MethodElement"); }
      }

      private Code<Hl7.Fhir.Model.Bundle.HTTPVerb> _MethodElement;

      /// <summary>
      /// GET | HEAD | POST | PUT | DELETE | PATCH
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Bundle.HTTPVerb? Method
      {
        get { return MethodElement != null ? MethodElement.Value : null; }
        set
        {
          if (value == null)
            MethodElement = null;
          else
            MethodElement = new Code<Hl7.Fhir.Model.Bundle.HTTPVerb>(value);
          OnPropertyChanged("Method");
        }
      }

      /// <summary>
      /// URL for HTTP equivalent of this entry
      /// </summary>
      [FhirElement("url", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UrlElement;

      /// <summary>
      /// URL for HTTP equivalent of this entry
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Url");
        }
      }

      /// <summary>
      /// For managing cache currency
      /// </summary>
      [FhirElement("ifNoneMatch", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IfNoneMatchElement
      {
        get { return _IfNoneMatchElement; }
        set { _IfNoneMatchElement = value; OnPropertyChanged("IfNoneMatchElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IfNoneMatchElement;

      /// <summary>
      /// For managing cache currency
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string IfNoneMatch
      {
        get { return IfNoneMatchElement != null ? IfNoneMatchElement.Value : null; }
        set
        {
          if (value == null)
            IfNoneMatchElement = null;
          else
            IfNoneMatchElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("IfNoneMatch");
        }
      }

      /// <summary>
      /// For managing cache currency
      /// </summary>
      [FhirElement("ifModifiedSince", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Instant IfModifiedSinceElement
      {
        get { return _IfModifiedSinceElement; }
        set { _IfModifiedSinceElement = value; OnPropertyChanged("IfModifiedSinceElement"); }
      }

      private Hl7.Fhir.Model.Instant _IfModifiedSinceElement;

      /// <summary>
      /// For managing cache currency
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public DateTimeOffset? IfModifiedSince
      {
        get { return IfModifiedSinceElement != null ? IfModifiedSinceElement.Value : null; }
        set
        {
          if (value == null)
            IfModifiedSinceElement = null;
          else
            IfModifiedSinceElement = new Hl7.Fhir.Model.Instant(value);
          OnPropertyChanged("IfModifiedSince");
        }
      }

      /// <summary>
      /// For managing update contention
      /// </summary>
      [FhirElement("ifMatch", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IfMatchElement
      {
        get { return _IfMatchElement; }
        set { _IfMatchElement = value; OnPropertyChanged("IfMatchElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IfMatchElement;

      /// <summary>
      /// For managing update contention
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string IfMatch
      {
        get { return IfMatchElement != null ? IfMatchElement.Value : null; }
        set
        {
          if (value == null)
            IfMatchElement = null;
          else
            IfMatchElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("IfMatch");
        }
      }

      /// <summary>
      /// For conditional creates
      /// </summary>
      [FhirElement("ifNoneExist", InSummary=true, Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString IfNoneExistElement
      {
        get { return _IfNoneExistElement; }
        set { _IfNoneExistElement = value; OnPropertyChanged("IfNoneExistElement"); }
      }

      private Hl7.Fhir.Model.FhirString _IfNoneExistElement;

      /// <summary>
      /// For conditional creates
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string IfNoneExist
      {
        get { return IfNoneExistElement != null ? IfNoneExistElement.Value : null; }
        set
        {
          if (value == null)
            IfNoneExistElement = null;
          else
            IfNoneExistElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("IfNoneExist");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RequestComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(MethodElement != null) dest.MethodElement = (Code<Hl7.Fhir.Model.Bundle.HTTPVerb>)MethodElement.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
        if(IfNoneMatchElement != null) dest.IfNoneMatchElement = (Hl7.Fhir.Model.FhirString)IfNoneMatchElement.DeepCopy();
        if(IfModifiedSinceElement != null) dest.IfModifiedSinceElement = (Hl7.Fhir.Model.Instant)IfModifiedSinceElement.DeepCopy();
        if(IfMatchElement != null) dest.IfMatchElement = (Hl7.Fhir.Model.FhirString)IfMatchElement.DeepCopy();
        if(IfNoneExistElement != null) dest.IfNoneExistElement = (Hl7.Fhir.Model.FhirString)IfNoneExistElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RequestComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RequestComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(MethodElement, otherT.MethodElement)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.Matches(IfNoneMatchElement, otherT.IfNoneMatchElement)) return false;
        if( !DeepComparable.Matches(IfModifiedSinceElement, otherT.IfModifiedSinceElement)) return false;
        if( !DeepComparable.Matches(IfMatchElement, otherT.IfMatchElement)) return false;
        if( !DeepComparable.Matches(IfNoneExistElement, otherT.IfNoneExistElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RequestComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(MethodElement, otherT.MethodElement)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.IsExactly(IfNoneMatchElement, otherT.IfNoneMatchElement)) return false;
        if( !DeepComparable.IsExactly(IfModifiedSinceElement, otherT.IfModifiedSinceElement)) return false;
        if( !DeepComparable.IsExactly(IfMatchElement, otherT.IfMatchElement)) return false;
        if( !DeepComparable.IsExactly(IfNoneExistElement, otherT.IfNoneExistElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (MethodElement != null) yield return MethodElement;
          if (UrlElement != null) yield return UrlElement;
          if (IfNoneMatchElement != null) yield return IfNoneMatchElement;
          if (IfModifiedSinceElement != null) yield return IfModifiedSinceElement;
          if (IfMatchElement != null) yield return IfMatchElement;
          if (IfNoneExistElement != null) yield return IfNoneExistElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (MethodElement != null) yield return new ElementValue("method", MethodElement);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
          if (IfNoneMatchElement != null) yield return new ElementValue("ifNoneMatch", IfNoneMatchElement);
          if (IfModifiedSinceElement != null) yield return new ElementValue("ifModifiedSince", IfModifiedSinceElement);
          if (IfMatchElement != null) yield return new ElementValue("ifMatch", IfMatchElement);
          if (IfNoneExistElement != null) yield return new ElementValue("ifNoneExist", IfNoneExistElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "method":
            value = MethodElement;
            return MethodElement is not null;
          case "url":
            value = UrlElement;
            return UrlElement is not null;
          case "ifNoneMatch":
            value = IfNoneMatchElement;
            return IfNoneMatchElement is not null;
          case "ifModifiedSince":
            value = IfModifiedSinceElement;
            return IfModifiedSinceElement is not null;
          case "ifMatch":
            value = IfMatchElement;
            return IfMatchElement is not null;
          case "ifNoneExist":
            value = IfNoneExistElement;
            return IfNoneExistElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (MethodElement is not null) yield return new KeyValuePair<string,object>("method",MethodElement);
        if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
        if (IfNoneMatchElement is not null) yield return new KeyValuePair<string,object>("ifNoneMatch",IfNoneMatchElement);
        if (IfModifiedSinceElement is not null) yield return new KeyValuePair<string,object>("ifModifiedSince",IfModifiedSinceElement);
        if (IfMatchElement is not null) yield return new KeyValuePair<string,object>("ifMatch",IfMatchElement);
        if (IfNoneExistElement is not null) yield return new KeyValuePair<string,object>("ifNoneExist",IfNoneExistElement);
      }

    }

    /// <summary>
    /// Results of execution (transaction/batch/history)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Bundle#Response", IsNestedType=true)]
    public partial class ResponseComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Bundle#Response"; } }

      /// <summary>
      /// Status response code (text optional)
      /// </summary>
      [FhirElement("status", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString StatusElement
      {
        get { return _StatusElement; }
        set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
      }

      private Hl7.Fhir.Model.FhirString _StatusElement;

      /// <summary>
      /// Status response code (text optional)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Status
      {
        get { return StatusElement != null ? StatusElement.Value : null; }
        set
        {
          if (value == null)
            StatusElement = null;
          else
            StatusElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Status");
        }
      }

      /// <summary>
      /// The location (if the operation returns a location)
      /// </summary>
      [FhirElement("location", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri LocationElement
      {
        get { return _LocationElement; }
        set { _LocationElement = value; OnPropertyChanged("LocationElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _LocationElement;

      /// <summary>
      /// The location (if the operation returns a location)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Location
      {
        get { return LocationElement != null ? LocationElement.Value : null; }
        set
        {
          if (value == null)
            LocationElement = null;
          else
            LocationElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Location");
        }
      }

      /// <summary>
      /// The Etag for the resource (if relevant)
      /// </summary>
      [FhirElement("etag", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString EtagElement
      {
        get { return _EtagElement; }
        set { _EtagElement = value; OnPropertyChanged("EtagElement"); }
      }

      private Hl7.Fhir.Model.FhirString _EtagElement;

      /// <summary>
      /// The Etag for the resource (if relevant)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Etag
      {
        get { return EtagElement != null ? EtagElement.Value : null; }
        set
        {
          if (value == null)
            EtagElement = null;
          else
            EtagElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Etag");
        }
      }

      /// <summary>
      /// Server's date time modified
      /// </summary>
      [FhirElement("lastModified", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Instant LastModifiedElement
      {
        get { return _LastModifiedElement; }
        set { _LastModifiedElement = value; OnPropertyChanged("LastModifiedElement"); }
      }

      private Hl7.Fhir.Model.Instant _LastModifiedElement;

      /// <summary>
      /// Server's date time modified
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public DateTimeOffset? LastModified
      {
        get { return LastModifiedElement != null ? LastModifiedElement.Value : null; }
        set
        {
          if (value == null)
            LastModifiedElement = null;
          else
            LastModifiedElement = new Hl7.Fhir.Model.Instant(value);
          OnPropertyChanged("LastModified");
        }
      }

      /// <summary>
      /// OperationOutcome with hints and warnings (for batch/transaction)
      /// </summary>
      [FhirElement("outcome", InSummary=true, Order=80, Choice=ChoiceType.ResourceChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Resource))]
      [DataMember]
      public Hl7.Fhir.Model.Resource Outcome
      {
        get { return _Outcome; }
        set { _Outcome = value; OnPropertyChanged("Outcome"); }
      }

      private Hl7.Fhir.Model.Resource _Outcome;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ResponseComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(StatusElement != null) dest.StatusElement = (Hl7.Fhir.Model.FhirString)StatusElement.DeepCopy();
        if(LocationElement != null) dest.LocationElement = (Hl7.Fhir.Model.FhirUri)LocationElement.DeepCopy();
        if(EtagElement != null) dest.EtagElement = (Hl7.Fhir.Model.FhirString)EtagElement.DeepCopy();
        if(LastModifiedElement != null) dest.LastModifiedElement = (Hl7.Fhir.Model.Instant)LastModifiedElement.DeepCopy();
        if(Outcome != null) dest.Outcome = (Hl7.Fhir.Model.Resource)Outcome.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ResponseComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ResponseComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
        if( !DeepComparable.Matches(LocationElement, otherT.LocationElement)) return false;
        if( !DeepComparable.Matches(EtagElement, otherT.EtagElement)) return false;
        if( !DeepComparable.Matches(LastModifiedElement, otherT.LastModifiedElement)) return false;
        if( !DeepComparable.Matches(Outcome, otherT.Outcome)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ResponseComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
        if( !DeepComparable.IsExactly(LocationElement, otherT.LocationElement)) return false;
        if( !DeepComparable.IsExactly(EtagElement, otherT.EtagElement)) return false;
        if( !DeepComparable.IsExactly(LastModifiedElement, otherT.LastModifiedElement)) return false;
        if( !DeepComparable.IsExactly(Outcome, otherT.Outcome)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (StatusElement != null) yield return StatusElement;
          if (LocationElement != null) yield return LocationElement;
          if (EtagElement != null) yield return EtagElement;
          if (LastModifiedElement != null) yield return LastModifiedElement;
          if (Outcome != null) yield return Outcome;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (StatusElement != null) yield return new ElementValue("status", StatusElement);
          if (LocationElement != null) yield return new ElementValue("location", LocationElement);
          if (EtagElement != null) yield return new ElementValue("etag", EtagElement);
          if (LastModifiedElement != null) yield return new ElementValue("lastModified", LastModifiedElement);
          if (Outcome != null) yield return new ElementValue("outcome", Outcome);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "status":
            value = StatusElement;
            return StatusElement is not null;
          case "location":
            value = LocationElement;
            return LocationElement is not null;
          case "etag":
            value = EtagElement;
            return EtagElement is not null;
          case "lastModified":
            value = LastModifiedElement;
            return LastModifiedElement is not null;
          case "outcome":
            value = Outcome;
            return Outcome is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
        if (LocationElement is not null) yield return new KeyValuePair<string,object>("location",LocationElement);
        if (EtagElement is not null) yield return new KeyValuePair<string,object>("etag",EtagElement);
        if (LastModifiedElement is not null) yield return new KeyValuePair<string,object>("lastModified",LastModifiedElement);
        if (Outcome is not null) yield return new KeyValuePair<string,object>("outcome",Outcome);
      }

    }

    /// <summary>
    /// Persistent identifier for the bundle
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=50, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
    /// </summary>
    [FhirElement("type", InSummary=true, Order=60, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.Bundle.BundleType> TypeElement
    {
      get { return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private Code<Hl7.Fhir.Model.Bundle.BundleType> _TypeElement;

    /// <summary>
    /// document | message | transaction | transaction-response | batch | batch-response | history | searchset | collection | subscription-notification
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Bundle.BundleType? Type
    {
      get { return TypeElement != null ? TypeElement.Value : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new Code<Hl7.Fhir.Model.Bundle.BundleType>(value);
        OnPropertyChanged("Type");
      }
    }

    /// <summary>
    /// When the bundle was assembled. Note: Element was introduced in R4, do not use when working with older releases.
    /// </summary>
    [FhirElement("timestamp", InSummary=true, Order=70, FiveWs="FiveWs.init", Since=FhirRelease.R4)]
    [DataMember]
    public Hl7.Fhir.Model.Instant TimestampElement
    {
      get { return _TimestampElement; }
      set { _TimestampElement = value; OnPropertyChanged("TimestampElement"); }
    }

    private Hl7.Fhir.Model.Instant _TimestampElement;

    /// <summary>
    /// When the bundle was assembled
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public DateTimeOffset? Timestamp
    {
      get { return TimestampElement != null ? TimestampElement.Value : null; }
      set
      {
        if (value == null)
          TimestampElement = null;
        else
          TimestampElement = new Hl7.Fhir.Model.Instant(value);
        OnPropertyChanged("Timestamp");
      }
    }

    /// <summary>
    /// If search, the total number of matches
    /// </summary>
    [FhirElement("total", InSummary=true, Order=80)]
    [DataMember]
    public Hl7.Fhir.Model.UnsignedInt TotalElement
    {
      get { return _TotalElement; }
      set { _TotalElement = value; OnPropertyChanged("TotalElement"); }
    }

    private Hl7.Fhir.Model.UnsignedInt _TotalElement;

    /// <summary>
    /// If search, the total number of matches
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public int? Total
    {
      get { return TotalElement != null ? TotalElement.Value : null; }
      set
      {
        if (value == null)
          TotalElement = null;
        else
          TotalElement = new Hl7.Fhir.Model.UnsignedInt(value);
        OnPropertyChanged("Total");
      }
    }

    /// <summary>
    /// Links related to this Bundle
    /// </summary>
    [FhirElement("link", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Bundle.LinkComponent> Link
    {
      get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(); return _Link; }
      set { _Link = value; OnPropertyChanged("Link"); }
    }

    private List<Hl7.Fhir.Model.Bundle.LinkComponent> _Link;

    /// <summary>
    /// Entry in the bundle - will have a resource or information
    /// </summary>
    [FhirElement("entry", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Bundle.EntryComponent> Entry
    {
      get { if(_Entry==null) _Entry = new List<Hl7.Fhir.Model.Bundle.EntryComponent>(); return _Entry; }
      set { _Entry = value; OnPropertyChanged("Entry"); }
    }

    private List<Hl7.Fhir.Model.Bundle.EntryComponent> _Entry;

    /// <summary>
    /// Digital Signature
    /// </summary>
    [FhirElement("signature", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.Signature Signature
    {
      get { return _Signature; }
      set { _Signature = value; OnPropertyChanged("Signature"); }
    }

    private Hl7.Fhir.Model.Signature _Signature;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Bundle;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.Bundle.BundleType>)TypeElement.DeepCopy();
      if(TimestampElement != null) dest.TimestampElement = (Hl7.Fhir.Model.Instant)TimestampElement.DeepCopy();
      if(TotalElement != null) dest.TotalElement = (Hl7.Fhir.Model.UnsignedInt)TotalElement.DeepCopy();
      if(Link != null) dest.Link = new List<Hl7.Fhir.Model.Bundle.LinkComponent>(Link.DeepCopy());
      if(Entry != null) dest.Entry = new List<Hl7.Fhir.Model.Bundle.EntryComponent>(Entry.DeepCopy());
      if(Signature != null) dest.Signature = (Hl7.Fhir.Model.Signature)Signature.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Bundle());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Bundle;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(TimestampElement, otherT.TimestampElement)) return false;
      if( !DeepComparable.Matches(TotalElement, otherT.TotalElement)) return false;
      if( !DeepComparable.Matches(Link, otherT.Link)) return false;
      if( !DeepComparable.Matches(Entry, otherT.Entry)) return false;
      if( !DeepComparable.Matches(Signature, otherT.Signature)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Bundle;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(TimestampElement, otherT.TimestampElement)) return false;
      if( !DeepComparable.IsExactly(TotalElement, otherT.TotalElement)) return false;
      if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;
      if( !DeepComparable.IsExactly(Entry, otherT.Entry)) return false;
      if( !DeepComparable.IsExactly(Signature, otherT.Signature)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (TypeElement != null) yield return TypeElement;
        if (TimestampElement != null) yield return TimestampElement;
        if (TotalElement != null) yield return TotalElement;
        foreach (var elem in Link) { if (elem != null) yield return elem; }
        foreach (var elem in Entry) { if (elem != null) yield return elem; }
        if (Signature != null) yield return Signature;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        if (TimestampElement != null) yield return new ElementValue("timestamp", TimestampElement);
        if (TotalElement != null) yield return new ElementValue("total", TotalElement);
        foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
        foreach (var elem in Entry) { if (elem != null) yield return new ElementValue("entry", elem); }
        if (Signature != null) yield return new ElementValue("signature", Signature);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "type":
          value = TypeElement;
          return TypeElement is not null;
        case "timestamp":
          value = TimestampElement;
          return TimestampElement is not null;
        case "total":
          value = TotalElement;
          return TotalElement is not null;
        case "link":
          value = Link;
          return Link?.Any() == true;
        case "entry":
          value = Entry;
          return Entry?.Any() == true;
        case "signature":
          value = Signature;
          return Signature is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      if (TimestampElement is not null) yield return new KeyValuePair<string,object>("timestamp",TimestampElement);
      if (TotalElement is not null) yield return new KeyValuePair<string,object>("total",TotalElement);
      if (Link?.Any() == true) yield return new KeyValuePair<string,object>("link",Link);
      if (Entry?.Any() == true) yield return new KeyValuePair<string,object>("entry",Entry);
      if (Signature is not null) yield return new KeyValuePair<string,object>("signature",Signature);
    }

  }

}

// end of file

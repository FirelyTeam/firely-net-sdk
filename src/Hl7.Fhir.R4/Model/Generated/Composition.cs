// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A set of resources composed into a single coherent clinical statement with clinical attestation
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Composition","http://hl7.org/fhir/StructureDefinition/Composition", IsResource=true)]
  public partial class Composition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Composition"; } }

    /// <summary>
    ///  Set of codes used to value Act.Confidentiality and Role.Confidentiality attribute in accordance with the definition for concept domain "Confidentiality".
    /// (url: http://terminology.hl7.org/ValueSet/v3-ConfidentialityClassification)
    /// (system: http://terminology.hl7.org/CodeSystem/v3-Confidentiality)
    /// </summary>
    [FhirEnumeration("v3.ConfidentialityClassification")]
    public enum V3ConfidentialityClassification
    {
      /// <summary>
      /// Definition: Privacy metadata indicating that the information is not classified as sensitive.
      /// 
      ///                         
      ///                            Examples: Includes publicly available information, e.g., business name, phone, email or physical address.
      /// 
      ///                         
      ///                            Usage Note: This metadata indicates that the receiver has no obligation to consider additional policies when making access control decisions.   Note that in some jurisdictions, personally identifiable information must be protected as confidential, so it would not be appropriate to assign a confidentiality code of "unrestricted"  to that information even if it is publicly available.
      /// (system: http://terminology.hl7.org/CodeSystem/v3-Confidentiality)
      /// </summary>
      [EnumLiteral("U", "http://terminology.hl7.org/CodeSystem/v3-Confidentiality"), Description("unrestricted")]
      U,
      /// <summary>
      /// Definition: Privacy metadata indicating that the information has been de-identified, and there are mitigating circumstances that prevent re-identification, which minimize risk of harm from unauthorized disclosure.  The information requires protection to maintain low sensitivity.
      /// 
      ///                         
      ///                            Examples: Includes anonymized, pseudonymized, or non-personally identifiable information such as HIPAA limited data sets.
      /// 
      ///                         
      ///                            Map: No clear map to ISO 13606-4 Sensitivity Level (1) Care Management:   RECORD_COMPONENTs that might need to be accessed by a wide range of administrative staff to manage the subject of care's access to health services.
      /// 
      ///                         
      ///                            Usage Note: This metadata indicates the receiver may have an obligation to comply with a data use agreement.
      /// (system: http://terminology.hl7.org/CodeSystem/v3-Confidentiality)
      /// </summary>
      [EnumLiteral("L", "http://terminology.hl7.org/CodeSystem/v3-Confidentiality"), Description("low")]
      L,
      /// <summary>
      /// Definition: Privacy metadata indicating moderately sensitive information, which presents moderate risk of harm if disclosed without authorization.
      /// 
      ///                         
      ///                            Examples: Includes allergies of non-sensitive nature used inform food service; health information a patient authorizes to be used for marketing, released to a bank for a health credit card or savings account; or information in personal health record systems that are not governed under health privacy laws.
      /// 
      ///                         
      ///                            Map: Partial Map to ISO 13606-4 Sensitivity Level (2) Clinical Management:  Less sensitive RECORD_COMPONENTs that might need to be accessed by a wider range of personnel not all of whom are actively caring for the patient (e.g. radiology staff).
      /// 
      ///                         
      ///                            Usage Note: This metadata indicates that the receiver may be obligated to comply with the receiver's terms of use or privacy policies.
      /// (system: http://terminology.hl7.org/CodeSystem/v3-Confidentiality)
      /// </summary>
      [EnumLiteral("M", "http://terminology.hl7.org/CodeSystem/v3-Confidentiality"), Description("moderate")]
      M,
      /// <summary>
      /// Definition: Privacy metadata indicating that the information is typical, non-stigmatizing health information, which presents typical risk of harm if disclosed without authorization.
      /// 
      ///                         
      ///                            Examples: In the US, this includes what HIPAA identifies as the minimum necessary protected health information (PHI) given a covered purpose of use (treatment, payment, or operations).  Includes typical, non-stigmatizing health information disclosed in an application for health, workers compensation, disability, or life insurance.
      /// 
      ///                         
      ///                            Map: Partial Map to ISO 13606-4 Sensitivity Level (3) Clinical Care:   Default for normal clinical care access (i.e. most clinical staff directly caring for the patient should be able to access nearly all of the EHR).   Maps to normal confidentiality for treatment information but not to ancillary care, payment and operations.
      /// 
      ///                         
      ///                            Usage Note: This metadata indicates that the receiver may be obligated to comply with applicable jurisdictional privacy law or disclosure authorization.
      /// (system: http://terminology.hl7.org/CodeSystem/v3-Confidentiality)
      /// </summary>
      [EnumLiteral("N", "http://terminology.hl7.org/CodeSystem/v3-Confidentiality"), Description("normal")]
      N,
      /// <summary>
      /// Privacy metadata indicating highly sensitive, potentially stigmatizing information, which presents a high risk to the information subject if disclosed without authorization. May be pre-empted by jurisdictional law, e.g., for public health reporting or emergency treatment.
      /// 
      ///                         
      ///                            Examples: Includes information that is additionally protected such as sensitive conditions mental health, HIV, substance abuse, domestic violence, child abuse, genetic disease, and reproductive health; or sensitive demographic information such as a patient's standing as an employee or a celebrity. May be used to indicate proprietary or classified information that is not related to an individual, e.g., secret ingredients in a therapeutic substance; or the name of a manufacturer.
      /// 
      ///                         
      ///                            Map: Partial Map to ISO 13606-4 Sensitivity Level (3) Clinical Care: Default for normal clinical care access (i.e. most clinical staff directly caring for the patient should be able to access nearly all of the EHR). Maps to normal confidentiality for treatment information but not to ancillary care, payment and operations..
      /// 
      ///                         
      ///                            Usage Note: This metadata indicates that the receiver may be obligated to comply with applicable, prevailing (default) jurisdictional privacy law or disclosure authorization..
      /// (system: http://terminology.hl7.org/CodeSystem/v3-Confidentiality)
      /// </summary>
      [EnumLiteral("R", "http://terminology.hl7.org/CodeSystem/v3-Confidentiality"), Description("restricted")]
      R,
      /// <summary>
      /// . Privacy metadata indicating that the information is extremely sensitive and likely stigmatizing health information that presents a very high risk if disclosed without authorization.  This information must be kept in the highest confidence.  
      /// 
      ///                         
      ///                            Examples:  Includes information about a victim of abuse, patient requested information sensitivity, and taboo subjects relating to health status that must be discussed with the patient by an attending provider before sharing with the patient.  May also include information held under â€œlegal lockâ€? or attorney-client privilege
      /// 
      ///                         
      ///                            Map:  This metadata indicates that the receiver may not disclose this information except as directed by the information custodian, who may be the information subject.
      /// 
      ///                         
      ///                            Usage Note:  This metadata indicates that the receiver may not disclose this information except as directed by the information custodian, who may be the information subject.
      /// (system: http://terminology.hl7.org/CodeSystem/v3-Confidentiality)
      /// </summary>
      [EnumLiteral("V", "http://terminology.hl7.org/CodeSystem/v3-Confidentiality"), Description("very restricted")]
      V,
    }

    /// <summary>
    /// The way in which a person authenticated a composition.
    /// (url: http://hl7.org/fhir/ValueSet/composition-attestation-mode)
    /// (system: http://hl7.org/fhir/composition-attestation-mode)
    /// </summary>
    [FhirEnumeration("CompositionAttestationMode")]
    public enum CompositionAttestationMode
    {
      /// <summary>
      /// The person authenticated the content in their personal capacity.
      /// (system: http://hl7.org/fhir/composition-attestation-mode)
      /// </summary>
      [EnumLiteral("personal", "http://hl7.org/fhir/composition-attestation-mode"), Description("Personal")]
      Personal,
      /// <summary>
      /// The person authenticated the content in their professional capacity.
      /// (system: http://hl7.org/fhir/composition-attestation-mode)
      /// </summary>
      [EnumLiteral("professional", "http://hl7.org/fhir/composition-attestation-mode"), Description("Professional")]
      Professional,
      /// <summary>
      /// The person authenticated the content and accepted legal responsibility for its content.
      /// (system: http://hl7.org/fhir/composition-attestation-mode)
      /// </summary>
      [EnumLiteral("legal", "http://hl7.org/fhir/composition-attestation-mode"), Description("Legal")]
      Legal,
      /// <summary>
      /// The organization authenticated the content as consistent with their policies and procedures.
      /// (system: http://hl7.org/fhir/composition-attestation-mode)
      /// </summary>
      [EnumLiteral("official", "http://hl7.org/fhir/composition-attestation-mode"), Description("Official")]
      Official,
    }

    /// <summary>
    /// Attests to accuracy of composition
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Composition#Attester", IsNestedType=true)]
    public partial class AttesterComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Composition#Attester"; } }

      /// <summary>
      /// personal | professional | legal | official
      /// </summary>
      [FhirElement("mode", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.Composition.CompositionAttestationMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.Composition.CompositionAttestationMode> _ModeElement;

      /// <summary>
      /// personal | professional | legal | official
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Composition.CompositionAttestationMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.Composition.CompositionAttestationMode>(value);
          OnPropertyChanged("Mode");
        }
      }

      /// <summary>
      /// When the composition was attested
      /// </summary>
      [FhirElement("time", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime TimeElement
      {
        get { return _TimeElement; }
        set { _TimeElement = value; OnPropertyChanged("TimeElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _TimeElement;

      /// <summary>
      /// When the composition was attested
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Time
      {
        get { return TimeElement != null ? TimeElement.Value : null; }
        set
        {
          if (value == null)
            TimeElement = null;
          else
            TimeElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Time");
        }
      }

      /// <summary>
      /// Who attested the composition
      /// </summary>
      [FhirElement("party", Order=60, FiveWs="FiveWs.witness")]
      [CLSCompliant(false)]
      [References("Patient","RelatedPerson","Practitioner","PractitionerRole","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AttesterComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.Composition.CompositionAttestationMode>)ModeElement.DeepCopy();
        if(TimeElement != null) dest.TimeElement = (Hl7.Fhir.Model.FhirDateTime)TimeElement.DeepCopy();
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AttesterComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AttesterComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(TimeElement, otherT.TimeElement)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AttesterComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(TimeElement, otherT.TimeElement)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ModeElement != null) yield return ModeElement;
          if (TimeElement != null) yield return TimeElement;
          if (Party != null) yield return Party;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (TimeElement != null) yield return new ElementValue("time", TimeElement);
          if (Party != null) yield return new ElementValue("party", Party);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "mode":
            value = ModeElement;
            return ModeElement is not null;
          case "time":
            value = TimeElement;
            return TimeElement is not null;
          case "party":
            value = Party;
            return Party is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ModeElement is not null) yield return new KeyValuePair<string,object>("mode",ModeElement);
        if (TimeElement is not null) yield return new KeyValuePair<string,object>("time",TimeElement);
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
      }

    }

    /// <summary>
    /// Relationships to other compositions/documents
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Composition#RelatesTo", IsNestedType=true)]
    public partial class RelatesToComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Composition#RelatesTo"; } }

      /// <summary>
      /// replaces | transforms | signs | appends
      /// </summary>
      [FhirElement("code", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.DocumentRelationshipType> CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Code<Hl7.Fhir.Model.DocumentRelationshipType> _CodeElement;

      /// <summary>
      /// replaces | transforms | signs | appends
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.DocumentRelationshipType? Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Code<Hl7.Fhir.Model.DocumentRelationshipType>(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// Target of the relationship
      /// </summary>
      [FhirElement("target", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Composition")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Identifier),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Target
      {
        get { return _Target; }
        set { _Target = value; OnPropertyChanged("Target"); }
      }

      private Hl7.Fhir.Model.DataType _Target;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatesToComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Code<Hl7.Fhir.Model.DocumentRelationshipType>)CodeElement.DeepCopy();
        if(Target != null) dest.Target = (Hl7.Fhir.Model.DataType)Target.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatesToComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatesToComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(Target, otherT.Target)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatesToComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(Target, otherT.Target)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (Target != null) yield return Target;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (Target != null) yield return new ElementValue("target", Target);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "target":
            value = Target;
            return Target is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (Target is not null) yield return new KeyValuePair<string,object>("target",Target);
      }

    }

    /// <summary>
    /// The clinical service(s) being documented
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Composition#Event", IsNestedType=true)]
    public partial class EventComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Composition#Event"; } }

      /// <summary>
      /// Code(s) that apply to the event being documented
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Code
      {
        get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Code;

      /// <summary>
      /// The period covered by the documentation
      /// </summary>
      [FhirElement("period", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Period Period
      {
        get { return _Period; }
        set { _Period = value; OnPropertyChanged("Period"); }
      }

      private Hl7.Fhir.Model.Period _Period;

      /// <summary>
      /// The event(s) being documented
      /// </summary>
      [FhirElement("detail", InSummary=true, Order=60)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.ResourceReference>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as EventComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = new List<Hl7.Fhir.Model.CodeableConcept>(Code.DeepCopy());
        if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
        if(Detail != null) dest.Detail = new List<Hl7.Fhir.Model.ResourceReference>(Detail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new EventComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as EventComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Period, otherT.Period)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as EventComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Code) { if (elem != null) yield return elem; }
          if (Period != null) yield return Period;
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
          if (Period != null) yield return new ElementValue("period", Period);
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code?.Any() == true;
          case "period":
            value = Period;
            return Period is not null;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
        if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// Composition is broken into sections
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Composition#Section", IsNestedType=true)]
    public partial class SectionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Composition#Section"; } }

      /// <summary>
      /// Label for section (e.g. for ToC)
      /// </summary>
      [FhirElement("title", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// Label for section (e.g. for ToC)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Classification of section (recommended)
      /// </summary>
      [FhirElement("code", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Who and/or what authored the section
      /// </summary>
      [FhirElement("author", Order=60, FiveWs="FiveWs.author")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Device","Patient","RelatedPerson","Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Author
      {
        get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ResourceReference>(); return _Author; }
        set { _Author = value; OnPropertyChanged("Author"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Author;

      /// <summary>
      /// Who/what the section is about, when it is not about the subject of composition
      /// </summary>
      [FhirElement("focus", Order=70)]
      [CLSCompliant(false)]
      [References("Resource")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Focus
      {
        get { return _Focus; }
        set { _Focus = value; OnPropertyChanged("Focus"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Focus;

      /// <summary>
      /// Text summary of the section, for human interpretation
      /// </summary>
      [FhirElement("text", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Narrative Text
      {
        get { return _Text; }
        set { _Text = value; OnPropertyChanged("Text"); }
      }

      private Hl7.Fhir.Model.Narrative _Text;

      /// <summary>
      /// working | snapshot | changes
      /// </summary>
      [FhirElement("mode", Order=90, FiveWs="FiveWs.class")]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.ListMode> ModeElement
      {
        get { return _ModeElement; }
        set { _ModeElement = value; OnPropertyChanged("ModeElement"); }
      }

      private Code<Hl7.Fhir.Model.ListMode> _ModeElement;

      /// <summary>
      /// working | snapshot | changes
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ListMode? Mode
      {
        get { return ModeElement != null ? ModeElement.Value : null; }
        set
        {
          if (value == null)
            ModeElement = null;
          else
            ModeElement = new Code<Hl7.Fhir.Model.ListMode>(value);
          OnPropertyChanged("Mode");
        }
      }

      /// <summary>
      /// Order of section entries
      /// </summary>
      [FhirElement("orderedBy", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept OrderedBy
      {
        get { return _OrderedBy; }
        set { _OrderedBy = value; OnPropertyChanged("OrderedBy"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _OrderedBy;

      /// <summary>
      /// A reference to data that supports this section
      /// </summary>
      [FhirElement("entry", Order=110)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Entry
      {
        get { if(_Entry==null) _Entry = new List<Hl7.Fhir.Model.ResourceReference>(); return _Entry; }
        set { _Entry = value; OnPropertyChanged("Entry"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Entry;

      /// <summary>
      /// Why the section is empty
      /// </summary>
      [FhirElement("emptyReason", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept EmptyReason
      {
        get { return _EmptyReason; }
        set { _EmptyReason = value; OnPropertyChanged("EmptyReason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _EmptyReason;

      /// <summary>
      /// Nested Section
      /// </summary>
      [FhirElement("section", Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Composition.SectionComponent> Section
      {
        get { if(_Section==null) _Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(); return _Section; }
        set { _Section = value; OnPropertyChanged("Section"); }
      }

      private List<Hl7.Fhir.Model.Composition.SectionComponent> _Section;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SectionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ResourceReference>(Author.DeepCopy());
        if(Focus != null) dest.Focus = (Hl7.Fhir.Model.ResourceReference)Focus.DeepCopy();
        if(Text != null) dest.Text = (Hl7.Fhir.Model.Narrative)Text.DeepCopy();
        if(ModeElement != null) dest.ModeElement = (Code<Hl7.Fhir.Model.ListMode>)ModeElement.DeepCopy();
        if(OrderedBy != null) dest.OrderedBy = (Hl7.Fhir.Model.CodeableConcept)OrderedBy.DeepCopy();
        if(Entry != null) dest.Entry = new List<Hl7.Fhir.Model.ResourceReference>(Entry.DeepCopy());
        if(EmptyReason != null) dest.EmptyReason = (Hl7.Fhir.Model.CodeableConcept)EmptyReason.DeepCopy();
        if(Section != null) dest.Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(Section.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SectionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SectionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Author, otherT.Author)) return false;
        if( !DeepComparable.Matches(Focus, otherT.Focus)) return false;
        if( !DeepComparable.Matches(Text, otherT.Text)) return false;
        if( !DeepComparable.Matches(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.Matches(OrderedBy, otherT.OrderedBy)) return false;
        if( !DeepComparable.Matches(Entry, otherT.Entry)) return false;
        if( !DeepComparable.Matches(EmptyReason, otherT.EmptyReason)) return false;
        if( !DeepComparable.Matches(Section, otherT.Section)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SectionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
        if( !DeepComparable.IsExactly(Focus, otherT.Focus)) return false;
        if( !DeepComparable.IsExactly(Text, otherT.Text)) return false;
        if( !DeepComparable.IsExactly(ModeElement, otherT.ModeElement)) return false;
        if( !DeepComparable.IsExactly(OrderedBy, otherT.OrderedBy)) return false;
        if( !DeepComparable.IsExactly(Entry, otherT.Entry)) return false;
        if( !DeepComparable.IsExactly(EmptyReason, otherT.EmptyReason)) return false;
        if( !DeepComparable.IsExactly(Section, otherT.Section)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TitleElement != null) yield return TitleElement;
          if (Code != null) yield return Code;
          foreach (var elem in Author) { if (elem != null) yield return elem; }
          if (Focus != null) yield return Focus;
          if (Text != null) yield return Text;
          if (ModeElement != null) yield return ModeElement;
          if (OrderedBy != null) yield return OrderedBy;
          foreach (var elem in Entry) { if (elem != null) yield return elem; }
          if (EmptyReason != null) yield return EmptyReason;
          foreach (var elem in Section) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
          if (Focus != null) yield return new ElementValue("focus", Focus);
          if (Text != null) yield return new ElementValue("text", Text);
          if (ModeElement != null) yield return new ElementValue("mode", ModeElement);
          if (OrderedBy != null) yield return new ElementValue("orderedBy", OrderedBy);
          foreach (var elem in Entry) { if (elem != null) yield return new ElementValue("entry", elem); }
          if (EmptyReason != null) yield return new ElementValue("emptyReason", EmptyReason);
          foreach (var elem in Section) { if (elem != null) yield return new ElementValue("section", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "author":
            value = Author;
            return Author?.Any() == true;
          case "focus":
            value = Focus;
            return Focus is not null;
          case "text":
            value = Text;
            return Text is not null;
          case "mode":
            value = ModeElement;
            return ModeElement is not null;
          case "orderedBy":
            value = OrderedBy;
            return OrderedBy is not null;
          case "entry":
            value = Entry;
            return Entry?.Any() == true;
          case "emptyReason":
            value = EmptyReason;
            return EmptyReason is not null;
          case "section":
            value = Section;
            return Section?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
        if (Focus is not null) yield return new KeyValuePair<string,object>("focus",Focus);
        if (Text is not null) yield return new KeyValuePair<string,object>("text",Text);
        if (ModeElement is not null) yield return new KeyValuePair<string,object>("mode",ModeElement);
        if (OrderedBy is not null) yield return new KeyValuePair<string,object>("orderedBy",OrderedBy);
        if (Entry?.Any() == true) yield return new KeyValuePair<string,object>("entry",Entry);
        if (EmptyReason is not null) yield return new KeyValuePair<string,object>("emptyReason",EmptyReason);
        if (Section?.Any() == true) yield return new KeyValuePair<string,object>("section",Section);
      }

    }

    /// <summary>
    /// Version-independent identifier for the Composition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// preliminary | final | amended | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.CompositionStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.CompositionStatus> _StatusElement;

    /// <summary>
    /// preliminary | final | amended | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.CompositionStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.CompositionStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Kind of composition (LOINC if possible)
    /// </summary>
    [FhirElement("type", InSummary=true, Order=110, FiveWs="FiveWs.class")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// Categorization of Composition
    /// </summary>
    [FhirElement("category", InSummary=true, Order=120, FiveWs="FiveWs.class")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Who and/or what the composition is about
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=130, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Resource")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Context of the Composition
    /// </summary>
    [FhirElement("encounter", InSummary=true, Order=140, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Composition editing time
    /// </summary>
    [FhirElement("date", InSummary=true, Order=150, FiveWs="FiveWs.done[x]")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Composition editing time
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Who and/or what authored the composition
    /// </summary>
    [FhirElement("author", InSummary=true, Order=160, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Device","Patient","RelatedPerson","Organization")]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ResourceReference>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Author;

    /// <summary>
    /// Human Readable name/title
    /// </summary>
    [FhirElement("title", InSummary=true, Order=170)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Human Readable name/title
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// As defined by affinity domain
    /// </summary>
    [FhirElement("confidentiality", InSummary=true, Order=180)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.Composition.V3ConfidentialityClassification> ConfidentialityElement
    {
      get { return _ConfidentialityElement; }
      set { _ConfidentialityElement = value; OnPropertyChanged("ConfidentialityElement"); }
    }

    private Code<Hl7.Fhir.Model.Composition.V3ConfidentialityClassification> _ConfidentialityElement;

    /// <summary>
    /// As defined by affinity domain
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Composition.V3ConfidentialityClassification? Confidentiality
    {
      get { return ConfidentialityElement != null ? ConfidentialityElement.Value : null; }
      set
      {
        if (value == null)
          ConfidentialityElement = null;
        else
          ConfidentialityElement = new Code<Hl7.Fhir.Model.Composition.V3ConfidentialityClassification>(value);
        OnPropertyChanged("Confidentiality");
      }
    }

    /// <summary>
    /// Attests to accuracy of composition
    /// </summary>
    [FhirElement("attester", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Composition.AttesterComponent> Attester
    {
      get { if(_Attester==null) _Attester = new List<Hl7.Fhir.Model.Composition.AttesterComponent>(); return _Attester; }
      set { _Attester = value; OnPropertyChanged("Attester"); }
    }

    private List<Hl7.Fhir.Model.Composition.AttesterComponent> _Attester;

    /// <summary>
    /// Organization which maintains the composition
    /// </summary>
    [FhirElement("custodian", InSummary=true, Order=200)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Custodian
    {
      get { return _Custodian; }
      set { _Custodian = value; OnPropertyChanged("Custodian"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Custodian;

    /// <summary>
    /// Relationships to other compositions/documents
    /// </summary>
    [FhirElement("relatesTo", Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Composition.RelatesToComponent> RelatesTo
    {
      get { if(_RelatesTo==null) _RelatesTo = new List<Hl7.Fhir.Model.Composition.RelatesToComponent>(); return _RelatesTo; }
      set { _RelatesTo = value; OnPropertyChanged("RelatesTo"); }
    }

    private List<Hl7.Fhir.Model.Composition.RelatesToComponent> _RelatesTo;

    /// <summary>
    /// The clinical service(s) being documented
    /// </summary>
    [FhirElement("event", InSummary=true, Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Composition.EventComponent> Event
    {
      get { if(_Event==null) _Event = new List<Hl7.Fhir.Model.Composition.EventComponent>(); return _Event; }
      set { _Event = value; OnPropertyChanged("Event"); }
    }

    private List<Hl7.Fhir.Model.Composition.EventComponent> _Event;

    /// <summary>
    /// Composition is broken into sections
    /// </summary>
    [FhirElement("section", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Composition.SectionComponent> Section
    {
      get { if(_Section==null) _Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(); return _Section; }
      set { _Section = value; OnPropertyChanged("Section"); }
    }

    private List<Hl7.Fhir.Model.Composition.SectionComponent> _Section;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Composition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.CompositionStatus>)StatusElement.DeepCopy();
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ResourceReference>(Author.DeepCopy());
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(ConfidentialityElement != null) dest.ConfidentialityElement = (Code<Hl7.Fhir.Model.Composition.V3ConfidentialityClassification>)ConfidentialityElement.DeepCopy();
      if(Attester != null) dest.Attester = new List<Hl7.Fhir.Model.Composition.AttesterComponent>(Attester.DeepCopy());
      if(Custodian != null) dest.Custodian = (Hl7.Fhir.Model.ResourceReference)Custodian.DeepCopy();
      if(RelatesTo != null) dest.RelatesTo = new List<Hl7.Fhir.Model.Composition.RelatesToComponent>(RelatesTo.DeepCopy());
      if(Event != null) dest.Event = new List<Hl7.Fhir.Model.Composition.EventComponent>(Event.DeepCopy());
      if(Section != null) dest.Section = new List<Hl7.Fhir.Model.Composition.SectionComponent>(Section.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Composition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Composition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(ConfidentialityElement, otherT.ConfidentialityElement)) return false;
      if( !DeepComparable.Matches(Attester, otherT.Attester)) return false;
      if( !DeepComparable.Matches(Custodian, otherT.Custodian)) return false;
      if( !DeepComparable.Matches(RelatesTo, otherT.RelatesTo)) return false;
      if( !DeepComparable.Matches(Event, otherT.Event)) return false;
      if( !DeepComparable.Matches(Section, otherT.Section)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Composition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(ConfidentialityElement, otherT.ConfidentialityElement)) return false;
      if( !DeepComparable.IsExactly(Attester, otherT.Attester)) return false;
      if( !DeepComparable.IsExactly(Custodian, otherT.Custodian)) return false;
      if( !DeepComparable.IsExactly(RelatesTo, otherT.RelatesTo)) return false;
      if( !DeepComparable.IsExactly(Event, otherT.Event)) return false;
      if( !DeepComparable.IsExactly(Section, otherT.Section)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (StatusElement != null) yield return StatusElement;
        if (Type != null) yield return Type;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (Subject != null) yield return Subject;
        if (Encounter != null) yield return Encounter;
        if (DateElement != null) yield return DateElement;
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        if (TitleElement != null) yield return TitleElement;
        if (ConfidentialityElement != null) yield return ConfidentialityElement;
        foreach (var elem in Attester) { if (elem != null) yield return elem; }
        if (Custodian != null) yield return Custodian;
        foreach (var elem in RelatesTo) { if (elem != null) yield return elem; }
        foreach (var elem in Event) { if (elem != null) yield return elem; }
        foreach (var elem in Section) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Type != null) yield return new ElementValue("type", Type);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (ConfidentialityElement != null) yield return new ElementValue("confidentiality", ConfidentialityElement);
        foreach (var elem in Attester) { if (elem != null) yield return new ElementValue("attester", elem); }
        if (Custodian != null) yield return new ElementValue("custodian", Custodian);
        foreach (var elem in RelatesTo) { if (elem != null) yield return new ElementValue("relatesTo", elem); }
        foreach (var elem in Event) { if (elem != null) yield return new ElementValue("event", elem); }
        foreach (var elem in Section) { if (elem != null) yield return new ElementValue("section", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "type":
          value = Type;
          return Type is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "confidentiality":
          value = ConfidentialityElement;
          return ConfidentialityElement is not null;
        case "attester":
          value = Attester;
          return Attester?.Any() == true;
        case "custodian":
          value = Custodian;
          return Custodian is not null;
        case "relatesTo":
          value = RelatesTo;
          return RelatesTo?.Any() == true;
        case "event":
          value = Event;
          return Event?.Any() == true;
        case "section":
          value = Section;
          return Section?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (ConfidentialityElement is not null) yield return new KeyValuePair<string,object>("confidentiality",ConfidentialityElement);
      if (Attester?.Any() == true) yield return new KeyValuePair<string,object>("attester",Attester);
      if (Custodian is not null) yield return new KeyValuePair<string,object>("custodian",Custodian);
      if (RelatesTo?.Any() == true) yield return new KeyValuePair<string,object>("relatesTo",RelatesTo);
      if (Event?.Any() == true) yield return new KeyValuePair<string,object>("event",Event);
      if (Section?.Any() == true) yield return new KeyValuePair<string,object>("section",Section);
    }

  }

}

// end of file

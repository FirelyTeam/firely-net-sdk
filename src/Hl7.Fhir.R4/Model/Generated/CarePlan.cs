// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Healthcare plan for patient or group
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("CarePlan","http://hl7.org/fhir/StructureDefinition/CarePlan", IsResource=true)]
  public partial class CarePlan : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>, ICoded<List<Hl7.Fhir.Model.CodeableConcept>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "CarePlan"; } }

    /// <summary>
    /// Codes indicating the degree of authority/intentionality associated with a care plan.
    /// (url: http://hl7.org/fhir/ValueSet/care-plan-intent)
    /// (system: http://hl7.org/fhir/request-intent)
    /// </summary>
    [FhirEnumeration("CarePlanIntent", "http://hl7.org/fhir/ValueSet/care-plan-intent", "http://hl7.org/fhir/request-intent")]
    public enum CarePlanIntent
    {
      /// <summary>
      /// The request is a suggestion made by someone/something that does not have an intention to ensure it occurs and without providing an authorization to act.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("proposal"), Description("Proposal")]
      Proposal,
      /// <summary>
      /// The request represents an intention to ensure something occurs without providing an authorization for others to act.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("plan"), Description("Plan")]
      Plan,
      /// <summary>
      /// The request represents a request/demand and authorization for action by a Practitioner.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("order"), Description("Order")]
      Order,
      /// <summary>
      /// The request represents a component or option for a RequestGroup that establishes timing, conditionality and/or other constraints among a set of requests.  Refer to [[[RequestGroup]]] for additional information on how this status is used.
      /// (system: http://hl7.org/fhir/request-intent)
      /// </summary>
      [EnumLiteral("option"), Description("Option")]
      Option,
    }

    /// <summary>
    /// Resource types defined as part of FHIR that can be represented as in-line definitions of a care plan activity.
    /// (url: http://hl7.org/fhir/ValueSet/care-plan-activity-kind)
    /// (system: http://hl7.org/fhir/resource-types)
    /// </summary>
    [FhirEnumeration("CarePlanActivityKind", "http://hl7.org/fhir/ValueSet/care-plan-activity-kind", "http://hl7.org/fhir/resource-types")]
    public enum CarePlanActivityKind
    {
      /// <summary>
      /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Appointment"), Description("Appointment")]
      Appointment,
      /// <summary>
      /// A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("CommunicationRequest"), Description("CommunicationRequest")]
      CommunicationRequest,
      /// <summary>
      /// Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("DeviceRequest"), Description("DeviceRequest")]
      DeviceRequest,
      /// <summary>
      /// An order or request for both supply of the medication and the instructions for administration of the medication to a patient. The resource is called "MedicationRequest" rather than "MedicationPrescription" or "MedicationOrder" to generalize the use across inpatient and outpatient settings, including care plans, etc., and to harmonize with workflow patterns.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("MedicationRequest"), Description("MedicationRequest")]
      MedicationRequest,
      /// <summary>
      /// A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("NutritionOrder"), Description("NutritionOrder")]
      NutritionOrder,
      /// <summary>
      /// A task to be performed.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("Task"), Description("Task")]
      Task,
      /// <summary>
      /// A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("ServiceRequest"), Description("ServiceRequest")]
      ServiceRequest,
      /// <summary>
      /// An authorization for the provision of glasses and/or contact lenses to a patient.
      /// (system: http://hl7.org/fhir/resource-types)
      /// </summary>
      [EnumLiteral("VisionPrescription"), Description("VisionPrescription")]
      VisionPrescription,
    }

    /// <summary>
    /// Codes that reflect the current state of a care plan activity within its overall life cycle.
    /// (url: http://hl7.org/fhir/ValueSet/care-plan-activity-status)
    /// (system: http://hl7.org/fhir/care-plan-activity-status)
    /// </summary>
    [FhirEnumeration("CarePlanActivityStatus", "http://hl7.org/fhir/ValueSet/care-plan-activity-status", "http://hl7.org/fhir/care-plan-activity-status")]
    public enum CarePlanActivityStatus
    {
      /// <summary>
      /// Care plan activity is planned but no action has yet been taken.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("not-started"), Description("Not Started")]
      NotStarted,
      /// <summary>
      /// Appointment or other booking has occurred but activity has not yet begun.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("scheduled"), Description("Scheduled")]
      Scheduled,
      /// <summary>
      /// Care plan activity has been started but is not yet complete.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("in-progress"), Description("In Progress")]
      InProgress,
      /// <summary>
      /// Care plan activity was started but has temporarily ceased with an expectation of resumption at a future time.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("on-hold"), Description("On Hold")]
      OnHold,
      /// <summary>
      /// Care plan activity has been completed (more or less) as planned.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("completed"), Description("Completed")]
      Completed,
      /// <summary>
      /// The planned care plan activity has been withdrawn.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("cancelled"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// The planned care plan activity has been ended prior to completion after the activity was started.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("stopped"), Description("Stopped")]
      Stopped,
      /// <summary>
      /// The current state of the care plan activity is not known.  Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which one.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("unknown"), Description("Unknown")]
      Unknown,
      /// <summary>
      /// Care plan activity was entered in error and voided.
      /// (system: http://hl7.org/fhir/care-plan-activity-status)
      /// </summary>
      [EnumLiteral("entered-in-error"), Description("Entered in Error")]
      EnteredInError,
    }

    /// <summary>
    /// Action to occur as part of plan
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CarePlan#Activity", IsNestedType=true)]
    [BackboneType("CarePlan.activity")]
    public partial class ActivityComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CarePlan#Activity"; } }

      /// <summary>
      /// Results of the activity
      /// </summary>
      [FhirElement("outcomeCodeableConcept", Order=40)]
      [Binding("CarePlanActivityOutcome")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> OutcomeCodeableConcept
      {
        get { if(_OutcomeCodeableConcept==null) _OutcomeCodeableConcept = new List<Hl7.Fhir.Model.CodeableConcept>(); return _OutcomeCodeableConcept; }
        set { _OutcomeCodeableConcept = value; OnPropertyChanged("OutcomeCodeableConcept"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _OutcomeCodeableConcept;

      /// <summary>
      /// Appointment, Encounter, Procedure, etc.
      /// </summary>
      [FhirElement("outcomeReference", Order=50)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> OutcomeReference
      {
        get { if(_OutcomeReference==null) _OutcomeReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _OutcomeReference; }
        set { _OutcomeReference = value; OnPropertyChanged("OutcomeReference"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _OutcomeReference;

      /// <summary>
      /// Comments about the activity status/progress
      /// </summary>
      [FhirElement("progress", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Progress
      {
        get { if(_Progress==null) _Progress = new List<Hl7.Fhir.Model.Annotation>(); return _Progress; }
        set { _Progress = value; OnPropertyChanged("Progress"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Progress;

      /// <summary>
      /// Activity details defined in specific resource
      /// </summary>
      [FhirElement("reference", Order=70)]
      [CLSCompliant(false)]
      [References("Appointment","CommunicationRequest","DeviceRequest","MedicationRequest","NutritionOrder","Task","ServiceRequest","VisionPrescription","RequestGroup")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Reference;

      /// <summary>
      /// In-line definition of activity
      /// </summary>
      [FhirElement("detail", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CarePlan.DetailComponent Detail
      {
        get { return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private Hl7.Fhir.Model.CarePlan.DetailComponent _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActivityComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(OutcomeCodeableConcept != null) dest.OutcomeCodeableConcept = new List<Hl7.Fhir.Model.CodeableConcept>(OutcomeCodeableConcept.DeepCopy());
        if(OutcomeReference != null) dest.OutcomeReference = new List<Hl7.Fhir.Model.ResourceReference>(OutcomeReference.DeepCopy());
        if(Progress != null) dest.Progress = new List<Hl7.Fhir.Model.Annotation>(Progress.DeepCopy());
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.ResourceReference)Reference.DeepCopy();
        if(Detail != null) dest.Detail = (Hl7.Fhir.Model.CarePlan.DetailComponent)Detail.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActivityComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActivityComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(OutcomeCodeableConcept, otherT.OutcomeCodeableConcept)) return false;
        if( !DeepComparable.Matches(OutcomeReference, otherT.OutcomeReference)) return false;
        if( !DeepComparable.Matches(Progress, otherT.Progress)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActivityComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(OutcomeCodeableConcept, otherT.OutcomeCodeableConcept)) return false;
        if( !DeepComparable.IsExactly(OutcomeReference, otherT.OutcomeReference)) return false;
        if( !DeepComparable.IsExactly(Progress, otherT.Progress)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in OutcomeCodeableConcept) { if (elem != null) yield return elem; }
          foreach (var elem in OutcomeReference) { if (elem != null) yield return elem; }
          foreach (var elem in Progress) { if (elem != null) yield return elem; }
          if (Reference != null) yield return Reference;
          if (Detail != null) yield return Detail;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in OutcomeCodeableConcept) { if (elem != null) yield return new ElementValue("outcomeCodeableConcept", elem); }
          foreach (var elem in OutcomeReference) { if (elem != null) yield return new ElementValue("outcomeReference", elem); }
          foreach (var elem in Progress) { if (elem != null) yield return new ElementValue("progress", elem); }
          if (Reference != null) yield return new ElementValue("reference", Reference);
          if (Detail != null) yield return new ElementValue("detail", Detail);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "outcomeCodeableConcept":
            value = OutcomeCodeableConcept;
            return OutcomeCodeableConcept?.Any() == true;
          case "outcomeReference":
            value = OutcomeReference;
            return OutcomeReference?.Any() == true;
          case "progress":
            value = Progress;
            return Progress?.Any() == true;
          case "reference":
            value = Reference;
            return Reference is not null;
          case "detail":
            value = Detail;
            return Detail is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (OutcomeCodeableConcept?.Any() == true) yield return new KeyValuePair<string,object>("outcomeCodeableConcept",OutcomeCodeableConcept);
        if (OutcomeReference?.Any() == true) yield return new KeyValuePair<string,object>("outcomeReference",OutcomeReference);
        if (Progress?.Any() == true) yield return new KeyValuePair<string,object>("progress",Progress);
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
        if (Detail is not null) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// In-line definition of activity
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CarePlan#Detail", IsNestedType=true)]
    [BackboneType("CarePlan.activity.detail")]
    public partial class DetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CarePlan#Detail"; } }

      /// <summary>
      /// Appointment | CommunicationRequest | DeviceRequest | MedicationRequest | NutritionOrder | Task | ServiceRequest | VisionPrescription
      /// </summary>
      [FhirElement("kind", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("CarePlanActivityKind")]
      [DataMember]
      public Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityKind> KindElement
      {
        get { return _KindElement; }
        set { _KindElement = value; OnPropertyChanged("KindElement"); }
      }

      private Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityKind> _KindElement;

      /// <summary>
      /// Appointment | CommunicationRequest | DeviceRequest | MedicationRequest | NutritionOrder | Task | ServiceRequest | VisionPrescription
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CarePlan.CarePlanActivityKind? Kind
      {
        get { return KindElement != null ? KindElement.Value : null; }
        set
        {
          if (value == null)
            KindElement = null;
          else
            KindElement = new Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityKind>(value);
          OnPropertyChanged("Kind");
        }
      }

      /// <summary>
      /// Instantiates FHIR protocol or definition
      /// </summary>
      [FhirElement("instantiatesCanonical", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Canonical> InstantiatesCanonicalElement
      {
        get { if(_InstantiatesCanonicalElement==null) _InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesCanonicalElement; }
        set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
      }

      private List<Hl7.Fhir.Model.Canonical> _InstantiatesCanonicalElement;

      /// <summary>
      /// Instantiates FHIR protocol or definition
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> InstantiatesCanonical
      {
        get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            InstantiatesCanonicalElement = null;
          else
            InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
          OnPropertyChanged("InstantiatesCanonical");
        }
      }

      /// <summary>
      /// Instantiates external protocol or definition
      /// </summary>
      [FhirElement("instantiatesUri", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirUri> InstantiatesUriElement
      {
        get { if(_InstantiatesUriElement==null) _InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _InstantiatesUriElement; }
        set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
      }

      private List<Hl7.Fhir.Model.FhirUri> _InstantiatesUriElement;

      /// <summary>
      /// Instantiates external protocol or definition
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> InstantiatesUri
      {
        get { return InstantiatesUriElement != null ? InstantiatesUriElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            InstantiatesUriElement = null;
          else
            InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
          OnPropertyChanged("InstantiatesUri");
        }
      }

      /// <summary>
      /// Detail type of activity
      /// </summary>
      [FhirElement("code", Order=70)]
      [Binding("CarePlanActivityType")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Why activity should be done or why activity was prohibited
      /// </summary>
      [FhirElement("reasonCode", Order=80)]
      [Binding("CarePlanActivityReason")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ReasonCode
      {
        get { if(_ReasonCode==null) _ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ReasonCode; }
        set { _ReasonCode = value; OnPropertyChanged("ReasonCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ReasonCode;

      /// <summary>
      /// Why activity is needed
      /// </summary>
      [FhirElement("reasonReference", Order=90)]
      [CLSCompliant(false)]
      [References("Condition","Observation","DiagnosticReport","DocumentReference")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> ReasonReference
      {
        get { if(_ReasonReference==null) _ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _ReasonReference; }
        set { _ReasonReference = value; OnPropertyChanged("ReasonReference"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _ReasonReference;

      /// <summary>
      /// Goals this activity relates to
      /// </summary>
      [FhirElement("goal", Order=100)]
      [CLSCompliant(false)]
      [References("Goal")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Goal
      {
        get { if(_Goal==null) _Goal = new List<Hl7.Fhir.Model.ResourceReference>(); return _Goal; }
        set { _Goal = value; OnPropertyChanged("Goal"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Goal;

      /// <summary>
      /// not-started | scheduled | in-progress | on-hold | completed | cancelled | stopped | unknown | entered-in-error
      /// </summary>
      [FhirElement("status", IsModifier=true, Order=110)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("CarePlanActivityStatus")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityStatus> StatusElement
      {
        get { return _StatusElement; }
        set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
      }

      private Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityStatus> _StatusElement;

      /// <summary>
      /// not-started | scheduled | in-progress | on-hold | completed | cancelled | stopped | unknown | entered-in-error
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CarePlan.CarePlanActivityStatus? Status
      {
        get { return StatusElement != null ? StatusElement.Value : null; }
        set
        {
          if (value == null)
            StatusElement = null;
          else
            StatusElement = new Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityStatus>(value);
          OnPropertyChanged("Status");
        }
      }

      /// <summary>
      /// Reason for current status
      /// </summary>
      [FhirElement("statusReason", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept StatusReason
      {
        get { return _StatusReason; }
        set { _StatusReason = value; OnPropertyChanged("StatusReason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _StatusReason;

      /// <summary>
      /// If true, activity is prohibiting action
      /// </summary>
      [FhirElement("doNotPerform", IsModifier=true, Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean DoNotPerformElement
      {
        get { return _DoNotPerformElement; }
        set { _DoNotPerformElement = value; OnPropertyChanged("DoNotPerformElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _DoNotPerformElement;

      /// <summary>
      /// If true, activity is prohibiting action
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? DoNotPerform
      {
        get { return DoNotPerformElement != null ? DoNotPerformElement.Value : null; }
        set
        {
          if (value == null)
            DoNotPerformElement = null;
          else
            DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("DoNotPerform");
        }
      }

      /// <summary>
      /// When activity is to occur
      /// </summary>
      [FhirElement("scheduled", Order=140, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Timing),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.FhirString))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Scheduled
      {
        get { return _Scheduled; }
        set { _Scheduled = value; OnPropertyChanged("Scheduled"); }
      }

      private Hl7.Fhir.Model.DataType _Scheduled;

      /// <summary>
      /// Where it should happen
      /// </summary>
      [FhirElement("location", Order=150)]
      [CLSCompliant(false)]
      [References("Location")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Location;

      /// <summary>
      /// Who will be responsible?
      /// </summary>
      [FhirElement("performer", Order=160)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","RelatedPerson","Patient","CareTeam","HealthcareService","Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Performer
      {
        get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.ResourceReference>(); return _Performer; }
        set { _Performer = value; OnPropertyChanged("Performer"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Performer;

      /// <summary>
      /// What is to be administered/supplied
      /// </summary>
      [FhirElement("product", Order=170, Choice=ChoiceType.DatatypeChoice)]
      [Binding("CarePlanProduct")]
      [CLSCompliant(false)]
      [References("Medication","Substance")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Product
      {
        get { return _Product; }
        set { _Product = value; OnPropertyChanged("Product"); }
      }

      private Hl7.Fhir.Model.DataType _Product;

      /// <summary>
      /// How to consume/day?
      /// </summary>
      [FhirElement("dailyAmount", Order=180)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity DailyAmount
      {
        get { return _DailyAmount; }
        set { _DailyAmount = value; OnPropertyChanged("DailyAmount"); }
      }

      private Hl7.Fhir.Model.Quantity _DailyAmount;

      /// <summary>
      /// How much to administer/supply/consume
      /// </summary>
      [FhirElement("quantity", Order=190)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Extra info describing activity to perform
      /// </summary>
      [FhirElement("description", Order=200)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Extra info describing activity to perform
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityKind>)KindElement.DeepCopy();
        if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesCanonicalElement.DeepCopy());
        if(InstantiatesUriElement != null) dest.InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(InstantiatesUriElement.DeepCopy());
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(ReasonCode != null) dest.ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(ReasonCode.DeepCopy());
        if(ReasonReference != null) dest.ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(ReasonReference.DeepCopy());
        if(Goal != null) dest.Goal = new List<Hl7.Fhir.Model.ResourceReference>(Goal.DeepCopy());
        if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.CarePlan.CarePlanActivityStatus>)StatusElement.DeepCopy();
        if(StatusReason != null) dest.StatusReason = (Hl7.Fhir.Model.CodeableConcept)StatusReason.DeepCopy();
        if(DoNotPerformElement != null) dest.DoNotPerformElement = (Hl7.Fhir.Model.FhirBoolean)DoNotPerformElement.DeepCopy();
        if(Scheduled != null) dest.Scheduled = (Hl7.Fhir.Model.DataType)Scheduled.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
        if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.ResourceReference>(Performer.DeepCopy());
        if(Product != null) dest.Product = (Hl7.Fhir.Model.DataType)Product.DeepCopy();
        if(DailyAmount != null) dest.DailyAmount = (Hl7.Fhir.Model.Quantity)DailyAmount.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
        if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
        if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(ReasonCode, otherT.ReasonCode)) return false;
        if( !DeepComparable.Matches(ReasonReference, otherT.ReasonReference)) return false;
        if( !DeepComparable.Matches(Goal, otherT.Goal)) return false;
        if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
        if( !DeepComparable.Matches(StatusReason, otherT.StatusReason)) return false;
        if( !DeepComparable.Matches(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
        if( !DeepComparable.Matches(Scheduled, otherT.Scheduled)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;
        if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
        if( !DeepComparable.Matches(Product, otherT.Product)) return false;
        if( !DeepComparable.Matches(DailyAmount, otherT.DailyAmount)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
        if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
        if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(ReasonCode, otherT.ReasonCode)) return false;
        if( !DeepComparable.IsExactly(ReasonReference, otherT.ReasonReference)) return false;
        if( !DeepComparable.IsExactly(Goal, otherT.Goal)) return false;
        if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
        if( !DeepComparable.IsExactly(StatusReason, otherT.StatusReason)) return false;
        if( !DeepComparable.IsExactly(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
        if( !DeepComparable.IsExactly(Scheduled, otherT.Scheduled)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
        if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
        if( !DeepComparable.IsExactly(Product, otherT.Product)) return false;
        if( !DeepComparable.IsExactly(DailyAmount, otherT.DailyAmount)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (KindElement != null) yield return KindElement;
          foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return elem; }
          foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return elem; }
          if (Code != null) yield return Code;
          foreach (var elem in ReasonCode) { if (elem != null) yield return elem; }
          foreach (var elem in ReasonReference) { if (elem != null) yield return elem; }
          foreach (var elem in Goal) { if (elem != null) yield return elem; }
          if (StatusElement != null) yield return StatusElement;
          if (StatusReason != null) yield return StatusReason;
          if (DoNotPerformElement != null) yield return DoNotPerformElement;
          if (Scheduled != null) yield return Scheduled;
          if (Location != null) yield return Location;
          foreach (var elem in Performer) { if (elem != null) yield return elem; }
          if (Product != null) yield return Product;
          if (DailyAmount != null) yield return DailyAmount;
          if (Quantity != null) yield return Quantity;
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (KindElement != null) yield return new ElementValue("kind", KindElement);
          foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return new ElementValue("instantiatesCanonical", elem); }
          foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return new ElementValue("instantiatesUri", elem); }
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in ReasonCode) { if (elem != null) yield return new ElementValue("reasonCode", elem); }
          foreach (var elem in ReasonReference) { if (elem != null) yield return new ElementValue("reasonReference", elem); }
          foreach (var elem in Goal) { if (elem != null) yield return new ElementValue("goal", elem); }
          if (StatusElement != null) yield return new ElementValue("status", StatusElement);
          if (StatusReason != null) yield return new ElementValue("statusReason", StatusReason);
          if (DoNotPerformElement != null) yield return new ElementValue("doNotPerform", DoNotPerformElement);
          if (Scheduled != null) yield return new ElementValue("scheduled", Scheduled);
          if (Location != null) yield return new ElementValue("location", Location);
          foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
          if (Product != null) yield return new ElementValue("product", Product);
          if (DailyAmount != null) yield return new ElementValue("dailyAmount", DailyAmount);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "kind":
            value = KindElement;
            return KindElement is not null;
          case "instantiatesCanonical":
            value = InstantiatesCanonicalElement;
            return InstantiatesCanonicalElement?.Any() == true;
          case "instantiatesUri":
            value = InstantiatesUriElement;
            return InstantiatesUriElement?.Any() == true;
          case "code":
            value = Code;
            return Code is not null;
          case "reasonCode":
            value = ReasonCode;
            return ReasonCode?.Any() == true;
          case "reasonReference":
            value = ReasonReference;
            return ReasonReference?.Any() == true;
          case "goal":
            value = Goal;
            return Goal?.Any() == true;
          case "status":
            value = StatusElement;
            return StatusElement is not null;
          case "statusReason":
            value = StatusReason;
            return StatusReason is not null;
          case "doNotPerform":
            value = DoNotPerformElement;
            return DoNotPerformElement is not null;
          case "scheduled":
            value = Scheduled;
            return Scheduled is not null;
          case "location":
            value = Location;
            return Location is not null;
          case "performer":
            value = Performer;
            return Performer?.Any() == true;
          case "product":
            value = Product;
            return Product is not null;
          case "dailyAmount":
            value = DailyAmount;
            return DailyAmount is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (KindElement is not null) yield return new KeyValuePair<string,object>("kind",KindElement);
        if (InstantiatesCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
        if (InstantiatesUriElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (ReasonCode?.Any() == true) yield return new KeyValuePair<string,object>("reasonCode",ReasonCode);
        if (ReasonReference?.Any() == true) yield return new KeyValuePair<string,object>("reasonReference",ReasonReference);
        if (Goal?.Any() == true) yield return new KeyValuePair<string,object>("goal",Goal);
        if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
        if (StatusReason is not null) yield return new KeyValuePair<string,object>("statusReason",StatusReason);
        if (DoNotPerformElement is not null) yield return new KeyValuePair<string,object>("doNotPerform",DoNotPerformElement);
        if (Scheduled is not null) yield return new KeyValuePair<string,object>("scheduled",Scheduled);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
        if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
        if (Product is not null) yield return new KeyValuePair<string,object>("product",Product);
        if (DailyAmount is not null) yield return new KeyValuePair<string,object>("dailyAmount",DailyAmount);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// External Ids for this plan
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [FhirElement("instantiatesCanonical", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> InstantiatesCanonicalElement
    {
      get { if(_InstantiatesCanonicalElement==null) _InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesCanonicalElement; }
      set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _InstantiatesCanonicalElement;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesCanonical
    {
      get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesCanonicalElement = null;
        else
          InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("InstantiatesCanonical");
      }
    }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [FhirElement("instantiatesUri", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirUri> InstantiatesUriElement
    {
      get { if(_InstantiatesUriElement==null) _InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _InstantiatesUriElement; }
      set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
    }

    private List<Hl7.Fhir.Model.FhirUri> _InstantiatesUriElement;

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesUri
    {
      get { return InstantiatesUriElement != null ? InstantiatesUriElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesUriElement = null;
        else
          InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
        OnPropertyChanged("InstantiatesUri");
      }
    }

    /// <summary>
    /// Fulfills CarePlan
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("CarePlan")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// CarePlan replaced by this CarePlan
    /// </summary>
    [FhirElement("replaces", InSummary=true, Order=130)]
    [CLSCompliant(false)]
    [References("CarePlan")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Replaces
    {
      get { if(_Replaces==null) _Replaces = new List<Hl7.Fhir.Model.ResourceReference>(); return _Replaces; }
      set { _Replaces = value; OnPropertyChanged("Replaces"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Replaces;

    /// <summary>
    /// Part of referenced CarePlan
    /// </summary>
    [FhirElement("partOf", InSummary=true, Order=140)]
    [CLSCompliant(false)]
    [References("CarePlan")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("CarePlanStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestStatus> _StatusElement;

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.RequestStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// proposal | plan | order | option
    /// </summary>
    [FhirElement("intent", InSummary=true, IsModifier=true, Order=160)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("CarePlanIntent")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.CarePlan.CarePlanIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.CarePlan.CarePlanIntent> _IntentElement;

    /// <summary>
    /// proposal | plan | order | option
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.CarePlan.CarePlanIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.CarePlan.CarePlanIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// Type of plan
    /// </summary>
    [FhirElement("category", InSummary=true, Order=170, FiveWs="FiveWs.class")]
    [Binding("CarePlanCategory")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Human-friendly name for the care plan
    /// </summary>
    [FhirElement("title", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Human-friendly name for the care plan
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Summary of nature of plan
    /// </summary>
    [FhirElement("description", InSummary=true, Order=190, FiveWs="FiveWs.what[x]")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Summary of nature of plan
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Who the care plan is for
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=200, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Encounter created as part of
    /// </summary>
    [FhirElement("encounter", InSummary=true, Order=210, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// Time period plan covers
    /// </summary>
    [FhirElement("period", InSummary=true, Order=220, FiveWs="FiveWs.planned")]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// Date record was first recorded
    /// </summary>
    [FhirElement("created", InSummary=true, Order=230, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CreatedElement
    {
      get { return _CreatedElement; }
      set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

    /// <summary>
    /// Date record was first recorded
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Created
    {
      get { return CreatedElement != null ? CreatedElement.Value : null; }
      set
      {
        if (value == null)
          CreatedElement = null;
        else
          CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Created");
      }
    }

    /// <summary>
    /// Who is the designated responsible party
    /// </summary>
    [FhirElement("author", InSummary=true, Order=240, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Patient","Practitioner","PractitionerRole","Device","RelatedPerson","Organization","CareTeam")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Author
    {
      get { return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Author;

    /// <summary>
    /// Who provided the content of the care plan
    /// </summary>
    [FhirElement("contributor", Order=250)]
    [CLSCompliant(false)]
    [References("Patient","Practitioner","PractitionerRole","Device","RelatedPerson","Organization","CareTeam")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Contributor
    {
      get { if(_Contributor==null) _Contributor = new List<Hl7.Fhir.Model.ResourceReference>(); return _Contributor; }
      set { _Contributor = value; OnPropertyChanged("Contributor"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Contributor;

    /// <summary>
    /// Who's involved in plan?
    /// </summary>
    [FhirElement("careTeam", Order=260, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("CareTeam")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> CareTeam
    {
      get { if(_CareTeam==null) _CareTeam = new List<Hl7.Fhir.Model.ResourceReference>(); return _CareTeam; }
      set { _CareTeam = value; OnPropertyChanged("CareTeam"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _CareTeam;

    /// <summary>
    /// Health issues this plan addresses
    /// </summary>
    [FhirElement("addresses", InSummary=true, Order=270, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Condition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Addresses
    {
      get { if(_Addresses==null) _Addresses = new List<Hl7.Fhir.Model.ResourceReference>(); return _Addresses; }
      set { _Addresses = value; OnPropertyChanged("Addresses"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Addresses;

    /// <summary>
    /// Information considered as part of plan
    /// </summary>
    [FhirElement("supportingInfo", Order=280)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInfo
    {
      get { if(_SupportingInfo==null) _SupportingInfo = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInfo; }
      set { _SupportingInfo = value; OnPropertyChanged("SupportingInfo"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInfo;

    /// <summary>
    /// Desired outcome of plan
    /// </summary>
    [FhirElement("goal", Order=290)]
    [CLSCompliant(false)]
    [References("Goal")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Goal
    {
      get { if(_Goal==null) _Goal = new List<Hl7.Fhir.Model.ResourceReference>(); return _Goal; }
      set { _Goal = value; OnPropertyChanged("Goal"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Goal;

    /// <summary>
    /// Action to occur as part of plan
    /// </summary>
    [FhirElement("activity", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CarePlan.ActivityComponent> Activity
    {
      get { if(_Activity==null) _Activity = new List<Hl7.Fhir.Model.CarePlan.ActivityComponent>(); return _Activity; }
      set { _Activity = value; OnPropertyChanged("Activity"); }
    }

    private List<Hl7.Fhir.Model.CarePlan.ActivityComponent> _Activity;

    /// <summary>
    /// Comments about the plan
    /// </summary>
    [FhirElement("note", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    List<Hl7.Fhir.Model.CodeableConcept> ICoded<List<Hl7.Fhir.Model.CodeableConcept>>.Code { get => Category; set => Category = value; }
    IEnumerable<Coding> ICoded.ToCodings() => Category.ToCodings();

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as CarePlan;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesCanonicalElement.DeepCopy());
      if(InstantiatesUriElement != null) dest.InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(InstantiatesUriElement.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Replaces != null) dest.Replaces = new List<Hl7.Fhir.Model.ResourceReference>(Replaces.DeepCopy());
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.RequestStatus>)StatusElement.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.CarePlan.CarePlanIntent>)IntentElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
      if(Author != null) dest.Author = (Hl7.Fhir.Model.ResourceReference)Author.DeepCopy();
      if(Contributor != null) dest.Contributor = new List<Hl7.Fhir.Model.ResourceReference>(Contributor.DeepCopy());
      if(CareTeam != null) dest.CareTeam = new List<Hl7.Fhir.Model.ResourceReference>(CareTeam.DeepCopy());
      if(Addresses != null) dest.Addresses = new List<Hl7.Fhir.Model.ResourceReference>(Addresses.DeepCopy());
      if(SupportingInfo != null) dest.SupportingInfo = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInfo.DeepCopy());
      if(Goal != null) dest.Goal = new List<Hl7.Fhir.Model.ResourceReference>(Goal.DeepCopy());
      if(Activity != null) dest.Activity = new List<Hl7.Fhir.Model.CarePlan.ActivityComponent>(Activity.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new CarePlan());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as CarePlan;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Contributor, otherT.Contributor)) return false;
      if( !DeepComparable.Matches(CareTeam, otherT.CareTeam)) return false;
      if( !DeepComparable.Matches(Addresses, otherT.Addresses)) return false;
      if( !DeepComparable.Matches(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.Matches(Goal, otherT.Goal)) return false;
      if( !DeepComparable.Matches(Activity, otherT.Activity)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as CarePlan;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Contributor, otherT.Contributor)) return false;
      if( !DeepComparable.IsExactly(CareTeam, otherT.CareTeam)) return false;
      if( !DeepComparable.IsExactly(Addresses, otherT.Addresses)) return false;
      if( !DeepComparable.IsExactly(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.IsExactly(Goal, otherT.Goal)) return false;
      if( !DeepComparable.IsExactly(Activity, otherT.Activity)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        foreach (var elem in Replaces) { if (elem != null) yield return elem; }
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (IntentElement != null) yield return IntentElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (TitleElement != null) yield return TitleElement;
        if (DescriptionElement != null) yield return DescriptionElement;
        if (Subject != null) yield return Subject;
        if (Encounter != null) yield return Encounter;
        if (Period != null) yield return Period;
        if (CreatedElement != null) yield return CreatedElement;
        if (Author != null) yield return Author;
        foreach (var elem in Contributor) { if (elem != null) yield return elem; }
        foreach (var elem in CareTeam) { if (elem != null) yield return elem; }
        foreach (var elem in Addresses) { if (elem != null) yield return elem; }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return elem; }
        foreach (var elem in Goal) { if (elem != null) yield return elem; }
        foreach (var elem in Activity) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return new ElementValue("instantiatesCanonical", elem); }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return new ElementValue("instantiatesUri", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        foreach (var elem in Replaces) { if (elem != null) yield return new ElementValue("replaces", elem); }
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (Period != null) yield return new ElementValue("period", Period);
        if (CreatedElement != null) yield return new ElementValue("created", CreatedElement);
        if (Author != null) yield return new ElementValue("author", Author);
        foreach (var elem in Contributor) { if (elem != null) yield return new ElementValue("contributor", elem); }
        foreach (var elem in CareTeam) { if (elem != null) yield return new ElementValue("careTeam", elem); }
        foreach (var elem in Addresses) { if (elem != null) yield return new ElementValue("addresses", elem); }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return new ElementValue("supportingInfo", elem); }
        foreach (var elem in Goal) { if (elem != null) yield return new ElementValue("goal", elem); }
        foreach (var elem in Activity) { if (elem != null) yield return new ElementValue("activity", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "instantiatesCanonical":
          value = InstantiatesCanonicalElement;
          return InstantiatesCanonicalElement?.Any() == true;
        case "instantiatesUri":
          value = InstantiatesUriElement;
          return InstantiatesUriElement?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "replaces":
          value = Replaces;
          return Replaces?.Any() == true;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "period":
          value = Period;
          return Period is not null;
        case "created":
          value = CreatedElement;
          return CreatedElement is not null;
        case "author":
          value = Author;
          return Author is not null;
        case "contributor":
          value = Contributor;
          return Contributor?.Any() == true;
        case "careTeam":
          value = CareTeam;
          return CareTeam?.Any() == true;
        case "addresses":
          value = Addresses;
          return Addresses?.Any() == true;
        case "supportingInfo":
          value = SupportingInfo;
          return SupportingInfo?.Any() == true;
        case "goal":
          value = Goal;
          return Goal?.Any() == true;
        case "activity":
          value = Activity;
          return Activity?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (InstantiatesCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
      if (InstantiatesUriElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (Replaces?.Any() == true) yield return new KeyValuePair<string,object>("replaces",Replaces);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (CreatedElement is not null) yield return new KeyValuePair<string,object>("created",CreatedElement);
      if (Author is not null) yield return new KeyValuePair<string,object>("author",Author);
      if (Contributor?.Any() == true) yield return new KeyValuePair<string,object>("contributor",Contributor);
      if (CareTeam?.Any() == true) yield return new KeyValuePair<string,object>("careTeam",CareTeam);
      if (Addresses?.Any() == true) yield return new KeyValuePair<string,object>("addresses",Addresses);
      if (SupportingInfo?.Any() == true) yield return new KeyValuePair<string,object>("supportingInfo",SupportingInfo);
      if (Goal?.Any() == true) yield return new KeyValuePair<string,object>("goal",Goal);
      if (Activity?.Any() == true) yield return new KeyValuePair<string,object>("activity",Activity);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
    }

  }

}

// end of file

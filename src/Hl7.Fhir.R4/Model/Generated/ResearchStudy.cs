// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Investigation to increase healthcare-related patient-independent knowledge
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ResearchStudy","http://hl7.org/fhir/StructureDefinition/ResearchStudy", IsResource=true)]
  public partial class ResearchStudy : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ResearchStudy"; } }

    /// <summary>
    /// Codes that convey the current status of the research study.
    /// (url: http://hl7.org/fhir/ValueSet/research-study-status)
    /// (system: http://hl7.org/fhir/research-study-status)
    /// </summary>
    [FhirEnumeration("ResearchStudyStatus", "http://hl7.org/fhir/ValueSet/research-study-status", "http://hl7.org/fhir/research-study-status")]
    public enum ResearchStudyStatus
    {
      /// <summary>
      /// Study is opened for accrual.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("active"), Description("Active")]
      Active,
      /// <summary>
      /// Study is completed prematurely and will not resume; patients are no longer examined nor treated.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("administratively-completed"), Description("Administratively Completed")]
      AdministrativelyCompleted,
      /// <summary>
      /// Protocol is approved by the review board.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("approved"), Description("Approved")]
      Approved,
      /// <summary>
      /// Study is closed for accrual; patients can be examined and treated.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("closed-to-accrual"), Description("Closed to Accrual")]
      ClosedToAccrual,
      /// <summary>
      /// Study is closed to accrual and intervention, i.e. the study is closed to enrollment, all study subjects have completed treatment or intervention but are still being followed according to the primary objective of the study.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("closed-to-accrual-and-intervention"), Description("Closed to Accrual and Intervention")]
      ClosedToAccrualAndIntervention,
      /// <summary>
      /// Study is closed to accrual and intervention, i.e. the study is closed to enrollment, all study subjects have completed treatment
      /// or intervention but are still being followed according to the primary objective of the study.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("completed"), Description("Completed")]
      Completed,
      /// <summary>
      /// Protocol was disapproved by the review board.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("disapproved"), Description("Disapproved")]
      Disapproved,
      /// <summary>
      /// Protocol is submitted to the review board for approval.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("in-review"), Description("In Review")]
      InReview,
      /// <summary>
      /// Study is temporarily closed for accrual; can be potentially resumed in the future; patients can be examined and treated.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("temporarily-closed-to-accrual"), Description("Temporarily Closed to Accrual")]
      TemporarilyClosedToAccrual,
      /// <summary>
      /// Study is temporarily closed for accrual and intervention and potentially can be resumed in the future.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("temporarily-closed-to-accrual-and-intervention"), Description("Temporarily Closed to Accrual and Intervention")]
      TemporarilyClosedToAccrualAndIntervention,
      /// <summary>
      /// Protocol was withdrawn by the lead organization.
      /// (system: http://hl7.org/fhir/research-study-status)
      /// </summary>
      [EnumLiteral("withdrawn"), Description("Withdrawn")]
      Withdrawn,
    }

    /// <summary>
    /// Defined path through the study for a subject
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#Arm", IsNestedType=true)]
    [BackboneType("ResearchStudy.arm")]
    public partial class ArmComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#Arm"; } }

      /// <summary>
      /// Label for study arm
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Label for study arm
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Categorization of study arm
      /// </summary>
      [FhirElement("type", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Short explanation of study path
      /// </summary>
      [FhirElement("description", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Short explanation of study path
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ArmComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ArmComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ArmComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ArmComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (Type != null) yield return Type;
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Type != null) yield return new ElementValue("type", Type);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// A goal for the study
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ResearchStudy#Objective", IsNestedType=true)]
    [BackboneType("ResearchStudy.objective")]
    public partial class ObjectiveComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ResearchStudy#Objective"; } }

      /// <summary>
      /// Label for the objective
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Label for the objective
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// primary | secondary | exploratory
      /// </summary>
      [FhirElement("type", Order=50)]
      [Binding("ResearchStudyObjectiveType")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ObjectiveComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ObjectiveComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ObjectiveComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ObjectiveComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (Type != null) yield return Type;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (Type != null) yield return new ElementValue("type", Type);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      }

    }

    /// <summary>
    /// Business Identifier for study
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Name for this study
    /// </summary>
    [FhirElement("title", InSummary=true, Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this study
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Steps followed in executing study
    /// </summary>
    [FhirElement("protocol", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("PlanDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Protocol
    {
      get { if(_Protocol==null) _Protocol = new List<Hl7.Fhir.Model.ResourceReference>(); return _Protocol; }
      set { _Protocol = value; OnPropertyChanged("Protocol"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Protocol;

    /// <summary>
    /// Part of larger study
    /// </summary>
    [FhirElement("partOf", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("ResearchStudy")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=130, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ResearchStudyStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus> _StatusElement;

    /// <summary>
    /// active | administratively-completed | approved | closed-to-accrual | closed-to-accrual-and-intervention | completed | disapproved | in-review | temporarily-closed-to-accrual | temporarily-closed-to-accrual-and-intervention | withdrawn
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// treatment | prevention | diagnostic | supportive-care | screening | health-services-research | basic-science | device-feasibility
    /// </summary>
    [FhirElement("primaryPurposeType", InSummary=true, Order=140)]
    [Binding("ResearchStudyPrimaryPurposeType")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept PrimaryPurposeType
    {
      get { return _PrimaryPurposeType; }
      set { _PrimaryPurposeType = value; OnPropertyChanged("PrimaryPurposeType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _PrimaryPurposeType;

    /// <summary>
    /// n-a | early-phase-1 | phase-1 | phase-1-phase-2 | phase-2 | phase-2-phase-3 | phase-3 | phase-4
    /// </summary>
    [FhirElement("phase", InSummary=true, Order=150)]
    [Binding("ResearchStudyPhase")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Phase
    {
      get { return _Phase; }
      set { _Phase = value; OnPropertyChanged("Phase"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Phase;

    /// <summary>
    /// Classifications for the study
    /// </summary>
    [FhirElement("category", InSummary=true, Order=160)]
    [Binding("ResearchStudyCategory")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// Drugs, devices, etc. under study
    /// </summary>
    [FhirElement("focus", InSummary=true, Order=170, FiveWs="FiveWs.what[x]")]
    [Binding("ResearchStudyFocus")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Focus
    {
      get { if(_Focus==null) _Focus = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Focus; }
      set { _Focus = value; OnPropertyChanged("Focus"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Focus;

    /// <summary>
    /// Condition being studied
    /// </summary>
    [FhirElement("condition", InSummary=true, Order=180, FiveWs="FiveWs.what[x]")]
    [Binding("ConditionCode")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Condition
    {
      get { if(_Condition==null) _Condition = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Condition; }
      set { _Condition = value; OnPropertyChanged("Condition"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Condition;

    /// <summary>
    /// Contact details for the study
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// References and dependencies
    /// </summary>
    [FhirElement("relatedArtifact", Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Used to search for the study
    /// </summary>
    [FhirElement("keyword", InSummary=true, Order=210)]
    [Binding("ResearchStudyKeyword")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Keyword
    {
      get { if(_Keyword==null) _Keyword = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Keyword; }
      set { _Keyword = value; OnPropertyChanged("Keyword"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Keyword;

    /// <summary>
    /// Geographic region(s) for study
    /// </summary>
    [FhirElement("location", InSummary=true, Order=220)]
    [Binding("Jurisdiction")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Location
    {
      get { if(_Location==null) _Location = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Location;

    /// <summary>
    /// What this is study doing
    /// </summary>
    [FhirElement("description", Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// What this is study doing
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Inclusion &amp; exclusion criteria
    /// </summary>
    [FhirElement("enrollment", InSummary=true, Order=240, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Group")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Enrollment
    {
      get { if(_Enrollment==null) _Enrollment = new List<Hl7.Fhir.Model.ResourceReference>(); return _Enrollment; }
      set { _Enrollment = value; OnPropertyChanged("Enrollment"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Enrollment;

    /// <summary>
    /// When the study began and ended
    /// </summary>
    [FhirElement("period", InSummary=true, Order=250, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Period Period
    {
      get { return _Period; }
      set { _Period = value; OnPropertyChanged("Period"); }
    }

    private Hl7.Fhir.Model.Period _Period;

    /// <summary>
    /// Organization that initiates and is legally responsible for the study
    /// </summary>
    [FhirElement("sponsor", InSummary=true, Order=260, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Sponsor
    {
      get { return _Sponsor; }
      set { _Sponsor = value; OnPropertyChanged("Sponsor"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Sponsor;

    /// <summary>
    /// Researcher who oversees multiple aspects of the study
    /// </summary>
    [FhirElement("principalInvestigator", InSummary=true, Order=270, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference PrincipalInvestigator
    {
      get { return _PrincipalInvestigator; }
      set { _PrincipalInvestigator = value; OnPropertyChanged("PrincipalInvestigator"); }
    }

    private Hl7.Fhir.Model.ResourceReference _PrincipalInvestigator;

    /// <summary>
    /// Facility where study activities are conducted
    /// </summary>
    [FhirElement("site", InSummary=true, Order=280, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Site
    {
      get { if(_Site==null) _Site = new List<Hl7.Fhir.Model.ResourceReference>(); return _Site; }
      set { _Site = value; OnPropertyChanged("Site"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Site;

    /// <summary>
    /// accrual-goal-met | closed-due-to-toxicity | closed-due-to-lack-of-study-progress | temporarily-closed-per-study-design
    /// </summary>
    [FhirElement("reasonStopped", InSummary=true, Order=290, FiveWs="FiveWs.why[x]")]
    [Binding("ResearchStudyReasonStopped")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept ReasonStopped
    {
      get { return _ReasonStopped; }
      set { _ReasonStopped = value; OnPropertyChanged("ReasonStopped"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _ReasonStopped;

    /// <summary>
    /// Comments made about the study
    /// </summary>
    [FhirElement("note", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Defined path through the study for a subject
    /// </summary>
    [FhirElement("arm", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.ArmComponent> Arm
    {
      get { if(_Arm==null) _Arm = new List<Hl7.Fhir.Model.ResearchStudy.ArmComponent>(); return _Arm; }
      set { _Arm = value; OnPropertyChanged("Arm"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.ArmComponent> _Arm;

    /// <summary>
    /// A goal for the study
    /// </summary>
    [FhirElement("objective", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent> Objective
    {
      get { if(_Objective==null) _Objective = new List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent>(); return _Objective; }
      set { _Objective = value; OnPropertyChanged("Objective"); }
    }

    private List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent> _Objective;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ResearchStudy;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(Protocol != null) dest.Protocol = new List<Hl7.Fhir.Model.ResourceReference>(Protocol.DeepCopy());
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.ResearchStudy.ResearchStudyStatus>)StatusElement.DeepCopy();
      if(PrimaryPurposeType != null) dest.PrimaryPurposeType = (Hl7.Fhir.Model.CodeableConcept)PrimaryPurposeType.DeepCopy();
      if(Phase != null) dest.Phase = (Hl7.Fhir.Model.CodeableConcept)Phase.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(Focus != null) dest.Focus = new List<Hl7.Fhir.Model.CodeableConcept>(Focus.DeepCopy());
      if(Condition != null) dest.Condition = new List<Hl7.Fhir.Model.CodeableConcept>(Condition.DeepCopy());
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(Keyword != null) dest.Keyword = new List<Hl7.Fhir.Model.CodeableConcept>(Keyword.DeepCopy());
      if(Location != null) dest.Location = new List<Hl7.Fhir.Model.CodeableConcept>(Location.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(Enrollment != null) dest.Enrollment = new List<Hl7.Fhir.Model.ResourceReference>(Enrollment.DeepCopy());
      if(Period != null) dest.Period = (Hl7.Fhir.Model.Period)Period.DeepCopy();
      if(Sponsor != null) dest.Sponsor = (Hl7.Fhir.Model.ResourceReference)Sponsor.DeepCopy();
      if(PrincipalInvestigator != null) dest.PrincipalInvestigator = (Hl7.Fhir.Model.ResourceReference)PrincipalInvestigator.DeepCopy();
      if(Site != null) dest.Site = new List<Hl7.Fhir.Model.ResourceReference>(Site.DeepCopy());
      if(ReasonStopped != null) dest.ReasonStopped = (Hl7.Fhir.Model.CodeableConcept)ReasonStopped.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Arm != null) dest.Arm = new List<Hl7.Fhir.Model.ResearchStudy.ArmComponent>(Arm.DeepCopy());
      if(Objective != null) dest.Objective = new List<Hl7.Fhir.Model.ResearchStudy.ObjectiveComponent>(Objective.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ResearchStudy());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ResearchStudy;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(Protocol, otherT.Protocol)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(PrimaryPurposeType, otherT.PrimaryPurposeType)) return false;
      if( !DeepComparable.Matches(Phase, otherT.Phase)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Focus, otherT.Focus)) return false;
      if( !DeepComparable.Matches(Condition, otherT.Condition)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(Keyword, otherT.Keyword)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(Enrollment, otherT.Enrollment)) return false;
      if( !DeepComparable.Matches(Period, otherT.Period)) return false;
      if( !DeepComparable.Matches(Sponsor, otherT.Sponsor)) return false;
      if( !DeepComparable.Matches(PrincipalInvestigator, otherT.PrincipalInvestigator)) return false;
      if( !DeepComparable.Matches(Site, otherT.Site)) return false;
      if( !DeepComparable.Matches(ReasonStopped, otherT.ReasonStopped)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Arm, otherT.Arm)) return false;
      if( !DeepComparable.Matches(Objective, otherT.Objective)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ResearchStudy;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(Protocol, otherT.Protocol)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(PrimaryPurposeType, otherT.PrimaryPurposeType)) return false;
      if( !DeepComparable.IsExactly(Phase, otherT.Phase)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Focus, otherT.Focus)) return false;
      if( !DeepComparable.IsExactly(Condition, otherT.Condition)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(Keyword, otherT.Keyword)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(Enrollment, otherT.Enrollment)) return false;
      if( !DeepComparable.IsExactly(Period, otherT.Period)) return false;
      if( !DeepComparable.IsExactly(Sponsor, otherT.Sponsor)) return false;
      if( !DeepComparable.IsExactly(PrincipalInvestigator, otherT.PrincipalInvestigator)) return false;
      if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
      if( !DeepComparable.IsExactly(ReasonStopped, otherT.ReasonStopped)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Arm, otherT.Arm)) return false;
      if( !DeepComparable.IsExactly(Objective, otherT.Objective)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (TitleElement != null) yield return TitleElement;
        foreach (var elem in Protocol) { if (elem != null) yield return elem; }
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (PrimaryPurposeType != null) yield return PrimaryPurposeType;
        if (Phase != null) yield return Phase;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        foreach (var elem in Focus) { if (elem != null) yield return elem; }
        foreach (var elem in Condition) { if (elem != null) yield return elem; }
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        foreach (var elem in Keyword) { if (elem != null) yield return elem; }
        foreach (var elem in Location) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in Enrollment) { if (elem != null) yield return elem; }
        if (Period != null) yield return Period;
        if (Sponsor != null) yield return Sponsor;
        if (PrincipalInvestigator != null) yield return PrincipalInvestigator;
        foreach (var elem in Site) { if (elem != null) yield return elem; }
        if (ReasonStopped != null) yield return ReasonStopped;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Arm) { if (elem != null) yield return elem; }
        foreach (var elem in Objective) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        foreach (var elem in Protocol) { if (elem != null) yield return new ElementValue("protocol", elem); }
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (PrimaryPurposeType != null) yield return new ElementValue("primaryPurposeType", PrimaryPurposeType);
        if (Phase != null) yield return new ElementValue("phase", Phase);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        foreach (var elem in Focus) { if (elem != null) yield return new ElementValue("focus", elem); }
        foreach (var elem in Condition) { if (elem != null) yield return new ElementValue("condition", elem); }
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        foreach (var elem in Keyword) { if (elem != null) yield return new ElementValue("keyword", elem); }
        foreach (var elem in Location) { if (elem != null) yield return new ElementValue("location", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in Enrollment) { if (elem != null) yield return new ElementValue("enrollment", elem); }
        if (Period != null) yield return new ElementValue("period", Period);
        if (Sponsor != null) yield return new ElementValue("sponsor", Sponsor);
        if (PrincipalInvestigator != null) yield return new ElementValue("principalInvestigator", PrincipalInvestigator);
        foreach (var elem in Site) { if (elem != null) yield return new ElementValue("site", elem); }
        if (ReasonStopped != null) yield return new ElementValue("reasonStopped", ReasonStopped);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Arm) { if (elem != null) yield return new ElementValue("arm", elem); }
        foreach (var elem in Objective) { if (elem != null) yield return new ElementValue("objective", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "protocol":
          value = Protocol;
          return Protocol?.Any() == true;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "primaryPurposeType":
          value = PrimaryPurposeType;
          return PrimaryPurposeType is not null;
        case "phase":
          value = Phase;
          return Phase is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "focus":
          value = Focus;
          return Focus?.Any() == true;
        case "condition":
          value = Condition;
          return Condition?.Any() == true;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "relatedArtifact":
          value = RelatedArtifact;
          return RelatedArtifact?.Any() == true;
        case "keyword":
          value = Keyword;
          return Keyword?.Any() == true;
        case "location":
          value = Location;
          return Location?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "enrollment":
          value = Enrollment;
          return Enrollment?.Any() == true;
        case "period":
          value = Period;
          return Period is not null;
        case "sponsor":
          value = Sponsor;
          return Sponsor is not null;
        case "principalInvestigator":
          value = PrincipalInvestigator;
          return PrincipalInvestigator is not null;
        case "site":
          value = Site;
          return Site?.Any() == true;
        case "reasonStopped":
          value = ReasonStopped;
          return ReasonStopped is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "arm":
          value = Arm;
          return Arm?.Any() == true;
        case "objective":
          value = Objective;
          return Objective?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (Protocol?.Any() == true) yield return new KeyValuePair<string,object>("protocol",Protocol);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (PrimaryPurposeType is not null) yield return new KeyValuePair<string,object>("primaryPurposeType",PrimaryPurposeType);
      if (Phase is not null) yield return new KeyValuePair<string,object>("phase",Phase);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (Focus?.Any() == true) yield return new KeyValuePair<string,object>("focus",Focus);
      if (Condition?.Any() == true) yield return new KeyValuePair<string,object>("condition",Condition);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
      if (Keyword?.Any() == true) yield return new KeyValuePair<string,object>("keyword",Keyword);
      if (Location?.Any() == true) yield return new KeyValuePair<string,object>("location",Location);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (Enrollment?.Any() == true) yield return new KeyValuePair<string,object>("enrollment",Enrollment);
      if (Period is not null) yield return new KeyValuePair<string,object>("period",Period);
      if (Sponsor is not null) yield return new KeyValuePair<string,object>("sponsor",Sponsor);
      if (PrincipalInvestigator is not null) yield return new KeyValuePair<string,object>("principalInvestigator",PrincipalInvestigator);
      if (Site?.Any() == true) yield return new KeyValuePair<string,object>("site",Site);
      if (ReasonStopped is not null) yield return new KeyValuePair<string,object>("reasonStopped",ReasonStopped);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Arm?.Any() == true) yield return new KeyValuePair<string,object>("arm",Arm);
      if (Objective?.Any() == true) yield return new KeyValuePair<string,object>("objective",Objective);
    }

  }

}

// end of file

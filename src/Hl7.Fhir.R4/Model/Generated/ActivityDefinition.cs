// <auto-generated/>
// Contents of: hl7.fhir.r4.core version: 4.0.1

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// The definition of a specific activity to be taken, independent of any particular patient or context
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ActivityDefinition","http://hl7.org/fhir/StructureDefinition/ActivityDefinition", IsResource=true)]
  public partial class ActivityDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ActivityDefinition"; } }

    /// <summary>
    /// A list of all the request resource types defined in this version of the FHIR specification.
    /// (url: http://hl7.org/fhir/ValueSet/request-resource-types)
    /// (system: http://hl7.org/fhir/request-resource-types)
    /// </summary>
    [FhirEnumeration("RequestResourceType", "http://hl7.org/fhir/ValueSet/request-resource-types")]
    public enum RequestResourceType
    {
      /// <summary>
      /// A booking of a healthcare event among patient(s), practitioner(s), related person(s) and/or device(s) for a specific date/time. This may result in one or more Encounter(s).
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("Appointment", "http://hl7.org/fhir/request-resource-types"), Description("Appointment")]
      Appointment,
      /// <summary>
      /// A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("AppointmentResponse", "http://hl7.org/fhir/request-resource-types"), Description("AppointmentResponse")]
      AppointmentResponse,
      /// <summary>
      /// Healthcare plan for patient or group.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("CarePlan", "http://hl7.org/fhir/request-resource-types"), Description("CarePlan")]
      CarePlan,
      /// <summary>
      /// Claim, Pre-determination or Pre-authorization.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("Claim", "http://hl7.org/fhir/request-resource-types"), Description("Claim")]
      Claim,
      /// <summary>
      /// A request for information to be sent to a receiver.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("CommunicationRequest", "http://hl7.org/fhir/request-resource-types"), Description("CommunicationRequest")]
      CommunicationRequest,
      /// <summary>
      /// Legal Agreement.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("Contract", "http://hl7.org/fhir/request-resource-types"), Description("Contract")]
      Contract,
      /// <summary>
      /// Medical device request.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("DeviceRequest", "http://hl7.org/fhir/request-resource-types"), Description("DeviceRequest")]
      DeviceRequest,
      /// <summary>
      /// Enrollment request.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("EnrollmentRequest", "http://hl7.org/fhir/request-resource-types"), Description("EnrollmentRequest")]
      EnrollmentRequest,
      /// <summary>
      /// Guidance or advice relating to an immunization.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("ImmunizationRecommendation", "http://hl7.org/fhir/request-resource-types"), Description("ImmunizationRecommendation")]
      ImmunizationRecommendation,
      /// <summary>
      /// Ordering of medication for patient or group.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("MedicationRequest", "http://hl7.org/fhir/request-resource-types"), Description("MedicationRequest")]
      MedicationRequest,
      /// <summary>
      /// Diet, formula or nutritional supplement request.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("NutritionOrder", "http://hl7.org/fhir/request-resource-types"), Description("NutritionOrder")]
      NutritionOrder,
      /// <summary>
      /// A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("ServiceRequest", "http://hl7.org/fhir/request-resource-types"), Description("ServiceRequest")]
      ServiceRequest,
      /// <summary>
      /// Request for a medication, substance or device.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("SupplyRequest", "http://hl7.org/fhir/request-resource-types"), Description("SupplyRequest")]
      SupplyRequest,
      /// <summary>
      /// A task to be performed.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("Task", "http://hl7.org/fhir/request-resource-types"), Description("Task")]
      Task,
      /// <summary>
      /// Prescription for vision correction products for a patient.
      /// (system: http://hl7.org/fhir/request-resource-types)
      /// </summary>
      [EnumLiteral("VisionPrescription", "http://hl7.org/fhir/request-resource-types"), Description("VisionPrescription")]
      VisionPrescription,
    }

    /// <summary>
    /// Who should participate in the action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ActivityDefinition#Participant", IsNestedType=true)]
    [BackboneType("ActivityDefinition.participant")]
    public partial class ParticipantComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ActivityDefinition#Participant"; } }

      /// <summary>
      /// patient | practitioner | related-person | device
      /// </summary>
      [FhirElement("type", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActivityParticipantType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionParticipantType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionParticipantType> _TypeElement;

      /// <summary>
      /// patient | practitioner | related-person | device
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionParticipantType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.ActionParticipantType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// E.g. Nurse, Surgeon, Parent, etc.
      /// </summary>
      [FhirElement("role", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParticipantComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.ActionParticipantType>)TypeElement.DeepCopy();
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParticipantComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParticipantComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TypeElement != null) yield return TypeElement;
          if (Role != null) yield return Role;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (Role != null) yield return new ElementValue("role", Role);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "role":
            value = Role;
            return Role is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
      }

    }

    /// <summary>
    /// Dynamic aspects of the definition
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("ActivityDefinition#DynamicValue", IsNestedType=true)]
    [BackboneType("ActivityDefinition.dynamicValue")]
    public partial class DynamicValueComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "ActivityDefinition#DynamicValue"; } }

      /// <summary>
      /// The path to the element to be set dynamically
      /// </summary>
      [FhirElement("path", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PathElement
      {
        get { return _PathElement; }
        set { _PathElement = value; OnPropertyChanged("PathElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PathElement;

      /// <summary>
      /// The path to the element to be set dynamically
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Path
      {
        get { return PathElement != null ? PathElement.Value : null; }
        set
        {
          if (value == null)
            PathElement = null;
          else
            PathElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Path");
        }
      }

      /// <summary>
      /// An expression that provides the dynamic value for the customization
      /// </summary>
      [FhirElement("expression", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Expression Expression
      {
        get { return _Expression; }
        set { _Expression = value; OnPropertyChanged("Expression"); }
      }

      private Hl7.Fhir.Model.Expression _Expression;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DynamicValueComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PathElement != null) dest.PathElement = (Hl7.Fhir.Model.FhirString)PathElement.DeepCopy();
        if(Expression != null) dest.Expression = (Hl7.Fhir.Model.Expression)Expression.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DynamicValueComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DynamicValueComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.Matches(Expression, otherT.Expression)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DynamicValueComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.IsExactly(Expression, otherT.Expression)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PathElement != null) yield return PathElement;
          if (Expression != null) yield return Expression;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PathElement != null) yield return new ElementValue("path", PathElement);
          if (Expression != null) yield return new ElementValue("expression", Expression);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "path":
            value = PathElement;
            return PathElement is not null;
          case "expression":
            value = Expression;
            return Expression is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (PathElement is not null) yield return new KeyValuePair<string,object>("path",PathElement);
        if (Expression is not null) yield return new KeyValuePair<string,object>("expression",Expression);
      }

    }

    /// <summary>
    /// Canonical identifier for this activity definition, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this activity definition, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the activity definition
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of the activity definition
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the activity definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this activity definition (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this activity definition (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this activity definition (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this activity definition (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Subordinate title of the activity definition
    /// </summary>
    [FhirElement("subtitle", Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString SubtitleElement
    {
      get { return _SubtitleElement; }
      set { _SubtitleElement = value; OnPropertyChanged("SubtitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _SubtitleElement;

    /// <summary>
    /// Subordinate title of the activity definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Subtitle
    {
      get { return SubtitleElement != null ? SubtitleElement.Value : null; }
      set
      {
        if (value == null)
          SubtitleElement = null;
        else
          SubtitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Subtitle");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=160, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Type of individual the activity definition is intended for
    /// </summary>
    [FhirElement("subject", Order=170, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Group")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.DataType _Subject;

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=180, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=190, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the activity definition
    /// </summary>
    [FhirElement("description", InSummary=true, Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the activity definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for activity definition (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this activity definition is defined
    /// </summary>
    [FhirElement("purpose", Order=240, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this activity definition is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Describes the clinical usage of the activity definition
    /// </summary>
    [FhirElement("usage", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString UsageElement
    {
      get { return _UsageElement; }
      set { _UsageElement = value; OnPropertyChanged("UsageElement"); }
    }

    private Hl7.Fhir.Model.FhirString _UsageElement;

    /// <summary>
    /// Describes the clinical usage of the activity definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Usage
    {
      get { return UsageElement != null ? UsageElement.Value : null; }
      set
      {
        if (value == null)
          UsageElement = null;
        else
          UsageElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Usage");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// When the activity definition was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When the activity definition was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// When the activity definition was last reviewed
    /// </summary>
    [FhirElement("lastReviewDate", Order=280)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// When the activity definition was last reviewed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// When the activity definition is expected to be used
    /// </summary>
    [FhirElement("effectivePeriod", InSummary=true, Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.Period EffectivePeriod
    {
      get { return _EffectivePeriod; }
      set { _EffectivePeriod = value; OnPropertyChanged("EffectivePeriod"); }
    }

    private Hl7.Fhir.Model.Period _EffectivePeriod;

    /// <summary>
    /// E.g. Education, Treatment, Assessment, etc.
    /// </summary>
    [FhirElement("topic", Order=300)]
    [CqlElement(IsPrimaryCodePath=true)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Topic
    {
      get { if(_Topic==null) _Topic = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Topic; }
      set { _Topic = value; OnPropertyChanged("Topic"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Topic;

    /// <summary>
    /// Who authored the content
    /// </summary>
    [FhirElement("author", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ContactDetail>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Author;

    /// <summary>
    /// Who edited the content
    /// </summary>
    [FhirElement("editor", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Editor
    {
      get { if(_Editor==null) _Editor = new List<Hl7.Fhir.Model.ContactDetail>(); return _Editor; }
      set { _Editor = value; OnPropertyChanged("Editor"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Editor;

    /// <summary>
    /// Who reviewed the content
    /// </summary>
    [FhirElement("reviewer", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Reviewer
    {
      get { if(_Reviewer==null) _Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(); return _Reviewer; }
      set { _Reviewer = value; OnPropertyChanged("Reviewer"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Reviewer;

    /// <summary>
    /// Who endorsed the content
    /// </summary>
    [FhirElement("endorser", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Endorser
    {
      get { if(_Endorser==null) _Endorser = new List<Hl7.Fhir.Model.ContactDetail>(); return _Endorser; }
      set { _Endorser = value; OnPropertyChanged("Endorser"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Endorser;

    /// <summary>
    /// Additional documentation, citations, etc.
    /// </summary>
    [FhirElement("relatedArtifact", Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Logic used by the activity definition
    /// </summary>
    [FhirElement("library", Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> LibraryElement
    {
      get { if(_LibraryElement==null) _LibraryElement = new List<Hl7.Fhir.Model.Canonical>(); return _LibraryElement; }
      set { _LibraryElement = value; OnPropertyChanged("LibraryElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _LibraryElement;

    /// <summary>
    /// Logic used by the activity definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Library
    {
      get { return LibraryElement != null ? LibraryElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          LibraryElement = null;
        else
          LibraryElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("Library");
      }
    }

    /// <summary>
    /// Kind of resource
    /// </summary>
    [FhirElement("kind", InSummary=true, Order=370)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ActivityDefinitionKind")]
    [DataMember]
    public Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType> KindElement
    {
      get { return _KindElement; }
      set { _KindElement = value; OnPropertyChanged("KindElement"); }
    }

    private Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType> _KindElement;

    /// <summary>
    /// Kind of resource
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ActivityDefinition.RequestResourceType? Kind
    {
      get { return KindElement != null ? KindElement.Value : null; }
      set
      {
        if (value == null)
          KindElement = null;
        else
          KindElement = new Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>(value);
        OnPropertyChanged("Kind");
      }
    }

    /// <summary>
    /// What profile the resource needs to conform to
    /// </summary>
    [FhirElement("profile", Order=380)]
    [DataMember]
    public Hl7.Fhir.Model.Canonical ProfileElement
    {
      get { return _ProfileElement; }
      set { _ProfileElement = value; OnPropertyChanged("ProfileElement"); }
    }

    private Hl7.Fhir.Model.Canonical _ProfileElement;

    /// <summary>
    /// What profile the resource needs to conform to
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Profile
    {
      get { return ProfileElement != null ? ProfileElement.Value : null; }
      set
      {
        if (value == null)
          ProfileElement = null;
        else
          ProfileElement = new Hl7.Fhir.Model.Canonical(value);
        OnPropertyChanged("Profile");
      }
    }

    /// <summary>
    /// Detail type of activity
    /// </summary>
    [FhirElement("code", InSummary=true, Order=390)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [FhirElement("intent", Order=400)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestIntent")]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestIntent> _IntentElement;

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.RequestIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [FhirElement("priority", Order=410)]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestPriority")]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestPriority> PriorityElement
    {
      get { return _PriorityElement; }
      set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestPriority> _PriorityElement;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestPriority? Priority
    {
      get { return PriorityElement != null ? PriorityElement.Value : null; }
      set
      {
        if (value == null)
          PriorityElement = null;
        else
          PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(value);
        OnPropertyChanged("Priority");
      }
    }

    /// <summary>
    /// True if the activity should not be performed
    /// </summary>
    [FhirElement("doNotPerform", InSummary=true, IsModifier=true, Order=420)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean DoNotPerformElement
    {
      get { return _DoNotPerformElement; }
      set { _DoNotPerformElement = value; OnPropertyChanged("DoNotPerformElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _DoNotPerformElement;

    /// <summary>
    /// True if the activity should not be performed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? DoNotPerform
    {
      get { return DoNotPerformElement != null ? DoNotPerformElement.Value : null; }
      set
      {
        if (value == null)
          DoNotPerformElement = null;
        else
          DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("DoNotPerform");
      }
    }

    /// <summary>
    /// When activity is to occur
    /// </summary>
    [FhirElement("timing", Order=430, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Timing),typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Duration))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Timing
    {
      get { return _Timing; }
      set { _Timing = value; OnPropertyChanged("Timing"); }
    }

    private Hl7.Fhir.Model.DataType _Timing;

    /// <summary>
    /// Where it should happen
    /// </summary>
    [FhirElement("location", Order=440)]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Location
    {
      get { return _Location; }
      set { _Location = value; OnPropertyChanged("Location"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Location;

    /// <summary>
    /// Who should participate in the action
    /// </summary>
    [FhirElement("participant", Order=450)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent> Participant
    {
      get { if(_Participant==null) _Participant = new List<Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent>(); return _Participant; }
      set { _Participant = value; OnPropertyChanged("Participant"); }
    }

    private List<Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent> _Participant;

    /// <summary>
    /// What's administered/supplied
    /// </summary>
    [FhirElement("product", Order=460, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Medication","Substance")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.CodeableConcept))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Product
    {
      get { return _Product; }
      set { _Product = value; OnPropertyChanged("Product"); }
    }

    private Hl7.Fhir.Model.DataType _Product;

    /// <summary>
    /// How much is administered/consumed/supplied
    /// </summary>
    [FhirElement("quantity", Order=470)]
    [DataMember]
    public Hl7.Fhir.Model.Quantity Quantity
    {
      get { return _Quantity; }
      set { _Quantity = value; OnPropertyChanged("Quantity"); }
    }

    private Hl7.Fhir.Model.Quantity _Quantity;

    /// <summary>
    /// Detailed dosage instructions
    /// </summary>
    [FhirElement("dosage", Order=480)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Dosage> Dosage
    {
      get { if(_Dosage==null) _Dosage = new List<Hl7.Fhir.Model.Dosage>(); return _Dosage; }
      set { _Dosage = value; OnPropertyChanged("Dosage"); }
    }

    private List<Hl7.Fhir.Model.Dosage> _Dosage;

    /// <summary>
    /// What part of body to perform on
    /// </summary>
    [FhirElement("bodySite", Order=490)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> BodySite
    {
      get { if(_BodySite==null) _BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(); return _BodySite; }
      set { _BodySite = value; OnPropertyChanged("BodySite"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _BodySite;

    /// <summary>
    /// What specimens are required to perform this action
    /// </summary>
    [FhirElement("specimenRequirement", Order=500)]
    [CLSCompliant(false)]
    [References("SpecimenDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SpecimenRequirement
    {
      get { if(_SpecimenRequirement==null) _SpecimenRequirement = new List<Hl7.Fhir.Model.ResourceReference>(); return _SpecimenRequirement; }
      set { _SpecimenRequirement = value; OnPropertyChanged("SpecimenRequirement"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SpecimenRequirement;

    /// <summary>
    /// What observations are required to perform this action
    /// </summary>
    [FhirElement("observationRequirement", Order=510)]
    [CLSCompliant(false)]
    [References("ObservationDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ObservationRequirement
    {
      get { if(_ObservationRequirement==null) _ObservationRequirement = new List<Hl7.Fhir.Model.ResourceReference>(); return _ObservationRequirement; }
      set { _ObservationRequirement = value; OnPropertyChanged("ObservationRequirement"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ObservationRequirement;

    /// <summary>
    /// What observations must be produced by this action
    /// </summary>
    [FhirElement("observationResultRequirement", Order=520)]
    [CLSCompliant(false)]
    [References("ObservationDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ObservationResultRequirement
    {
      get { if(_ObservationResultRequirement==null) _ObservationResultRequirement = new List<Hl7.Fhir.Model.ResourceReference>(); return _ObservationResultRequirement; }
      set { _ObservationResultRequirement = value; OnPropertyChanged("ObservationResultRequirement"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ObservationResultRequirement;

    /// <summary>
    /// Transform to apply the template
    /// </summary>
    [FhirElement("transform", Order=530)]
    [DataMember]
    public Hl7.Fhir.Model.Canonical TransformElement
    {
      get { return _TransformElement; }
      set { _TransformElement = value; OnPropertyChanged("TransformElement"); }
    }

    private Hl7.Fhir.Model.Canonical _TransformElement;

    /// <summary>
    /// Transform to apply the template
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Transform
    {
      get { return TransformElement != null ? TransformElement.Value : null; }
      set
      {
        if (value == null)
          TransformElement = null;
        else
          TransformElement = new Hl7.Fhir.Model.Canonical(value);
        OnPropertyChanged("Transform");
      }
    }

    /// <summary>
    /// Dynamic aspects of the definition
    /// </summary>
    [FhirElement("dynamicValue", Order=540)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent> DynamicValue
    {
      get { if(_DynamicValue==null) _DynamicValue = new List<Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent>(); return _DynamicValue; }
      set { _DynamicValue = value; OnPropertyChanged("DynamicValue"); }
    }

    private List<Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent> _DynamicValue;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ActivityDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(SubtitleElement != null) dest.SubtitleElement = (Hl7.Fhir.Model.FhirString)SubtitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.DataType)Subject.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(UsageElement != null) dest.UsageElement = (Hl7.Fhir.Model.FhirString)UsageElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(EffectivePeriod != null) dest.EffectivePeriod = (Hl7.Fhir.Model.Period)EffectivePeriod.DeepCopy();
      if(Topic != null) dest.Topic = new List<Hl7.Fhir.Model.CodeableConcept>(Topic.DeepCopy());
      if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ContactDetail>(Author.DeepCopy());
      if(Editor != null) dest.Editor = new List<Hl7.Fhir.Model.ContactDetail>(Editor.DeepCopy());
      if(Reviewer != null) dest.Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(Reviewer.DeepCopy());
      if(Endorser != null) dest.Endorser = new List<Hl7.Fhir.Model.ContactDetail>(Endorser.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(LibraryElement != null) dest.LibraryElement = new List<Hl7.Fhir.Model.Canonical>(LibraryElement.DeepCopy());
      if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.ActivityDefinition.RequestResourceType>)KindElement.DeepCopy();
      if(ProfileElement != null) dest.ProfileElement = (Hl7.Fhir.Model.Canonical)ProfileElement.DeepCopy();
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.RequestIntent>)IntentElement.DeepCopy();
      if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.RequestPriority>)PriorityElement.DeepCopy();
      if(DoNotPerformElement != null) dest.DoNotPerformElement = (Hl7.Fhir.Model.FhirBoolean)DoNotPerformElement.DeepCopy();
      if(Timing != null) dest.Timing = (Hl7.Fhir.Model.DataType)Timing.DeepCopy();
      if(Location != null) dest.Location = (Hl7.Fhir.Model.ResourceReference)Location.DeepCopy();
      if(Participant != null) dest.Participant = new List<Hl7.Fhir.Model.ActivityDefinition.ParticipantComponent>(Participant.DeepCopy());
      if(Product != null) dest.Product = (Hl7.Fhir.Model.DataType)Product.DeepCopy();
      if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
      if(Dosage != null) dest.Dosage = new List<Hl7.Fhir.Model.Dosage>(Dosage.DeepCopy());
      if(BodySite != null) dest.BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(BodySite.DeepCopy());
      if(SpecimenRequirement != null) dest.SpecimenRequirement = new List<Hl7.Fhir.Model.ResourceReference>(SpecimenRequirement.DeepCopy());
      if(ObservationRequirement != null) dest.ObservationRequirement = new List<Hl7.Fhir.Model.ResourceReference>(ObservationRequirement.DeepCopy());
      if(ObservationResultRequirement != null) dest.ObservationResultRequirement = new List<Hl7.Fhir.Model.ResourceReference>(ObservationResultRequirement.DeepCopy());
      if(TransformElement != null) dest.TransformElement = (Hl7.Fhir.Model.Canonical)TransformElement.DeepCopy();
      if(DynamicValue != null) dest.DynamicValue = new List<Hl7.Fhir.Model.ActivityDefinition.DynamicValueComponent>(DynamicValue.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ActivityDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ActivityDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(SubtitleElement, otherT.SubtitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(UsageElement, otherT.UsageElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.Matches(Topic, otherT.Topic)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Editor, otherT.Editor)) return false;
      if( !DeepComparable.Matches(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.Matches(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(LibraryElement, otherT.LibraryElement)) return false;
      if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.Matches(ProfileElement, otherT.ProfileElement)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.Matches(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
      if( !DeepComparable.Matches(Timing, otherT.Timing)) return false;
      if( !DeepComparable.Matches(Location, otherT.Location)) return false;
      if( !DeepComparable.Matches(Participant, otherT.Participant)) return false;
      if( !DeepComparable.Matches(Product, otherT.Product)) return false;
      if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.Matches(Dosage, otherT.Dosage)) return false;
      if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.Matches(SpecimenRequirement, otherT.SpecimenRequirement)) return false;
      if( !DeepComparable.Matches(ObservationRequirement, otherT.ObservationRequirement)) return false;
      if( !DeepComparable.Matches(ObservationResultRequirement, otherT.ObservationResultRequirement)) return false;
      if( !DeepComparable.Matches(TransformElement, otherT.TransformElement)) return false;
      if( !DeepComparable.Matches(DynamicValue, otherT.DynamicValue)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ActivityDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(SubtitleElement, otherT.SubtitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(UsageElement, otherT.UsageElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(EffectivePeriod, otherT.EffectivePeriod)) return false;
      if( !DeepComparable.IsExactly(Topic, otherT.Topic)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Editor, otherT.Editor)) return false;
      if( !DeepComparable.IsExactly(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.IsExactly(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(LibraryElement, otherT.LibraryElement)) return false;
      if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
      if( !DeepComparable.IsExactly(ProfileElement, otherT.ProfileElement)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.IsExactly(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
      if( !DeepComparable.IsExactly(Timing, otherT.Timing)) return false;
      if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
      if( !DeepComparable.IsExactly(Participant, otherT.Participant)) return false;
      if( !DeepComparable.IsExactly(Product, otherT.Product)) return false;
      if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.IsExactly(Dosage, otherT.Dosage)) return false;
      if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.IsExactly(SpecimenRequirement, otherT.SpecimenRequirement)) return false;
      if( !DeepComparable.IsExactly(ObservationRequirement, otherT.ObservationRequirement)) return false;
      if( !DeepComparable.IsExactly(ObservationResultRequirement, otherT.ObservationResultRequirement)) return false;
      if( !DeepComparable.IsExactly(TransformElement, otherT.TransformElement)) return false;
      if( !DeepComparable.IsExactly(DynamicValue, otherT.DynamicValue)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (SubtitleElement != null) yield return SubtitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (Subject != null) yield return Subject;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (UsageElement != null) yield return UsageElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (EffectivePeriod != null) yield return EffectivePeriod;
        foreach (var elem in Topic) { if (elem != null) yield return elem; }
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        foreach (var elem in Editor) { if (elem != null) yield return elem; }
        foreach (var elem in Reviewer) { if (elem != null) yield return elem; }
        foreach (var elem in Endorser) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        foreach (var elem in LibraryElement) { if (elem != null) yield return elem; }
        if (KindElement != null) yield return KindElement;
        if (ProfileElement != null) yield return ProfileElement;
        if (Code != null) yield return Code;
        if (IntentElement != null) yield return IntentElement;
        if (PriorityElement != null) yield return PriorityElement;
        if (DoNotPerformElement != null) yield return DoNotPerformElement;
        if (Timing != null) yield return Timing;
        if (Location != null) yield return Location;
        foreach (var elem in Participant) { if (elem != null) yield return elem; }
        if (Product != null) yield return Product;
        if (Quantity != null) yield return Quantity;
        foreach (var elem in Dosage) { if (elem != null) yield return elem; }
        foreach (var elem in BodySite) { if (elem != null) yield return elem; }
        foreach (var elem in SpecimenRequirement) { if (elem != null) yield return elem; }
        foreach (var elem in ObservationRequirement) { if (elem != null) yield return elem; }
        foreach (var elem in ObservationResultRequirement) { if (elem != null) yield return elem; }
        if (TransformElement != null) yield return TransformElement;
        foreach (var elem in DynamicValue) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (SubtitleElement != null) yield return new ElementValue("subtitle", SubtitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (UsageElement != null) yield return new ElementValue("usage", UsageElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (EffectivePeriod != null) yield return new ElementValue("effectivePeriod", EffectivePeriod);
        foreach (var elem in Topic) { if (elem != null) yield return new ElementValue("topic", elem); }
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        foreach (var elem in Editor) { if (elem != null) yield return new ElementValue("editor", elem); }
        foreach (var elem in Reviewer) { if (elem != null) yield return new ElementValue("reviewer", elem); }
        foreach (var elem in Endorser) { if (elem != null) yield return new ElementValue("endorser", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        foreach (var elem in LibraryElement) { if (elem != null) yield return new ElementValue("library", elem); }
        if (KindElement != null) yield return new ElementValue("kind", KindElement);
        if (ProfileElement != null) yield return new ElementValue("profile", ProfileElement);
        if (Code != null) yield return new ElementValue("code", Code);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        if (DoNotPerformElement != null) yield return new ElementValue("doNotPerform", DoNotPerformElement);
        if (Timing != null) yield return new ElementValue("timing", Timing);
        if (Location != null) yield return new ElementValue("location", Location);
        foreach (var elem in Participant) { if (elem != null) yield return new ElementValue("participant", elem); }
        if (Product != null) yield return new ElementValue("product", Product);
        if (Quantity != null) yield return new ElementValue("quantity", Quantity);
        foreach (var elem in Dosage) { if (elem != null) yield return new ElementValue("dosage", elem); }
        foreach (var elem in BodySite) { if (elem != null) yield return new ElementValue("bodySite", elem); }
        foreach (var elem in SpecimenRequirement) { if (elem != null) yield return new ElementValue("specimenRequirement", elem); }
        foreach (var elem in ObservationRequirement) { if (elem != null) yield return new ElementValue("observationRequirement", elem); }
        foreach (var elem in ObservationResultRequirement) { if (elem != null) yield return new ElementValue("observationResultRequirement", elem); }
        if (TransformElement != null) yield return new ElementValue("transform", TransformElement);
        foreach (var elem in DynamicValue) { if (elem != null) yield return new ElementValue("dynamicValue", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "subtitle":
          value = SubtitleElement;
          return SubtitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "usage":
          value = UsageElement;
          return UsageElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "effectivePeriod":
          value = EffectivePeriod;
          return EffectivePeriod is not null;
        case "topic":
          value = Topic;
          return Topic?.Any() == true;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "editor":
          value = Editor;
          return Editor?.Any() == true;
        case "reviewer":
          value = Reviewer;
          return Reviewer?.Any() == true;
        case "endorser":
          value = Endorser;
          return Endorser?.Any() == true;
        case "relatedArtifact":
          value = RelatedArtifact;
          return RelatedArtifact?.Any() == true;
        case "library":
          value = LibraryElement;
          return LibraryElement?.Any() == true;
        case "kind":
          value = KindElement;
          return KindElement is not null;
        case "profile":
          value = ProfileElement;
          return ProfileElement is not null;
        case "code":
          value = Code;
          return Code is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "priority":
          value = PriorityElement;
          return PriorityElement is not null;
        case "doNotPerform":
          value = DoNotPerformElement;
          return DoNotPerformElement is not null;
        case "timing":
          value = Timing;
          return Timing is not null;
        case "location":
          value = Location;
          return Location is not null;
        case "participant":
          value = Participant;
          return Participant?.Any() == true;
        case "product":
          value = Product;
          return Product is not null;
        case "quantity":
          value = Quantity;
          return Quantity is not null;
        case "dosage":
          value = Dosage;
          return Dosage?.Any() == true;
        case "bodySite":
          value = BodySite;
          return BodySite?.Any() == true;
        case "specimenRequirement":
          value = SpecimenRequirement;
          return SpecimenRequirement?.Any() == true;
        case "observationRequirement":
          value = ObservationRequirement;
          return ObservationRequirement?.Any() == true;
        case "observationResultRequirement":
          value = ObservationResultRequirement;
          return ObservationResultRequirement?.Any() == true;
        case "transform":
          value = TransformElement;
          return TransformElement is not null;
        case "dynamicValue":
          value = DynamicValue;
          return DynamicValue?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (SubtitleElement is not null) yield return new KeyValuePair<string,object>("subtitle",SubtitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (UsageElement is not null) yield return new KeyValuePair<string,object>("usage",UsageElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (EffectivePeriod is not null) yield return new KeyValuePair<string,object>("effectivePeriod",EffectivePeriod);
      if (Topic?.Any() == true) yield return new KeyValuePair<string,object>("topic",Topic);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (Editor?.Any() == true) yield return new KeyValuePair<string,object>("editor",Editor);
      if (Reviewer?.Any() == true) yield return new KeyValuePair<string,object>("reviewer",Reviewer);
      if (Endorser?.Any() == true) yield return new KeyValuePair<string,object>("endorser",Endorser);
      if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
      if (LibraryElement?.Any() == true) yield return new KeyValuePair<string,object>("library",LibraryElement);
      if (KindElement is not null) yield return new KeyValuePair<string,object>("kind",KindElement);
      if (ProfileElement is not null) yield return new KeyValuePair<string,object>("profile",ProfileElement);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      if (DoNotPerformElement is not null) yield return new KeyValuePair<string,object>("doNotPerform",DoNotPerformElement);
      if (Timing is not null) yield return new KeyValuePair<string,object>("timing",Timing);
      if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      if (Participant?.Any() == true) yield return new KeyValuePair<string,object>("participant",Participant);
      if (Product is not null) yield return new KeyValuePair<string,object>("product",Product);
      if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
      if (Dosage?.Any() == true) yield return new KeyValuePair<string,object>("dosage",Dosage);
      if (BodySite?.Any() == true) yield return new KeyValuePair<string,object>("bodySite",BodySite);
      if (SpecimenRequirement?.Any() == true) yield return new KeyValuePair<string,object>("specimenRequirement",SpecimenRequirement);
      if (ObservationRequirement?.Any() == true) yield return new KeyValuePair<string,object>("observationRequirement",ObservationRequirement);
      if (ObservationResultRequirement?.Any() == true) yield return new KeyValuePair<string,object>("observationResultRequirement",ObservationResultRequirement);
      if (TransformElement is not null) yield return new KeyValuePair<string,object>("transform",TransformElement);
      if (DynamicValue?.Any() == true) yield return new KeyValuePair<string,object>("dynamicValue",DynamicValue);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Detailed definition of a medicinal product
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MedicinalProductDefinition","http://hl7.org/fhir/StructureDefinition/MedicinalProductDefinition", IsResource=true)]
  public partial class MedicinalProductDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MedicinalProductDefinition"; } }

    /// <summary>
    /// A product specific contact, person (in a role), or an organization
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicinalProductDefinition#Contact", IsNestedType=true)]
    public partial class ContactComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicinalProductDefinition#Contact"; } }

      /// <summary>
      /// Allows the contact to be classified, for example QPPV, Pharmacovigilance Enquiry Information
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// A product specific contact, person (in a role), or an organization
      /// </summary>
      [FhirElement("contact", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Organization","PractitionerRole")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Contact
      {
        get { return _Contact; }
        set { _Contact = value; OnPropertyChanged("Contact"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Contact;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ContactComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Contact != null) dest.Contact = (Hl7.Fhir.Model.ResourceReference)Contact.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ContactComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ContactComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ContactComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Contact != null) yield return Contact;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Contact != null) yield return new ElementValue("contact", Contact);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "contact":
            value = Contact;
            return Contact is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Contact is not null) yield return new KeyValuePair<string,object>("contact",Contact);
      }

    }

    /// <summary>
    /// The product's name, including full name and possibly coded parts
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicinalProductDefinition#Name", IsNestedType=true)]
    public partial class NameComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicinalProductDefinition#Name"; } }

      /// <summary>
      /// The full product name
      /// </summary>
      [FhirElement("productName", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ProductNameElement
      {
        get { return _ProductNameElement; }
        set { _ProductNameElement = value; OnPropertyChanged("ProductNameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ProductNameElement;

      /// <summary>
      /// The full product name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ProductName
      {
        get { return ProductNameElement != null ? ProductNameElement.Value : null; }
        set
        {
          if (value == null)
            ProductNameElement = null;
          else
            ProductNameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("ProductName");
        }
      }

      /// <summary>
      /// Type of product name, such as rINN, BAN, Proprietary, Non-Proprietary
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Coding words or phrases of the name
      /// </summary>
      [FhirElement("namePart", InSummary=true, Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicinalProductDefinition.NamePartComponent> NamePart
      {
        get { if(_NamePart==null) _NamePart = new List<Hl7.Fhir.Model.MedicinalProductDefinition.NamePartComponent>(); return _NamePart; }
        set { _NamePart = value; OnPropertyChanged("NamePart"); }
      }

      private List<Hl7.Fhir.Model.MedicinalProductDefinition.NamePartComponent> _NamePart;

      /// <summary>
      /// Country and jurisdiction where the name applies
      /// </summary>
      [FhirElement("countryLanguage", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.MedicinalProductDefinition.CountryLanguageComponent> CountryLanguage
      {
        get { if(_CountryLanguage==null) _CountryLanguage = new List<Hl7.Fhir.Model.MedicinalProductDefinition.CountryLanguageComponent>(); return _CountryLanguage; }
        set { _CountryLanguage = value; OnPropertyChanged("CountryLanguage"); }
      }

      private List<Hl7.Fhir.Model.MedicinalProductDefinition.CountryLanguageComponent> _CountryLanguage;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NameComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ProductNameElement != null) dest.ProductNameElement = (Hl7.Fhir.Model.FhirString)ProductNameElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(NamePart != null) dest.NamePart = new List<Hl7.Fhir.Model.MedicinalProductDefinition.NamePartComponent>(NamePart.DeepCopy());
        if(CountryLanguage != null) dest.CountryLanguage = new List<Hl7.Fhir.Model.MedicinalProductDefinition.CountryLanguageComponent>(CountryLanguage.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NameComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ProductNameElement, otherT.ProductNameElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(NamePart, otherT.NamePart)) return false;
        if( !DeepComparable.Matches(CountryLanguage, otherT.CountryLanguage)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NameComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ProductNameElement, otherT.ProductNameElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(NamePart, otherT.NamePart)) return false;
        if( !DeepComparable.IsExactly(CountryLanguage, otherT.CountryLanguage)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ProductNameElement != null) yield return ProductNameElement;
          if (Type != null) yield return Type;
          foreach (var elem in NamePart) { if (elem != null) yield return elem; }
          foreach (var elem in CountryLanguage) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ProductNameElement != null) yield return new ElementValue("productName", ProductNameElement);
          if (Type != null) yield return new ElementValue("type", Type);
          foreach (var elem in NamePart) { if (elem != null) yield return new ElementValue("namePart", elem); }
          foreach (var elem in CountryLanguage) { if (elem != null) yield return new ElementValue("countryLanguage", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "productName":
            value = ProductNameElement;
            return ProductNameElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "namePart":
            value = NamePart;
            return NamePart?.Any() == true;
          case "countryLanguage":
            value = CountryLanguage;
            return CountryLanguage?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ProductNameElement is not null) yield return new KeyValuePair<string,object>("productName",ProductNameElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (NamePart?.Any() == true) yield return new KeyValuePair<string,object>("namePart",NamePart);
        if (CountryLanguage?.Any() == true) yield return new KeyValuePair<string,object>("countryLanguage",CountryLanguage);
      }

    }

    /// <summary>
    /// Coding words or phrases of the name
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicinalProductDefinition#NamePart", IsNestedType=true)]
    public partial class NamePartComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicinalProductDefinition#NamePart"; } }

      /// <summary>
      /// A fragment of a product name
      /// </summary>
      [FhirElement("part", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PartElement
      {
        get { return _PartElement; }
        set { _PartElement = value; OnPropertyChanged("PartElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PartElement;

      /// <summary>
      /// A fragment of a product name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Part
      {
        get { return PartElement != null ? PartElement.Value : null; }
        set
        {
          if (value == null)
            PartElement = null;
          else
            PartElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Part");
        }
      }

      /// <summary>
      /// Identifying type for this part of the name (e.g. strength part)
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as NamePartComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PartElement != null) dest.PartElement = (Hl7.Fhir.Model.FhirString)PartElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new NamePartComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as NamePartComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PartElement, otherT.PartElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as NamePartComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PartElement, otherT.PartElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PartElement != null) yield return PartElement;
          if (Type != null) yield return Type;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PartElement != null) yield return new ElementValue("part", PartElement);
          if (Type != null) yield return new ElementValue("type", Type);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "part":
            value = PartElement;
            return PartElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (PartElement is not null) yield return new KeyValuePair<string,object>("part",PartElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      }

    }

    /// <summary>
    /// Country and jurisdiction where the name applies
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicinalProductDefinition#CountryLanguage", IsNestedType=true)]
    public partial class CountryLanguageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicinalProductDefinition#CountryLanguage"; } }

      /// <summary>
      /// Country code for where this name applies
      /// </summary>
      [FhirElement("country", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Country
      {
        get { return _Country; }
        set { _Country = value; OnPropertyChanged("Country"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Country;

      /// <summary>
      /// Jurisdiction code for where this name applies
      /// </summary>
      [FhirElement("jurisdiction", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Jurisdiction
      {
        get { return _Jurisdiction; }
        set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Jurisdiction;

      /// <summary>
      /// Language code for this name
      /// </summary>
      [FhirElement("language", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Language
      {
        get { return _Language; }
        set { _Language = value; OnPropertyChanged("Language"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Language;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CountryLanguageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Country != null) dest.Country = (Hl7.Fhir.Model.CodeableConcept)Country.DeepCopy();
        if(Jurisdiction != null) dest.Jurisdiction = (Hl7.Fhir.Model.CodeableConcept)Jurisdiction.DeepCopy();
        if(Language != null) dest.Language = (Hl7.Fhir.Model.CodeableConcept)Language.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CountryLanguageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CountryLanguageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Country, otherT.Country)) return false;
        if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
        if( !DeepComparable.Matches(Language, otherT.Language)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CountryLanguageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Country, otherT.Country)) return false;
        if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
        if( !DeepComparable.IsExactly(Language, otherT.Language)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Country != null) yield return Country;
          if (Jurisdiction != null) yield return Jurisdiction;
          if (Language != null) yield return Language;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Country != null) yield return new ElementValue("country", Country);
          if (Jurisdiction != null) yield return new ElementValue("jurisdiction", Jurisdiction);
          if (Language != null) yield return new ElementValue("language", Language);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "country":
            value = Country;
            return Country is not null;
          case "jurisdiction":
            value = Jurisdiction;
            return Jurisdiction is not null;
          case "language":
            value = Language;
            return Language is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Country is not null) yield return new KeyValuePair<string,object>("country",Country);
        if (Jurisdiction is not null) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
        if (Language is not null) yield return new KeyValuePair<string,object>("language",Language);
      }

    }

    /// <summary>
    /// Reference to another product, e.g. for linking authorised to investigational product
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicinalProductDefinition#CrossReference", IsNestedType=true)]
    public partial class CrossReferenceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicinalProductDefinition#CrossReference"; } }

      /// <summary>
      /// Reference to another product, e.g. for linking authorised to investigational product
      /// </summary>
      [FhirElement("product", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Product
      {
        get { return _Product; }
        set { _Product = value; OnPropertyChanged("Product"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Product;

      /// <summary>
      /// The type of relationship, for instance branded to generic or virtual to actual product
      /// </summary>
      [FhirElement("type", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CrossReferenceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Product != null) dest.Product = (Hl7.Fhir.Model.CodeableReference)Product.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CrossReferenceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CrossReferenceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Product, otherT.Product)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CrossReferenceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Product, otherT.Product)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Product != null) yield return Product;
          if (Type != null) yield return Type;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Product != null) yield return new ElementValue("product", Product);
          if (Type != null) yield return new ElementValue("type", Type);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "product":
            value = Product;
            return Product is not null;
          case "type":
            value = Type;
            return Type is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Product is not null) yield return new KeyValuePair<string,object>("product",Product);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      }

    }

    /// <summary>
    /// A manufacturing or administrative process for the medicinal product
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicinalProductDefinition#Operation", IsNestedType=true)]
    public partial class OperationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicinalProductDefinition#Operation"; } }

      /// <summary>
      /// The type of manufacturing operation e.g. manufacturing itself, re-packaging
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Type;

      /// <summary>
      /// Date range of applicability
      /// </summary>
      [FhirElement("effectiveDate", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Period EffectiveDate
      {
        get { return _EffectiveDate; }
        set { _EffectiveDate = value; OnPropertyChanged("EffectiveDate"); }
      }

      private Hl7.Fhir.Model.Period _EffectiveDate;

      /// <summary>
      /// The organization responsible for the particular process, e.g. the manufacturer or importer
      /// </summary>
      [FhirElement("organization", InSummary=true, Order=60)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Organization
      {
        get { if(_Organization==null) _Organization = new List<Hl7.Fhir.Model.ResourceReference>(); return _Organization; }
        set { _Organization = value; OnPropertyChanged("Organization"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Organization;

      /// <summary>
      /// Specifies whether this process is considered proprietary or confidential
      /// </summary>
      [FhirElement("confidentialityIndicator", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ConfidentialityIndicator
      {
        get { return _ConfidentialityIndicator; }
        set { _ConfidentialityIndicator = value; OnPropertyChanged("ConfidentialityIndicator"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ConfidentialityIndicator;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OperationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableReference)Type.DeepCopy();
        if(EffectiveDate != null) dest.EffectiveDate = (Hl7.Fhir.Model.Period)EffectiveDate.DeepCopy();
        if(Organization != null) dest.Organization = new List<Hl7.Fhir.Model.ResourceReference>(Organization.DeepCopy());
        if(ConfidentialityIndicator != null) dest.ConfidentialityIndicator = (Hl7.Fhir.Model.CodeableConcept)ConfidentialityIndicator.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OperationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(EffectiveDate, otherT.EffectiveDate)) return false;
        if( !DeepComparable.Matches(Organization, otherT.Organization)) return false;
        if( !DeepComparable.Matches(ConfidentialityIndicator, otherT.ConfidentialityIndicator)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(EffectiveDate, otherT.EffectiveDate)) return false;
        if( !DeepComparable.IsExactly(Organization, otherT.Organization)) return false;
        if( !DeepComparable.IsExactly(ConfidentialityIndicator, otherT.ConfidentialityIndicator)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (EffectiveDate != null) yield return EffectiveDate;
          foreach (var elem in Organization) { if (elem != null) yield return elem; }
          if (ConfidentialityIndicator != null) yield return ConfidentialityIndicator;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (EffectiveDate != null) yield return new ElementValue("effectiveDate", EffectiveDate);
          foreach (var elem in Organization) { if (elem != null) yield return new ElementValue("organization", elem); }
          if (ConfidentialityIndicator != null) yield return new ElementValue("confidentialityIndicator", ConfidentialityIndicator);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "effectiveDate":
            value = EffectiveDate;
            return EffectiveDate is not null;
          case "organization":
            value = Organization;
            return Organization?.Any() == true;
          case "confidentialityIndicator":
            value = ConfidentialityIndicator;
            return ConfidentialityIndicator is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (EffectiveDate is not null) yield return new KeyValuePair<string,object>("effectiveDate",EffectiveDate);
        if (Organization?.Any() == true) yield return new KeyValuePair<string,object>("organization",Organization);
        if (ConfidentialityIndicator is not null) yield return new KeyValuePair<string,object>("confidentialityIndicator",ConfidentialityIndicator);
      }

    }

    /// <summary>
    /// Key product features such as "sugar free", "modified release"
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicinalProductDefinition#Characteristic", IsNestedType=true)]
    public partial class CharacteristicComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicinalProductDefinition#Characteristic"; } }

      /// <summary>
      /// A code expressing the type of characteristic
      /// </summary>
      [FhirElement("type", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// A value for the characteristic
      /// </summary>
      [FhirElement("value", InSummary=true, Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Attachment))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CharacteristicComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CharacteristicComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CharacteristicComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CharacteristicComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Value != null) yield return Value;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Value != null) yield return new ElementValue("value", Value);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "value":
            value = Value;
            return Value is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
      }

    }

    /// <summary>
    /// Business identifier for this product. Could be an MPID
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Regulatory type, e.g. Investigational or Authorized
    /// </summary>
    [FhirElement("type", InSummary=true, Order=100)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// If this medicine applies to human or veterinary uses
    /// </summary>
    [FhirElement("domain", InSummary=true, Order=110)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Domain
    {
      get { return _Domain; }
      set { _Domain = value; OnPropertyChanged("Domain"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Domain;

    /// <summary>
    /// A business identifier relating to a specific version of the product
    /// </summary>
    [FhirElement("version", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// A business identifier relating to a specific version of the product
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// The status within the lifecycle of this product record
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Status
    {
      get { return _Status; }
      set { _Status = value; OnPropertyChanged("Status"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Status;

    /// <summary>
    /// The date at which the given status became applicable
    /// </summary>
    [FhirElement("statusDate", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime StatusDateElement
    {
      get { return _StatusDateElement; }
      set { _StatusDateElement = value; OnPropertyChanged("StatusDateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _StatusDateElement;

    /// <summary>
    /// The date at which the given status became applicable
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string StatusDate
    {
      get { return StatusDateElement != null ? StatusDateElement.Value : null; }
      set
      {
        if (value == null)
          StatusDateElement = null;
        else
          StatusDateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("StatusDate");
      }
    }

    /// <summary>
    /// General description of this product
    /// </summary>
    [FhirElement("description", InSummary=true, Order=150)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// The dose form for a single part product, or combined form of a multiple part product
    /// </summary>
    [FhirElement("combinedPharmaceuticalDoseForm", InSummary=true, Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept CombinedPharmaceuticalDoseForm
    {
      get { return _CombinedPharmaceuticalDoseForm; }
      set { _CombinedPharmaceuticalDoseForm = value; OnPropertyChanged("CombinedPharmaceuticalDoseForm"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _CombinedPharmaceuticalDoseForm;

    /// <summary>
    /// The path by which the product is taken into or makes contact with the body
    /// </summary>
    [FhirElement("route", InSummary=true, Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Route
    {
      get { if(_Route==null) _Route = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Route; }
      set { _Route = value; OnPropertyChanged("Route"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Route;

    /// <summary>
    /// Description of indication(s) for this product, used when structured indications are not required
    /// </summary>
    [FhirElement("indication", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Indication
    {
      get { return _Indication; }
      set { _Indication = value; OnPropertyChanged("Indication"); }
    }

    private Hl7.Fhir.Model.Markdown _Indication;

    /// <summary>
    /// The legal status of supply of the medicinal product as classified by the regulator
    /// </summary>
    [FhirElement("legalStatusOfSupply", InSummary=true, Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept LegalStatusOfSupply
    {
      get { return _LegalStatusOfSupply; }
      set { _LegalStatusOfSupply = value; OnPropertyChanged("LegalStatusOfSupply"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _LegalStatusOfSupply;

    /// <summary>
    /// Whether the Medicinal Product is subject to additional monitoring for regulatory reasons
    /// </summary>
    [FhirElement("additionalMonitoringIndicator", InSummary=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept AdditionalMonitoringIndicator
    {
      get { return _AdditionalMonitoringIndicator; }
      set { _AdditionalMonitoringIndicator = value; OnPropertyChanged("AdditionalMonitoringIndicator"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _AdditionalMonitoringIndicator;

    /// <summary>
    /// Whether the Medicinal Product is subject to special measures for regulatory reasons
    /// </summary>
    [FhirElement("specialMeasures", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> SpecialMeasures
    {
      get { if(_SpecialMeasures==null) _SpecialMeasures = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SpecialMeasures; }
      set { _SpecialMeasures = value; OnPropertyChanged("SpecialMeasures"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _SpecialMeasures;

    /// <summary>
    /// If authorised for use in children
    /// </summary>
    [FhirElement("pediatricUseIndicator", InSummary=true, Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept PediatricUseIndicator
    {
      get { return _PediatricUseIndicator; }
      set { _PediatricUseIndicator = value; OnPropertyChanged("PediatricUseIndicator"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _PediatricUseIndicator;

    /// <summary>
    /// Allows the product to be classified by various systems
    /// </summary>
    [FhirElement("classification", InSummary=true, Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Classification
    {
      get { if(_Classification==null) _Classification = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Classification; }
      set { _Classification = value; OnPropertyChanged("Classification"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Classification;

    /// <summary>
    /// Marketing status of the medicinal product, in contrast to marketing authorization
    /// </summary>
    [FhirElement("marketingStatus", InSummary=true, Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MarketingStatus> MarketingStatus
    {
      get { if(_MarketingStatus==null) _MarketingStatus = new List<Hl7.Fhir.Model.MarketingStatus>(); return _MarketingStatus; }
      set { _MarketingStatus = value; OnPropertyChanged("MarketingStatus"); }
    }

    private List<Hl7.Fhir.Model.MarketingStatus> _MarketingStatus;

    /// <summary>
    /// Package type for the product
    /// </summary>
    [FhirElement("packagedMedicinalProduct", InSummary=true, Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> PackagedMedicinalProduct
    {
      get { if(_PackagedMedicinalProduct==null) _PackagedMedicinalProduct = new List<Hl7.Fhir.Model.CodeableConcept>(); return _PackagedMedicinalProduct; }
      set { _PackagedMedicinalProduct = value; OnPropertyChanged("PackagedMedicinalProduct"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _PackagedMedicinalProduct;

    /// <summary>
    /// The ingredients of this medicinal product - when not detailed in other resources
    /// </summary>
    [FhirElement("ingredient", InSummary=true, Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Ingredient
    {
      get { if(_Ingredient==null) _Ingredient = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Ingredient; }
      set { _Ingredient = value; OnPropertyChanged("Ingredient"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Ingredient;

    /// <summary>
    /// Any component of the drug product which is not the chemical entity defined as the drug substance, or an excipient in the drug product
    /// </summary>
    [FhirElement("impurity", InSummary=true, Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableReference> Impurity
    {
      get { if(_Impurity==null) _Impurity = new List<Hl7.Fhir.Model.CodeableReference>(); return _Impurity; }
      set { _Impurity = value; OnPropertyChanged("Impurity"); }
    }

    private List<Hl7.Fhir.Model.CodeableReference> _Impurity;

    /// <summary>
    /// Additional documentation about the medicinal product
    /// </summary>
    [FhirElement("attachedDocument", InSummary=true, Order=280)]
    [CLSCompliant(false)]
    [References("DocumentReference")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> AttachedDocument
    {
      get { if(_AttachedDocument==null) _AttachedDocument = new List<Hl7.Fhir.Model.ResourceReference>(); return _AttachedDocument; }
      set { _AttachedDocument = value; OnPropertyChanged("AttachedDocument"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _AttachedDocument;

    /// <summary>
    /// A master file for the medicinal product (e.g. Pharmacovigilance System Master File)
    /// </summary>
    [FhirElement("masterFile", InSummary=true, Order=290)]
    [CLSCompliant(false)]
    [References("DocumentReference")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> MasterFile
    {
      get { if(_MasterFile==null) _MasterFile = new List<Hl7.Fhir.Model.ResourceReference>(); return _MasterFile; }
      set { _MasterFile = value; OnPropertyChanged("MasterFile"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _MasterFile;

    /// <summary>
    /// A product specific contact, person (in a role), or an organization
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicinalProductDefinition.ContactComponent> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.MedicinalProductDefinition.ContactComponent>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.MedicinalProductDefinition.ContactComponent> _Contact;

    /// <summary>
    /// Clinical trials or studies that this product is involved in
    /// </summary>
    [FhirElement("clinicalTrial", InSummary=true, Order=310)]
    [CLSCompliant(false)]
    [References("ResearchStudy")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ClinicalTrial
    {
      get { if(_ClinicalTrial==null) _ClinicalTrial = new List<Hl7.Fhir.Model.ResourceReference>(); return _ClinicalTrial; }
      set { _ClinicalTrial = value; OnPropertyChanged("ClinicalTrial"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ClinicalTrial;

    /// <summary>
    /// A code that this product is known by, within some formal terminology
    /// </summary>
    [FhirElement("code", InSummary=true, Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Coding> Code
    {
      get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.Coding>(); return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private List<Hl7.Fhir.Model.Coding> _Code;

    /// <summary>
    /// The product's name, including full name and possibly coded parts
    /// </summary>
    [FhirElement("name", InSummary=true, Order=330)]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicinalProductDefinition.NameComponent> Name
    {
      get { if(_Name==null) _Name = new List<Hl7.Fhir.Model.MedicinalProductDefinition.NameComponent>(); return _Name; }
      set { _Name = value; OnPropertyChanged("Name"); }
    }

    private List<Hl7.Fhir.Model.MedicinalProductDefinition.NameComponent> _Name;

    /// <summary>
    /// Reference to another product, e.g. for linking authorised to investigational product
    /// </summary>
    [FhirElement("crossReference", InSummary=true, Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicinalProductDefinition.CrossReferenceComponent> CrossReference
    {
      get { if(_CrossReference==null) _CrossReference = new List<Hl7.Fhir.Model.MedicinalProductDefinition.CrossReferenceComponent>(); return _CrossReference; }
      set { _CrossReference = value; OnPropertyChanged("CrossReference"); }
    }

    private List<Hl7.Fhir.Model.MedicinalProductDefinition.CrossReferenceComponent> _CrossReference;

    /// <summary>
    /// A manufacturing or administrative process for the medicinal product
    /// </summary>
    [FhirElement("operation", InSummary=true, Order=350)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicinalProductDefinition.OperationComponent> Operation
    {
      get { if(_Operation==null) _Operation = new List<Hl7.Fhir.Model.MedicinalProductDefinition.OperationComponent>(); return _Operation; }
      set { _Operation = value; OnPropertyChanged("Operation"); }
    }

    private List<Hl7.Fhir.Model.MedicinalProductDefinition.OperationComponent> _Operation;

    /// <summary>
    /// Key product features such as "sugar free", "modified release"
    /// </summary>
    [FhirElement("characteristic", InSummary=true, Order=360)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicinalProductDefinition.CharacteristicComponent> Characteristic
    {
      get { if(_Characteristic==null) _Characteristic = new List<Hl7.Fhir.Model.MedicinalProductDefinition.CharacteristicComponent>(); return _Characteristic; }
      set { _Characteristic = value; OnPropertyChanged("Characteristic"); }
    }

    private List<Hl7.Fhir.Model.MedicinalProductDefinition.CharacteristicComponent> _Characteristic;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MedicinalProductDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(Domain != null) dest.Domain = (Hl7.Fhir.Model.CodeableConcept)Domain.DeepCopy();
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(Status != null) dest.Status = (Hl7.Fhir.Model.CodeableConcept)Status.DeepCopy();
      if(StatusDateElement != null) dest.StatusDateElement = (Hl7.Fhir.Model.FhirDateTime)StatusDateElement.DeepCopy();
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(CombinedPharmaceuticalDoseForm != null) dest.CombinedPharmaceuticalDoseForm = (Hl7.Fhir.Model.CodeableConcept)CombinedPharmaceuticalDoseForm.DeepCopy();
      if(Route != null) dest.Route = new List<Hl7.Fhir.Model.CodeableConcept>(Route.DeepCopy());
      if(Indication != null) dest.Indication = (Hl7.Fhir.Model.Markdown)Indication.DeepCopy();
      if(LegalStatusOfSupply != null) dest.LegalStatusOfSupply = (Hl7.Fhir.Model.CodeableConcept)LegalStatusOfSupply.DeepCopy();
      if(AdditionalMonitoringIndicator != null) dest.AdditionalMonitoringIndicator = (Hl7.Fhir.Model.CodeableConcept)AdditionalMonitoringIndicator.DeepCopy();
      if(SpecialMeasures != null) dest.SpecialMeasures = new List<Hl7.Fhir.Model.CodeableConcept>(SpecialMeasures.DeepCopy());
      if(PediatricUseIndicator != null) dest.PediatricUseIndicator = (Hl7.Fhir.Model.CodeableConcept)PediatricUseIndicator.DeepCopy();
      if(Classification != null) dest.Classification = new List<Hl7.Fhir.Model.CodeableConcept>(Classification.DeepCopy());
      if(MarketingStatus != null) dest.MarketingStatus = new List<Hl7.Fhir.Model.MarketingStatus>(MarketingStatus.DeepCopy());
      if(PackagedMedicinalProduct != null) dest.PackagedMedicinalProduct = new List<Hl7.Fhir.Model.CodeableConcept>(PackagedMedicinalProduct.DeepCopy());
      if(Ingredient != null) dest.Ingredient = new List<Hl7.Fhir.Model.CodeableConcept>(Ingredient.DeepCopy());
      if(Impurity != null) dest.Impurity = new List<Hl7.Fhir.Model.CodeableReference>(Impurity.DeepCopy());
      if(AttachedDocument != null) dest.AttachedDocument = new List<Hl7.Fhir.Model.ResourceReference>(AttachedDocument.DeepCopy());
      if(MasterFile != null) dest.MasterFile = new List<Hl7.Fhir.Model.ResourceReference>(MasterFile.DeepCopy());
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.MedicinalProductDefinition.ContactComponent>(Contact.DeepCopy());
      if(ClinicalTrial != null) dest.ClinicalTrial = new List<Hl7.Fhir.Model.ResourceReference>(ClinicalTrial.DeepCopy());
      if(Code != null) dest.Code = new List<Hl7.Fhir.Model.Coding>(Code.DeepCopy());
      if(Name != null) dest.Name = new List<Hl7.Fhir.Model.MedicinalProductDefinition.NameComponent>(Name.DeepCopy());
      if(CrossReference != null) dest.CrossReference = new List<Hl7.Fhir.Model.MedicinalProductDefinition.CrossReferenceComponent>(CrossReference.DeepCopy());
      if(Operation != null) dest.Operation = new List<Hl7.Fhir.Model.MedicinalProductDefinition.OperationComponent>(Operation.DeepCopy());
      if(Characteristic != null) dest.Characteristic = new List<Hl7.Fhir.Model.MedicinalProductDefinition.CharacteristicComponent>(Characteristic.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MedicinalProductDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MedicinalProductDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(Domain, otherT.Domain)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(Status, otherT.Status)) return false;
      if( !DeepComparable.Matches(StatusDateElement, otherT.StatusDateElement)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(CombinedPharmaceuticalDoseForm, otherT.CombinedPharmaceuticalDoseForm)) return false;
      if( !DeepComparable.Matches(Route, otherT.Route)) return false;
      if( !DeepComparable.Matches(Indication, otherT.Indication)) return false;
      if( !DeepComparable.Matches(LegalStatusOfSupply, otherT.LegalStatusOfSupply)) return false;
      if( !DeepComparable.Matches(AdditionalMonitoringIndicator, otherT.AdditionalMonitoringIndicator)) return false;
      if( !DeepComparable.Matches(SpecialMeasures, otherT.SpecialMeasures)) return false;
      if( !DeepComparable.Matches(PediatricUseIndicator, otherT.PediatricUseIndicator)) return false;
      if( !DeepComparable.Matches(Classification, otherT.Classification)) return false;
      if( !DeepComparable.Matches(MarketingStatus, otherT.MarketingStatus)) return false;
      if( !DeepComparable.Matches(PackagedMedicinalProduct, otherT.PackagedMedicinalProduct)) return false;
      if( !DeepComparable.Matches(Ingredient, otherT.Ingredient)) return false;
      if( !DeepComparable.Matches(Impurity, otherT.Impurity)) return false;
      if( !DeepComparable.Matches(AttachedDocument, otherT.AttachedDocument)) return false;
      if( !DeepComparable.Matches(MasterFile, otherT.MasterFile)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(ClinicalTrial, otherT.ClinicalTrial)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(Name, otherT.Name)) return false;
      if( !DeepComparable.Matches(CrossReference, otherT.CrossReference)) return false;
      if( !DeepComparable.Matches(Operation, otherT.Operation)) return false;
      if( !DeepComparable.Matches(Characteristic, otherT.Characteristic)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MedicinalProductDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(Domain, otherT.Domain)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(Status, otherT.Status)) return false;
      if( !DeepComparable.IsExactly(StatusDateElement, otherT.StatusDateElement)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(CombinedPharmaceuticalDoseForm, otherT.CombinedPharmaceuticalDoseForm)) return false;
      if( !DeepComparable.IsExactly(Route, otherT.Route)) return false;
      if( !DeepComparable.IsExactly(Indication, otherT.Indication)) return false;
      if( !DeepComparable.IsExactly(LegalStatusOfSupply, otherT.LegalStatusOfSupply)) return false;
      if( !DeepComparable.IsExactly(AdditionalMonitoringIndicator, otherT.AdditionalMonitoringIndicator)) return false;
      if( !DeepComparable.IsExactly(SpecialMeasures, otherT.SpecialMeasures)) return false;
      if( !DeepComparable.IsExactly(PediatricUseIndicator, otherT.PediatricUseIndicator)) return false;
      if( !DeepComparable.IsExactly(Classification, otherT.Classification)) return false;
      if( !DeepComparable.IsExactly(MarketingStatus, otherT.MarketingStatus)) return false;
      if( !DeepComparable.IsExactly(PackagedMedicinalProduct, otherT.PackagedMedicinalProduct)) return false;
      if( !DeepComparable.IsExactly(Ingredient, otherT.Ingredient)) return false;
      if( !DeepComparable.IsExactly(Impurity, otherT.Impurity)) return false;
      if( !DeepComparable.IsExactly(AttachedDocument, otherT.AttachedDocument)) return false;
      if( !DeepComparable.IsExactly(MasterFile, otherT.MasterFile)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(ClinicalTrial, otherT.ClinicalTrial)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(Name, otherT.Name)) return false;
      if( !DeepComparable.IsExactly(CrossReference, otherT.CrossReference)) return false;
      if( !DeepComparable.IsExactly(Operation, otherT.Operation)) return false;
      if( !DeepComparable.IsExactly(Characteristic, otherT.Characteristic)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (Type != null) yield return Type;
        if (Domain != null) yield return Domain;
        if (VersionElement != null) yield return VersionElement;
        if (Status != null) yield return Status;
        if (StatusDateElement != null) yield return StatusDateElement;
        if (Description != null) yield return Description;
        if (CombinedPharmaceuticalDoseForm != null) yield return CombinedPharmaceuticalDoseForm;
        foreach (var elem in Route) { if (elem != null) yield return elem; }
        if (Indication != null) yield return Indication;
        if (LegalStatusOfSupply != null) yield return LegalStatusOfSupply;
        if (AdditionalMonitoringIndicator != null) yield return AdditionalMonitoringIndicator;
        foreach (var elem in SpecialMeasures) { if (elem != null) yield return elem; }
        if (PediatricUseIndicator != null) yield return PediatricUseIndicator;
        foreach (var elem in Classification) { if (elem != null) yield return elem; }
        foreach (var elem in MarketingStatus) { if (elem != null) yield return elem; }
        foreach (var elem in PackagedMedicinalProduct) { if (elem != null) yield return elem; }
        foreach (var elem in Ingredient) { if (elem != null) yield return elem; }
        foreach (var elem in Impurity) { if (elem != null) yield return elem; }
        foreach (var elem in AttachedDocument) { if (elem != null) yield return elem; }
        foreach (var elem in MasterFile) { if (elem != null) yield return elem; }
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        foreach (var elem in ClinicalTrial) { if (elem != null) yield return elem; }
        foreach (var elem in Code) { if (elem != null) yield return elem; }
        foreach (var elem in Name) { if (elem != null) yield return elem; }
        foreach (var elem in CrossReference) { if (elem != null) yield return elem; }
        foreach (var elem in Operation) { if (elem != null) yield return elem; }
        foreach (var elem in Characteristic) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (Type != null) yield return new ElementValue("type", Type);
        if (Domain != null) yield return new ElementValue("domain", Domain);
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (Status != null) yield return new ElementValue("status", Status);
        if (StatusDateElement != null) yield return new ElementValue("statusDate", StatusDateElement);
        if (Description != null) yield return new ElementValue("description", Description);
        if (CombinedPharmaceuticalDoseForm != null) yield return new ElementValue("combinedPharmaceuticalDoseForm", CombinedPharmaceuticalDoseForm);
        foreach (var elem in Route) { if (elem != null) yield return new ElementValue("route", elem); }
        if (Indication != null) yield return new ElementValue("indication", Indication);
        if (LegalStatusOfSupply != null) yield return new ElementValue("legalStatusOfSupply", LegalStatusOfSupply);
        if (AdditionalMonitoringIndicator != null) yield return new ElementValue("additionalMonitoringIndicator", AdditionalMonitoringIndicator);
        foreach (var elem in SpecialMeasures) { if (elem != null) yield return new ElementValue("specialMeasures", elem); }
        if (PediatricUseIndicator != null) yield return new ElementValue("pediatricUseIndicator", PediatricUseIndicator);
        foreach (var elem in Classification) { if (elem != null) yield return new ElementValue("classification", elem); }
        foreach (var elem in MarketingStatus) { if (elem != null) yield return new ElementValue("marketingStatus", elem); }
        foreach (var elem in PackagedMedicinalProduct) { if (elem != null) yield return new ElementValue("packagedMedicinalProduct", elem); }
        foreach (var elem in Ingredient) { if (elem != null) yield return new ElementValue("ingredient", elem); }
        foreach (var elem in Impurity) { if (elem != null) yield return new ElementValue("impurity", elem); }
        foreach (var elem in AttachedDocument) { if (elem != null) yield return new ElementValue("attachedDocument", elem); }
        foreach (var elem in MasterFile) { if (elem != null) yield return new ElementValue("masterFile", elem); }
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        foreach (var elem in ClinicalTrial) { if (elem != null) yield return new ElementValue("clinicalTrial", elem); }
        foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
        foreach (var elem in Name) { if (elem != null) yield return new ElementValue("name", elem); }
        foreach (var elem in CrossReference) { if (elem != null) yield return new ElementValue("crossReference", elem); }
        foreach (var elem in Operation) { if (elem != null) yield return new ElementValue("operation", elem); }
        foreach (var elem in Characteristic) { if (elem != null) yield return new ElementValue("characteristic", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "type":
          value = Type;
          return Type is not null;
        case "domain":
          value = Domain;
          return Domain is not null;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "status":
          value = Status;
          return Status is not null;
        case "statusDate":
          value = StatusDateElement;
          return StatusDateElement is not null;
        case "description":
          value = Description;
          return Description is not null;
        case "combinedPharmaceuticalDoseForm":
          value = CombinedPharmaceuticalDoseForm;
          return CombinedPharmaceuticalDoseForm is not null;
        case "route":
          value = Route;
          return Route?.Any() == true;
        case "indication":
          value = Indication;
          return Indication is not null;
        case "legalStatusOfSupply":
          value = LegalStatusOfSupply;
          return LegalStatusOfSupply is not null;
        case "additionalMonitoringIndicator":
          value = AdditionalMonitoringIndicator;
          return AdditionalMonitoringIndicator is not null;
        case "specialMeasures":
          value = SpecialMeasures;
          return SpecialMeasures?.Any() == true;
        case "pediatricUseIndicator":
          value = PediatricUseIndicator;
          return PediatricUseIndicator is not null;
        case "classification":
          value = Classification;
          return Classification?.Any() == true;
        case "marketingStatus":
          value = MarketingStatus;
          return MarketingStatus?.Any() == true;
        case "packagedMedicinalProduct":
          value = PackagedMedicinalProduct;
          return PackagedMedicinalProduct?.Any() == true;
        case "ingredient":
          value = Ingredient;
          return Ingredient?.Any() == true;
        case "impurity":
          value = Impurity;
          return Impurity?.Any() == true;
        case "attachedDocument":
          value = AttachedDocument;
          return AttachedDocument?.Any() == true;
        case "masterFile":
          value = MasterFile;
          return MasterFile?.Any() == true;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "clinicalTrial":
          value = ClinicalTrial;
          return ClinicalTrial?.Any() == true;
        case "code":
          value = Code;
          return Code?.Any() == true;
        case "name":
          value = Name;
          return Name?.Any() == true;
        case "crossReference":
          value = CrossReference;
          return CrossReference?.Any() == true;
        case "operation":
          value = Operation;
          return Operation?.Any() == true;
        case "characteristic":
          value = Characteristic;
          return Characteristic?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (Domain is not null) yield return new KeyValuePair<string,object>("domain",Domain);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (Status is not null) yield return new KeyValuePair<string,object>("status",Status);
      if (StatusDateElement is not null) yield return new KeyValuePair<string,object>("statusDate",StatusDateElement);
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (CombinedPharmaceuticalDoseForm is not null) yield return new KeyValuePair<string,object>("combinedPharmaceuticalDoseForm",CombinedPharmaceuticalDoseForm);
      if (Route?.Any() == true) yield return new KeyValuePair<string,object>("route",Route);
      if (Indication is not null) yield return new KeyValuePair<string,object>("indication",Indication);
      if (LegalStatusOfSupply is not null) yield return new KeyValuePair<string,object>("legalStatusOfSupply",LegalStatusOfSupply);
      if (AdditionalMonitoringIndicator is not null) yield return new KeyValuePair<string,object>("additionalMonitoringIndicator",AdditionalMonitoringIndicator);
      if (SpecialMeasures?.Any() == true) yield return new KeyValuePair<string,object>("specialMeasures",SpecialMeasures);
      if (PediatricUseIndicator is not null) yield return new KeyValuePair<string,object>("pediatricUseIndicator",PediatricUseIndicator);
      if (Classification?.Any() == true) yield return new KeyValuePair<string,object>("classification",Classification);
      if (MarketingStatus?.Any() == true) yield return new KeyValuePair<string,object>("marketingStatus",MarketingStatus);
      if (PackagedMedicinalProduct?.Any() == true) yield return new KeyValuePair<string,object>("packagedMedicinalProduct",PackagedMedicinalProduct);
      if (Ingredient?.Any() == true) yield return new KeyValuePair<string,object>("ingredient",Ingredient);
      if (Impurity?.Any() == true) yield return new KeyValuePair<string,object>("impurity",Impurity);
      if (AttachedDocument?.Any() == true) yield return new KeyValuePair<string,object>("attachedDocument",AttachedDocument);
      if (MasterFile?.Any() == true) yield return new KeyValuePair<string,object>("masterFile",MasterFile);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (ClinicalTrial?.Any() == true) yield return new KeyValuePair<string,object>("clinicalTrial",ClinicalTrial);
      if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
      if (Name?.Any() == true) yield return new KeyValuePair<string,object>("name",Name);
      if (CrossReference?.Any() == true) yield return new KeyValuePair<string,object>("crossReference",CrossReference);
      if (Operation?.Any() == true) yield return new KeyValuePair<string,object>("operation",Operation);
      if (Characteristic?.Any() == true) yield return new KeyValuePair<string,object>("characteristic",Characteristic);
    }

  }

}

// end of file

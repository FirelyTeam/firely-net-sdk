// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// An ingredient of a manufactured item or pharmaceutical product
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Ingredient","http://hl7.org/fhir/StructureDefinition/Ingredient", IsResource=true)]
  public partial class Ingredient : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Ingredient"; } }

    /// <summary>
    /// The way in which this manufacturer is associated with the ingredient. For example whether it is a possible one (others allowed), or an exclusive authorized one for this ingredient. Note that this is not the manufacturing process role.
    /// (url: http://hl7.org/fhir/ValueSet/ingredient-manufacturer-role)
    /// (system: http://hl7.org/fhir/ingredient-manufacturer-role)
    /// </summary>
    [FhirEnumeration("IngredientManufacturerRole")]
    public enum IngredientManufacturerRole
    {
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/ingredient-manufacturer-role)
      /// </summary>
      [EnumLiteral("allowed", "http://hl7.org/fhir/ingredient-manufacturer-role"), Description("Manufacturer is specifically allowed for this ingredient")]
      Allowed,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/ingredient-manufacturer-role)
      /// </summary>
      [EnumLiteral("possible", "http://hl7.org/fhir/ingredient-manufacturer-role"), Description("Manufacturer is known to make this ingredient in general")]
      Possible,
      /// <summary>
      /// MISSING DESCRIPTION
      /// (system: http://hl7.org/fhir/ingredient-manufacturer-role)
      /// </summary>
      [EnumLiteral("actual", "http://hl7.org/fhir/ingredient-manufacturer-role"), Description("Manufacturer actually makes this particular ingredient")]
      Actual,
    }

    /// <summary>
    /// An organization that manufactures this ingredient
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#Manufacturer", IsNestedType=true)]
    public partial class ManufacturerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#Manufacturer"; } }

      /// <summary>
      /// allowed | possible | actual
      /// </summary>
      [FhirElement("role", InSummary=true, Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.Ingredient.IngredientManufacturerRole> RoleElement
      {
        get { return _RoleElement; }
        set { _RoleElement = value; OnPropertyChanged("RoleElement"); }
      }

      private Code<Hl7.Fhir.Model.Ingredient.IngredientManufacturerRole> _RoleElement;

      /// <summary>
      /// allowed | possible | actual
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.Ingredient.IngredientManufacturerRole? Role
      {
        get { return RoleElement != null ? RoleElement.Value : null; }
        set
        {
          if (value == null)
            RoleElement = null;
          else
            RoleElement = new Code<Hl7.Fhir.Model.Ingredient.IngredientManufacturerRole>(value);
          OnPropertyChanged("Role");
        }
      }

      /// <summary>
      /// An organization that manufactures this ingredient
      /// </summary>
      [FhirElement("manufacturer", InSummary=true, Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Manufacturer
      {
        get { return _Manufacturer; }
        set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Manufacturer;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ManufacturerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RoleElement != null) dest.RoleElement = (Code<Hl7.Fhir.Model.Ingredient.IngredientManufacturerRole>)RoleElement.DeepCopy();
        if(Manufacturer != null) dest.Manufacturer = (Hl7.Fhir.Model.ResourceReference)Manufacturer.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ManufacturerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ManufacturerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RoleElement, otherT.RoleElement)) return false;
        if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ManufacturerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RoleElement, otherT.RoleElement)) return false;
        if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RoleElement != null) yield return RoleElement;
          if (Manufacturer != null) yield return Manufacturer;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RoleElement != null) yield return new ElementValue("role", RoleElement);
          if (Manufacturer != null) yield return new ElementValue("manufacturer", Manufacturer);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "role":
            value = RoleElement;
            return RoleElement is not null;
          case "manufacturer":
            value = Manufacturer;
            return Manufacturer is not null;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RoleElement is not null) yield return new KeyValuePair<string,object>("role",RoleElement);
        if (Manufacturer is not null) yield return new KeyValuePair<string,object>("manufacturer",Manufacturer);
      }

    }

    /// <summary>
    /// The substance that comprises this ingredient
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#Substance", IsNestedType=true)]
    public partial class SubstanceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#Substance"; } }

      /// <summary>
      /// A code or full resource that represents the ingredient substance
      /// </summary>
      [FhirElement("code", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Code;

      /// <summary>
      /// The quantity of substance, per presentation, or per volume or mass, and type of quantity
      /// </summary>
      [FhirElement("strength", InSummary=true, Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Ingredient.StrengthComponent> Strength
      {
        get { if(_Strength==null) _Strength = new List<Hl7.Fhir.Model.Ingredient.StrengthComponent>(); return _Strength; }
        set { _Strength = value; OnPropertyChanged("Strength"); }
      }

      private List<Hl7.Fhir.Model.Ingredient.StrengthComponent> _Strength;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SubstanceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableReference)Code.DeepCopy();
        if(Strength != null) dest.Strength = new List<Hl7.Fhir.Model.Ingredient.StrengthComponent>(Strength.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SubstanceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SubstanceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Strength, otherT.Strength)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SubstanceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Strength, otherT.Strength)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          foreach (var elem in Strength) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          foreach (var elem in Strength) { if (elem != null) yield return new ElementValue("strength", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "strength":
            value = Strength;
            return Strength?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Strength?.Any() == true) yield return new KeyValuePair<string,object>("strength",Strength);
      }

    }

    /// <summary>
    /// The quantity of substance, per presentation, or per volume or mass, and type of quantity
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#Strength", IsNestedType=true)]
    public partial class StrengthComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#Strength"; } }

      /// <summary>
      /// The quantity of substance in the unit of presentation
      /// </summary>
      [FhirElement("presentation", InSummary=true, Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Presentation
      {
        get { return _Presentation; }
        set { _Presentation = value; OnPropertyChanged("Presentation"); }
      }

      private Hl7.Fhir.Model.DataType _Presentation;

      /// <summary>
      /// Text of either the whole presentation strength or a part of it (rest being in Strength.presentation as a ratio)
      /// </summary>
      [FhirElement("textPresentation", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextPresentationElement
      {
        get { return _TextPresentationElement; }
        set { _TextPresentationElement = value; OnPropertyChanged("TextPresentationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextPresentationElement;

      /// <summary>
      /// Text of either the whole presentation strength or a part of it (rest being in Strength.presentation as a ratio)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string TextPresentation
      {
        get { return TextPresentationElement != null ? TextPresentationElement.Value : null; }
        set
        {
          if (value == null)
            TextPresentationElement = null;
          else
            TextPresentationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("TextPresentation");
        }
      }

      /// <summary>
      /// The strength per unitary volume (or mass)
      /// </summary>
      [FhirElement("concentration", InSummary=true, Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Concentration
      {
        get { return _Concentration; }
        set { _Concentration = value; OnPropertyChanged("Concentration"); }
      }

      private Hl7.Fhir.Model.DataType _Concentration;

      /// <summary>
      /// Text of either the whole concentration strength or a part of it (rest being in Strength.concentration as a ratio)
      /// </summary>
      [FhirElement("textConcentration", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextConcentrationElement
      {
        get { return _TextConcentrationElement; }
        set { _TextConcentrationElement = value; OnPropertyChanged("TextConcentrationElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextConcentrationElement;

      /// <summary>
      /// Text of either the whole concentration strength or a part of it (rest being in Strength.concentration as a ratio)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string TextConcentration
      {
        get { return TextConcentrationElement != null ? TextConcentrationElement.Value : null; }
        set
        {
          if (value == null)
            TextConcentrationElement = null;
          else
            TextConcentrationElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("TextConcentration");
        }
      }

      /// <summary>
      /// When strength is measured at a particular point or distance
      /// </summary>
      [FhirElement("measurementPoint", InSummary=true, Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MeasurementPointElement
      {
        get { return _MeasurementPointElement; }
        set { _MeasurementPointElement = value; OnPropertyChanged("MeasurementPointElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MeasurementPointElement;

      /// <summary>
      /// When strength is measured at a particular point or distance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MeasurementPoint
      {
        get { return MeasurementPointElement != null ? MeasurementPointElement.Value : null; }
        set
        {
          if (value == null)
            MeasurementPointElement = null;
          else
            MeasurementPointElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MeasurementPoint");
        }
      }

      /// <summary>
      /// Where the strength range applies
      /// </summary>
      [FhirElement("country", InSummary=true, Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Country
      {
        get { if(_Country==null) _Country = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Country; }
        set { _Country = value; OnPropertyChanged("Country"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Country;

      /// <summary>
      /// Strength expressed in terms of a reference substance
      /// </summary>
      [FhirElement("referenceStrength", InSummary=true, Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent> ReferenceStrength
      {
        get { if(_ReferenceStrength==null) _ReferenceStrength = new List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent>(); return _ReferenceStrength; }
        set { _ReferenceStrength = value; OnPropertyChanged("ReferenceStrength"); }
      }

      private List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent> _ReferenceStrength;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StrengthComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Presentation != null) dest.Presentation = (Hl7.Fhir.Model.DataType)Presentation.DeepCopy();
        if(TextPresentationElement != null) dest.TextPresentationElement = (Hl7.Fhir.Model.FhirString)TextPresentationElement.DeepCopy();
        if(Concentration != null) dest.Concentration = (Hl7.Fhir.Model.DataType)Concentration.DeepCopy();
        if(TextConcentrationElement != null) dest.TextConcentrationElement = (Hl7.Fhir.Model.FhirString)TextConcentrationElement.DeepCopy();
        if(MeasurementPointElement != null) dest.MeasurementPointElement = (Hl7.Fhir.Model.FhirString)MeasurementPointElement.DeepCopy();
        if(Country != null) dest.Country = new List<Hl7.Fhir.Model.CodeableConcept>(Country.DeepCopy());
        if(ReferenceStrength != null) dest.ReferenceStrength = new List<Hl7.Fhir.Model.Ingredient.ReferenceStrengthComponent>(ReferenceStrength.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StrengthComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StrengthComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Presentation, otherT.Presentation)) return false;
        if( !DeepComparable.Matches(TextPresentationElement, otherT.TextPresentationElement)) return false;
        if( !DeepComparable.Matches(Concentration, otherT.Concentration)) return false;
        if( !DeepComparable.Matches(TextConcentrationElement, otherT.TextConcentrationElement)) return false;
        if( !DeepComparable.Matches(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.Matches(Country, otherT.Country)) return false;
        if( !DeepComparable.Matches(ReferenceStrength, otherT.ReferenceStrength)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StrengthComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Presentation, otherT.Presentation)) return false;
        if( !DeepComparable.IsExactly(TextPresentationElement, otherT.TextPresentationElement)) return false;
        if( !DeepComparable.IsExactly(Concentration, otherT.Concentration)) return false;
        if( !DeepComparable.IsExactly(TextConcentrationElement, otherT.TextConcentrationElement)) return false;
        if( !DeepComparable.IsExactly(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.IsExactly(Country, otherT.Country)) return false;
        if( !DeepComparable.IsExactly(ReferenceStrength, otherT.ReferenceStrength)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Presentation != null) yield return Presentation;
          if (TextPresentationElement != null) yield return TextPresentationElement;
          if (Concentration != null) yield return Concentration;
          if (TextConcentrationElement != null) yield return TextConcentrationElement;
          if (MeasurementPointElement != null) yield return MeasurementPointElement;
          foreach (var elem in Country) { if (elem != null) yield return elem; }
          foreach (var elem in ReferenceStrength) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Presentation != null) yield return new ElementValue("presentation", Presentation);
          if (TextPresentationElement != null) yield return new ElementValue("textPresentation", TextPresentationElement);
          if (Concentration != null) yield return new ElementValue("concentration", Concentration);
          if (TextConcentrationElement != null) yield return new ElementValue("textConcentration", TextConcentrationElement);
          if (MeasurementPointElement != null) yield return new ElementValue("measurementPoint", MeasurementPointElement);
          foreach (var elem in Country) { if (elem != null) yield return new ElementValue("country", elem); }
          foreach (var elem in ReferenceStrength) { if (elem != null) yield return new ElementValue("referenceStrength", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "presentation":
            value = Presentation;
            return Presentation is not null;
          case "textPresentation":
            value = TextPresentationElement;
            return TextPresentationElement is not null;
          case "concentration":
            value = Concentration;
            return Concentration is not null;
          case "textConcentration":
            value = TextConcentrationElement;
            return TextConcentrationElement is not null;
          case "measurementPoint":
            value = MeasurementPointElement;
            return MeasurementPointElement is not null;
          case "country":
            value = Country;
            return Country?.Any() == true;
          case "referenceStrength":
            value = ReferenceStrength;
            return ReferenceStrength?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Presentation is not null) yield return new KeyValuePair<string,object>("presentation",Presentation);
        if (TextPresentationElement is not null) yield return new KeyValuePair<string,object>("textPresentation",TextPresentationElement);
        if (Concentration is not null) yield return new KeyValuePair<string,object>("concentration",Concentration);
        if (TextConcentrationElement is not null) yield return new KeyValuePair<string,object>("textConcentration",TextConcentrationElement);
        if (MeasurementPointElement is not null) yield return new KeyValuePair<string,object>("measurementPoint",MeasurementPointElement);
        if (Country?.Any() == true) yield return new KeyValuePair<string,object>("country",Country);
        if (ReferenceStrength?.Any() == true) yield return new KeyValuePair<string,object>("referenceStrength",ReferenceStrength);
      }

    }

    /// <summary>
    /// Strength expressed in terms of a reference substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Ingredient#ReferenceStrength", IsNestedType=true)]
    public partial class ReferenceStrengthComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Ingredient#ReferenceStrength"; } }

      /// <summary>
      /// Relevant reference substance
      /// </summary>
      [FhirElement("substance", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableReference Substance
      {
        get { return _Substance; }
        set { _Substance = value; OnPropertyChanged("Substance"); }
      }

      private Hl7.Fhir.Model.CodeableReference _Substance;

      /// <summary>
      /// Strength expressed in terms of a reference substance
      /// </summary>
      [FhirElement("strength", InSummary=true, Order=50, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.RatioRange))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Strength
      {
        get { return _Strength; }
        set { _Strength = value; OnPropertyChanged("Strength"); }
      }

      private Hl7.Fhir.Model.DataType _Strength;

      /// <summary>
      /// When strength is measured at a particular point or distance
      /// </summary>
      [FhirElement("measurementPoint", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MeasurementPointElement
      {
        get { return _MeasurementPointElement; }
        set { _MeasurementPointElement = value; OnPropertyChanged("MeasurementPointElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MeasurementPointElement;

      /// <summary>
      /// When strength is measured at a particular point or distance
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MeasurementPoint
      {
        get { return MeasurementPointElement != null ? MeasurementPointElement.Value : null; }
        set
        {
          if (value == null)
            MeasurementPointElement = null;
          else
            MeasurementPointElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MeasurementPoint");
        }
      }

      /// <summary>
      /// Where the strength range applies
      /// </summary>
      [FhirElement("country", InSummary=true, Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Country
      {
        get { if(_Country==null) _Country = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Country; }
        set { _Country = value; OnPropertyChanged("Country"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Country;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ReferenceStrengthComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Substance != null) dest.Substance = (Hl7.Fhir.Model.CodeableReference)Substance.DeepCopy();
        if(Strength != null) dest.Strength = (Hl7.Fhir.Model.DataType)Strength.DeepCopy();
        if(MeasurementPointElement != null) dest.MeasurementPointElement = (Hl7.Fhir.Model.FhirString)MeasurementPointElement.DeepCopy();
        if(Country != null) dest.Country = new List<Hl7.Fhir.Model.CodeableConcept>(Country.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ReferenceStrengthComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ReferenceStrengthComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Substance, otherT.Substance)) return false;
        if( !DeepComparable.Matches(Strength, otherT.Strength)) return false;
        if( !DeepComparable.Matches(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.Matches(Country, otherT.Country)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ReferenceStrengthComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Substance, otherT.Substance)) return false;
        if( !DeepComparable.IsExactly(Strength, otherT.Strength)) return false;
        if( !DeepComparable.IsExactly(MeasurementPointElement, otherT.MeasurementPointElement)) return false;
        if( !DeepComparable.IsExactly(Country, otherT.Country)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Substance != null) yield return Substance;
          if (Strength != null) yield return Strength;
          if (MeasurementPointElement != null) yield return MeasurementPointElement;
          foreach (var elem in Country) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Substance != null) yield return new ElementValue("substance", Substance);
          if (Strength != null) yield return new ElementValue("strength", Strength);
          if (MeasurementPointElement != null) yield return new ElementValue("measurementPoint", MeasurementPointElement);
          foreach (var elem in Country) { if (elem != null) yield return new ElementValue("country", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "substance":
            value = Substance;
            return Substance is not null;
          case "strength":
            value = Strength;
            return Strength is not null;
          case "measurementPoint":
            value = MeasurementPointElement;
            return MeasurementPointElement is not null;
          case "country":
            value = Country;
            return Country?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        };

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Substance is not null) yield return new KeyValuePair<string,object>("substance",Substance);
        if (Strength is not null) yield return new KeyValuePair<string,object>("strength",Strength);
        if (MeasurementPointElement is not null) yield return new KeyValuePair<string,object>("measurementPoint",MeasurementPointElement);
        if (Country?.Any() == true) yield return new KeyValuePair<string,object>("country",Country);
      }

    }

    /// <summary>
    /// An identifier or code by which the ingredient can be referenced
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// The product which this ingredient is a constituent part of
    /// </summary>
    [FhirElement("for", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("MedicinalProductDefinition","AdministrableProductDefinition","ManufacturedItemDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> For
    {
      get { if(_For==null) _For = new List<Hl7.Fhir.Model.ResourceReference>(); return _For; }
      set { _For = value; OnPropertyChanged("For"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _For;

    /// <summary>
    /// Purpose of the ingredient within the product, e.g. active, inactive
    /// </summary>
    [FhirElement("role", InSummary=true, Order=120)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Role
    {
      get { return _Role; }
      set { _Role = value; OnPropertyChanged("Role"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Role;

    /// <summary>
    /// Precise action within the drug product, e.g. antioxidant, alkalizing agent
    /// </summary>
    [FhirElement("function", InSummary=true, Order=130)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Function
    {
      get { if(_Function==null) _Function = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Function; }
      set { _Function = value; OnPropertyChanged("Function"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Function;

    /// <summary>
    /// If the ingredient is a known or suspected allergen
    /// </summary>
    [FhirElement("allergenicIndicator", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean AllergenicIndicatorElement
    {
      get { return _AllergenicIndicatorElement; }
      set { _AllergenicIndicatorElement = value; OnPropertyChanged("AllergenicIndicatorElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _AllergenicIndicatorElement;

    /// <summary>
    /// If the ingredient is a known or suspected allergen
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? AllergenicIndicator
    {
      get { return AllergenicIndicatorElement != null ? AllergenicIndicatorElement.Value : null; }
      set
      {
        if (value == null)
          AllergenicIndicatorElement = null;
        else
          AllergenicIndicatorElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("AllergenicIndicator");
      }
    }

    /// <summary>
    /// An organization that manufactures this ingredient
    /// </summary>
    [FhirElement("manufacturer", InSummary=true, Order=150)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent> Manufacturer
    {
      get { if(_Manufacturer==null) _Manufacturer = new List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent>(); return _Manufacturer; }
      set { _Manufacturer = value; OnPropertyChanged("Manufacturer"); }
    }

    private List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent> _Manufacturer;

    /// <summary>
    /// The substance that comprises this ingredient
    /// </summary>
    [FhirElement("substance", InSummary=true, Order=160)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Ingredient.SubstanceComponent Substance
    {
      get { return _Substance; }
      set { _Substance = value; OnPropertyChanged("Substance"); }
    }

    private Hl7.Fhir.Model.Ingredient.SubstanceComponent _Substance;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Ingredient;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(For != null) dest.For = new List<Hl7.Fhir.Model.ResourceReference>(For.DeepCopy());
      if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
      if(Function != null) dest.Function = new List<Hl7.Fhir.Model.CodeableConcept>(Function.DeepCopy());
      if(AllergenicIndicatorElement != null) dest.AllergenicIndicatorElement = (Hl7.Fhir.Model.FhirBoolean)AllergenicIndicatorElement.DeepCopy();
      if(Manufacturer != null) dest.Manufacturer = new List<Hl7.Fhir.Model.Ingredient.ManufacturerComponent>(Manufacturer.DeepCopy());
      if(Substance != null) dest.Substance = (Hl7.Fhir.Model.Ingredient.SubstanceComponent)Substance.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Ingredient());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Ingredient;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(For, otherT.For)) return false;
      if( !DeepComparable.Matches(Role, otherT.Role)) return false;
      if( !DeepComparable.Matches(Function, otherT.Function)) return false;
      if( !DeepComparable.Matches(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;
      if( !DeepComparable.Matches(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.Matches(Substance, otherT.Substance)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Ingredient;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(For, otherT.For)) return false;
      if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
      if( !DeepComparable.IsExactly(Function, otherT.Function)) return false;
      if( !DeepComparable.IsExactly(AllergenicIndicatorElement, otherT.AllergenicIndicatorElement)) return false;
      if( !DeepComparable.IsExactly(Manufacturer, otherT.Manufacturer)) return false;
      if( !DeepComparable.IsExactly(Substance, otherT.Substance)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (StatusElement != null) yield return StatusElement;
        foreach (var elem in For) { if (elem != null) yield return elem; }
        if (Role != null) yield return Role;
        foreach (var elem in Function) { if (elem != null) yield return elem; }
        if (AllergenicIndicatorElement != null) yield return AllergenicIndicatorElement;
        foreach (var elem in Manufacturer) { if (elem != null) yield return elem; }
        if (Substance != null) yield return Substance;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        foreach (var elem in For) { if (elem != null) yield return new ElementValue("for", elem); }
        if (Role != null) yield return new ElementValue("role", Role);
        foreach (var elem in Function) { if (elem != null) yield return new ElementValue("function", elem); }
        if (AllergenicIndicatorElement != null) yield return new ElementValue("allergenicIndicator", AllergenicIndicatorElement);
        foreach (var elem in Manufacturer) { if (elem != null) yield return new ElementValue("manufacturer", elem); }
        if (Substance != null) yield return new ElementValue("substance", Substance);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "for":
          value = For;
          return For?.Any() == true;
        case "role":
          value = Role;
          return Role is not null;
        case "function":
          value = Function;
          return Function?.Any() == true;
        case "allergenicIndicator":
          value = AllergenicIndicatorElement;
          return AllergenicIndicatorElement is not null;
        case "manufacturer":
          value = Manufacturer;
          return Manufacturer?.Any() == true;
        case "substance":
          value = Substance;
          return Substance is not null;
        default:
          return base.TryGetValue(key, out value);
      };

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (For?.Any() == true) yield return new KeyValuePair<string,object>("for",For);
      if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
      if (Function?.Any() == true) yield return new KeyValuePair<string,object>("function",Function);
      if (AllergenicIndicatorElement is not null) yield return new KeyValuePair<string,object>("allergenicIndicator",AllergenicIndicatorElement);
      if (Manufacturer?.Any() == true) yield return new KeyValuePair<string,object>("manufacturer",Manufacturer);
      if (Substance is not null) yield return new KeyValuePair<string,object>("substance",Substance);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// CoverageEligibilityRequest resource
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("CoverageEligibilityRequest","http://hl7.org/fhir/StructureDefinition/CoverageEligibilityRequest", IsResource=true)]
  public partial class CoverageEligibilityRequest : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "CoverageEligibilityRequest"; } }

    /// <summary>
    /// A code specifying the types of information being requested.
    /// (url: http://hl7.org/fhir/ValueSet/eligibilityrequest-purpose)
    /// (system: http://hl7.org/fhir/eligibilityrequest-purpose)
    /// </summary>
    [FhirEnumeration("EligibilityRequestPurpose", "http://hl7.org/fhir/ValueSet/eligibilityrequest-purpose")]
    public enum EligibilityRequestPurpose
    {
      /// <summary>
      /// The prior authorization requirements for the listed, or discovered if specified, converages for the categories of service and/or specifed biling codes are requested.
      /// (system: http://hl7.org/fhir/eligibilityrequest-purpose)
      /// </summary>
      [EnumLiteral("auth-requirements", "http://hl7.org/fhir/eligibilityrequest-purpose"), Description("Coverage auth-requirements")]
      AuthRequirements,
      /// <summary>
      /// The plan benefits and optionally benefits consumed  for the listed, or discovered if specified, converages are requested.
      /// (system: http://hl7.org/fhir/eligibilityrequest-purpose)
      /// </summary>
      [EnumLiteral("benefits", "http://hl7.org/fhir/eligibilityrequest-purpose"), Description("Coverage benefits")]
      Benefits,
      /// <summary>
      /// The insurer is requested to report on any coverages which they are aware of in addition to any specifed.
      /// (system: http://hl7.org/fhir/eligibilityrequest-purpose)
      /// </summary>
      [EnumLiteral("discovery", "http://hl7.org/fhir/eligibilityrequest-purpose"), Description("Coverage Discovery")]
      Discovery,
      /// <summary>
      /// A check that the specified coverages are in-force is requested.
      /// (system: http://hl7.org/fhir/eligibilityrequest-purpose)
      /// </summary>
      [EnumLiteral("validation", "http://hl7.org/fhir/eligibilityrequest-purpose"), Description("Coverage Validation")]
      Validation,
    }

    /// <summary>
    /// Supporting information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CoverageEligibilityRequest#SupportingInformation", IsNestedType=true)]
    [BackboneType("CoverageEligibilityRequest.supportingInfo")]
    public partial class SupportingInformationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CoverageEligibilityRequest#SupportingInformation"; } }

      /// <summary>
      /// Information instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Information instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Data to be provided
      /// </summary>
      [FhirElement("information", Order=50)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Information
      {
        get { return _Information; }
        set { _Information = value; OnPropertyChanged("Information"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Information;

      /// <summary>
      /// Applies to all items
      /// </summary>
      [FhirElement("appliesToAll", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AppliesToAllElement
      {
        get { return _AppliesToAllElement; }
        set { _AppliesToAllElement = value; OnPropertyChanged("AppliesToAllElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AppliesToAllElement;

      /// <summary>
      /// Applies to all items
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? AppliesToAll
      {
        get { return AppliesToAllElement != null ? AppliesToAllElement.Value : null; }
        set
        {
          if (value == null)
            AppliesToAllElement = null;
          else
            AppliesToAllElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("AppliesToAll");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SupportingInformationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Information != null) dest.Information = (Hl7.Fhir.Model.ResourceReference)Information.DeepCopy();
        if(AppliesToAllElement != null) dest.AppliesToAllElement = (Hl7.Fhir.Model.FhirBoolean)AppliesToAllElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SupportingInformationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SupportingInformationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Information, otherT.Information)) return false;
        if( !DeepComparable.Matches(AppliesToAllElement, otherT.AppliesToAllElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SupportingInformationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Information, otherT.Information)) return false;
        if( !DeepComparable.IsExactly(AppliesToAllElement, otherT.AppliesToAllElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Information != null) yield return Information;
          if (AppliesToAllElement != null) yield return AppliesToAllElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Information != null) yield return new ElementValue("information", Information);
          if (AppliesToAllElement != null) yield return new ElementValue("appliesToAll", AppliesToAllElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "information":
            value = Information;
            return Information is not null;
          case "appliesToAll":
            value = AppliesToAllElement;
            return AppliesToAllElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Information is not null) yield return new KeyValuePair<string,object>("information",Information);
        if (AppliesToAllElement is not null) yield return new KeyValuePair<string,object>("appliesToAll",AppliesToAllElement);
      }

    }

    /// <summary>
    /// Patient insurance information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CoverageEligibilityRequest#Insurance", IsNestedType=true)]
    [BackboneType("CoverageEligibilityRequest.insurance")]
    public partial class InsuranceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CoverageEligibilityRequest#Insurance"; } }

      /// <summary>
      /// Applicable coverage
      /// </summary>
      [FhirElement("focal", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean FocalElement
      {
        get { return _FocalElement; }
        set { _FocalElement = value; OnPropertyChanged("FocalElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _FocalElement;

      /// <summary>
      /// Applicable coverage
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Focal
      {
        get { return FocalElement != null ? FocalElement.Value : null; }
        set
        {
          if (value == null)
            FocalElement = null;
          else
            FocalElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Focal");
        }
      }

      /// <summary>
      /// Insurance information
      /// </summary>
      [FhirElement("coverage", Order=50)]
      [CLSCompliant(false)]
      [References("Coverage")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Coverage
      {
        get { return _Coverage; }
        set { _Coverage = value; OnPropertyChanged("Coverage"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Coverage;

      /// <summary>
      /// Additional provider contract number
      /// </summary>
      [FhirElement("businessArrangement", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString BusinessArrangementElement
      {
        get { return _BusinessArrangementElement; }
        set { _BusinessArrangementElement = value; OnPropertyChanged("BusinessArrangementElement"); }
      }

      private Hl7.Fhir.Model.FhirString _BusinessArrangementElement;

      /// <summary>
      /// Additional provider contract number
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string BusinessArrangement
      {
        get { return BusinessArrangementElement != null ? BusinessArrangementElement.Value : null; }
        set
        {
          if (value == null)
            BusinessArrangementElement = null;
          else
            BusinessArrangementElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("BusinessArrangement");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InsuranceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(FocalElement != null) dest.FocalElement = (Hl7.Fhir.Model.FhirBoolean)FocalElement.DeepCopy();
        if(Coverage != null) dest.Coverage = (Hl7.Fhir.Model.ResourceReference)Coverage.DeepCopy();
        if(BusinessArrangementElement != null) dest.BusinessArrangementElement = (Hl7.Fhir.Model.FhirString)BusinessArrangementElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InsuranceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InsuranceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(FocalElement, otherT.FocalElement)) return false;
        if( !DeepComparable.Matches(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.Matches(BusinessArrangementElement, otherT.BusinessArrangementElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InsuranceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(FocalElement, otherT.FocalElement)) return false;
        if( !DeepComparable.IsExactly(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.IsExactly(BusinessArrangementElement, otherT.BusinessArrangementElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (FocalElement != null) yield return FocalElement;
          if (Coverage != null) yield return Coverage;
          if (BusinessArrangementElement != null) yield return BusinessArrangementElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (FocalElement != null) yield return new ElementValue("focal", FocalElement);
          if (Coverage != null) yield return new ElementValue("coverage", Coverage);
          if (BusinessArrangementElement != null) yield return new ElementValue("businessArrangement", BusinessArrangementElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "focal":
            value = FocalElement;
            return FocalElement is not null;
          case "coverage":
            value = Coverage;
            return Coverage is not null;
          case "businessArrangement":
            value = BusinessArrangementElement;
            return BusinessArrangementElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (FocalElement is not null) yield return new KeyValuePair<string,object>("focal",FocalElement);
        if (Coverage is not null) yield return new KeyValuePair<string,object>("coverage",Coverage);
        if (BusinessArrangementElement is not null) yield return new KeyValuePair<string,object>("businessArrangement",BusinessArrangementElement);
      }

    }

    /// <summary>
    /// Item to be evaluated for eligibiity
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CoverageEligibilityRequest#Details", IsNestedType=true)]
    [BackboneType("CoverageEligibilityRequest.item")]
    public partial class DetailsComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CoverageEligibilityRequest#Details"; } }

      /// <summary>
      /// Applicable exception or supporting information
      /// </summary>
      [FhirElement("supportingInfoSequence", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> SupportingInfoSequenceElement
      {
        get { if(_SupportingInfoSequenceElement==null) _SupportingInfoSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _SupportingInfoSequenceElement; }
        set { _SupportingInfoSequenceElement = value; OnPropertyChanged("SupportingInfoSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _SupportingInfoSequenceElement;

      /// <summary>
      /// Applicable exception or supporting information
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> SupportingInfoSequence
      {
        get { return SupportingInfoSequenceElement != null ? SupportingInfoSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            SupportingInfoSequenceElement = null;
          else
            SupportingInfoSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("SupportingInfoSequence");
        }
      }

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// Product or service billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Perfoming practitioner
      /// </summary>
      [FhirElement("provider", Order=80, FiveWs="FiveWs.source")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Provider
      {
        get { return _Provider; }
        set { _Provider = value; OnPropertyChanged("Provider"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Provider;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Servicing facility
      /// </summary>
      [FhirElement("facility", Order=110)]
      [CLSCompliant(false)]
      [References("Location","Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Facility
      {
        get { return _Facility; }
        set { _Facility = value; OnPropertyChanged("Facility"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Facility;

      /// <summary>
      /// Applicable diagnosis
      /// </summary>
      [FhirElement("diagnosis", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CoverageEligibilityRequest.DiagnosisComponent> Diagnosis
      {
        get { if(_Diagnosis==null) _Diagnosis = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.DiagnosisComponent>(); return _Diagnosis; }
        set { _Diagnosis = value; OnPropertyChanged("Diagnosis"); }
      }

      private List<Hl7.Fhir.Model.CoverageEligibilityRequest.DiagnosisComponent> _Diagnosis;

      /// <summary>
      /// Product or service details
      /// </summary>
      [FhirElement("detail", Order=130)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.ResourceReference>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DetailsComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SupportingInfoSequenceElement != null) dest.SupportingInfoSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(SupportingInfoSequenceElement.DeepCopy());
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(Provider != null) dest.Provider = (Hl7.Fhir.Model.ResourceReference)Provider.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(Facility != null) dest.Facility = (Hl7.Fhir.Model.ResourceReference)Facility.DeepCopy();
        if(Diagnosis != null) dest.Diagnosis = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.DiagnosisComponent>(Diagnosis.DeepCopy());
        if(Detail != null) dest.Detail = new List<Hl7.Fhir.Model.ResourceReference>(Detail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DetailsComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DetailsComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SupportingInfoSequenceElement, otherT.SupportingInfoSequenceElement)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(Provider, otherT.Provider)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(Facility, otherT.Facility)) return false;
        if( !DeepComparable.Matches(Diagnosis, otherT.Diagnosis)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DetailsComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SupportingInfoSequenceElement, otherT.SupportingInfoSequenceElement)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(Provider, otherT.Provider)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(Facility, otherT.Facility)) return false;
        if( !DeepComparable.IsExactly(Diagnosis, otherT.Diagnosis)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in SupportingInfoSequenceElement) { if (elem != null) yield return elem; }
          if (Category != null) yield return Category;
          if (ProductOrService != null) yield return ProductOrService;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          if (Provider != null) yield return Provider;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (Facility != null) yield return Facility;
          foreach (var elem in Diagnosis) { if (elem != null) yield return elem; }
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in SupportingInfoSequenceElement) { if (elem != null) yield return new ElementValue("supportingInfoSequence", elem); }
          if (Category != null) yield return new ElementValue("category", Category);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          if (Provider != null) yield return new ElementValue("provider", Provider);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (Facility != null) yield return new ElementValue("facility", Facility);
          foreach (var elem in Diagnosis) { if (elem != null) yield return new ElementValue("diagnosis", elem); }
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "supportingInfoSequence":
            value = SupportingInfoSequenceElement;
            return SupportingInfoSequenceElement?.Any() == true;
          case "category":
            value = Category;
            return Category is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "provider":
            value = Provider;
            return Provider is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "facility":
            value = Facility;
            return Facility is not null;
          case "diagnosis":
            value = Diagnosis;
            return Diagnosis?.Any() == true;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SupportingInfoSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("supportingInfoSequence",SupportingInfoSequenceElement);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (Provider is not null) yield return new KeyValuePair<string,object>("provider",Provider);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (Facility is not null) yield return new KeyValuePair<string,object>("facility",Facility);
        if (Diagnosis?.Any() == true) yield return new KeyValuePair<string,object>("diagnosis",Diagnosis);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// Applicable diagnosis
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("CoverageEligibilityRequest#Diagnosis", IsNestedType=true)]
    [BackboneType("CoverageEligibilityRequest.item.diagnosis")]
    public partial class DiagnosisComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "CoverageEligibilityRequest#Diagnosis"; } }

      /// <summary>
      /// Nature of illness or problem
      /// </summary>
      [FhirElement("diagnosis", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Condition")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Diagnosis
      {
        get { return _Diagnosis; }
        set { _Diagnosis = value; OnPropertyChanged("Diagnosis"); }
      }

      private Hl7.Fhir.Model.DataType _Diagnosis;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DiagnosisComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Diagnosis != null) dest.Diagnosis = (Hl7.Fhir.Model.DataType)Diagnosis.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DiagnosisComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Diagnosis, otherT.Diagnosis)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Diagnosis, otherT.Diagnosis)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Diagnosis != null) yield return Diagnosis;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Diagnosis != null) yield return new ElementValue("diagnosis", Diagnosis);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "diagnosis":
            value = Diagnosis;
            return Diagnosis is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Diagnosis is not null) yield return new KeyValuePair<string,object>("diagnosis",Diagnosis);
      }

    }

    /// <summary>
    /// Business Identifier for coverage eligiblity request
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("EligibilityRequestStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.FinancialResourceStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.FinancialResourceStatusCodes> _StatusElement;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.FinancialResourceStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Desired processing priority
    /// </summary>
    [FhirElement("priority", Order=110, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Priority
    {
      get { return _Priority; }
      set { _Priority = value; OnPropertyChanged("Priority"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Priority;

    /// <summary>
    /// auth-requirements | benefits | discovery | validation
    /// </summary>
    [FhirElement("purpose", InSummary=true, Order=120, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("EligibilityRequestPurpose")]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose>> PurposeElement
    {
      get { if(_PurposeElement==null) _PurposeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose>>(); return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private List<Code<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose>> _PurposeElement;

    /// <summary>
    /// auth-requirements | benefits | discovery | validation
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose?> Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose>(elem)));
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Intended recipient of products and services
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=130, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// Estimated date or dates of service
    /// </summary>
    [FhirElement("serviced", Order=140, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.Period))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Serviced
    {
      get { return _Serviced; }
      set { _Serviced = value; OnPropertyChanged("Serviced"); }
    }

    private Hl7.Fhir.Model.DataType _Serviced;

    /// <summary>
    /// Creation date
    /// </summary>
    [FhirElement("created", InSummary=true, Order=150, FiveWs="FiveWs.recorded")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CreatedElement
    {
      get { return _CreatedElement; }
      set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

    /// <summary>
    /// Creation date
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Created
    {
      get { return CreatedElement != null ? CreatedElement.Value : null; }
      set
      {
        if (value == null)
          CreatedElement = null;
        else
          CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Created");
      }
    }

    /// <summary>
    /// Author
    /// </summary>
    [FhirElement("enterer", Order=160, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Enterer
    {
      get { return _Enterer; }
      set { _Enterer = value; OnPropertyChanged("Enterer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Enterer;

    /// <summary>
    /// Party responsible for the request
    /// </summary>
    [FhirElement("provider", Order=170, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Provider
    {
      get { return _Provider; }
      set { _Provider = value; OnPropertyChanged("Provider"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Provider;

    /// <summary>
    /// Coverage issuer
    /// </summary>
    [FhirElement("insurer", InSummary=true, Order=180, FiveWs="FiveWs.who")]
    [CLSCompliant(false)]
    [References("Organization")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Insurer
    {
      get { return _Insurer; }
      set { _Insurer = value; OnPropertyChanged("Insurer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Insurer;

    /// <summary>
    /// Servicing facility
    /// </summary>
    [FhirElement("facility", Order=190, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Facility
    {
      get { return _Facility; }
      set { _Facility = value; OnPropertyChanged("Facility"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Facility;

    /// <summary>
    /// Supporting information
    /// </summary>
    [FhirElement("supportingInfo", Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CoverageEligibilityRequest.SupportingInformationComponent> SupportingInfo
    {
      get { if(_SupportingInfo==null) _SupportingInfo = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.SupportingInformationComponent>(); return _SupportingInfo; }
      set { _SupportingInfo = value; OnPropertyChanged("SupportingInfo"); }
    }

    private List<Hl7.Fhir.Model.CoverageEligibilityRequest.SupportingInformationComponent> _SupportingInfo;

    /// <summary>
    /// Patient insurance information
    /// </summary>
    [FhirElement("insurance", Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CoverageEligibilityRequest.InsuranceComponent> Insurance
    {
      get { if(_Insurance==null) _Insurance = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.InsuranceComponent>(); return _Insurance; }
      set { _Insurance = value; OnPropertyChanged("Insurance"); }
    }

    private List<Hl7.Fhir.Model.CoverageEligibilityRequest.InsuranceComponent> _Insurance;

    /// <summary>
    /// Item to be evaluated for eligibiity
    /// </summary>
    [FhirElement("item", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CoverageEligibilityRequest.DetailsComponent> Item
    {
      get { if(_Item==null) _Item = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.DetailsComponent>(); return _Item; }
      set { _Item = value; OnPropertyChanged("Item"); }
    }

    private List<Hl7.Fhir.Model.CoverageEligibilityRequest.DetailsComponent> _Item;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as CoverageEligibilityRequest;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>)StatusElement.DeepCopy();
      if(Priority != null) dest.Priority = (Hl7.Fhir.Model.CodeableConcept)Priority.DeepCopy();
      if(PurposeElement != null) dest.PurposeElement = new List<Code<Hl7.Fhir.Model.CoverageEligibilityRequest.EligibilityRequestPurpose>>(PurposeElement.DeepCopy());
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(Serviced != null) dest.Serviced = (Hl7.Fhir.Model.DataType)Serviced.DeepCopy();
      if(CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
      if(Enterer != null) dest.Enterer = (Hl7.Fhir.Model.ResourceReference)Enterer.DeepCopy();
      if(Provider != null) dest.Provider = (Hl7.Fhir.Model.ResourceReference)Provider.DeepCopy();
      if(Insurer != null) dest.Insurer = (Hl7.Fhir.Model.ResourceReference)Insurer.DeepCopy();
      if(Facility != null) dest.Facility = (Hl7.Fhir.Model.ResourceReference)Facility.DeepCopy();
      if(SupportingInfo != null) dest.SupportingInfo = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.SupportingInformationComponent>(SupportingInfo.DeepCopy());
      if(Insurance != null) dest.Insurance = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.InsuranceComponent>(Insurance.DeepCopy());
      if(Item != null) dest.Item = new List<Hl7.Fhir.Model.CoverageEligibilityRequest.DetailsComponent>(Item.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new CoverageEligibilityRequest());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as CoverageEligibilityRequest;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Priority, otherT.Priority)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(Serviced, otherT.Serviced)) return false;
      if( !DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.Matches(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.Matches(Provider, otherT.Provider)) return false;
      if( !DeepComparable.Matches(Insurer, otherT.Insurer)) return false;
      if( !DeepComparable.Matches(Facility, otherT.Facility)) return false;
      if( !DeepComparable.Matches(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.Matches(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.Matches(Item, otherT.Item)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as CoverageEligibilityRequest;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Priority, otherT.Priority)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(Serviced, otherT.Serviced)) return false;
      if( !DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.IsExactly(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.IsExactly(Provider, otherT.Provider)) return false;
      if( !DeepComparable.IsExactly(Insurer, otherT.Insurer)) return false;
      if( !DeepComparable.IsExactly(Facility, otherT.Facility)) return false;
      if( !DeepComparable.IsExactly(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.IsExactly(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.IsExactly(Item, otherT.Item)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (Priority != null) yield return Priority;
        foreach (var elem in PurposeElement) { if (elem != null) yield return elem; }
        if (Patient != null) yield return Patient;
        if (Serviced != null) yield return Serviced;
        if (CreatedElement != null) yield return CreatedElement;
        if (Enterer != null) yield return Enterer;
        if (Provider != null) yield return Provider;
        if (Insurer != null) yield return Insurer;
        if (Facility != null) yield return Facility;
        foreach (var elem in SupportingInfo) { if (elem != null) yield return elem; }
        foreach (var elem in Insurance) { if (elem != null) yield return elem; }
        foreach (var elem in Item) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Priority != null) yield return new ElementValue("priority", Priority);
        foreach (var elem in PurposeElement) { if (elem != null) yield return new ElementValue("purpose", elem); }
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (Serviced != null) yield return new ElementValue("serviced", Serviced);
        if (CreatedElement != null) yield return new ElementValue("created", CreatedElement);
        if (Enterer != null) yield return new ElementValue("enterer", Enterer);
        if (Provider != null) yield return new ElementValue("provider", Provider);
        if (Insurer != null) yield return new ElementValue("insurer", Insurer);
        if (Facility != null) yield return new ElementValue("facility", Facility);
        foreach (var elem in SupportingInfo) { if (elem != null) yield return new ElementValue("supportingInfo", elem); }
        foreach (var elem in Insurance) { if (elem != null) yield return new ElementValue("insurance", elem); }
        foreach (var elem in Item) { if (elem != null) yield return new ElementValue("item", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "priority":
          value = Priority;
          return Priority is not null;
        case "purpose":
          value = PurposeElement;
          return PurposeElement?.Any() == true;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "serviced":
          value = Serviced;
          return Serviced is not null;
        case "created":
          value = CreatedElement;
          return CreatedElement is not null;
        case "enterer":
          value = Enterer;
          return Enterer is not null;
        case "provider":
          value = Provider;
          return Provider is not null;
        case "insurer":
          value = Insurer;
          return Insurer is not null;
        case "facility":
          value = Facility;
          return Facility is not null;
        case "supportingInfo":
          value = SupportingInfo;
          return SupportingInfo?.Any() == true;
        case "insurance":
          value = Insurance;
          return Insurance?.Any() == true;
        case "item":
          value = Item;
          return Item?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Priority is not null) yield return new KeyValuePair<string,object>("priority",Priority);
      if (PurposeElement?.Any() == true) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (Serviced is not null) yield return new KeyValuePair<string,object>("serviced",Serviced);
      if (CreatedElement is not null) yield return new KeyValuePair<string,object>("created",CreatedElement);
      if (Enterer is not null) yield return new KeyValuePair<string,object>("enterer",Enterer);
      if (Provider is not null) yield return new KeyValuePair<string,object>("provider",Provider);
      if (Insurer is not null) yield return new KeyValuePair<string,object>("insurer",Insurer);
      if (Facility is not null) yield return new KeyValuePair<string,object>("facility",Facility);
      if (SupportingInfo?.Any() == true) yield return new KeyValuePair<string,object>("supportingInfo",SupportingInfo);
      if (Insurance?.Any() == true) yield return new KeyValuePair<string,object>("insurance",Insurance);
      if (Item?.Any() == true) yield return new KeyValuePair<string,object>("item",Item);
    }

  }

}

// end of file

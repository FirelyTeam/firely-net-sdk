// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Search parameter for a resource
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("SearchParameter","http://hl7.org/fhir/StructureDefinition/SearchParameter", IsResource=true)]
  public partial class SearchParameter : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "SearchParameter"; } }

    /// <summary>
    /// How a search parameter relates to the set of elements returned by evaluating its xpath query.
    /// (url: http://hl7.org/fhir/ValueSet/search-xpath-usage)
    /// (system: http://hl7.org/fhir/search-xpath-usage)
    /// </summary>
    [FhirEnumeration("XPathUsageType")]
    public enum XPathUsageType
    {
      /// <summary>
      /// The search parameter is derived directly from the selected nodes based on the type definitions.
      /// (system: http://hl7.org/fhir/search-xpath-usage)
      /// </summary>
      [EnumLiteral("normal", "http://hl7.org/fhir/search-xpath-usage"), Description("Normal")]
      Normal,
      /// <summary>
      /// The search parameter is derived by a phonetic transform from the selected nodes.
      /// (system: http://hl7.org/fhir/search-xpath-usage)
      /// </summary>
      [EnumLiteral("phonetic", "http://hl7.org/fhir/search-xpath-usage"), Description("Phonetic")]
      Phonetic,
      /// <summary>
      /// The search parameter is based on a spatial transform of the selected nodes.
      /// (system: http://hl7.org/fhir/search-xpath-usage)
      /// </summary>
      [EnumLiteral("nearby", "http://hl7.org/fhir/search-xpath-usage"), Description("Nearby")]
      Nearby,
      /// <summary>
      /// The search parameter is based on a spatial transform of the selected nodes, using physical distance from the middle.
      /// (system: http://hl7.org/fhir/search-xpath-usage)
      /// </summary>
      [EnumLiteral("distance", "http://hl7.org/fhir/search-xpath-usage"), Description("Distance")]
      Distance,
      /// <summary>
      /// The interpretation of the xpath statement is unknown (and can't be automated).
      /// (system: http://hl7.org/fhir/search-xpath-usage)
      /// </summary>
      [EnumLiteral("other", "http://hl7.org/fhir/search-xpath-usage"), Description("Other")]
      Other,
    }

    /// <summary>
    /// What Search Comparator Codes are supported in search.
    /// (url: http://hl7.org/fhir/ValueSet/search-comparator)
    /// (system: http://hl7.org/fhir/search-comparator)
    /// </summary>
    [FhirEnumeration("SearchComparator")]
    public enum SearchComparator
    {
      /// <summary>
      /// the value for the parameter in the resource is equal to the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("eq", "http://hl7.org/fhir/search-comparator"), Description("Equals")]
      Eq,
      /// <summary>
      /// the value for the parameter in the resource is not equal to the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("ne", "http://hl7.org/fhir/search-comparator"), Description("Not Equals")]
      Ne,
      /// <summary>
      /// the value for the parameter in the resource is greater than the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("gt", "http://hl7.org/fhir/search-comparator"), Description("Greater Than")]
      Gt,
      /// <summary>
      /// the value for the parameter in the resource is less than the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("lt", "http://hl7.org/fhir/search-comparator"), Description("Less Than")]
      Lt,
      /// <summary>
      /// the value for the parameter in the resource is greater or equal to the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("ge", "http://hl7.org/fhir/search-comparator"), Description("Greater or Equals")]
      Ge,
      /// <summary>
      /// the value for the parameter in the resource is less or equal to the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("le", "http://hl7.org/fhir/search-comparator"), Description("Less of Equal")]
      Le,
      /// <summary>
      /// the value for the parameter in the resource starts after the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("sa", "http://hl7.org/fhir/search-comparator"), Description("Starts After")]
      Sa,
      /// <summary>
      /// the value for the parameter in the resource ends before the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("eb", "http://hl7.org/fhir/search-comparator"), Description("Ends Before")]
      Eb,
      /// <summary>
      /// the value for the parameter in the resource is approximately the same to the provided value.
      /// (system: http://hl7.org/fhir/search-comparator)
      /// </summary>
      [EnumLiteral("ap", "http://hl7.org/fhir/search-comparator"), Description("Approximately")]
      Ap,
    }

    /// <summary>
    /// A supported modifier for a search parameter.
    /// (url: http://hl7.org/fhir/ValueSet/search-modifier-code)
    /// (system: http://hl7.org/fhir/search-modifier-code)
    /// </summary>
    [FhirEnumeration("SearchModifierCode")]
    public enum SearchModifierCode
    {
      /// <summary>
      /// The search parameter returns resources that have a value or not.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("missing", "http://hl7.org/fhir/search-modifier-code"), Description("Missing")]
      Missing,
      /// <summary>
      /// The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("exact", "http://hl7.org/fhir/search-modifier-code"), Description("Exact")]
      Exact,
      /// <summary>
      /// The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("contains", "http://hl7.org/fhir/search-modifier-code"), Description("Contains")]
      Contains,
      /// <summary>
      /// The search parameter returns resources that do not contain a match.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("not", "http://hl7.org/fhir/search-modifier-code"), Description("Not")]
      Not,
      /// <summary>
      /// The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("text", "http://hl7.org/fhir/search-modifier-code"), Description("Text")]
      Text,
      /// <summary>
      /// The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("in", "http://hl7.org/fhir/search-modifier-code"), Description("In")]
      In,
      /// <summary>
      /// The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("not-in", "http://hl7.org/fhir/search-modifier-code"), Description("Not In")]
      NotIn,
      /// <summary>
      /// The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("below", "http://hl7.org/fhir/search-modifier-code"), Description("Below")]
      Below,
      /// <summary>
      /// The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("above", "http://hl7.org/fhir/search-modifier-code"), Description("Above")]
      Above,
      /// <summary>
      /// The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("type", "http://hl7.org/fhir/search-modifier-code"), Description("Type")]
      Type,
      /// <summary>
      /// The search parameter applies to the identifier on the resource, not the reference.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("identifier", "http://hl7.org/fhir/search-modifier-code"), Description("Identifier")]
      Identifier,
      /// <summary>
      /// The search parameter has the format system|code|value, where the system and code refer to an Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present.
      /// (system: http://hl7.org/fhir/search-modifier-code)
      /// </summary>
      [EnumLiteral("ofType", "http://hl7.org/fhir/search-modifier-code"), Description("Of Type")]
      OfType,
    }

    /// <summary>
    /// For Composite resources to define the parts
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("SearchParameter#Component", IsNestedType=true)]
    public partial class ComponentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "SearchParameter#Component"; } }

      /// <summary>
      /// Defines how the part works
      /// </summary>
      [FhirElement("definition", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Canonical DefinitionElement
      {
        get { return _DefinitionElement; }
        set { _DefinitionElement = value; OnPropertyChanged("DefinitionElement"); }
      }

      private Hl7.Fhir.Model.Canonical _DefinitionElement;

      /// <summary>
      /// Defines how the part works
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Definition
      {
        get { return DefinitionElement != null ? DefinitionElement.Value : null; }
        set
        {
          if (value == null)
            DefinitionElement = null;
          else
            DefinitionElement = new Hl7.Fhir.Model.Canonical(value);
          OnPropertyChanged("Definition");
        }
      }

      /// <summary>
      /// Subexpression relative to main expression
      /// </summary>
      [FhirElement("expression", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ExpressionElement
      {
        get { return _ExpressionElement; }
        set { _ExpressionElement = value; OnPropertyChanged("ExpressionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ExpressionElement;

      /// <summary>
      /// Subexpression relative to main expression
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Expression
      {
        get { return ExpressionElement != null ? ExpressionElement.Value : null; }
        set
        {
          if (value == null)
            ExpressionElement = null;
          else
            ExpressionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Expression");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ComponentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DefinitionElement != null) dest.DefinitionElement = (Hl7.Fhir.Model.Canonical)DefinitionElement.DeepCopy();
        if(ExpressionElement != null) dest.ExpressionElement = (Hl7.Fhir.Model.FhirString)ExpressionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ComponentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DefinitionElement, otherT.DefinitionElement)) return false;
        if( !DeepComparable.Matches(ExpressionElement, otherT.ExpressionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ComponentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DefinitionElement, otherT.DefinitionElement)) return false;
        if( !DeepComparable.IsExactly(ExpressionElement, otherT.ExpressionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DefinitionElement != null) yield return DefinitionElement;
          if (ExpressionElement != null) yield return ExpressionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DefinitionElement != null) yield return new ElementValue("definition", DefinitionElement);
          if (ExpressionElement != null) yield return new ElementValue("expression", ExpressionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "definition":
            value = DefinitionElement;
            return DefinitionElement is not null;
          case "expression":
            value = ExpressionElement;
            return ExpressionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DefinitionElement is not null) yield return new KeyValuePair<string,object>("definition",DefinitionElement);
        if (ExpressionElement is not null) yield return new KeyValuePair<string,object>("expression",ExpressionElement);
      }

    }

    /// <summary>
    /// Canonical identifier for this search parameter, represented as a URI (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this search parameter, represented as a URI (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Business version of the search parameter
    /// </summary>
    [FhirElement("version", InSummary=true, Order=100, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the search parameter
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this search parameter (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=110)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this search parameter (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Original definition for the search parameter
    /// </summary>
    [FhirElement("derivedFrom", Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.Canonical DerivedFromElement
    {
      get { return _DerivedFromElement; }
      set { _DerivedFromElement = value; OnPropertyChanged("DerivedFromElement"); }
    }

    private Hl7.Fhir.Model.Canonical _DerivedFromElement;

    /// <summary>
    /// Original definition for the search parameter
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string DerivedFrom
    {
      get { return DerivedFromElement != null ? DerivedFromElement.Value : null; }
      set
      {
        if (value == null)
          DerivedFromElement = null;
        else
          DerivedFromElement = new Hl7.Fhir.Model.Canonical(value);
        OnPropertyChanged("DerivedFrom");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=130, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, Order=140, FiveWs="FiveWs.class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=150, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=160, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the search parameter
    /// </summary>
    [FhirElement("description", InSummary=true, Order=180)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Description
    {
      get { return _Description; }
      set { _Description = value; OnPropertyChanged("Description"); }
    }

    private Hl7.Fhir.Model.Markdown _Description;

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for search parameter (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this search parameter is defined
    /// </summary>
    [FhirElement("purpose", Order=210, FiveWs="FiveWs.why[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown Purpose
    {
      get { return _Purpose; }
      set { _Purpose = value; OnPropertyChanged("Purpose"); }
    }

    private Hl7.Fhir.Model.Markdown _Purpose;

    /// <summary>
    /// Code used in URL
    /// </summary>
    [FhirElement("code", InSummary=true, Order=220)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.Code CodeElement
    {
      get { return _CodeElement; }
      set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
    }

    private Hl7.Fhir.Model.Code _CodeElement;

    /// <summary>
    /// Code used in URL
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Code
    {
      get { return CodeElement != null ? CodeElement.Value : null; }
      set
      {
        if (value == null)
          CodeElement = null;
        else
          CodeElement = new Hl7.Fhir.Model.Code(value);
        OnPropertyChanged("Code");
      }
    }

    /// <summary>
    /// The resource type(s) this search parameter applies to
    /// </summary>
    [FhirElement("base", InSummary=true, Order=230)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.ResourceType>> BaseElement
    {
      get { if(_BaseElement==null) _BaseElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>>(); return _BaseElement; }
      set { _BaseElement = value; OnPropertyChanged("BaseElement"); }
    }

    private List<Code<Hl7.Fhir.Model.ResourceType>> _BaseElement;

    /// <summary>
    /// The resource type(s) this search parameter applies to
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.ResourceType?> Base
    {
      get { return BaseElement != null ? BaseElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          BaseElement = null;
        else
          BaseElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>(elem)));
        OnPropertyChanged("Base");
      }
    }

    /// <summary>
    /// number | date | string | token | reference | composite | quantity | uri | special
    /// </summary>
    [FhirElement("type", InSummary=true, Order=240)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.SearchParamType> TypeElement
    {
      get { return _TypeElement; }
      set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
    }

    private Code<Hl7.Fhir.Model.SearchParamType> _TypeElement;

    /// <summary>
    /// number | date | string | token | reference | composite | quantity | uri | special
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.SearchParamType? Type
    {
      get { return TypeElement != null ? TypeElement.Value : null; }
      set
      {
        if (value == null)
          TypeElement = null;
        else
          TypeElement = new Code<Hl7.Fhir.Model.SearchParamType>(value);
        OnPropertyChanged("Type");
      }
    }

    /// <summary>
    /// FHIRPath expression that extracts the values
    /// </summary>
    [FhirElement("expression", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString ExpressionElement
    {
      get { return _ExpressionElement; }
      set { _ExpressionElement = value; OnPropertyChanged("ExpressionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _ExpressionElement;

    /// <summary>
    /// FHIRPath expression that extracts the values
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Expression
    {
      get { return ExpressionElement != null ? ExpressionElement.Value : null; }
      set
      {
        if (value == null)
          ExpressionElement = null;
        else
          ExpressionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Expression");
      }
    }

    /// <summary>
    /// XPath that extracts the values
    /// </summary>
    [FhirElement("xpath", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString XpathElement
    {
      get { return _XpathElement; }
      set { _XpathElement = value; OnPropertyChanged("XpathElement"); }
    }

    private Hl7.Fhir.Model.FhirString _XpathElement;

    /// <summary>
    /// XPath that extracts the values
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Xpath
    {
      get { return XpathElement != null ? XpathElement.Value : null; }
      set
      {
        if (value == null)
          XpathElement = null;
        else
          XpathElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Xpath");
      }
    }

    /// <summary>
    /// normal | phonetic | nearby | distance | other
    /// </summary>
    [FhirElement("xpathUsage", Order=270)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.SearchParameter.XPathUsageType> XpathUsageElement
    {
      get { return _XpathUsageElement; }
      set { _XpathUsageElement = value; OnPropertyChanged("XpathUsageElement"); }
    }

    private Code<Hl7.Fhir.Model.SearchParameter.XPathUsageType> _XpathUsageElement;

    /// <summary>
    /// normal | phonetic | nearby | distance | other
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.SearchParameter.XPathUsageType? XpathUsage
    {
      get { return XpathUsageElement != null ? XpathUsageElement.Value : null; }
      set
      {
        if (value == null)
          XpathUsageElement = null;
        else
          XpathUsageElement = new Code<Hl7.Fhir.Model.SearchParameter.XPathUsageType>(value);
        OnPropertyChanged("XpathUsage");
      }
    }

    /// <summary>
    /// Types of resource (if a resource reference)
    /// </summary>
    [FhirElement("target", Order=280)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.ResourceType>> TargetElement
    {
      get { if(_TargetElement==null) _TargetElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>>(); return _TargetElement; }
      set { _TargetElement = value; OnPropertyChanged("TargetElement"); }
    }

    private List<Code<Hl7.Fhir.Model.ResourceType>> _TargetElement;

    /// <summary>
    /// Types of resource (if a resource reference)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.ResourceType?> Target
    {
      get { return TargetElement != null ? TargetElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          TargetElement = null;
        else
          TargetElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.ResourceType>(elem)));
        OnPropertyChanged("Target");
      }
    }

    /// <summary>
    /// Allow multiple values per parameter (or)
    /// </summary>
    [FhirElement("multipleOr", Order=290)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean MultipleOrElement
    {
      get { return _MultipleOrElement; }
      set { _MultipleOrElement = value; OnPropertyChanged("MultipleOrElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _MultipleOrElement;

    /// <summary>
    /// Allow multiple values per parameter (or)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? MultipleOr
    {
      get { return MultipleOrElement != null ? MultipleOrElement.Value : null; }
      set
      {
        if (value == null)
          MultipleOrElement = null;
        else
          MultipleOrElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("MultipleOr");
      }
    }

    /// <summary>
    /// Allow multiple parameters (and)
    /// </summary>
    [FhirElement("multipleAnd", Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean MultipleAndElement
    {
      get { return _MultipleAndElement; }
      set { _MultipleAndElement = value; OnPropertyChanged("MultipleAndElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _MultipleAndElement;

    /// <summary>
    /// Allow multiple parameters (and)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? MultipleAnd
    {
      get { return MultipleAndElement != null ? MultipleAndElement.Value : null; }
      set
      {
        if (value == null)
          MultipleAndElement = null;
        else
          MultipleAndElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("MultipleAnd");
      }
    }

    /// <summary>
    /// eq | ne | gt | lt | ge | le | sa | eb | ap
    /// </summary>
    [FhirElement("comparator", Order=310)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.SearchParameter.SearchComparator>> ComparatorElement
    {
      get { if(_ComparatorElement==null) _ComparatorElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchComparator>>(); return _ComparatorElement; }
      set { _ComparatorElement = value; OnPropertyChanged("ComparatorElement"); }
    }

    private List<Code<Hl7.Fhir.Model.SearchParameter.SearchComparator>> _ComparatorElement;

    /// <summary>
    /// eq | ne | gt | lt | ge | le | sa | eb | ap
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.SearchParameter.SearchComparator?> Comparator
    {
      get { return ComparatorElement != null ? ComparatorElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ComparatorElement = null;
        else
          ComparatorElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchComparator>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchComparator>(elem)));
        OnPropertyChanged("Comparator");
      }
    }

    /// <summary>
    /// missing | exact | contains | not | text | in | not-in | below | above | type | identifier | ofType
    /// </summary>
    [FhirElement("modifier", Order=320)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Code<Hl7.Fhir.Model.SearchParameter.SearchModifierCode>> ModifierElement
    {
      get { if(_ModifierElement==null) _ModifierElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchModifierCode>>(); return _ModifierElement; }
      set { _ModifierElement = value; OnPropertyChanged("ModifierElement"); }
    }

    private List<Code<Hl7.Fhir.Model.SearchParameter.SearchModifierCode>> _ModifierElement;

    /// <summary>
    /// missing | exact | contains | not | text | in | not-in | below | above | type | identifier | ofType
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<Hl7.Fhir.Model.SearchParameter.SearchModifierCode?> Modifier
    {
      get { return ModifierElement != null ? ModifierElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ModifierElement = null;
        else
          ModifierElement = new List<Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchModifierCode>>(value.Select(elem=>new Hl7.Fhir.Model.Code<Hl7.Fhir.Model.SearchParameter.SearchModifierCode>(elem)));
        OnPropertyChanged("Modifier");
      }
    }

    /// <summary>
    /// Chained names supported
    /// </summary>
    [FhirElement("chain", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirString> ChainElement
    {
      get { if(_ChainElement==null) _ChainElement = new List<Hl7.Fhir.Model.FhirString>(); return _ChainElement; }
      set { _ChainElement = value; OnPropertyChanged("ChainElement"); }
    }

    private List<Hl7.Fhir.Model.FhirString> _ChainElement;

    /// <summary>
    /// Chained names supported
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> Chain
    {
      get { return ChainElement != null ? ChainElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          ChainElement = null;
        else
          ChainElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
        OnPropertyChanged("Chain");
      }
    }

    /// <summary>
    /// For Composite resources to define the parts
    /// </summary>
    [FhirElement("component", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.SearchParameter.ComponentComponent> Component
    {
      get { if(_Component==null) _Component = new List<Hl7.Fhir.Model.SearchParameter.ComponentComponent>(); return _Component; }
      set { _Component = value; OnPropertyChanged("Component"); }
    }

    private List<Hl7.Fhir.Model.SearchParameter.ComponentComponent> _Component;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as SearchParameter;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(DerivedFromElement != null) dest.DerivedFromElement = (Hl7.Fhir.Model.Canonical)DerivedFromElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(Description != null) dest.Description = (Hl7.Fhir.Model.Markdown)Description.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(Purpose != null) dest.Purpose = (Hl7.Fhir.Model.Markdown)Purpose.DeepCopy();
      if(CodeElement != null) dest.CodeElement = (Hl7.Fhir.Model.Code)CodeElement.DeepCopy();
      if(BaseElement != null) dest.BaseElement = new List<Code<Hl7.Fhir.Model.ResourceType>>(BaseElement.DeepCopy());
      if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.SearchParamType>)TypeElement.DeepCopy();
      if(ExpressionElement != null) dest.ExpressionElement = (Hl7.Fhir.Model.FhirString)ExpressionElement.DeepCopy();
      if(XpathElement != null) dest.XpathElement = (Hl7.Fhir.Model.FhirString)XpathElement.DeepCopy();
      if(XpathUsageElement != null) dest.XpathUsageElement = (Code<Hl7.Fhir.Model.SearchParameter.XPathUsageType>)XpathUsageElement.DeepCopy();
      if(TargetElement != null) dest.TargetElement = new List<Code<Hl7.Fhir.Model.ResourceType>>(TargetElement.DeepCopy());
      if(MultipleOrElement != null) dest.MultipleOrElement = (Hl7.Fhir.Model.FhirBoolean)MultipleOrElement.DeepCopy();
      if(MultipleAndElement != null) dest.MultipleAndElement = (Hl7.Fhir.Model.FhirBoolean)MultipleAndElement.DeepCopy();
      if(ComparatorElement != null) dest.ComparatorElement = new List<Code<Hl7.Fhir.Model.SearchParameter.SearchComparator>>(ComparatorElement.DeepCopy());
      if(ModifierElement != null) dest.ModifierElement = new List<Code<Hl7.Fhir.Model.SearchParameter.SearchModifierCode>>(ModifierElement.DeepCopy());
      if(ChainElement != null) dest.ChainElement = new List<Hl7.Fhir.Model.FhirString>(ChainElement.DeepCopy());
      if(Component != null) dest.Component = new List<Hl7.Fhir.Model.SearchParameter.ComponentComponent>(Component.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new SearchParameter());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as SearchParameter;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(DerivedFromElement, otherT.DerivedFromElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Description, otherT.Description)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
      if( !DeepComparable.Matches(BaseElement, otherT.BaseElement)) return false;
      if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.Matches(ExpressionElement, otherT.ExpressionElement)) return false;
      if( !DeepComparable.Matches(XpathElement, otherT.XpathElement)) return false;
      if( !DeepComparable.Matches(XpathUsageElement, otherT.XpathUsageElement)) return false;
      if( !DeepComparable.Matches(TargetElement, otherT.TargetElement)) return false;
      if( !DeepComparable.Matches(MultipleOrElement, otherT.MultipleOrElement)) return false;
      if( !DeepComparable.Matches(MultipleAndElement, otherT.MultipleAndElement)) return false;
      if( !DeepComparable.Matches(ComparatorElement, otherT.ComparatorElement)) return false;
      if( !DeepComparable.Matches(ModifierElement, otherT.ModifierElement)) return false;
      if( !DeepComparable.Matches(ChainElement, otherT.ChainElement)) return false;
      if( !DeepComparable.Matches(Component, otherT.Component)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as SearchParameter;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(DerivedFromElement, otherT.DerivedFromElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Description, otherT.Description)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(Purpose, otherT.Purpose)) return false;
      if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
      if( !DeepComparable.IsExactly(BaseElement, otherT.BaseElement)) return false;
      if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
      if( !DeepComparable.IsExactly(ExpressionElement, otherT.ExpressionElement)) return false;
      if( !DeepComparable.IsExactly(XpathElement, otherT.XpathElement)) return false;
      if( !DeepComparable.IsExactly(XpathUsageElement, otherT.XpathUsageElement)) return false;
      if( !DeepComparable.IsExactly(TargetElement, otherT.TargetElement)) return false;
      if( !DeepComparable.IsExactly(MultipleOrElement, otherT.MultipleOrElement)) return false;
      if( !DeepComparable.IsExactly(MultipleAndElement, otherT.MultipleAndElement)) return false;
      if( !DeepComparable.IsExactly(ComparatorElement, otherT.ComparatorElement)) return false;
      if( !DeepComparable.IsExactly(ModifierElement, otherT.ModifierElement)) return false;
      if( !DeepComparable.IsExactly(ChainElement, otherT.ChainElement)) return false;
      if( !DeepComparable.IsExactly(Component, otherT.Component)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (DerivedFromElement != null) yield return DerivedFromElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (Description != null) yield return Description;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (Purpose != null) yield return Purpose;
        if (CodeElement != null) yield return CodeElement;
        foreach (var elem in BaseElement) { if (elem != null) yield return elem; }
        if (TypeElement != null) yield return TypeElement;
        if (ExpressionElement != null) yield return ExpressionElement;
        if (XpathElement != null) yield return XpathElement;
        if (XpathUsageElement != null) yield return XpathUsageElement;
        foreach (var elem in TargetElement) { if (elem != null) yield return elem; }
        if (MultipleOrElement != null) yield return MultipleOrElement;
        if (MultipleAndElement != null) yield return MultipleAndElement;
        foreach (var elem in ComparatorElement) { if (elem != null) yield return elem; }
        foreach (var elem in ModifierElement) { if (elem != null) yield return elem; }
        foreach (var elem in ChainElement) { if (elem != null) yield return elem; }
        foreach (var elem in Component) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (DerivedFromElement != null) yield return new ElementValue("derivedFrom", DerivedFromElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (Description != null) yield return new ElementValue("description", Description);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (Purpose != null) yield return new ElementValue("purpose", Purpose);
        if (CodeElement != null) yield return new ElementValue("code", CodeElement);
        foreach (var elem in BaseElement) { if (elem != null) yield return new ElementValue("base", elem); }
        if (TypeElement != null) yield return new ElementValue("type", TypeElement);
        if (ExpressionElement != null) yield return new ElementValue("expression", ExpressionElement);
        if (XpathElement != null) yield return new ElementValue("xpath", XpathElement);
        if (XpathUsageElement != null) yield return new ElementValue("xpathUsage", XpathUsageElement);
        foreach (var elem in TargetElement) { if (elem != null) yield return new ElementValue("target", elem); }
        if (MultipleOrElement != null) yield return new ElementValue("multipleOr", MultipleOrElement);
        if (MultipleAndElement != null) yield return new ElementValue("multipleAnd", MultipleAndElement);
        foreach (var elem in ComparatorElement) { if (elem != null) yield return new ElementValue("comparator", elem); }
        foreach (var elem in ModifierElement) { if (elem != null) yield return new ElementValue("modifier", elem); }
        foreach (var elem in ChainElement) { if (elem != null) yield return new ElementValue("chain", elem); }
        foreach (var elem in Component) { if (elem != null) yield return new ElementValue("component", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "derivedFrom":
          value = DerivedFromElement;
          return DerivedFromElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = Description;
          return Description is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = Purpose;
          return Purpose is not null;
        case "code":
          value = CodeElement;
          return CodeElement is not null;
        case "base":
          value = BaseElement;
          return BaseElement?.Any() == true;
        case "type":
          value = TypeElement;
          return TypeElement is not null;
        case "expression":
          value = ExpressionElement;
          return ExpressionElement is not null;
        case "xpath":
          value = XpathElement;
          return XpathElement is not null;
        case "xpathUsage":
          value = XpathUsageElement;
          return XpathUsageElement is not null;
        case "target":
          value = TargetElement;
          return TargetElement?.Any() == true;
        case "multipleOr":
          value = MultipleOrElement;
          return MultipleOrElement is not null;
        case "multipleAnd":
          value = MultipleAndElement;
          return MultipleAndElement is not null;
        case "comparator":
          value = ComparatorElement;
          return ComparatorElement?.Any() == true;
        case "modifier":
          value = ModifierElement;
          return ModifierElement?.Any() == true;
        case "chain":
          value = ChainElement;
          return ChainElement?.Any() == true;
        case "component":
          value = Component;
          return Component?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (DerivedFromElement is not null) yield return new KeyValuePair<string,object>("derivedFrom",DerivedFromElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Description is not null) yield return new KeyValuePair<string,object>("description",Description);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (Purpose is not null) yield return new KeyValuePair<string,object>("purpose",Purpose);
      if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
      if (BaseElement?.Any() == true) yield return new KeyValuePair<string,object>("base",BaseElement);
      if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
      if (ExpressionElement is not null) yield return new KeyValuePair<string,object>("expression",ExpressionElement);
      if (XpathElement is not null) yield return new KeyValuePair<string,object>("xpath",XpathElement);
      if (XpathUsageElement is not null) yield return new KeyValuePair<string,object>("xpathUsage",XpathUsageElement);
      if (TargetElement?.Any() == true) yield return new KeyValuePair<string,object>("target",TargetElement);
      if (MultipleOrElement is not null) yield return new KeyValuePair<string,object>("multipleOr",MultipleOrElement);
      if (MultipleAndElement is not null) yield return new KeyValuePair<string,object>("multipleAnd",MultipleAndElement);
      if (ComparatorElement?.Any() == true) yield return new KeyValuePair<string,object>("comparator",ComparatorElement);
      if (ModifierElement?.Any() == true) yield return new KeyValuePair<string,object>("modifier",ModifierElement);
      if (ChainElement?.Any() == true) yield return new KeyValuePair<string,object>("chain",ChainElement);
      if (Component?.Any() == true) yield return new KeyValuePair<string,object>("component",Component);
    }

  }

}

// end of file

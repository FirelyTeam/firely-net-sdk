// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A request for a service to be performed
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ServiceRequest","http://hl7.org/fhir/StructureDefinition/ServiceRequest", IsResource=true)]
  public partial class ServiceRequest : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ServiceRequest"; } }

    /// <summary>
    /// Identifiers assigned to this order
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [FhirElement("instantiatesCanonical", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> InstantiatesCanonicalElement
    {
      get { if(_InstantiatesCanonicalElement==null) _InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesCanonicalElement; }
      set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _InstantiatesCanonicalElement;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesCanonical
    {
      get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesCanonicalElement = null;
        else
          InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("InstantiatesCanonical");
      }
    }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [FhirElement("instantiatesUri", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirUri> InstantiatesUriElement
    {
      get { if(_InstantiatesUriElement==null) _InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _InstantiatesUriElement; }
      set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
    }

    private List<Hl7.Fhir.Model.FhirUri> _InstantiatesUriElement;

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesUri
    {
      get { return InstantiatesUriElement != null ? InstantiatesUriElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesUriElement = null;
        else
          InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
        OnPropertyChanged("InstantiatesUri");
      }
    }

    /// <summary>
    /// What request fulfills
    /// </summary>
    [FhirElement("basedOn", InSummary=true, Order=120)]
    [CLSCompliant(false)]
    [References("CarePlan","ServiceRequest","MedicationRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// What request replaces
    /// </summary>
    [FhirElement("replaces", InSummary=true, Order=130)]
    [CLSCompliant(false)]
    [References("ServiceRequest")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Replaces
    {
      get { if(_Replaces==null) _Replaces = new List<Hl7.Fhir.Model.ResourceReference>(); return _Replaces; }
      set { _Replaces = value; OnPropertyChanged("Replaces"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Replaces;

    /// <summary>
    /// Composite Request ID
    /// </summary>
    [FhirElement("requisition", InSummary=true, Order=140)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Requisition
    {
      get { return _Requisition; }
      set { _Requisition = value; OnPropertyChanged("Requisition"); }
    }

    private Hl7.Fhir.Model.Identifier _Requisition;

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=150, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ServiceRequestStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestStatus> _StatusElement;

    /// <summary>
    /// draft | active | on-hold | revoked | completed | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.RequestStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    [FhirElement("intent", InSummary=true, IsModifier=true, Order=160, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ServiceRequestIntent")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestIntent> _IntentElement;

    /// <summary>
    /// proposal | plan | directive | order | original-order | reflex-order | filler-order | instance-order | option
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.RequestIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// Classification of service
    /// </summary>
    [FhirElement("category", InSummary=true, Order=170, FiveWs="FiveWs.class")]
    [Binding("ServiceRequestCategory")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Category
    {
      get { if(_Category==null) _Category = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Category;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [FhirElement("priority", InSummary=true, Order=180, FiveWs="FiveWs.grade")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ServiceRequestPriority")]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestPriority> PriorityElement
    {
      get { return _PriorityElement; }
      set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestPriority> _PriorityElement;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestPriority? Priority
    {
      get { return PriorityElement != null ? PriorityElement.Value : null; }
      set
      {
        if (value == null)
          PriorityElement = null;
        else
          PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(value);
        OnPropertyChanged("Priority");
      }
    }

    /// <summary>
    /// True if service/procedure should not be performed
    /// </summary>
    [FhirElement("doNotPerform", InSummary=true, IsModifier=true, Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean DoNotPerformElement
    {
      get { return _DoNotPerformElement; }
      set { _DoNotPerformElement = value; OnPropertyChanged("DoNotPerformElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _DoNotPerformElement;

    /// <summary>
    /// True if service/procedure should not be performed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? DoNotPerform
    {
      get { return DoNotPerformElement != null ? DoNotPerformElement.Value : null; }
      set
      {
        if (value == null)
          DoNotPerformElement = null;
        else
          DoNotPerformElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("DoNotPerform");
      }
    }

    /// <summary>
    /// What is being requested/ordered
    /// </summary>
    [FhirElement("code", InSummary=true, Order=200, FiveWs="FiveWs.what[x]")]
    [Binding("ServiceRequestCode")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Code
    {
      get { return _Code; }
      set { _Code = value; OnPropertyChanged("Code"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Code;

    /// <summary>
    /// Additional order information
    /// </summary>
    [FhirElement("orderDetail", InSummary=true, Order=210)]
    [Binding("OrderDetail")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> OrderDetail
    {
      get { if(_OrderDetail==null) _OrderDetail = new List<Hl7.Fhir.Model.CodeableConcept>(); return _OrderDetail; }
      set { _OrderDetail = value; OnPropertyChanged("OrderDetail"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _OrderDetail;

    /// <summary>
    /// Service amount
    /// </summary>
    [FhirElement("quantity", InSummary=true, Order=220, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.Range))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Quantity
    {
      get { return _Quantity; }
      set { _Quantity = value; OnPropertyChanged("Quantity"); }
    }

    private Hl7.Fhir.Model.DataType _Quantity;

    /// <summary>
    /// Individual or Entity the service is ordered for
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=230, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient","Group","Location","Device")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Encounter in which the request was created
    /// </summary>
    [FhirElement("encounter", InSummary=true, Order=240, FiveWs="FiveWs.context")]
    [CLSCompliant(false)]
    [References("Encounter")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Encounter
    {
      get { return _Encounter; }
      set { _Encounter = value; OnPropertyChanged("Encounter"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Encounter;

    /// <summary>
    /// When service should occur
    /// </summary>
    [FhirElement("occurrence", InSummary=true, Order=250, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.planned")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Timing))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Occurrence
    {
      get { return _Occurrence; }
      set { _Occurrence = value; OnPropertyChanged("Occurrence"); }
    }

    private Hl7.Fhir.Model.DataType _Occurrence;

    /// <summary>
    /// Preconditions for service
    /// </summary>
    [FhirElement("asNeeded", InSummary=true, Order=260, Choice=ChoiceType.DatatypeChoice)]
    [Binding("ProcedureAsNeededReason")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.CodeableConcept))]
    [DataMember]
    public Hl7.Fhir.Model.DataType AsNeeded
    {
      get { return _AsNeeded; }
      set { _AsNeeded = value; OnPropertyChanged("AsNeeded"); }
    }

    private Hl7.Fhir.Model.DataType _AsNeeded;

    /// <summary>
    /// Date request signed
    /// </summary>
    [FhirElement("authoredOn", InSummary=true, Order=270, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime AuthoredOnElement
    {
      get { return _AuthoredOnElement; }
      set { _AuthoredOnElement = value; OnPropertyChanged("AuthoredOnElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _AuthoredOnElement;

    /// <summary>
    /// Date request signed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string AuthoredOn
    {
      get { return AuthoredOnElement != null ? AuthoredOnElement.Value : null; }
      set
      {
        if (value == null)
          AuthoredOnElement = null;
        else
          AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("AuthoredOn");
      }
    }

    /// <summary>
    /// Who/what is requesting service
    /// </summary>
    [FhirElement("requester", InSummary=true, Order=280, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization","Patient","RelatedPerson","Device")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Requester
    {
      get { return _Requester; }
      set { _Requester = value; OnPropertyChanged("Requester"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Requester;

    /// <summary>
    /// Performer role
    /// </summary>
    [FhirElement("performerType", InSummary=true, Order=290, FiveWs="FiveWs.actor")]
    [Binding("ServiceRequestParticipantRole")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept PerformerType
    {
      get { return _PerformerType; }
      set { _PerformerType = value; OnPropertyChanged("PerformerType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _PerformerType;

    /// <summary>
    /// Requested performer
    /// </summary>
    [FhirElement("performer", InSummary=true, Order=300, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization","CareTeam","HealthcareService","Patient","Device","RelatedPerson")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Performer
    {
      get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.ResourceReference>(); return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Performer;

    /// <summary>
    /// Requested location
    /// </summary>
    [FhirElement("locationCode", InSummary=true, Order=310, FiveWs="FiveWs.actor")]
    [Binding("ServiceRequestLocation")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> LocationCode
    {
      get { if(_LocationCode==null) _LocationCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _LocationCode; }
      set { _LocationCode = value; OnPropertyChanged("LocationCode"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _LocationCode;

    /// <summary>
    /// Requested location
    /// </summary>
    [FhirElement("locationReference", InSummary=true, Order=320, FiveWs="FiveWs.actor")]
    [CLSCompliant(false)]
    [References("Location")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> LocationReference
    {
      get { if(_LocationReference==null) _LocationReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _LocationReference; }
      set { _LocationReference = value; OnPropertyChanged("LocationReference"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _LocationReference;

    /// <summary>
    /// Explanation/Justification for procedure or service
    /// </summary>
    [FhirElement("reasonCode", InSummary=true, Order=330, FiveWs="FiveWs.why[x]")]
    [Binding("ServiceRequestReason")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ReasonCode
    {
      get { if(_ReasonCode==null) _ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ReasonCode; }
      set { _ReasonCode = value; OnPropertyChanged("ReasonCode"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ReasonCode;

    /// <summary>
    /// Explanation/Justification for service or service
    /// </summary>
    [FhirElement("reasonReference", InSummary=true, Order=340, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Condition","Observation","DiagnosticReport","DocumentReference")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ReasonReference
    {
      get { if(_ReasonReference==null) _ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _ReasonReference; }
      set { _ReasonReference = value; OnPropertyChanged("ReasonReference"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ReasonReference;

    /// <summary>
    /// Associated insurance coverage
    /// </summary>
    [FhirElement("insurance", Order=350)]
    [CLSCompliant(false)]
    [References("Coverage","ClaimResponse")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Insurance
    {
      get { if(_Insurance==null) _Insurance = new List<Hl7.Fhir.Model.ResourceReference>(); return _Insurance; }
      set { _Insurance = value; OnPropertyChanged("Insurance"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Insurance;

    /// <summary>
    /// Additional clinical information
    /// </summary>
    [FhirElement("supportingInfo", Order=360)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInfo
    {
      get { if(_SupportingInfo==null) _SupportingInfo = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInfo; }
      set { _SupportingInfo = value; OnPropertyChanged("SupportingInfo"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInfo;

    /// <summary>
    /// Procedure Samples
    /// </summary>
    [FhirElement("specimen", InSummary=true, Order=370)]
    [CLSCompliant(false)]
    [References("Specimen")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Specimen
    {
      get { if(_Specimen==null) _Specimen = new List<Hl7.Fhir.Model.ResourceReference>(); return _Specimen; }
      set { _Specimen = value; OnPropertyChanged("Specimen"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Specimen;

    /// <summary>
    /// Location on Body
    /// </summary>
    [FhirElement("bodySite", InSummary=true, Order=380)]
    [Binding("BodySite")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> BodySite
    {
      get { if(_BodySite==null) _BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(); return _BodySite; }
      set { _BodySite = value; OnPropertyChanged("BodySite"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _BodySite;

    /// <summary>
    /// Comments
    /// </summary>
    [FhirElement("note", Order=390)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Patient or consumer-oriented instructions
    /// </summary>
    [FhirElement("patientInstruction", InSummary=true, Order=400)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PatientInstructionElement
    {
      get { return _PatientInstructionElement; }
      set { _PatientInstructionElement = value; OnPropertyChanged("PatientInstructionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PatientInstructionElement;

    /// <summary>
    /// Patient or consumer-oriented instructions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string PatientInstruction
    {
      get { return PatientInstructionElement != null ? PatientInstructionElement.Value : null; }
      set
      {
        if (value == null)
          PatientInstructionElement = null;
        else
          PatientInstructionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("PatientInstruction");
      }
    }

    /// <summary>
    /// Request provenance
    /// </summary>
    [FhirElement("relevantHistory", Order=410)]
    [CLSCompliant(false)]
    [References("Provenance")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> RelevantHistory
    {
      get { if(_RelevantHistory==null) _RelevantHistory = new List<Hl7.Fhir.Model.ResourceReference>(); return _RelevantHistory; }
      set { _RelevantHistory = value; OnPropertyChanged("RelevantHistory"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _RelevantHistory;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ServiceRequest;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesCanonicalElement.DeepCopy());
      if(InstantiatesUriElement != null) dest.InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(InstantiatesUriElement.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Replaces != null) dest.Replaces = new List<Hl7.Fhir.Model.ResourceReference>(Replaces.DeepCopy());
      if(Requisition != null) dest.Requisition = (Hl7.Fhir.Model.Identifier)Requisition.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.RequestStatus>)StatusElement.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.RequestIntent>)IntentElement.DeepCopy();
      if(Category != null) dest.Category = new List<Hl7.Fhir.Model.CodeableConcept>(Category.DeepCopy());
      if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.RequestPriority>)PriorityElement.DeepCopy();
      if(DoNotPerformElement != null) dest.DoNotPerformElement = (Hl7.Fhir.Model.FhirBoolean)DoNotPerformElement.DeepCopy();
      if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
      if(OrderDetail != null) dest.OrderDetail = new List<Hl7.Fhir.Model.CodeableConcept>(OrderDetail.DeepCopy());
      if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.DataType)Quantity.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Encounter != null) dest.Encounter = (Hl7.Fhir.Model.ResourceReference)Encounter.DeepCopy();
      if(Occurrence != null) dest.Occurrence = (Hl7.Fhir.Model.DataType)Occurrence.DeepCopy();
      if(AsNeeded != null) dest.AsNeeded = (Hl7.Fhir.Model.DataType)AsNeeded.DeepCopy();
      if(AuthoredOnElement != null) dest.AuthoredOnElement = (Hl7.Fhir.Model.FhirDateTime)AuthoredOnElement.DeepCopy();
      if(Requester != null) dest.Requester = (Hl7.Fhir.Model.ResourceReference)Requester.DeepCopy();
      if(PerformerType != null) dest.PerformerType = (Hl7.Fhir.Model.CodeableConcept)PerformerType.DeepCopy();
      if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.ResourceReference>(Performer.DeepCopy());
      if(LocationCode != null) dest.LocationCode = new List<Hl7.Fhir.Model.CodeableConcept>(LocationCode.DeepCopy());
      if(LocationReference != null) dest.LocationReference = new List<Hl7.Fhir.Model.ResourceReference>(LocationReference.DeepCopy());
      if(ReasonCode != null) dest.ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(ReasonCode.DeepCopy());
      if(ReasonReference != null) dest.ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(ReasonReference.DeepCopy());
      if(Insurance != null) dest.Insurance = new List<Hl7.Fhir.Model.ResourceReference>(Insurance.DeepCopy());
      if(SupportingInfo != null) dest.SupportingInfo = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInfo.DeepCopy());
      if(Specimen != null) dest.Specimen = new List<Hl7.Fhir.Model.ResourceReference>(Specimen.DeepCopy());
      if(BodySite != null) dest.BodySite = new List<Hl7.Fhir.Model.CodeableConcept>(BodySite.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(PatientInstructionElement != null) dest.PatientInstructionElement = (Hl7.Fhir.Model.FhirString)PatientInstructionElement.DeepCopy();
      if(RelevantHistory != null) dest.RelevantHistory = new List<Hl7.Fhir.Model.ResourceReference>(RelevantHistory.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ServiceRequest());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ServiceRequest;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.Matches(Requisition, otherT.Requisition)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.Matches(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
      if( !DeepComparable.Matches(Code, otherT.Code)) return false;
      if( !DeepComparable.Matches(OrderDetail, otherT.OrderDetail)) return false;
      if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.Matches(Occurrence, otherT.Occurrence)) return false;
      if( !DeepComparable.Matches(AsNeeded, otherT.AsNeeded)) return false;
      if( !DeepComparable.Matches(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.Matches(Requester, otherT.Requester)) return false;
      if( !DeepComparable.Matches(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(LocationCode, otherT.LocationCode)) return false;
      if( !DeepComparable.Matches(LocationReference, otherT.LocationReference)) return false;
      if( !DeepComparable.Matches(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.Matches(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.Matches(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.Matches(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.Matches(Specimen, otherT.Specimen)) return false;
      if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(PatientInstructionElement, otherT.PatientInstructionElement)) return false;
      if( !DeepComparable.Matches(RelevantHistory, otherT.RelevantHistory)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ServiceRequest;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.IsExactly(Requisition, otherT.Requisition)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.IsExactly(DoNotPerformElement, otherT.DoNotPerformElement)) return false;
      if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
      if( !DeepComparable.IsExactly(OrderDetail, otherT.OrderDetail)) return false;
      if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
      if( !DeepComparable.IsExactly(Occurrence, otherT.Occurrence)) return false;
      if( !DeepComparable.IsExactly(AsNeeded, otherT.AsNeeded)) return false;
      if( !DeepComparable.IsExactly(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.IsExactly(Requester, otherT.Requester)) return false;
      if( !DeepComparable.IsExactly(PerformerType, otherT.PerformerType)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(LocationCode, otherT.LocationCode)) return false;
      if( !DeepComparable.IsExactly(LocationReference, otherT.LocationReference)) return false;
      if( !DeepComparable.IsExactly(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.IsExactly(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.IsExactly(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.IsExactly(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.IsExactly(Specimen, otherT.Specimen)) return false;
      if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(PatientInstructionElement, otherT.PatientInstructionElement)) return false;
      if( !DeepComparable.IsExactly(RelevantHistory, otherT.RelevantHistory)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        foreach (var elem in Replaces) { if (elem != null) yield return elem; }
        if (Requisition != null) yield return Requisition;
        if (StatusElement != null) yield return StatusElement;
        if (IntentElement != null) yield return IntentElement;
        foreach (var elem in Category) { if (elem != null) yield return elem; }
        if (PriorityElement != null) yield return PriorityElement;
        if (DoNotPerformElement != null) yield return DoNotPerformElement;
        if (Code != null) yield return Code;
        foreach (var elem in OrderDetail) { if (elem != null) yield return elem; }
        if (Quantity != null) yield return Quantity;
        if (Subject != null) yield return Subject;
        if (Encounter != null) yield return Encounter;
        if (Occurrence != null) yield return Occurrence;
        if (AsNeeded != null) yield return AsNeeded;
        if (AuthoredOnElement != null) yield return AuthoredOnElement;
        if (Requester != null) yield return Requester;
        if (PerformerType != null) yield return PerformerType;
        foreach (var elem in Performer) { if (elem != null) yield return elem; }
        foreach (var elem in LocationCode) { if (elem != null) yield return elem; }
        foreach (var elem in LocationReference) { if (elem != null) yield return elem; }
        foreach (var elem in ReasonCode) { if (elem != null) yield return elem; }
        foreach (var elem in ReasonReference) { if (elem != null) yield return elem; }
        foreach (var elem in Insurance) { if (elem != null) yield return elem; }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return elem; }
        foreach (var elem in Specimen) { if (elem != null) yield return elem; }
        foreach (var elem in BodySite) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (PatientInstructionElement != null) yield return PatientInstructionElement;
        foreach (var elem in RelevantHistory) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return new ElementValue("instantiatesCanonical", elem); }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return new ElementValue("instantiatesUri", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        foreach (var elem in Replaces) { if (elem != null) yield return new ElementValue("replaces", elem); }
        if (Requisition != null) yield return new ElementValue("requisition", Requisition);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        foreach (var elem in Category) { if (elem != null) yield return new ElementValue("category", elem); }
        if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        if (DoNotPerformElement != null) yield return new ElementValue("doNotPerform", DoNotPerformElement);
        if (Code != null) yield return new ElementValue("code", Code);
        foreach (var elem in OrderDetail) { if (elem != null) yield return new ElementValue("orderDetail", elem); }
        if (Quantity != null) yield return new ElementValue("quantity", Quantity);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Encounter != null) yield return new ElementValue("encounter", Encounter);
        if (Occurrence != null) yield return new ElementValue("occurrence", Occurrence);
        if (AsNeeded != null) yield return new ElementValue("asNeeded", AsNeeded);
        if (AuthoredOnElement != null) yield return new ElementValue("authoredOn", AuthoredOnElement);
        if (Requester != null) yield return new ElementValue("requester", Requester);
        if (PerformerType != null) yield return new ElementValue("performerType", PerformerType);
        foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
        foreach (var elem in LocationCode) { if (elem != null) yield return new ElementValue("locationCode", elem); }
        foreach (var elem in LocationReference) { if (elem != null) yield return new ElementValue("locationReference", elem); }
        foreach (var elem in ReasonCode) { if (elem != null) yield return new ElementValue("reasonCode", elem); }
        foreach (var elem in ReasonReference) { if (elem != null) yield return new ElementValue("reasonReference", elem); }
        foreach (var elem in Insurance) { if (elem != null) yield return new ElementValue("insurance", elem); }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return new ElementValue("supportingInfo", elem); }
        foreach (var elem in Specimen) { if (elem != null) yield return new ElementValue("specimen", elem); }
        foreach (var elem in BodySite) { if (elem != null) yield return new ElementValue("bodySite", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (PatientInstructionElement != null) yield return new ElementValue("patientInstruction", PatientInstructionElement);
        foreach (var elem in RelevantHistory) { if (elem != null) yield return new ElementValue("relevantHistory", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "instantiatesCanonical":
          value = InstantiatesCanonicalElement;
          return InstantiatesCanonicalElement?.Any() == true;
        case "instantiatesUri":
          value = InstantiatesUriElement;
          return InstantiatesUriElement?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "replaces":
          value = Replaces;
          return Replaces?.Any() == true;
        case "requisition":
          value = Requisition;
          return Requisition is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "category":
          value = Category;
          return Category?.Any() == true;
        case "priority":
          value = PriorityElement;
          return PriorityElement is not null;
        case "doNotPerform":
          value = DoNotPerformElement;
          return DoNotPerformElement is not null;
        case "code":
          value = Code;
          return Code is not null;
        case "orderDetail":
          value = OrderDetail;
          return OrderDetail?.Any() == true;
        case "quantity":
          value = Quantity;
          return Quantity is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "encounter":
          value = Encounter;
          return Encounter is not null;
        case "occurrence":
          value = Occurrence;
          return Occurrence is not null;
        case "asNeeded":
          value = AsNeeded;
          return AsNeeded is not null;
        case "authoredOn":
          value = AuthoredOnElement;
          return AuthoredOnElement is not null;
        case "requester":
          value = Requester;
          return Requester is not null;
        case "performerType":
          value = PerformerType;
          return PerformerType is not null;
        case "performer":
          value = Performer;
          return Performer?.Any() == true;
        case "locationCode":
          value = LocationCode;
          return LocationCode?.Any() == true;
        case "locationReference":
          value = LocationReference;
          return LocationReference?.Any() == true;
        case "reasonCode":
          value = ReasonCode;
          return ReasonCode?.Any() == true;
        case "reasonReference":
          value = ReasonReference;
          return ReasonReference?.Any() == true;
        case "insurance":
          value = Insurance;
          return Insurance?.Any() == true;
        case "supportingInfo":
          value = SupportingInfo;
          return SupportingInfo?.Any() == true;
        case "specimen":
          value = Specimen;
          return Specimen?.Any() == true;
        case "bodySite":
          value = BodySite;
          return BodySite?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "patientInstruction":
          value = PatientInstructionElement;
          return PatientInstructionElement is not null;
        case "relevantHistory":
          value = RelevantHistory;
          return RelevantHistory?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (InstantiatesCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
      if (InstantiatesUriElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (Replaces?.Any() == true) yield return new KeyValuePair<string,object>("replaces",Replaces);
      if (Requisition is not null) yield return new KeyValuePair<string,object>("requisition",Requisition);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (Category?.Any() == true) yield return new KeyValuePair<string,object>("category",Category);
      if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      if (DoNotPerformElement is not null) yield return new KeyValuePair<string,object>("doNotPerform",DoNotPerformElement);
      if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
      if (OrderDetail?.Any() == true) yield return new KeyValuePair<string,object>("orderDetail",OrderDetail);
      if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Encounter is not null) yield return new KeyValuePair<string,object>("encounter",Encounter);
      if (Occurrence is not null) yield return new KeyValuePair<string,object>("occurrence",Occurrence);
      if (AsNeeded is not null) yield return new KeyValuePair<string,object>("asNeeded",AsNeeded);
      if (AuthoredOnElement is not null) yield return new KeyValuePair<string,object>("authoredOn",AuthoredOnElement);
      if (Requester is not null) yield return new KeyValuePair<string,object>("requester",Requester);
      if (PerformerType is not null) yield return new KeyValuePair<string,object>("performerType",PerformerType);
      if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
      if (LocationCode?.Any() == true) yield return new KeyValuePair<string,object>("locationCode",LocationCode);
      if (LocationReference?.Any() == true) yield return new KeyValuePair<string,object>("locationReference",LocationReference);
      if (ReasonCode?.Any() == true) yield return new KeyValuePair<string,object>("reasonCode",ReasonCode);
      if (ReasonReference?.Any() == true) yield return new KeyValuePair<string,object>("reasonReference",ReasonReference);
      if (Insurance?.Any() == true) yield return new KeyValuePair<string,object>("insurance",Insurance);
      if (SupportingInfo?.Any() == true) yield return new KeyValuePair<string,object>("supportingInfo",SupportingInfo);
      if (Specimen?.Any() == true) yield return new KeyValuePair<string,object>("specimen",Specimen);
      if (BodySite?.Any() == true) yield return new KeyValuePair<string,object>("bodySite",BodySite);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (PatientInstructionElement is not null) yield return new KeyValuePair<string,object>("patientInstruction",PatientInstructionElement);
      if (RelevantHistory?.Any() == true) yield return new KeyValuePair<string,object>("relevantHistory",RelevantHistory);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Immunization evaluation information
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("ImmunizationEvaluation","http://hl7.org/fhir/StructureDefinition/ImmunizationEvaluation", IsResource=true)]
  public partial class ImmunizationEvaluation : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "ImmunizationEvaluation"; } }

    /// <summary>
    /// The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the current status of the evaluation for vaccine administration event.
    /// (url: http://hl7.org/fhir/ValueSet/immunization-evaluation-status)
    /// (system: http://terminology.hl7.org/CodeSystem/medication-admin-status)
    /// </summary>
    [FhirEnumeration("ImmunizationEvaluationStatusCodes")]
    public enum ImmunizationEvaluationStatusCodes
    {
      /// <summary>
      /// All actions that are implied by the administration have occurred.
      /// (system: http://terminology.hl7.org/CodeSystem/medication-admin-status)
      /// </summary>
      [EnumLiteral("completed", "http://terminology.hl7.org/CodeSystem/medication-admin-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// The administration was entered in error and therefore nullified.
      /// (system: http://terminology.hl7.org/CodeSystem/medication-admin-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://terminology.hl7.org/CodeSystem/medication-admin-status"), Description("Entered in Error")]
      EnteredInError,
    }

    /// <summary>
    /// Business identifier
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// completed | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes> _StatusElement;

    /// <summary>
    /// completed | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Who this evaluation is for
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=110, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// Date evaluation was performed
    /// </summary>
    [FhirElement("date", Order=120, FiveWs="FiveWs.init")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date evaluation was performed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Who is responsible for publishing the recommendations
    /// </summary>
    [FhirElement("authority", Order=130)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Authority
    {
      get { return _Authority; }
      set { _Authority = value; OnPropertyChanged("Authority"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Authority;

    /// <summary>
    /// Evaluation target disease
    /// </summary>
    [FhirElement("targetDisease", InSummary=true, Order=140)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept TargetDisease
    {
      get { return _TargetDisease; }
      set { _TargetDisease = value; OnPropertyChanged("TargetDisease"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _TargetDisease;

    /// <summary>
    /// Immunization being evaluated
    /// </summary>
    [FhirElement("immunizationEvent", InSummary=true, Order=150)]
    [CLSCompliant(false)]
    [References("Immunization")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference ImmunizationEvent
    {
      get { return _ImmunizationEvent; }
      set { _ImmunizationEvent = value; OnPropertyChanged("ImmunizationEvent"); }
    }

    private Hl7.Fhir.Model.ResourceReference _ImmunizationEvent;

    /// <summary>
    /// Status of the dose relative to published recommendations
    /// </summary>
    [FhirElement("doseStatus", InSummary=true, Order=160)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept DoseStatus
    {
      get { return _DoseStatus; }
      set { _DoseStatus = value; OnPropertyChanged("DoseStatus"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _DoseStatus;

    /// <summary>
    /// Reason for the dose status
    /// </summary>
    [FhirElement("doseStatusReason", Order=170)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> DoseStatusReason
    {
      get { if(_DoseStatusReason==null) _DoseStatusReason = new List<Hl7.Fhir.Model.CodeableConcept>(); return _DoseStatusReason; }
      set { _DoseStatusReason = value; OnPropertyChanged("DoseStatusReason"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _DoseStatusReason;

    /// <summary>
    /// Evaluation notes
    /// </summary>
    [FhirElement("description", Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _DescriptionElement;

    /// <summary>
    /// Evaluation notes
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Name of vaccine series
    /// </summary>
    [FhirElement("series", Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString SeriesElement
    {
      get { return _SeriesElement; }
      set { _SeriesElement = value; OnPropertyChanged("SeriesElement"); }
    }

    private Hl7.Fhir.Model.FhirString _SeriesElement;

    /// <summary>
    /// Name of vaccine series
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Series
    {
      get { return SeriesElement != null ? SeriesElement.Value : null; }
      set
      {
        if (value == null)
          SeriesElement = null;
        else
          SeriesElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Series");
      }
    }

    /// <summary>
    /// Dose number within series
    /// </summary>
    [FhirElement("doseNumber", Order=200, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.PositiveInt),typeof(Hl7.Fhir.Model.FhirString))]
    [DataMember]
    public Hl7.Fhir.Model.DataType DoseNumber
    {
      get { return _DoseNumber; }
      set { _DoseNumber = value; OnPropertyChanged("DoseNumber"); }
    }

    private Hl7.Fhir.Model.DataType _DoseNumber;

    /// <summary>
    /// Recommended number of doses for immunity
    /// </summary>
    [FhirElement("seriesDoses", Order=210, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.PositiveInt),typeof(Hl7.Fhir.Model.FhirString))]
    [DataMember]
    public Hl7.Fhir.Model.DataType SeriesDoses
    {
      get { return _SeriesDoses; }
      set { _SeriesDoses = value; OnPropertyChanged("SeriesDoses"); }
    }

    private Hl7.Fhir.Model.DataType _SeriesDoses;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as ImmunizationEvaluation;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.ImmunizationEvaluation.ImmunizationEvaluationStatusCodes>)StatusElement.DeepCopy();
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(Authority != null) dest.Authority = (Hl7.Fhir.Model.ResourceReference)Authority.DeepCopy();
      if(TargetDisease != null) dest.TargetDisease = (Hl7.Fhir.Model.CodeableConcept)TargetDisease.DeepCopy();
      if(ImmunizationEvent != null) dest.ImmunizationEvent = (Hl7.Fhir.Model.ResourceReference)ImmunizationEvent.DeepCopy();
      if(DoseStatus != null) dest.DoseStatus = (Hl7.Fhir.Model.CodeableConcept)DoseStatus.DeepCopy();
      if(DoseStatusReason != null) dest.DoseStatusReason = new List<Hl7.Fhir.Model.CodeableConcept>(DoseStatusReason.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
      if(SeriesElement != null) dest.SeriesElement = (Hl7.Fhir.Model.FhirString)SeriesElement.DeepCopy();
      if(DoseNumber != null) dest.DoseNumber = (Hl7.Fhir.Model.DataType)DoseNumber.DeepCopy();
      if(SeriesDoses != null) dest.SeriesDoses = (Hl7.Fhir.Model.DataType)SeriesDoses.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new ImmunizationEvaluation());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as ImmunizationEvaluation;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(Authority, otherT.Authority)) return false;
      if( !DeepComparable.Matches(TargetDisease, otherT.TargetDisease)) return false;
      if( !DeepComparable.Matches(ImmunizationEvent, otherT.ImmunizationEvent)) return false;
      if( !DeepComparable.Matches(DoseStatus, otherT.DoseStatus)) return false;
      if( !DeepComparable.Matches(DoseStatusReason, otherT.DoseStatusReason)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(SeriesElement, otherT.SeriesElement)) return false;
      if( !DeepComparable.Matches(DoseNumber, otherT.DoseNumber)) return false;
      if( !DeepComparable.Matches(SeriesDoses, otherT.SeriesDoses)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as ImmunizationEvaluation;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(Authority, otherT.Authority)) return false;
      if( !DeepComparable.IsExactly(TargetDisease, otherT.TargetDisease)) return false;
      if( !DeepComparable.IsExactly(ImmunizationEvent, otherT.ImmunizationEvent)) return false;
      if( !DeepComparable.IsExactly(DoseStatus, otherT.DoseStatus)) return false;
      if( !DeepComparable.IsExactly(DoseStatusReason, otherT.DoseStatusReason)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(SeriesElement, otherT.SeriesElement)) return false;
      if( !DeepComparable.IsExactly(DoseNumber, otherT.DoseNumber)) return false;
      if( !DeepComparable.IsExactly(SeriesDoses, otherT.SeriesDoses)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (Patient != null) yield return Patient;
        if (DateElement != null) yield return DateElement;
        if (Authority != null) yield return Authority;
        if (TargetDisease != null) yield return TargetDisease;
        if (ImmunizationEvent != null) yield return ImmunizationEvent;
        if (DoseStatus != null) yield return DoseStatus;
        foreach (var elem in DoseStatusReason) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        if (SeriesElement != null) yield return SeriesElement;
        if (DoseNumber != null) yield return DoseNumber;
        if (SeriesDoses != null) yield return SeriesDoses;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (Authority != null) yield return new ElementValue("authority", Authority);
        if (TargetDisease != null) yield return new ElementValue("targetDisease", TargetDisease);
        if (ImmunizationEvent != null) yield return new ElementValue("immunizationEvent", ImmunizationEvent);
        if (DoseStatus != null) yield return new ElementValue("doseStatus", DoseStatus);
        foreach (var elem in DoseStatusReason) { if (elem != null) yield return new ElementValue("doseStatusReason", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        if (SeriesElement != null) yield return new ElementValue("series", SeriesElement);
        if (DoseNumber != null) yield return new ElementValue("doseNumber", DoseNumber);
        if (SeriesDoses != null) yield return new ElementValue("seriesDoses", SeriesDoses);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "authority":
          value = Authority;
          return Authority is not null;
        case "targetDisease":
          value = TargetDisease;
          return TargetDisease is not null;
        case "immunizationEvent":
          value = ImmunizationEvent;
          return ImmunizationEvent is not null;
        case "doseStatus":
          value = DoseStatus;
          return DoseStatus is not null;
        case "doseStatusReason":
          value = DoseStatusReason;
          return DoseStatusReason?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "series":
          value = SeriesElement;
          return SeriesElement is not null;
        case "doseNumber":
          value = DoseNumber;
          return DoseNumber is not null;
        case "seriesDoses":
          value = SeriesDoses;
          return SeriesDoses is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (Authority is not null) yield return new KeyValuePair<string,object>("authority",Authority);
      if (TargetDisease is not null) yield return new KeyValuePair<string,object>("targetDisease",TargetDisease);
      if (ImmunizationEvent is not null) yield return new KeyValuePair<string,object>("immunizationEvent",ImmunizationEvent);
      if (DoseStatus is not null) yield return new KeyValuePair<string,object>("doseStatus",DoseStatus);
      if (DoseStatusReason?.Any() == true) yield return new KeyValuePair<string,object>("doseStatusReason",DoseStatusReason);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (SeriesElement is not null) yield return new KeyValuePair<string,object>("series",SeriesElement);
      if (DoseNumber is not null) yield return new KeyValuePair<string,object>("doseNumber",DoseNumber);
      if (SeriesDoses is not null) yield return new KeyValuePair<string,object>("seriesDoses",SeriesDoses);
    }

  }

}

// end of file

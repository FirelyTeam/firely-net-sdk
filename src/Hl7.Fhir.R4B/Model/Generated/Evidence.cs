// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Single evidence bit
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Evidence","http://hl7.org/fhir/StructureDefinition/Evidence", IsResource=true)]
  public partial class Evidence : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Evidence"; } }

    /// <summary>
    /// Evidence variable such as population, exposure, or outcome
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Evidence#VariableDefinition", IsNestedType=true)]
    [BackboneType("Evidence.variableDefinition")]
    public partial class VariableDefinitionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Evidence#VariableDefinition"; } }

      /// <summary>
      /// A text description or summary of the variable
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Markdown DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.Markdown _DescriptionElement;

      /// <summary>
      /// A text description or summary of the variable
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnotes and/or explanatory notes
      /// </summary>
      [FhirElement("note", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// population | subpopulation | exposure | referenceExposure | measuredVariable | confounder
      /// </summary>
      [FhirElement("variableRole", InSummary=true, Order=60)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept VariableRole
      {
        get { return _VariableRole; }
        set { _VariableRole = value; OnPropertyChanged("VariableRole"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _VariableRole;

      /// <summary>
      /// Definition of the actual variable related to the statistic(s)
      /// </summary>
      [FhirElement("observed", InSummary=true, Order=70)]
      [CLSCompliant(false)]
      [References("Group","EvidenceVariable")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Observed
      {
        get { return _Observed; }
        set { _Observed = value; OnPropertyChanged("Observed"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Observed;

      /// <summary>
      /// Definition of the intended variable related to the Evidence
      /// </summary>
      [FhirElement("intended", Order=80)]
      [CLSCompliant(false)]
      [References("Group","EvidenceVariable")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Intended
      {
        get { return _Intended; }
        set { _Intended = value; OnPropertyChanged("Intended"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Intended;

      /// <summary>
      /// low | moderate | high | exact
      /// </summary>
      [FhirElement("directnessMatch", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept DirectnessMatch
      {
        get { return _DirectnessMatch; }
        set { _DirectnessMatch = value; OnPropertyChanged("DirectnessMatch"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _DirectnessMatch;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VariableDefinitionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(VariableRole != null) dest.VariableRole = (Hl7.Fhir.Model.CodeableConcept)VariableRole.DeepCopy();
        if(Observed != null) dest.Observed = (Hl7.Fhir.Model.ResourceReference)Observed.DeepCopy();
        if(Intended != null) dest.Intended = (Hl7.Fhir.Model.ResourceReference)Intended.DeepCopy();
        if(DirectnessMatch != null) dest.DirectnessMatch = (Hl7.Fhir.Model.CodeableConcept)DirectnessMatch.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VariableDefinitionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VariableDefinitionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(VariableRole, otherT.VariableRole)) return false;
        if( !DeepComparable.Matches(Observed, otherT.Observed)) return false;
        if( !DeepComparable.Matches(Intended, otherT.Intended)) return false;
        if( !DeepComparable.Matches(DirectnessMatch, otherT.DirectnessMatch)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VariableDefinitionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(VariableRole, otherT.VariableRole)) return false;
        if( !DeepComparable.IsExactly(Observed, otherT.Observed)) return false;
        if( !DeepComparable.IsExactly(Intended, otherT.Intended)) return false;
        if( !DeepComparable.IsExactly(DirectnessMatch, otherT.DirectnessMatch)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (VariableRole != null) yield return VariableRole;
          if (Observed != null) yield return Observed;
          if (Intended != null) yield return Intended;
          if (DirectnessMatch != null) yield return DirectnessMatch;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (VariableRole != null) yield return new ElementValue("variableRole", VariableRole);
          if (Observed != null) yield return new ElementValue("observed", Observed);
          if (Intended != null) yield return new ElementValue("intended", Intended);
          if (DirectnessMatch != null) yield return new ElementValue("directnessMatch", DirectnessMatch);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "variableRole":
            value = VariableRole;
            return VariableRole is not null;
          case "observed":
            value = Observed;
            return Observed is not null;
          case "intended":
            value = Intended;
            return Intended is not null;
          case "directnessMatch":
            value = DirectnessMatch;
            return DirectnessMatch is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (VariableRole is not null) yield return new KeyValuePair<string,object>("variableRole",VariableRole);
        if (Observed is not null) yield return new KeyValuePair<string,object>("observed",Observed);
        if (Intended is not null) yield return new KeyValuePair<string,object>("intended",Intended);
        if (DirectnessMatch is not null) yield return new KeyValuePair<string,object>("directnessMatch",DirectnessMatch);
      }

    }

    /// <summary>
    /// Values and parameters for a single statistic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Evidence#Statistic", IsNestedType=true)]
    [BackboneType("Evidence.statistic")]
    public partial class StatisticComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Evidence#Statistic"; } }

      /// <summary>
      /// Description of content
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Description of content
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnotes and/or explanatory notes
      /// </summary>
      [FhirElement("note", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// Type of statistic, eg relative risk
      /// </summary>
      [FhirElement("statisticType", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept StatisticType
      {
        get { return _StatisticType; }
        set { _StatisticType = value; OnPropertyChanged("StatisticType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _StatisticType;

      /// <summary>
      /// Associated category for categorical variable
      /// </summary>
      [FhirElement("category", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Statistic value
      /// </summary>
      [FhirElement("quantity", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// The number of events associated with the statistic
      /// </summary>
      [FhirElement("numberOfEvents", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt NumberOfEventsElement
      {
        get { return _NumberOfEventsElement; }
        set { _NumberOfEventsElement = value; OnPropertyChanged("NumberOfEventsElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _NumberOfEventsElement;

      /// <summary>
      /// The number of events associated with the statistic
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberOfEvents
      {
        get { return NumberOfEventsElement != null ? NumberOfEventsElement.Value : null; }
        set
        {
          if (value == null)
            NumberOfEventsElement = null;
          else
            NumberOfEventsElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("NumberOfEvents");
        }
      }

      /// <summary>
      /// The number of participants affected
      /// </summary>
      [FhirElement("numberAffected", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt NumberAffectedElement
      {
        get { return _NumberAffectedElement; }
        set { _NumberAffectedElement = value; OnPropertyChanged("NumberAffectedElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _NumberAffectedElement;

      /// <summary>
      /// The number of participants affected
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberAffected
      {
        get { return NumberAffectedElement != null ? NumberAffectedElement.Value : null; }
        set
        {
          if (value == null)
            NumberAffectedElement = null;
          else
            NumberAffectedElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("NumberAffected");
        }
      }

      /// <summary>
      /// Number of samples in the statistic
      /// </summary>
      [FhirElement("sampleSize", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Evidence.SampleSizeComponent SampleSize
      {
        get { return _SampleSize; }
        set { _SampleSize = value; OnPropertyChanged("SampleSize"); }
      }

      private Hl7.Fhir.Model.Evidence.SampleSizeComponent _SampleSize;

      /// <summary>
      /// An attribute of the Statistic
      /// </summary>
      [FhirElement("attributeEstimate", Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent> AttributeEstimate
      {
        get { if(_AttributeEstimate==null) _AttributeEstimate = new List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent>(); return _AttributeEstimate; }
        set { _AttributeEstimate = value; OnPropertyChanged("AttributeEstimate"); }
      }

      private List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent> _AttributeEstimate;

      /// <summary>
      /// An aspect of the statistical model
      /// </summary>
      [FhirElement("modelCharacteristic", Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Evidence.ModelCharacteristicComponent> ModelCharacteristic
      {
        get { if(_ModelCharacteristic==null) _ModelCharacteristic = new List<Hl7.Fhir.Model.Evidence.ModelCharacteristicComponent>(); return _ModelCharacteristic; }
        set { _ModelCharacteristic = value; OnPropertyChanged("ModelCharacteristic"); }
      }

      private List<Hl7.Fhir.Model.Evidence.ModelCharacteristicComponent> _ModelCharacteristic;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as StatisticComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(StatisticType != null) dest.StatisticType = (Hl7.Fhir.Model.CodeableConcept)StatisticType.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(NumberOfEventsElement != null) dest.NumberOfEventsElement = (Hl7.Fhir.Model.UnsignedInt)NumberOfEventsElement.DeepCopy();
        if(NumberAffectedElement != null) dest.NumberAffectedElement = (Hl7.Fhir.Model.UnsignedInt)NumberAffectedElement.DeepCopy();
        if(SampleSize != null) dest.SampleSize = (Hl7.Fhir.Model.Evidence.SampleSizeComponent)SampleSize.DeepCopy();
        if(AttributeEstimate != null) dest.AttributeEstimate = new List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent>(AttributeEstimate.DeepCopy());
        if(ModelCharacteristic != null) dest.ModelCharacteristic = new List<Hl7.Fhir.Model.Evidence.ModelCharacteristicComponent>(ModelCharacteristic.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new StatisticComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as StatisticComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(StatisticType, otherT.StatisticType)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(NumberOfEventsElement, otherT.NumberOfEventsElement)) return false;
        if( !DeepComparable.Matches(NumberAffectedElement, otherT.NumberAffectedElement)) return false;
        if( !DeepComparable.Matches(SampleSize, otherT.SampleSize)) return false;
        if( !DeepComparable.Matches(AttributeEstimate, otherT.AttributeEstimate)) return false;
        if( !DeepComparable.Matches(ModelCharacteristic, otherT.ModelCharacteristic)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as StatisticComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(StatisticType, otherT.StatisticType)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(NumberOfEventsElement, otherT.NumberOfEventsElement)) return false;
        if( !DeepComparable.IsExactly(NumberAffectedElement, otherT.NumberAffectedElement)) return false;
        if( !DeepComparable.IsExactly(SampleSize, otherT.SampleSize)) return false;
        if( !DeepComparable.IsExactly(AttributeEstimate, otherT.AttributeEstimate)) return false;
        if( !DeepComparable.IsExactly(ModelCharacteristic, otherT.ModelCharacteristic)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (StatisticType != null) yield return StatisticType;
          if (Category != null) yield return Category;
          if (Quantity != null) yield return Quantity;
          if (NumberOfEventsElement != null) yield return NumberOfEventsElement;
          if (NumberAffectedElement != null) yield return NumberAffectedElement;
          if (SampleSize != null) yield return SampleSize;
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return elem; }
          foreach (var elem in ModelCharacteristic) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (StatisticType != null) yield return new ElementValue("statisticType", StatisticType);
          if (Category != null) yield return new ElementValue("category", Category);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (NumberOfEventsElement != null) yield return new ElementValue("numberOfEvents", NumberOfEventsElement);
          if (NumberAffectedElement != null) yield return new ElementValue("numberAffected", NumberAffectedElement);
          if (SampleSize != null) yield return new ElementValue("sampleSize", SampleSize);
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return new ElementValue("attributeEstimate", elem); }
          foreach (var elem in ModelCharacteristic) { if (elem != null) yield return new ElementValue("modelCharacteristic", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "statisticType":
            value = StatisticType;
            return StatisticType is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "numberOfEvents":
            value = NumberOfEventsElement;
            return NumberOfEventsElement is not null;
          case "numberAffected":
            value = NumberAffectedElement;
            return NumberAffectedElement is not null;
          case "sampleSize":
            value = SampleSize;
            return SampleSize is not null;
          case "attributeEstimate":
            value = AttributeEstimate;
            return AttributeEstimate?.Any() == true;
          case "modelCharacteristic":
            value = ModelCharacteristic;
            return ModelCharacteristic?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (StatisticType is not null) yield return new KeyValuePair<string,object>("statisticType",StatisticType);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (NumberOfEventsElement is not null) yield return new KeyValuePair<string,object>("numberOfEvents",NumberOfEventsElement);
        if (NumberAffectedElement is not null) yield return new KeyValuePair<string,object>("numberAffected",NumberAffectedElement);
        if (SampleSize is not null) yield return new KeyValuePair<string,object>("sampleSize",SampleSize);
        if (AttributeEstimate?.Any() == true) yield return new KeyValuePair<string,object>("attributeEstimate",AttributeEstimate);
        if (ModelCharacteristic?.Any() == true) yield return new KeyValuePair<string,object>("modelCharacteristic",ModelCharacteristic);
      }

    }

    /// <summary>
    /// Number of samples in the statistic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Evidence#SampleSize", IsNestedType=true)]
    [BackboneType("Evidence.statistic.sampleSize")]
    public partial class SampleSizeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Evidence#SampleSize"; } }

      /// <summary>
      /// Textual description of sample size for statistic
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Textual description of sample size for statistic
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnote or explanatory note about the sample size
      /// </summary>
      [FhirElement("note", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// Number of contributing studies
      /// </summary>
      [FhirElement("numberOfStudies", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt NumberOfStudiesElement
      {
        get { return _NumberOfStudiesElement; }
        set { _NumberOfStudiesElement = value; OnPropertyChanged("NumberOfStudiesElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _NumberOfStudiesElement;

      /// <summary>
      /// Number of contributing studies
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberOfStudies
      {
        get { return NumberOfStudiesElement != null ? NumberOfStudiesElement.Value : null; }
        set
        {
          if (value == null)
            NumberOfStudiesElement = null;
          else
            NumberOfStudiesElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("NumberOfStudies");
        }
      }

      /// <summary>
      /// Cumulative number of participants
      /// </summary>
      [FhirElement("numberOfParticipants", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt NumberOfParticipantsElement
      {
        get { return _NumberOfParticipantsElement; }
        set { _NumberOfParticipantsElement = value; OnPropertyChanged("NumberOfParticipantsElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _NumberOfParticipantsElement;

      /// <summary>
      /// Cumulative number of participants
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? NumberOfParticipants
      {
        get { return NumberOfParticipantsElement != null ? NumberOfParticipantsElement.Value : null; }
        set
        {
          if (value == null)
            NumberOfParticipantsElement = null;
          else
            NumberOfParticipantsElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("NumberOfParticipants");
        }
      }

      /// <summary>
      /// Number of participants with known results for measured variables
      /// </summary>
      [FhirElement("knownDataCount", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.UnsignedInt KnownDataCountElement
      {
        get { return _KnownDataCountElement; }
        set { _KnownDataCountElement = value; OnPropertyChanged("KnownDataCountElement"); }
      }

      private Hl7.Fhir.Model.UnsignedInt _KnownDataCountElement;

      /// <summary>
      /// Number of participants with known results for measured variables
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? KnownDataCount
      {
        get { return KnownDataCountElement != null ? KnownDataCountElement.Value : null; }
        set
        {
          if (value == null)
            KnownDataCountElement = null;
          else
            KnownDataCountElement = new Hl7.Fhir.Model.UnsignedInt(value);
          OnPropertyChanged("KnownDataCount");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SampleSizeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(NumberOfStudiesElement != null) dest.NumberOfStudiesElement = (Hl7.Fhir.Model.UnsignedInt)NumberOfStudiesElement.DeepCopy();
        if(NumberOfParticipantsElement != null) dest.NumberOfParticipantsElement = (Hl7.Fhir.Model.UnsignedInt)NumberOfParticipantsElement.DeepCopy();
        if(KnownDataCountElement != null) dest.KnownDataCountElement = (Hl7.Fhir.Model.UnsignedInt)KnownDataCountElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SampleSizeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SampleSizeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(NumberOfStudiesElement, otherT.NumberOfStudiesElement)) return false;
        if( !DeepComparable.Matches(NumberOfParticipantsElement, otherT.NumberOfParticipantsElement)) return false;
        if( !DeepComparable.Matches(KnownDataCountElement, otherT.KnownDataCountElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SampleSizeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(NumberOfStudiesElement, otherT.NumberOfStudiesElement)) return false;
        if( !DeepComparable.IsExactly(NumberOfParticipantsElement, otherT.NumberOfParticipantsElement)) return false;
        if( !DeepComparable.IsExactly(KnownDataCountElement, otherT.KnownDataCountElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (NumberOfStudiesElement != null) yield return NumberOfStudiesElement;
          if (NumberOfParticipantsElement != null) yield return NumberOfParticipantsElement;
          if (KnownDataCountElement != null) yield return KnownDataCountElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (NumberOfStudiesElement != null) yield return new ElementValue("numberOfStudies", NumberOfStudiesElement);
          if (NumberOfParticipantsElement != null) yield return new ElementValue("numberOfParticipants", NumberOfParticipantsElement);
          if (KnownDataCountElement != null) yield return new ElementValue("knownDataCount", KnownDataCountElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "numberOfStudies":
            value = NumberOfStudiesElement;
            return NumberOfStudiesElement is not null;
          case "numberOfParticipants":
            value = NumberOfParticipantsElement;
            return NumberOfParticipantsElement is not null;
          case "knownDataCount":
            value = KnownDataCountElement;
            return KnownDataCountElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (NumberOfStudiesElement is not null) yield return new KeyValuePair<string,object>("numberOfStudies",NumberOfStudiesElement);
        if (NumberOfParticipantsElement is not null) yield return new KeyValuePair<string,object>("numberOfParticipants",NumberOfParticipantsElement);
        if (KnownDataCountElement is not null) yield return new KeyValuePair<string,object>("knownDataCount",KnownDataCountElement);
      }

    }

    /// <summary>
    /// An attribute of the Statistic
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Evidence#AttributeEstimate", IsNestedType=true)]
    [BackboneType("Evidence.statistic.attributeEstimate")]
    public partial class AttributeEstimateComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Evidence#AttributeEstimate"; } }

      /// <summary>
      /// Textual description of the attribute estimate
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Textual description of the attribute estimate
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnote or explanatory note about the estimate
      /// </summary>
      [FhirElement("note", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// The type of attribute estimate, eg confidence interval or p value
      /// </summary>
      [FhirElement("type", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// The singular quantity of the attribute estimate, for attribute estimates represented as single values; also used to report unit of measure
      /// </summary>
      [FhirElement("quantity", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Level of confidence interval, eg 0.95 for 95% confidence interval
      /// </summary>
      [FhirElement("level", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal LevelElement
      {
        get { return _LevelElement; }
        set { _LevelElement = value; OnPropertyChanged("LevelElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _LevelElement;

      /// <summary>
      /// Level of confidence interval, eg 0.95 for 95% confidence interval
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Level
      {
        get { return LevelElement != null ? LevelElement.Value : null; }
        set
        {
          if (value == null)
            LevelElement = null;
          else
            LevelElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Level");
        }
      }

      /// <summary>
      /// Lower and upper bound values of the attribute estimate
      /// </summary>
      [FhirElement("range", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.Range Range
      {
        get { return _Range; }
        set { _Range = value; OnPropertyChanged("Range"); }
      }

      private Hl7.Fhir.Model.Range _Range;

      /// <summary>
      /// A nested attribute estimate; which is the attribute estimate of an attribute estimate
      /// </summary>
      [FhirElement("attributeEstimate", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent> AttributeEstimate
      {
        get { if(_AttributeEstimate==null) _AttributeEstimate = new List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent>(); return _AttributeEstimate; }
        set { _AttributeEstimate = value; OnPropertyChanged("AttributeEstimate"); }
      }

      private List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent> _AttributeEstimate;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AttributeEstimateComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(LevelElement != null) dest.LevelElement = (Hl7.Fhir.Model.FhirDecimal)LevelElement.DeepCopy();
        if(Range != null) dest.Range = (Hl7.Fhir.Model.Range)Range.DeepCopy();
        if(AttributeEstimate != null) dest.AttributeEstimate = new List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent>(AttributeEstimate.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AttributeEstimateComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AttributeEstimateComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(LevelElement, otherT.LevelElement)) return false;
        if( !DeepComparable.Matches(Range, otherT.Range)) return false;
        if( !DeepComparable.Matches(AttributeEstimate, otherT.AttributeEstimate)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AttributeEstimateComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(LevelElement, otherT.LevelElement)) return false;
        if( !DeepComparable.IsExactly(Range, otherT.Range)) return false;
        if( !DeepComparable.IsExactly(AttributeEstimate, otherT.AttributeEstimate)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
          if (Quantity != null) yield return Quantity;
          if (LevelElement != null) yield return LevelElement;
          if (Range != null) yield return Range;
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (LevelElement != null) yield return new ElementValue("level", LevelElement);
          if (Range != null) yield return new ElementValue("range", Range);
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return new ElementValue("attributeEstimate", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "type":
            value = Type;
            return Type is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "level":
            value = LevelElement;
            return LevelElement is not null;
          case "range":
            value = Range;
            return Range is not null;
          case "attributeEstimate":
            value = AttributeEstimate;
            return AttributeEstimate?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (LevelElement is not null) yield return new KeyValuePair<string,object>("level",LevelElement);
        if (Range is not null) yield return new KeyValuePair<string,object>("range",Range);
        if (AttributeEstimate?.Any() == true) yield return new KeyValuePair<string,object>("attributeEstimate",AttributeEstimate);
      }

    }

    /// <summary>
    /// An aspect of the statistical model
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Evidence#ModelCharacteristic", IsNestedType=true)]
    [BackboneType("Evidence.statistic.modelCharacteristic")]
    public partial class ModelCharacteristicComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Evidence#ModelCharacteristic"; } }

      /// <summary>
      /// Model specification
      /// </summary>
      [FhirElement("code", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// Numerical value to complete model specification
      /// </summary>
      [FhirElement("value", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.Quantity _Value;

      /// <summary>
      /// A variable adjusted for in the adjusted analysis
      /// </summary>
      [FhirElement("variable", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Evidence.VariableComponent> Variable
      {
        get { if(_Variable==null) _Variable = new List<Hl7.Fhir.Model.Evidence.VariableComponent>(); return _Variable; }
        set { _Variable = value; OnPropertyChanged("Variable"); }
      }

      private List<Hl7.Fhir.Model.Evidence.VariableComponent> _Variable;

      /// <summary>
      /// An attribute of the statistic used as a model characteristic
      /// </summary>
      [FhirElement("attributeEstimate", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent> AttributeEstimate
      {
        get { if(_AttributeEstimate==null) _AttributeEstimate = new List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent>(); return _AttributeEstimate; }
        set { _AttributeEstimate = value; OnPropertyChanged("AttributeEstimate"); }
      }

      private List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent> _AttributeEstimate;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ModelCharacteristicComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.Quantity)Value.DeepCopy();
        if(Variable != null) dest.Variable = new List<Hl7.Fhir.Model.Evidence.VariableComponent>(Variable.DeepCopy());
        if(AttributeEstimate != null) dest.AttributeEstimate = new List<Hl7.Fhir.Model.Evidence.AttributeEstimateComponent>(AttributeEstimate.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ModelCharacteristicComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ModelCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(Variable, otherT.Variable)) return false;
        if( !DeepComparable.Matches(AttributeEstimate, otherT.AttributeEstimate)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ModelCharacteristicComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(Variable, otherT.Variable)) return false;
        if( !DeepComparable.IsExactly(AttributeEstimate, otherT.AttributeEstimate)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          if (Value != null) yield return Value;
          foreach (var elem in Variable) { if (elem != null) yield return elem; }
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          if (Value != null) yield return new ElementValue("value", Value);
          foreach (var elem in Variable) { if (elem != null) yield return new ElementValue("variable", elem); }
          foreach (var elem in AttributeEstimate) { if (elem != null) yield return new ElementValue("attributeEstimate", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "value":
            value = Value;
            return Value is not null;
          case "variable":
            value = Variable;
            return Variable?.Any() == true;
          case "attributeEstimate":
            value = AttributeEstimate;
            return AttributeEstimate?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
        if (Variable?.Any() == true) yield return new KeyValuePair<string,object>("variable",Variable);
        if (AttributeEstimate?.Any() == true) yield return new KeyValuePair<string,object>("attributeEstimate",AttributeEstimate);
      }

    }

    /// <summary>
    /// A variable adjusted for in the adjusted analysis
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Evidence#Variable", IsNestedType=true)]
    [BackboneType("Evidence.statistic.modelCharacteristic.variable")]
    public partial class VariableComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Evidence#Variable"; } }

      /// <summary>
      /// Description of the variable
      /// </summary>
      [FhirElement("variableDefinition", Order=40)]
      [CLSCompliant(false)]
      [References("Group","EvidenceVariable")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference VariableDefinition
      {
        get { return _VariableDefinition; }
        set { _VariableDefinition = value; OnPropertyChanged("VariableDefinition"); }
      }

      private Hl7.Fhir.Model.ResourceReference _VariableDefinition;

      /// <summary>
      /// continuous | dichotomous | ordinal | polychotomous
      /// </summary>
      [FhirElement("handling", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("EvidenceVariableHandling")]
      [DataMember]
      public Code<Hl7.Fhir.Model.EvidenceVariableHandling> HandlingElement
      {
        get { return _HandlingElement; }
        set { _HandlingElement = value; OnPropertyChanged("HandlingElement"); }
      }

      private Code<Hl7.Fhir.Model.EvidenceVariableHandling> _HandlingElement;

      /// <summary>
      /// continuous | dichotomous | ordinal | polychotomous
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.EvidenceVariableHandling? Handling
      {
        get { return HandlingElement != null ? HandlingElement.Value : null; }
        set
        {
          if (value == null)
            HandlingElement = null;
          else
            HandlingElement = new Code<Hl7.Fhir.Model.EvidenceVariableHandling>(value);
          OnPropertyChanged("Handling");
        }
      }

      /// <summary>
      /// Description for grouping of ordinal or polychotomous variables
      /// </summary>
      [FhirElement("valueCategory", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ValueCategory
      {
        get { if(_ValueCategory==null) _ValueCategory = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ValueCategory; }
        set { _ValueCategory = value; OnPropertyChanged("ValueCategory"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ValueCategory;

      /// <summary>
      /// Discrete value for grouping of ordinal or polychotomous variables
      /// </summary>
      [FhirElement("valueQuantity", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Quantity> ValueQuantity
      {
        get { if(_ValueQuantity==null) _ValueQuantity = new List<Hl7.Fhir.Model.Quantity>(); return _ValueQuantity; }
        set { _ValueQuantity = value; OnPropertyChanged("ValueQuantity"); }
      }

      private List<Hl7.Fhir.Model.Quantity> _ValueQuantity;

      /// <summary>
      /// Range of values for grouping of ordinal or polychotomous variables
      /// </summary>
      [FhirElement("valueRange", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Range> ValueRange
      {
        get { if(_ValueRange==null) _ValueRange = new List<Hl7.Fhir.Model.Range>(); return _ValueRange; }
        set { _ValueRange = value; OnPropertyChanged("ValueRange"); }
      }

      private List<Hl7.Fhir.Model.Range> _ValueRange;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VariableComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(VariableDefinition != null) dest.VariableDefinition = (Hl7.Fhir.Model.ResourceReference)VariableDefinition.DeepCopy();
        if(HandlingElement != null) dest.HandlingElement = (Code<Hl7.Fhir.Model.EvidenceVariableHandling>)HandlingElement.DeepCopy();
        if(ValueCategory != null) dest.ValueCategory = new List<Hl7.Fhir.Model.CodeableConcept>(ValueCategory.DeepCopy());
        if(ValueQuantity != null) dest.ValueQuantity = new List<Hl7.Fhir.Model.Quantity>(ValueQuantity.DeepCopy());
        if(ValueRange != null) dest.ValueRange = new List<Hl7.Fhir.Model.Range>(ValueRange.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VariableComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VariableComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(VariableDefinition, otherT.VariableDefinition)) return false;
        if( !DeepComparable.Matches(HandlingElement, otherT.HandlingElement)) return false;
        if( !DeepComparable.Matches(ValueCategory, otherT.ValueCategory)) return false;
        if( !DeepComparable.Matches(ValueQuantity, otherT.ValueQuantity)) return false;
        if( !DeepComparable.Matches(ValueRange, otherT.ValueRange)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VariableComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(VariableDefinition, otherT.VariableDefinition)) return false;
        if( !DeepComparable.IsExactly(HandlingElement, otherT.HandlingElement)) return false;
        if( !DeepComparable.IsExactly(ValueCategory, otherT.ValueCategory)) return false;
        if( !DeepComparable.IsExactly(ValueQuantity, otherT.ValueQuantity)) return false;
        if( !DeepComparable.IsExactly(ValueRange, otherT.ValueRange)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (VariableDefinition != null) yield return VariableDefinition;
          if (HandlingElement != null) yield return HandlingElement;
          foreach (var elem in ValueCategory) { if (elem != null) yield return elem; }
          foreach (var elem in ValueQuantity) { if (elem != null) yield return elem; }
          foreach (var elem in ValueRange) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (VariableDefinition != null) yield return new ElementValue("variableDefinition", VariableDefinition);
          if (HandlingElement != null) yield return new ElementValue("handling", HandlingElement);
          foreach (var elem in ValueCategory) { if (elem != null) yield return new ElementValue("valueCategory", elem); }
          foreach (var elem in ValueQuantity) { if (elem != null) yield return new ElementValue("valueQuantity", elem); }
          foreach (var elem in ValueRange) { if (elem != null) yield return new ElementValue("valueRange", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "variableDefinition":
            value = VariableDefinition;
            return VariableDefinition is not null;
          case "handling":
            value = HandlingElement;
            return HandlingElement is not null;
          case "valueCategory":
            value = ValueCategory;
            return ValueCategory?.Any() == true;
          case "valueQuantity":
            value = ValueQuantity;
            return ValueQuantity?.Any() == true;
          case "valueRange":
            value = ValueRange;
            return ValueRange?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (VariableDefinition is not null) yield return new KeyValuePair<string,object>("variableDefinition",VariableDefinition);
        if (HandlingElement is not null) yield return new KeyValuePair<string,object>("handling",HandlingElement);
        if (ValueCategory?.Any() == true) yield return new KeyValuePair<string,object>("valueCategory",ValueCategory);
        if (ValueQuantity?.Any() == true) yield return new KeyValuePair<string,object>("valueQuantity",ValueQuantity);
        if (ValueRange?.Any() == true) yield return new KeyValuePair<string,object>("valueRange",ValueRange);
      }

    }

    /// <summary>
    /// Certainty or quality of the evidence
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Evidence#Certainty", IsNestedType=true)]
    [BackboneType("Evidence.certainty")]
    public partial class CertaintyComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Evidence#Certainty"; } }

      /// <summary>
      /// Textual description of certainty
      /// </summary>
      [FhirElement("description", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Textual description of certainty
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Footnotes and/or explanatory notes
      /// </summary>
      [FhirElement("note", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      /// <summary>
      /// Aspect of certainty being rated
      /// </summary>
      [FhirElement("type", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Assessment or judgement of the aspect
      /// </summary>
      [FhirElement("rating", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Rating
      {
        get { return _Rating; }
        set { _Rating = value; OnPropertyChanged("Rating"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Rating;

      /// <summary>
      /// Individual or group who did the rating
      /// </summary>
      [FhirElement("rater", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RaterElement
      {
        get { return _RaterElement; }
        set { _RaterElement = value; OnPropertyChanged("RaterElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RaterElement;

      /// <summary>
      /// Individual or group who did the rating
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Rater
      {
        get { return RaterElement != null ? RaterElement.Value : null; }
        set
        {
          if (value == null)
            RaterElement = null;
          else
            RaterElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Rater");
        }
      }

      /// <summary>
      /// A domain or subdomain of certainty
      /// </summary>
      [FhirElement("subcomponent", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Evidence.CertaintyComponent> Subcomponent
      {
        get { if(_Subcomponent==null) _Subcomponent = new List<Hl7.Fhir.Model.Evidence.CertaintyComponent>(); return _Subcomponent; }
        set { _Subcomponent = value; OnPropertyChanged("Subcomponent"); }
      }

      private List<Hl7.Fhir.Model.Evidence.CertaintyComponent> _Subcomponent;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CertaintyComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Rating != null) dest.Rating = (Hl7.Fhir.Model.CodeableConcept)Rating.DeepCopy();
        if(RaterElement != null) dest.RaterElement = (Hl7.Fhir.Model.FhirString)RaterElement.DeepCopy();
        if(Subcomponent != null) dest.Subcomponent = new List<Hl7.Fhir.Model.Evidence.CertaintyComponent>(Subcomponent.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CertaintyComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CertaintyComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Rating, otherT.Rating)) return false;
        if( !DeepComparable.Matches(RaterElement, otherT.RaterElement)) return false;
        if( !DeepComparable.Matches(Subcomponent, otherT.Subcomponent)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CertaintyComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Rating, otherT.Rating)) return false;
        if( !DeepComparable.IsExactly(RaterElement, otherT.RaterElement)) return false;
        if( !DeepComparable.IsExactly(Subcomponent, otherT.Subcomponent)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
          if (Rating != null) yield return Rating;
          if (RaterElement != null) yield return RaterElement;
          foreach (var elem in Subcomponent) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
          if (Rating != null) yield return new ElementValue("rating", Rating);
          if (RaterElement != null) yield return new ElementValue("rater", RaterElement);
          foreach (var elem in Subcomponent) { if (elem != null) yield return new ElementValue("subcomponent", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          case "type":
            value = Type;
            return Type is not null;
          case "rating":
            value = Rating;
            return Rating is not null;
          case "rater":
            value = RaterElement;
            return RaterElement is not null;
          case "subcomponent":
            value = Subcomponent;
            return Subcomponent?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Rating is not null) yield return new KeyValuePair<string,object>("rating",Rating);
        if (RaterElement is not null) yield return new KeyValuePair<string,object>("rater",RaterElement);
        if (Subcomponent?.Any() == true) yield return new KeyValuePair<string,object>("subcomponent",Subcomponent);
      }

    }

    /// <summary>
    /// Canonical identifier for this evidence, represented as a globally unique URI
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Canonical identifier for this evidence, represented as a globally unique URI
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the summary
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Business version of this summary
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="FiveWs.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of this summary
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this summary (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this summary (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// Citation for this evidence
    /// </summary>
    [FhirElement("citeAs", Order=130, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Citation")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.ResourceReference),typeof(Hl7.Fhir.Model.Markdown))]
    [DataMember]
    public Hl7.Fhir.Model.DataType CiteAs
    {
      get { return _CiteAs; }
      set { _CiteAs = value; OnPropertyChanged("CiteAs"); }
    }

    private Hl7.Fhir.Model.DataType _CiteAs;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=140, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("PublicationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Date last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=150, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// The context that the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// When the summary was approved by publisher
    /// </summary>
    [FhirElement("approvalDate", Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.Date ApprovalDateElement
    {
      get { return _ApprovalDateElement; }
      set { _ApprovalDateElement = value; OnPropertyChanged("ApprovalDateElement"); }
    }

    private Hl7.Fhir.Model.Date _ApprovalDateElement;

    /// <summary>
    /// When the summary was approved by publisher
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string ApprovalDate
    {
      get { return ApprovalDateElement != null ? ApprovalDateElement.Value : null; }
      set
      {
        if (value == null)
          ApprovalDateElement = null;
        else
          ApprovalDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("ApprovalDate");
      }
    }

    /// <summary>
    /// When the summary was last reviewed
    /// </summary>
    [FhirElement("lastReviewDate", Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.Date LastReviewDateElement
    {
      get { return _LastReviewDateElement; }
      set { _LastReviewDateElement = value; OnPropertyChanged("LastReviewDateElement"); }
    }

    private Hl7.Fhir.Model.Date _LastReviewDateElement;

    /// <summary>
    /// When the summary was last reviewed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string LastReviewDate
    {
      get { return LastReviewDateElement != null ? LastReviewDateElement.Value : null; }
      set
      {
        if (value == null)
          LastReviewDateElement = null;
        else
          LastReviewDateElement = new Hl7.Fhir.Model.Date(value);
        OnPropertyChanged("LastReviewDate");
      }
    }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=190, FiveWs="FiveWs.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Who authored the content
    /// </summary>
    [FhirElement("author", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Author
    {
      get { if(_Author==null) _Author = new List<Hl7.Fhir.Model.ContactDetail>(); return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Author;

    /// <summary>
    /// Who edited the content
    /// </summary>
    [FhirElement("editor", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Editor
    {
      get { if(_Editor==null) _Editor = new List<Hl7.Fhir.Model.ContactDetail>(); return _Editor; }
      set { _Editor = value; OnPropertyChanged("Editor"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Editor;

    /// <summary>
    /// Who reviewed the content
    /// </summary>
    [FhirElement("reviewer", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Reviewer
    {
      get { if(_Reviewer==null) _Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(); return _Reviewer; }
      set { _Reviewer = value; OnPropertyChanged("Reviewer"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Reviewer;

    /// <summary>
    /// Who endorsed the content
    /// </summary>
    [FhirElement("endorser", InSummary=true, Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Endorser
    {
      get { if(_Endorser==null) _Endorser = new List<Hl7.Fhir.Model.ContactDetail>(); return _Endorser; }
      set { _Endorser = value; OnPropertyChanged("Endorser"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Endorser;

    /// <summary>
    /// Link or citation to artifact associated with the summary
    /// </summary>
    [FhirElement("relatedArtifact", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RelatedArtifact> RelatedArtifact
    {
      get { if(_RelatedArtifact==null) _RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _RelatedArtifact; }
      set { _RelatedArtifact = value; OnPropertyChanged("RelatedArtifact"); }
    }

    private List<Hl7.Fhir.Model.RelatedArtifact> _RelatedArtifact;

    /// <summary>
    /// Description of the particular summary
    /// </summary>
    [FhirElement("description", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Description of the particular summary
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Declarative description of the Evidence
    /// </summary>
    [FhirElement("assertion", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown AssertionElement
    {
      get { return _AssertionElement; }
      set { _AssertionElement = value; OnPropertyChanged("AssertionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _AssertionElement;

    /// <summary>
    /// Declarative description of the Evidence
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Assertion
    {
      get { return AssertionElement != null ? AssertionElement.Value : null; }
      set
      {
        if (value == null)
          AssertionElement = null;
        else
          AssertionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Assertion");
      }
    }

    /// <summary>
    /// Footnotes and/or explanatory notes
    /// </summary>
    [FhirElement("note", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Evidence variable such as population, exposure, or outcome
    /// </summary>
    [FhirElement("variableDefinition", Order=290)]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Evidence.VariableDefinitionComponent> VariableDefinition
    {
      get { if(_VariableDefinition==null) _VariableDefinition = new List<Hl7.Fhir.Model.Evidence.VariableDefinitionComponent>(); return _VariableDefinition; }
      set { _VariableDefinition = value; OnPropertyChanged("VariableDefinition"); }
    }

    private List<Hl7.Fhir.Model.Evidence.VariableDefinitionComponent> _VariableDefinition;

    /// <summary>
    /// The method to combine studies
    /// </summary>
    [FhirElement("synthesisType", Order=300)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept SynthesisType
    {
      get { return _SynthesisType; }
      set { _SynthesisType = value; OnPropertyChanged("SynthesisType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _SynthesisType;

    /// <summary>
    /// The type of study that produced this evidence
    /// </summary>
    [FhirElement("studyType", Order=310)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept StudyType
    {
      get { return _StudyType; }
      set { _StudyType = value; OnPropertyChanged("StudyType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _StudyType;

    /// <summary>
    /// Values and parameters for a single statistic
    /// </summary>
    [FhirElement("statistic", Order=320)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Evidence.StatisticComponent> Statistic
    {
      get { if(_Statistic==null) _Statistic = new List<Hl7.Fhir.Model.Evidence.StatisticComponent>(); return _Statistic; }
      set { _Statistic = value; OnPropertyChanged("Statistic"); }
    }

    private List<Hl7.Fhir.Model.Evidence.StatisticComponent> _Statistic;

    /// <summary>
    /// Certainty or quality of the evidence
    /// </summary>
    [FhirElement("certainty", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Evidence.CertaintyComponent> Certainty
    {
      get { if(_Certainty==null) _Certainty = new List<Hl7.Fhir.Model.Evidence.CertaintyComponent>(); return _Certainty; }
      set { _Certainty = value; OnPropertyChanged("Certainty"); }
    }

    private List<Hl7.Fhir.Model.Evidence.CertaintyComponent> _Certainty;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Evidence;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(CiteAs != null) dest.CiteAs = (Hl7.Fhir.Model.DataType)CiteAs.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(ApprovalDateElement != null) dest.ApprovalDateElement = (Hl7.Fhir.Model.Date)ApprovalDateElement.DeepCopy();
      if(LastReviewDateElement != null) dest.LastReviewDateElement = (Hl7.Fhir.Model.Date)LastReviewDateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(Author != null) dest.Author = new List<Hl7.Fhir.Model.ContactDetail>(Author.DeepCopy());
      if(Editor != null) dest.Editor = new List<Hl7.Fhir.Model.ContactDetail>(Editor.DeepCopy());
      if(Reviewer != null) dest.Reviewer = new List<Hl7.Fhir.Model.ContactDetail>(Reviewer.DeepCopy());
      if(Endorser != null) dest.Endorser = new List<Hl7.Fhir.Model.ContactDetail>(Endorser.DeepCopy());
      if(RelatedArtifact != null) dest.RelatedArtifact = new List<Hl7.Fhir.Model.RelatedArtifact>(RelatedArtifact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(AssertionElement != null) dest.AssertionElement = (Hl7.Fhir.Model.Markdown)AssertionElement.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(VariableDefinition != null) dest.VariableDefinition = new List<Hl7.Fhir.Model.Evidence.VariableDefinitionComponent>(VariableDefinition.DeepCopy());
      if(SynthesisType != null) dest.SynthesisType = (Hl7.Fhir.Model.CodeableConcept)SynthesisType.DeepCopy();
      if(StudyType != null) dest.StudyType = (Hl7.Fhir.Model.CodeableConcept)StudyType.DeepCopy();
      if(Statistic != null) dest.Statistic = new List<Hl7.Fhir.Model.Evidence.StatisticComponent>(Statistic.DeepCopy());
      if(Certainty != null) dest.Certainty = new List<Hl7.Fhir.Model.Evidence.CertaintyComponent>(Certainty.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Evidence());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Evidence;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(CiteAs, otherT.CiteAs)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.Matches(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Editor, otherT.Editor)) return false;
      if( !DeepComparable.Matches(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.Matches(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.Matches(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(AssertionElement, otherT.AssertionElement)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(VariableDefinition, otherT.VariableDefinition)) return false;
      if( !DeepComparable.Matches(SynthesisType, otherT.SynthesisType)) return false;
      if( !DeepComparable.Matches(StudyType, otherT.StudyType)) return false;
      if( !DeepComparable.Matches(Statistic, otherT.Statistic)) return false;
      if( !DeepComparable.Matches(Certainty, otherT.Certainty)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Evidence;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(CiteAs, otherT.CiteAs)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(ApprovalDateElement, otherT.ApprovalDateElement)) return false;
      if( !DeepComparable.IsExactly(LastReviewDateElement, otherT.LastReviewDateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Editor, otherT.Editor)) return false;
      if( !DeepComparable.IsExactly(Reviewer, otherT.Reviewer)) return false;
      if( !DeepComparable.IsExactly(Endorser, otherT.Endorser)) return false;
      if( !DeepComparable.IsExactly(RelatedArtifact, otherT.RelatedArtifact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(AssertionElement, otherT.AssertionElement)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(VariableDefinition, otherT.VariableDefinition)) return false;
      if( !DeepComparable.IsExactly(SynthesisType, otherT.SynthesisType)) return false;
      if( !DeepComparable.IsExactly(StudyType, otherT.StudyType)) return false;
      if( !DeepComparable.IsExactly(Statistic, otherT.Statistic)) return false;
      if( !DeepComparable.IsExactly(Certainty, otherT.Certainty)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (VersionElement != null) yield return VersionElement;
        if (TitleElement != null) yield return TitleElement;
        if (CiteAs != null) yield return CiteAs;
        if (StatusElement != null) yield return StatusElement;
        if (DateElement != null) yield return DateElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        if (ApprovalDateElement != null) yield return ApprovalDateElement;
        if (LastReviewDateElement != null) yield return LastReviewDateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        foreach (var elem in Author) { if (elem != null) yield return elem; }
        foreach (var elem in Editor) { if (elem != null) yield return elem; }
        foreach (var elem in Reviewer) { if (elem != null) yield return elem; }
        foreach (var elem in Endorser) { if (elem != null) yield return elem; }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        if (AssertionElement != null) yield return AssertionElement;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in VariableDefinition) { if (elem != null) yield return elem; }
        if (SynthesisType != null) yield return SynthesisType;
        if (StudyType != null) yield return StudyType;
        foreach (var elem in Statistic) { if (elem != null) yield return elem; }
        foreach (var elem in Certainty) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (CiteAs != null) yield return new ElementValue("citeAs", CiteAs);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        if (ApprovalDateElement != null) yield return new ElementValue("approvalDate", ApprovalDateElement);
        if (LastReviewDateElement != null) yield return new ElementValue("lastReviewDate", LastReviewDateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        foreach (var elem in Author) { if (elem != null) yield return new ElementValue("author", elem); }
        foreach (var elem in Editor) { if (elem != null) yield return new ElementValue("editor", elem); }
        foreach (var elem in Reviewer) { if (elem != null) yield return new ElementValue("reviewer", elem); }
        foreach (var elem in Endorser) { if (elem != null) yield return new ElementValue("endorser", elem); }
        foreach (var elem in RelatedArtifact) { if (elem != null) yield return new ElementValue("relatedArtifact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        if (AssertionElement != null) yield return new ElementValue("assertion", AssertionElement);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in VariableDefinition) { if (elem != null) yield return new ElementValue("variableDefinition", elem); }
        if (SynthesisType != null) yield return new ElementValue("synthesisType", SynthesisType);
        if (StudyType != null) yield return new ElementValue("studyType", StudyType);
        foreach (var elem in Statistic) { if (elem != null) yield return new ElementValue("statistic", elem); }
        foreach (var elem in Certainty) { if (elem != null) yield return new ElementValue("certainty", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "citeAs":
          value = CiteAs;
          return CiteAs is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "approvalDate":
          value = ApprovalDateElement;
          return ApprovalDateElement is not null;
        case "lastReviewDate":
          value = LastReviewDateElement;
          return LastReviewDateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "author":
          value = Author;
          return Author?.Any() == true;
        case "editor":
          value = Editor;
          return Editor?.Any() == true;
        case "reviewer":
          value = Reviewer;
          return Reviewer?.Any() == true;
        case "endorser":
          value = Endorser;
          return Endorser?.Any() == true;
        case "relatedArtifact":
          value = RelatedArtifact;
          return RelatedArtifact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "assertion":
          value = AssertionElement;
          return AssertionElement is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "variableDefinition":
          value = VariableDefinition;
          return VariableDefinition?.Any() == true;
        case "synthesisType":
          value = SynthesisType;
          return SynthesisType is not null;
        case "studyType":
          value = StudyType;
          return StudyType is not null;
        case "statistic":
          value = Statistic;
          return Statistic?.Any() == true;
        case "certainty":
          value = Certainty;
          return Certainty?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (CiteAs is not null) yield return new KeyValuePair<string,object>("citeAs",CiteAs);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (ApprovalDateElement is not null) yield return new KeyValuePair<string,object>("approvalDate",ApprovalDateElement);
      if (LastReviewDateElement is not null) yield return new KeyValuePair<string,object>("lastReviewDate",LastReviewDateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (Author?.Any() == true) yield return new KeyValuePair<string,object>("author",Author);
      if (Editor?.Any() == true) yield return new KeyValuePair<string,object>("editor",Editor);
      if (Reviewer?.Any() == true) yield return new KeyValuePair<string,object>("reviewer",Reviewer);
      if (Endorser?.Any() == true) yield return new KeyValuePair<string,object>("endorser",Endorser);
      if (RelatedArtifact?.Any() == true) yield return new KeyValuePair<string,object>("relatedArtifact",RelatedArtifact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (AssertionElement is not null) yield return new KeyValuePair<string,object>("assertion",AssertionElement);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (VariableDefinition?.Any() == true) yield return new KeyValuePair<string,object>("variableDefinition",VariableDefinition);
      if (SynthesisType is not null) yield return new KeyValuePair<string,object>("synthesisType",SynthesisType);
      if (StudyType is not null) yield return new KeyValuePair<string,object>("studyType",StudyType);
      if (Statistic?.Any() == true) yield return new KeyValuePair<string,object>("statistic",Statistic);
      if (Certainty?.Any() == true) yield return new KeyValuePair<string,object>("certainty",Certainty);
    }

  }

}

// end of file

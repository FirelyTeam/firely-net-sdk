// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Claim, Pre-determination or Pre-authorization
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Claim","http://hl7.org/fhir/StructureDefinition/Claim", IsResource=true)]
  public partial class Claim : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Claim"; } }

    /// <summary>
    /// Prior or corollary claims
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#RelatedClaim", IsNestedType=true)]
    [BackboneType("Claim.related")]
    public partial class RelatedClaimComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#RelatedClaim"; } }

      /// <summary>
      /// Reference to the related claim
      /// </summary>
      [FhirElement("claim", Order=40)]
      [CLSCompliant(false)]
      [References("Claim")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Claim
      {
        get { return _Claim; }
        set { _Claim = value; OnPropertyChanged("Claim"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Claim;

      /// <summary>
      /// How the reference claim is related
      /// </summary>
      [FhirElement("relationship", Order=50)]
      [Binding("RelatedClaimRelationship")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Relationship
      {
        get { return _Relationship; }
        set { _Relationship = value; OnPropertyChanged("Relationship"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Relationship;

      /// <summary>
      /// File or case reference
      /// </summary>
      [FhirElement("reference", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Reference
      {
        get { return _Reference; }
        set { _Reference = value; OnPropertyChanged("Reference"); }
      }

      private Hl7.Fhir.Model.Identifier _Reference;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatedClaimComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Claim != null) dest.Claim = (Hl7.Fhir.Model.ResourceReference)Claim.DeepCopy();
        if(Relationship != null) dest.Relationship = (Hl7.Fhir.Model.CodeableConcept)Relationship.DeepCopy();
        if(Reference != null) dest.Reference = (Hl7.Fhir.Model.Identifier)Reference.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatedClaimComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatedClaimComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Claim, otherT.Claim)) return false;
        if( !DeepComparable.Matches(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.Matches(Reference, otherT.Reference)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatedClaimComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Claim, otherT.Claim)) return false;
        if( !DeepComparable.IsExactly(Relationship, otherT.Relationship)) return false;
        if( !DeepComparable.IsExactly(Reference, otherT.Reference)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Claim != null) yield return Claim;
          if (Relationship != null) yield return Relationship;
          if (Reference != null) yield return Reference;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Claim != null) yield return new ElementValue("claim", Claim);
          if (Relationship != null) yield return new ElementValue("relationship", Relationship);
          if (Reference != null) yield return new ElementValue("reference", Reference);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "claim":
            value = Claim;
            return Claim is not null;
          case "relationship":
            value = Relationship;
            return Relationship is not null;
          case "reference":
            value = Reference;
            return Reference is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Claim is not null) yield return new KeyValuePair<string,object>("claim",Claim);
        if (Relationship is not null) yield return new KeyValuePair<string,object>("relationship",Relationship);
        if (Reference is not null) yield return new KeyValuePair<string,object>("reference",Reference);
      }

    }

    /// <summary>
    /// Recipient of benefits payable
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#Payee", IsNestedType=true)]
    [BackboneType("Claim.payee")]
    public partial class PayeeComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#Payee"; } }

      /// <summary>
      /// Category of recipient
      /// </summary>
      [FhirElement("type", Order=40)]
      [Binding("PayeeType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Recipient reference
      /// </summary>
      [FhirElement("party", Order=50)]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization","Patient","RelatedPerson")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PayeeComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PayeeComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PayeeComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PayeeComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Party != null) yield return Party;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Party != null) yield return new ElementValue("party", Party);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "party":
            value = Party;
            return Party is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
      }

    }

    /// <summary>
    /// Members of the care team
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#CareTeam", IsNestedType=true)]
    [BackboneType("Claim.careTeam")]
    public partial class CareTeamComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#CareTeam"; } }

      /// <summary>
      /// Order of care team
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Order of care team
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Practitioner or organization
      /// </summary>
      [FhirElement("provider", Order=50, FiveWs="FiveWs.actor")]
      [CLSCompliant(false)]
      [References("Practitioner","PractitionerRole","Organization")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Provider
      {
        get { return _Provider; }
        set { _Provider = value; OnPropertyChanged("Provider"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Provider;

      /// <summary>
      /// Indicator of the lead practitioner
      /// </summary>
      [FhirElement("responsible", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ResponsibleElement
      {
        get { return _ResponsibleElement; }
        set { _ResponsibleElement = value; OnPropertyChanged("ResponsibleElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ResponsibleElement;

      /// <summary>
      /// Indicator of the lead practitioner
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Responsible
      {
        get { return ResponsibleElement != null ? ResponsibleElement.Value : null; }
        set
        {
          if (value == null)
            ResponsibleElement = null;
          else
            ResponsibleElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Responsible");
        }
      }

      /// <summary>
      /// Function within the team
      /// </summary>
      [FhirElement("role", Order=70)]
      [Binding("CareTeamRole")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Role
      {
        get { return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Role;

      /// <summary>
      /// Practitioner credential or specialization
      /// </summary>
      [FhirElement("qualification", Order=80)]
      [Binding("ProviderQualification")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Qualification
      {
        get { return _Qualification; }
        set { _Qualification = value; OnPropertyChanged("Qualification"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Qualification;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CareTeamComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Provider != null) dest.Provider = (Hl7.Fhir.Model.ResourceReference)Provider.DeepCopy();
        if(ResponsibleElement != null) dest.ResponsibleElement = (Hl7.Fhir.Model.FhirBoolean)ResponsibleElement.DeepCopy();
        if(Role != null) dest.Role = (Hl7.Fhir.Model.CodeableConcept)Role.DeepCopy();
        if(Qualification != null) dest.Qualification = (Hl7.Fhir.Model.CodeableConcept)Qualification.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CareTeamComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CareTeamComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Provider, otherT.Provider)) return false;
        if( !DeepComparable.Matches(ResponsibleElement, otherT.ResponsibleElement)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;
        if( !DeepComparable.Matches(Qualification, otherT.Qualification)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CareTeamComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Provider, otherT.Provider)) return false;
        if( !DeepComparable.IsExactly(ResponsibleElement, otherT.ResponsibleElement)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;
        if( !DeepComparable.IsExactly(Qualification, otherT.Qualification)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Provider != null) yield return Provider;
          if (ResponsibleElement != null) yield return ResponsibleElement;
          if (Role != null) yield return Role;
          if (Qualification != null) yield return Qualification;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Provider != null) yield return new ElementValue("provider", Provider);
          if (ResponsibleElement != null) yield return new ElementValue("responsible", ResponsibleElement);
          if (Role != null) yield return new ElementValue("role", Role);
          if (Qualification != null) yield return new ElementValue("qualification", Qualification);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "provider":
            value = Provider;
            return Provider is not null;
          case "responsible":
            value = ResponsibleElement;
            return ResponsibleElement is not null;
          case "role":
            value = Role;
            return Role is not null;
          case "qualification":
            value = Qualification;
            return Qualification is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Provider is not null) yield return new KeyValuePair<string,object>("provider",Provider);
        if (ResponsibleElement is not null) yield return new KeyValuePair<string,object>("responsible",ResponsibleElement);
        if (Role is not null) yield return new KeyValuePair<string,object>("role",Role);
        if (Qualification is not null) yield return new KeyValuePair<string,object>("qualification",Qualification);
      }

    }

    /// <summary>
    /// Supporting information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#SupportingInformation", IsNestedType=true)]
    [BackboneType("Claim.supportingInfo")]
    public partial class SupportingInformationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#SupportingInformation"; } }

      /// <summary>
      /// Information instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Information instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Classification of the supplied information
      /// </summary>
      [FhirElement("category", Order=50)]
      [Binding("InformationCategory")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Type of information
      /// </summary>
      [FhirElement("code", Order=60)]
      [Binding("InformationCode")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// When it occurred
      /// </summary>
      [FhirElement("timing", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.Period))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Timing
      {
        get { return _Timing; }
        set { _Timing = value; OnPropertyChanged("Timing"); }
      }

      private Hl7.Fhir.Model.DataType _Timing;

      /// <summary>
      /// Data to be provided
      /// </summary>
      [FhirElement("value", Order=80, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Resource")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.FhirString),typeof(Hl7.Fhir.Model.Quantity),typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Value
      {
        get { return _Value; }
        set { _Value = value; OnPropertyChanged("Value"); }
      }

      private Hl7.Fhir.Model.DataType _Value;

      /// <summary>
      /// Explanation for the information
      /// </summary>
      [FhirElement("reason", Order=90)]
      [Binding("MissingReason")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Reason
      {
        get { return _Reason; }
        set { _Reason = value; OnPropertyChanged("Reason"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Reason;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SupportingInformationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Timing != null) dest.Timing = (Hl7.Fhir.Model.DataType)Timing.DeepCopy();
        if(Value != null) dest.Value = (Hl7.Fhir.Model.DataType)Value.DeepCopy();
        if(Reason != null) dest.Reason = (Hl7.Fhir.Model.CodeableConcept)Reason.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SupportingInformationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SupportingInformationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Timing, otherT.Timing)) return false;
        if( !DeepComparable.Matches(Value, otherT.Value)) return false;
        if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SupportingInformationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Timing, otherT.Timing)) return false;
        if( !DeepComparable.IsExactly(Value, otherT.Value)) return false;
        if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Category != null) yield return Category;
          if (Code != null) yield return Code;
          if (Timing != null) yield return Timing;
          if (Value != null) yield return Value;
          if (Reason != null) yield return Reason;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Category != null) yield return new ElementValue("category", Category);
          if (Code != null) yield return new ElementValue("code", Code);
          if (Timing != null) yield return new ElementValue("timing", Timing);
          if (Value != null) yield return new ElementValue("value", Value);
          if (Reason != null) yield return new ElementValue("reason", Reason);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "code":
            value = Code;
            return Code is not null;
          case "timing":
            value = Timing;
            return Timing is not null;
          case "value":
            value = Value;
            return Value is not null;
          case "reason":
            value = Reason;
            return Reason is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Timing is not null) yield return new KeyValuePair<string,object>("timing",Timing);
        if (Value is not null) yield return new KeyValuePair<string,object>("value",Value);
        if (Reason is not null) yield return new KeyValuePair<string,object>("reason",Reason);
      }

    }

    /// <summary>
    /// Pertinent diagnosis information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#Diagnosis", IsNestedType=true)]
    [BackboneType("Claim.diagnosis")]
    public partial class DiagnosisComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#Diagnosis"; } }

      /// <summary>
      /// Diagnosis instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Diagnosis instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Nature of illness or problem
      /// </summary>
      [FhirElement("diagnosis", Order=50, Choice=ChoiceType.DatatypeChoice)]
      [Binding("ICD10")]
      [CLSCompliant(false)]
      [References("Condition")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Diagnosis
      {
        get { return _Diagnosis; }
        set { _Diagnosis = value; OnPropertyChanged("Diagnosis"); }
      }

      private Hl7.Fhir.Model.DataType _Diagnosis;

      /// <summary>
      /// Timing or nature of the diagnosis
      /// </summary>
      [FhirElement("type", Order=60)]
      [Binding("DiagnosisType")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// Present on admission
      /// </summary>
      [FhirElement("onAdmission", Order=70)]
      [Binding("DiagnosisOnAdmission")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept OnAdmission
      {
        get { return _OnAdmission; }
        set { _OnAdmission = value; OnPropertyChanged("OnAdmission"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _OnAdmission;

      /// <summary>
      /// Package billing code
      /// </summary>
      [FhirElement("packageCode", Order=80)]
      [Binding("DiagnosisRelatedGroup")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept PackageCode
      {
        get { return _PackageCode; }
        set { _PackageCode = value; OnPropertyChanged("PackageCode"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _PackageCode;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DiagnosisComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Diagnosis != null) dest.Diagnosis = (Hl7.Fhir.Model.DataType)Diagnosis.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(OnAdmission != null) dest.OnAdmission = (Hl7.Fhir.Model.CodeableConcept)OnAdmission.DeepCopy();
        if(PackageCode != null) dest.PackageCode = (Hl7.Fhir.Model.CodeableConcept)PackageCode.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DiagnosisComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Diagnosis, otherT.Diagnosis)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(OnAdmission, otherT.OnAdmission)) return false;
        if( !DeepComparable.Matches(PackageCode, otherT.PackageCode)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DiagnosisComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Diagnosis, otherT.Diagnosis)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(OnAdmission, otherT.OnAdmission)) return false;
        if( !DeepComparable.IsExactly(PackageCode, otherT.PackageCode)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Diagnosis != null) yield return Diagnosis;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (OnAdmission != null) yield return OnAdmission;
          if (PackageCode != null) yield return PackageCode;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Diagnosis != null) yield return new ElementValue("diagnosis", Diagnosis);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (OnAdmission != null) yield return new ElementValue("onAdmission", OnAdmission);
          if (PackageCode != null) yield return new ElementValue("packageCode", PackageCode);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "diagnosis":
            value = Diagnosis;
            return Diagnosis is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "onAdmission":
            value = OnAdmission;
            return OnAdmission is not null;
          case "packageCode":
            value = PackageCode;
            return PackageCode is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Diagnosis is not null) yield return new KeyValuePair<string,object>("diagnosis",Diagnosis);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (OnAdmission is not null) yield return new KeyValuePair<string,object>("onAdmission",OnAdmission);
        if (PackageCode is not null) yield return new KeyValuePair<string,object>("packageCode",PackageCode);
      }

    }

    /// <summary>
    /// Clinical procedures performed
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#Procedure", IsNestedType=true)]
    [BackboneType("Claim.procedure")]
    public partial class ProcedureComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#Procedure"; } }

      /// <summary>
      /// Procedure instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Procedure instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Category of Procedure
      /// </summary>
      [FhirElement("type", Order=50)]
      [Binding("ProcedureType")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Type
      {
        get { if(_Type==null) _Type = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Type;

      /// <summary>
      /// When the procedure was performed
      /// </summary>
      [FhirElement("date", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _DateElement;

      /// <summary>
      /// When the procedure was performed
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// Specific clinical procedure
      /// </summary>
      [FhirElement("procedure", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [Binding("ICD10_Procedures")]
      [CLSCompliant(false)]
      [References("Procedure")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Procedure
      {
        get { return _Procedure; }
        set { _Procedure = value; OnPropertyChanged("Procedure"); }
      }

      private Hl7.Fhir.Model.DataType _Procedure;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=80)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ProcedureComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Type != null) dest.Type = new List<Hl7.Fhir.Model.CodeableConcept>(Type.DeepCopy());
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
        if(Procedure != null) dest.Procedure = (Hl7.Fhir.Model.DataType)Procedure.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ProcedureComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ProcedureComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(Procedure, otherT.Procedure)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ProcedureComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(Procedure, otherT.Procedure)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          foreach (var elem in Type) { if (elem != null) yield return elem; }
          if (DateElement != null) yield return DateElement;
          if (Procedure != null) yield return Procedure;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          foreach (var elem in Type) { if (elem != null) yield return new ElementValue("type", elem); }
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (Procedure != null) yield return new ElementValue("procedure", Procedure);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "type":
            value = Type;
            return Type?.Any() == true;
          case "date":
            value = DateElement;
            return DateElement is not null;
          case "procedure":
            value = Procedure;
            return Procedure is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Type?.Any() == true) yield return new KeyValuePair<string,object>("type",Type);
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
        if (Procedure is not null) yield return new KeyValuePair<string,object>("procedure",Procedure);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
      }

    }

    /// <summary>
    /// Patient insurance information
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#Insurance", IsNestedType=true)]
    [BackboneType("Claim.insurance")]
    public partial class InsuranceComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#Insurance"; } }

      /// <summary>
      /// Insurance instance identifier
      /// </summary>
      [FhirElement("sequence", InSummary=true, Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Insurance instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Coverage to be used for adjudication
      /// </summary>
      [FhirElement("focal", InSummary=true, Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean FocalElement
      {
        get { return _FocalElement; }
        set { _FocalElement = value; OnPropertyChanged("FocalElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _FocalElement;

      /// <summary>
      /// Coverage to be used for adjudication
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Focal
      {
        get { return FocalElement != null ? FocalElement.Value : null; }
        set
        {
          if (value == null)
            FocalElement = null;
          else
            FocalElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Focal");
        }
      }

      /// <summary>
      /// Pre-assigned Claim number
      /// </summary>
      [FhirElement("identifier", Order=60, FiveWs="FiveWs.identifier")]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// Insurance information
      /// </summary>
      [FhirElement("coverage", InSummary=true, Order=70)]
      [CLSCompliant(false)]
      [References("Coverage")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Coverage
      {
        get { return _Coverage; }
        set { _Coverage = value; OnPropertyChanged("Coverage"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Coverage;

      /// <summary>
      /// Additional provider contract number
      /// </summary>
      [FhirElement("businessArrangement", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString BusinessArrangementElement
      {
        get { return _BusinessArrangementElement; }
        set { _BusinessArrangementElement = value; OnPropertyChanged("BusinessArrangementElement"); }
      }

      private Hl7.Fhir.Model.FhirString _BusinessArrangementElement;

      /// <summary>
      /// Additional provider contract number
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string BusinessArrangement
      {
        get { return BusinessArrangementElement != null ? BusinessArrangementElement.Value : null; }
        set
        {
          if (value == null)
            BusinessArrangementElement = null;
          else
            BusinessArrangementElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("BusinessArrangement");
        }
      }

      /// <summary>
      /// Prior authorization reference number
      /// </summary>
      [FhirElement("preAuthRef", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirString> PreAuthRefElement
      {
        get { if(_PreAuthRefElement==null) _PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(); return _PreAuthRefElement; }
        set { _PreAuthRefElement = value; OnPropertyChanged("PreAuthRefElement"); }
      }

      private List<Hl7.Fhir.Model.FhirString> _PreAuthRefElement;

      /// <summary>
      /// Prior authorization reference number
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> PreAuthRef
      {
        get { return PreAuthRefElement != null ? PreAuthRefElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            PreAuthRefElement = null;
          else
            PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(value.Select(elem=>new Hl7.Fhir.Model.FhirString(elem)));
          OnPropertyChanged("PreAuthRef");
        }
      }

      /// <summary>
      /// Adjudication results
      /// </summary>
      [FhirElement("claimResponse", Order=100)]
      [CLSCompliant(false)]
      [References("ClaimResponse")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference ClaimResponse
      {
        get { return _ClaimResponse; }
        set { _ClaimResponse = value; OnPropertyChanged("ClaimResponse"); }
      }

      private Hl7.Fhir.Model.ResourceReference _ClaimResponse;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as InsuranceComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(FocalElement != null) dest.FocalElement = (Hl7.Fhir.Model.FhirBoolean)FocalElement.DeepCopy();
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(Coverage != null) dest.Coverage = (Hl7.Fhir.Model.ResourceReference)Coverage.DeepCopy();
        if(BusinessArrangementElement != null) dest.BusinessArrangementElement = (Hl7.Fhir.Model.FhirString)BusinessArrangementElement.DeepCopy();
        if(PreAuthRefElement != null) dest.PreAuthRefElement = new List<Hl7.Fhir.Model.FhirString>(PreAuthRefElement.DeepCopy());
        if(ClaimResponse != null) dest.ClaimResponse = (Hl7.Fhir.Model.ResourceReference)ClaimResponse.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new InsuranceComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as InsuranceComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(FocalElement, otherT.FocalElement)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.Matches(BusinessArrangementElement, otherT.BusinessArrangementElement)) return false;
        if( !DeepComparable.Matches(PreAuthRefElement, otherT.PreAuthRefElement)) return false;
        if( !DeepComparable.Matches(ClaimResponse, otherT.ClaimResponse)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as InsuranceComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(FocalElement, otherT.FocalElement)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(Coverage, otherT.Coverage)) return false;
        if( !DeepComparable.IsExactly(BusinessArrangementElement, otherT.BusinessArrangementElement)) return false;
        if( !DeepComparable.IsExactly(PreAuthRefElement, otherT.PreAuthRefElement)) return false;
        if( !DeepComparable.IsExactly(ClaimResponse, otherT.ClaimResponse)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (FocalElement != null) yield return FocalElement;
          if (Identifier != null) yield return Identifier;
          if (Coverage != null) yield return Coverage;
          if (BusinessArrangementElement != null) yield return BusinessArrangementElement;
          foreach (var elem in PreAuthRefElement) { if (elem != null) yield return elem; }
          if (ClaimResponse != null) yield return ClaimResponse;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (FocalElement != null) yield return new ElementValue("focal", FocalElement);
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (Coverage != null) yield return new ElementValue("coverage", Coverage);
          if (BusinessArrangementElement != null) yield return new ElementValue("businessArrangement", BusinessArrangementElement);
          foreach (var elem in PreAuthRefElement) { if (elem != null) yield return new ElementValue("preAuthRef", elem); }
          if (ClaimResponse != null) yield return new ElementValue("claimResponse", ClaimResponse);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "focal":
            value = FocalElement;
            return FocalElement is not null;
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "coverage":
            value = Coverage;
            return Coverage is not null;
          case "businessArrangement":
            value = BusinessArrangementElement;
            return BusinessArrangementElement is not null;
          case "preAuthRef":
            value = PreAuthRefElement;
            return PreAuthRefElement?.Any() == true;
          case "claimResponse":
            value = ClaimResponse;
            return ClaimResponse is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (FocalElement is not null) yield return new KeyValuePair<string,object>("focal",FocalElement);
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (Coverage is not null) yield return new KeyValuePair<string,object>("coverage",Coverage);
        if (BusinessArrangementElement is not null) yield return new KeyValuePair<string,object>("businessArrangement",BusinessArrangementElement);
        if (PreAuthRefElement?.Any() == true) yield return new KeyValuePair<string,object>("preAuthRef",PreAuthRefElement);
        if (ClaimResponse is not null) yield return new KeyValuePair<string,object>("claimResponse",ClaimResponse);
      }

    }

    /// <summary>
    /// Details of the event
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#Accident", IsNestedType=true)]
    [BackboneType("Claim.accident")]
    public partial class AccidentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#Accident"; } }

      /// <summary>
      /// When the incident occurred
      /// </summary>
      [FhirElement("date", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Date DateElement
      {
        get { return _DateElement; }
        set { _DateElement = value; OnPropertyChanged("DateElement"); }
      }

      private Hl7.Fhir.Model.Date _DateElement;

      /// <summary>
      /// When the incident occurred
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Date
      {
        get { return DateElement != null ? DateElement.Value : null; }
        set
        {
          if (value == null)
            DateElement = null;
          else
            DateElement = new Hl7.Fhir.Model.Date(value);
          OnPropertyChanged("Date");
        }
      }

      /// <summary>
      /// The nature of the accident
      /// </summary>
      [FhirElement("type", Order=50)]
      [Binding("AccidentType")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Where the event occurred
      /// </summary>
      [FhirElement("location", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Location")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.DataType _Location;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AccidentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.Date)DateElement.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.DataType)Location.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AccidentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AccidentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AccidentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (DateElement != null) yield return DateElement;
          if (Type != null) yield return Type;
          if (Location != null) yield return Location;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (DateElement != null) yield return new ElementValue("date", DateElement);
          if (Type != null) yield return new ElementValue("type", Type);
          if (Location != null) yield return new ElementValue("location", Location);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "date":
            value = DateElement;
            return DateElement is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "location":
            value = Location;
            return Location is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
      }

    }

    /// <summary>
    /// Product or service provided
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#Item", IsNestedType=true)]
    [BackboneType("Claim.item")]
    public partial class ItemComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#Item"; } }

      /// <summary>
      /// Item instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Item instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Applicable careTeam members
      /// </summary>
      [FhirElement("careTeamSequence", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> CareTeamSequenceElement
      {
        get { if(_CareTeamSequenceElement==null) _CareTeamSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _CareTeamSequenceElement; }
        set { _CareTeamSequenceElement = value; OnPropertyChanged("CareTeamSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _CareTeamSequenceElement;

      /// <summary>
      /// Applicable careTeam members
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> CareTeamSequence
      {
        get { return CareTeamSequenceElement != null ? CareTeamSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            CareTeamSequenceElement = null;
          else
            CareTeamSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("CareTeamSequence");
        }
      }

      /// <summary>
      /// Applicable diagnoses
      /// </summary>
      [FhirElement("diagnosisSequence", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> DiagnosisSequenceElement
      {
        get { if(_DiagnosisSequenceElement==null) _DiagnosisSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _DiagnosisSequenceElement; }
        set { _DiagnosisSequenceElement = value; OnPropertyChanged("DiagnosisSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _DiagnosisSequenceElement;

      /// <summary>
      /// Applicable diagnoses
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> DiagnosisSequence
      {
        get { return DiagnosisSequenceElement != null ? DiagnosisSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            DiagnosisSequenceElement = null;
          else
            DiagnosisSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("DiagnosisSequence");
        }
      }

      /// <summary>
      /// Applicable procedures
      /// </summary>
      [FhirElement("procedureSequence", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> ProcedureSequenceElement
      {
        get { if(_ProcedureSequenceElement==null) _ProcedureSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _ProcedureSequenceElement; }
        set { _ProcedureSequenceElement = value; OnPropertyChanged("ProcedureSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _ProcedureSequenceElement;

      /// <summary>
      /// Applicable procedures
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> ProcedureSequence
      {
        get { return ProcedureSequenceElement != null ? ProcedureSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            ProcedureSequenceElement = null;
          else
            ProcedureSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("ProcedureSequence");
        }
      }

      /// <summary>
      /// Applicable exception and supporting information
      /// </summary>
      [FhirElement("informationSequence", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.PositiveInt> InformationSequenceElement
      {
        get { if(_InformationSequenceElement==null) _InformationSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(); return _InformationSequenceElement; }
        set { _InformationSequenceElement = value; OnPropertyChanged("InformationSequenceElement"); }
      }

      private List<Hl7.Fhir.Model.PositiveInt> _InformationSequenceElement;

      /// <summary>
      /// Applicable exception and supporting information
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> InformationSequence
      {
        get { return InformationSequenceElement != null ? InformationSequenceElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            InformationSequenceElement = null;
          else
            InformationSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(value.Select(elem=>new Hl7.Fhir.Model.PositiveInt(elem)));
          OnPropertyChanged("InformationSequence");
        }
      }

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=90)]
      [Binding("RevenueCenter")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=100)]
      [Binding("BenefitCategory")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=110)]
      [Binding("ServiceProduct")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// Product or service billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=120)]
      [Binding("Modifiers")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Program the product or service is provided under
      /// </summary>
      [FhirElement("programCode", Order=130)]
      [Binding("ProgramCode")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ProgramCode
      {
        get { if(_ProgramCode==null) _ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProgramCode; }
        set { _ProgramCode = value; OnPropertyChanged("ProgramCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ProgramCode;

      /// <summary>
      /// Date or dates of service or product delivery
      /// </summary>
      [FhirElement("serviced", Order=140, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.done[x]")]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.Period))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Serviced
      {
        get { return _Serviced; }
        set { _Serviced = value; OnPropertyChanged("Serviced"); }
      }

      private Hl7.Fhir.Model.DataType _Serviced;

      /// <summary>
      /// Place of service or where product was supplied
      /// </summary>
      [FhirElement("location", Order=150, Choice=ChoiceType.DatatypeChoice, FiveWs="FiveWs.where[x]")]
      [Binding("ServicePlace")]
      [CLSCompliant(false)]
      [References("Location")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.Address),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Location
      {
        get { return _Location; }
        set { _Location = value; OnPropertyChanged("Location"); }
      }

      private Hl7.Fhir.Model.DataType _Location;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=170)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=180)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=190)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=200)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      /// <summary>
      /// Anatomical location
      /// </summary>
      [FhirElement("bodySite", Order=210)]
      [Binding("OralSites")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept BodySite
      {
        get { return _BodySite; }
        set { _BodySite = value; OnPropertyChanged("BodySite"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _BodySite;

      /// <summary>
      /// Anatomical sub-location
      /// </summary>
      [FhirElement("subSite", Order=220)]
      [Binding("Surface")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> SubSite
      {
        get { if(_SubSite==null) _SubSite = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SubSite; }
        set { _SubSite = value; OnPropertyChanged("SubSite"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _SubSite;

      /// <summary>
      /// Encounters related to this billed item
      /// </summary>
      [FhirElement("encounter", Order=230)]
      [CLSCompliant(false)]
      [References("Encounter")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Encounter
      {
        get { if(_Encounter==null) _Encounter = new List<Hl7.Fhir.Model.ResourceReference>(); return _Encounter; }
        set { _Encounter = value; OnPropertyChanged("Encounter"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Encounter;

      /// <summary>
      /// Product or service provided
      /// </summary>
      [FhirElement("detail", Order=240)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Claim.DetailComponent> Detail
      {
        get { if(_Detail==null) _Detail = new List<Hl7.Fhir.Model.Claim.DetailComponent>(); return _Detail; }
        set { _Detail = value; OnPropertyChanged("Detail"); }
      }

      private List<Hl7.Fhir.Model.Claim.DetailComponent> _Detail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ItemComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(CareTeamSequenceElement != null) dest.CareTeamSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(CareTeamSequenceElement.DeepCopy());
        if(DiagnosisSequenceElement != null) dest.DiagnosisSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(DiagnosisSequenceElement.DeepCopy());
        if(ProcedureSequenceElement != null) dest.ProcedureSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(ProcedureSequenceElement.DeepCopy());
        if(InformationSequenceElement != null) dest.InformationSequenceElement = new List<Hl7.Fhir.Model.PositiveInt>(InformationSequenceElement.DeepCopy());
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(ProgramCode != null) dest.ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(ProgramCode.DeepCopy());
        if(Serviced != null) dest.Serviced = (Hl7.Fhir.Model.DataType)Serviced.DeepCopy();
        if(Location != null) dest.Location = (Hl7.Fhir.Model.DataType)Location.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        if(BodySite != null) dest.BodySite = (Hl7.Fhir.Model.CodeableConcept)BodySite.DeepCopy();
        if(SubSite != null) dest.SubSite = new List<Hl7.Fhir.Model.CodeableConcept>(SubSite.DeepCopy());
        if(Encounter != null) dest.Encounter = new List<Hl7.Fhir.Model.ResourceReference>(Encounter.DeepCopy());
        if(Detail != null) dest.Detail = new List<Hl7.Fhir.Model.Claim.DetailComponent>(Detail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ItemComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ItemComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(CareTeamSequenceElement, otherT.CareTeamSequenceElement)) return false;
        if( !DeepComparable.Matches(DiagnosisSequenceElement, otherT.DiagnosisSequenceElement)) return false;
        if( !DeepComparable.Matches(ProcedureSequenceElement, otherT.ProcedureSequenceElement)) return false;
        if( !DeepComparable.Matches(InformationSequenceElement, otherT.InformationSequenceElement)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.Matches(Serviced, otherT.Serviced)) return false;
        if( !DeepComparable.Matches(Location, otherT.Location)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;
        if( !DeepComparable.Matches(BodySite, otherT.BodySite)) return false;
        if( !DeepComparable.Matches(SubSite, otherT.SubSite)) return false;
        if( !DeepComparable.Matches(Encounter, otherT.Encounter)) return false;
        if( !DeepComparable.Matches(Detail, otherT.Detail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ItemComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(CareTeamSequenceElement, otherT.CareTeamSequenceElement)) return false;
        if( !DeepComparable.IsExactly(DiagnosisSequenceElement, otherT.DiagnosisSequenceElement)) return false;
        if( !DeepComparable.IsExactly(ProcedureSequenceElement, otherT.ProcedureSequenceElement)) return false;
        if( !DeepComparable.IsExactly(InformationSequenceElement, otherT.InformationSequenceElement)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.IsExactly(Serviced, otherT.Serviced)) return false;
        if( !DeepComparable.IsExactly(Location, otherT.Location)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;
        if( !DeepComparable.IsExactly(BodySite, otherT.BodySite)) return false;
        if( !DeepComparable.IsExactly(SubSite, otherT.SubSite)) return false;
        if( !DeepComparable.IsExactly(Encounter, otherT.Encounter)) return false;
        if( !DeepComparable.IsExactly(Detail, otherT.Detail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          foreach (var elem in CareTeamSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in DiagnosisSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in ProcedureSequenceElement) { if (elem != null) yield return elem; }
          foreach (var elem in InformationSequenceElement) { if (elem != null) yield return elem; }
          if (Revenue != null) yield return Revenue;
          if (Category != null) yield return Category;
          if (ProductOrService != null) yield return ProductOrService;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          foreach (var elem in ProgramCode) { if (elem != null) yield return elem; }
          if (Serviced != null) yield return Serviced;
          if (Location != null) yield return Location;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Net != null) yield return Net;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
          if (BodySite != null) yield return BodySite;
          foreach (var elem in SubSite) { if (elem != null) yield return elem; }
          foreach (var elem in Encounter) { if (elem != null) yield return elem; }
          foreach (var elem in Detail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          foreach (var elem in CareTeamSequenceElement) { if (elem != null) yield return new ElementValue("careTeamSequence", elem); }
          foreach (var elem in DiagnosisSequenceElement) { if (elem != null) yield return new ElementValue("diagnosisSequence", elem); }
          foreach (var elem in ProcedureSequenceElement) { if (elem != null) yield return new ElementValue("procedureSequence", elem); }
          foreach (var elem in InformationSequenceElement) { if (elem != null) yield return new ElementValue("informationSequence", elem); }
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (Category != null) yield return new ElementValue("category", Category);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          foreach (var elem in ProgramCode) { if (elem != null) yield return new ElementValue("programCode", elem); }
          if (Serviced != null) yield return new ElementValue("serviced", Serviced);
          if (Location != null) yield return new ElementValue("location", Location);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
          if (BodySite != null) yield return new ElementValue("bodySite", BodySite);
          foreach (var elem in SubSite) { if (elem != null) yield return new ElementValue("subSite", elem); }
          foreach (var elem in Encounter) { if (elem != null) yield return new ElementValue("encounter", elem); }
          foreach (var elem in Detail) { if (elem != null) yield return new ElementValue("detail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "careTeamSequence":
            value = CareTeamSequenceElement;
            return CareTeamSequenceElement?.Any() == true;
          case "diagnosisSequence":
            value = DiagnosisSequenceElement;
            return DiagnosisSequenceElement?.Any() == true;
          case "procedureSequence":
            value = ProcedureSequenceElement;
            return ProcedureSequenceElement?.Any() == true;
          case "informationSequence":
            value = InformationSequenceElement;
            return InformationSequenceElement?.Any() == true;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "programCode":
            value = ProgramCode;
            return ProgramCode?.Any() == true;
          case "serviced":
            value = Serviced;
            return Serviced is not null;
          case "location":
            value = Location;
            return Location is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          case "bodySite":
            value = BodySite;
            return BodySite is not null;
          case "subSite":
            value = SubSite;
            return SubSite?.Any() == true;
          case "encounter":
            value = Encounter;
            return Encounter?.Any() == true;
          case "detail":
            value = Detail;
            return Detail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (CareTeamSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("careTeamSequence",CareTeamSequenceElement);
        if (DiagnosisSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("diagnosisSequence",DiagnosisSequenceElement);
        if (ProcedureSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("procedureSequence",ProcedureSequenceElement);
        if (InformationSequenceElement?.Any() == true) yield return new KeyValuePair<string,object>("informationSequence",InformationSequenceElement);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (ProgramCode?.Any() == true) yield return new KeyValuePair<string,object>("programCode",ProgramCode);
        if (Serviced is not null) yield return new KeyValuePair<string,object>("serviced",Serviced);
        if (Location is not null) yield return new KeyValuePair<string,object>("location",Location);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
        if (BodySite is not null) yield return new KeyValuePair<string,object>("bodySite",BodySite);
        if (SubSite?.Any() == true) yield return new KeyValuePair<string,object>("subSite",SubSite);
        if (Encounter?.Any() == true) yield return new KeyValuePair<string,object>("encounter",Encounter);
        if (Detail?.Any() == true) yield return new KeyValuePair<string,object>("detail",Detail);
      }

    }

    /// <summary>
    /// Product or service provided
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#Detail", IsNestedType=true)]
    [BackboneType("Claim.item.detail")]
    public partial class DetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#Detail"; } }

      /// <summary>
      /// Item instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Item instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=50)]
      [Binding("RevenueCenter")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=60)]
      [Binding("BenefitCategory")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=70)]
      [Binding("ServiceProduct")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// Service/Product billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=80)]
      [Binding("Modifiers")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Program the product or service is provided under
      /// </summary>
      [FhirElement("programCode", Order=90)]
      [Binding("ProgramCode")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ProgramCode
      {
        get { if(_ProgramCode==null) _ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProgramCode; }
        set { _ProgramCode = value; OnPropertyChanged("ProgramCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ProgramCode;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=140)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      /// <summary>
      /// Product or service provided
      /// </summary>
      [FhirElement("subDetail", Order=150)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Claim.SubDetailComponent> SubDetail
      {
        get { if(_SubDetail==null) _SubDetail = new List<Hl7.Fhir.Model.Claim.SubDetailComponent>(); return _SubDetail; }
        set { _SubDetail = value; OnPropertyChanged("SubDetail"); }
      }

      private List<Hl7.Fhir.Model.Claim.SubDetailComponent> _SubDetail;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(ProgramCode != null) dest.ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(ProgramCode.DeepCopy());
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        if(SubDetail != null) dest.SubDetail = new List<Hl7.Fhir.Model.Claim.SubDetailComponent>(SubDetail.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;
        if( !DeepComparable.Matches(SubDetail, otherT.SubDetail)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;
        if( !DeepComparable.IsExactly(SubDetail, otherT.SubDetail)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Revenue != null) yield return Revenue;
          if (Category != null) yield return Category;
          if (ProductOrService != null) yield return ProductOrService;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          foreach (var elem in ProgramCode) { if (elem != null) yield return elem; }
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Net != null) yield return Net;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
          foreach (var elem in SubDetail) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (Category != null) yield return new ElementValue("category", Category);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          foreach (var elem in ProgramCode) { if (elem != null) yield return new ElementValue("programCode", elem); }
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
          foreach (var elem in SubDetail) { if (elem != null) yield return new ElementValue("subDetail", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "programCode":
            value = ProgramCode;
            return ProgramCode?.Any() == true;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          case "subDetail":
            value = SubDetail;
            return SubDetail?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (ProgramCode?.Any() == true) yield return new KeyValuePair<string,object>("programCode",ProgramCode);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
        if (SubDetail?.Any() == true) yield return new KeyValuePair<string,object>("subDetail",SubDetail);
      }

    }

    /// <summary>
    /// Product or service provided
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Claim#SubDetail", IsNestedType=true)]
    [BackboneType("Claim.item.detail.subDetail")]
    public partial class SubDetailComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Claim#SubDetail"; } }

      /// <summary>
      /// Item instance identifier
      /// </summary>
      [FhirElement("sequence", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.PositiveInt SequenceElement
      {
        get { return _SequenceElement; }
        set { _SequenceElement = value; OnPropertyChanged("SequenceElement"); }
      }

      private Hl7.Fhir.Model.PositiveInt _SequenceElement;

      /// <summary>
      /// Item instance identifier
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Sequence
      {
        get { return SequenceElement != null ? SequenceElement.Value : null; }
        set
        {
          if (value == null)
            SequenceElement = null;
          else
            SequenceElement = new Hl7.Fhir.Model.PositiveInt(value);
          OnPropertyChanged("Sequence");
        }
      }

      /// <summary>
      /// Revenue or cost center code
      /// </summary>
      [FhirElement("revenue", Order=50)]
      [Binding("RevenueCenter")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Revenue
      {
        get { return _Revenue; }
        set { _Revenue = value; OnPropertyChanged("Revenue"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Revenue;

      /// <summary>
      /// Benefit classification
      /// </summary>
      [FhirElement("category", Order=60)]
      [Binding("BenefitCategory")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Category
      {
        get { return _Category; }
        set { _Category = value; OnPropertyChanged("Category"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Category;

      /// <summary>
      /// Billing, service, product, or drug code
      /// </summary>
      [FhirElement("productOrService", Order=70)]
      [Binding("ServiceProduct")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept ProductOrService
      {
        get { return _ProductOrService; }
        set { _ProductOrService = value; OnPropertyChanged("ProductOrService"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _ProductOrService;

      /// <summary>
      /// Service/Product billing modifiers
      /// </summary>
      [FhirElement("modifier", Order=80)]
      [Binding("Modifiers")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Modifier
      {
        get { if(_Modifier==null) _Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Modifier; }
        set { _Modifier = value; OnPropertyChanged("Modifier"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Modifier;

      /// <summary>
      /// Program the product or service is provided under
      /// </summary>
      [FhirElement("programCode", Order=90)]
      [Binding("ProgramCode")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ProgramCode
      {
        get { if(_ProgramCode==null) _ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ProgramCode; }
        set { _ProgramCode = value; OnPropertyChanged("ProgramCode"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ProgramCode;

      /// <summary>
      /// Count of products or services
      /// </summary>
      [FhirElement("quantity", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Fee, charge or cost per item
      /// </summary>
      [FhirElement("unitPrice", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      [FhirElement("factor", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Price scaling factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Total item cost
      /// </summary>
      [FhirElement("net", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      /// <summary>
      /// Unique device identifier
      /// </summary>
      [FhirElement("udi", Order=140)]
      [CLSCompliant(false)]
      [References("Device")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Udi
      {
        get { if(_Udi==null) _Udi = new List<Hl7.Fhir.Model.ResourceReference>(); return _Udi; }
        set { _Udi = value; OnPropertyChanged("Udi"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Udi;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SubDetailComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(SequenceElement != null) dest.SequenceElement = (Hl7.Fhir.Model.PositiveInt)SequenceElement.DeepCopy();
        if(Revenue != null) dest.Revenue = (Hl7.Fhir.Model.CodeableConcept)Revenue.DeepCopy();
        if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
        if(ProductOrService != null) dest.ProductOrService = (Hl7.Fhir.Model.CodeableConcept)ProductOrService.DeepCopy();
        if(Modifier != null) dest.Modifier = new List<Hl7.Fhir.Model.CodeableConcept>(Modifier.DeepCopy());
        if(ProgramCode != null) dest.ProgramCode = new List<Hl7.Fhir.Model.CodeableConcept>(ProgramCode.DeepCopy());
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        if(Udi != null) dest.Udi = new List<Hl7.Fhir.Model.ResourceReference>(Udi.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SubDetailComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SubDetailComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.Matches(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.Matches(Category, otherT.Category)) return false;
        if( !DeepComparable.Matches(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.Matches(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.Matches(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;
        if( !DeepComparable.Matches(Udi, otherT.Udi)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SubDetailComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(SequenceElement, otherT.SequenceElement)) return false;
        if( !DeepComparable.IsExactly(Revenue, otherT.Revenue)) return false;
        if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
        if( !DeepComparable.IsExactly(ProductOrService, otherT.ProductOrService)) return false;
        if( !DeepComparable.IsExactly(Modifier, otherT.Modifier)) return false;
        if( !DeepComparable.IsExactly(ProgramCode, otherT.ProgramCode)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;
        if( !DeepComparable.IsExactly(Udi, otherT.Udi)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (SequenceElement != null) yield return SequenceElement;
          if (Revenue != null) yield return Revenue;
          if (Category != null) yield return Category;
          if (ProductOrService != null) yield return ProductOrService;
          foreach (var elem in Modifier) { if (elem != null) yield return elem; }
          foreach (var elem in ProgramCode) { if (elem != null) yield return elem; }
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (Net != null) yield return Net;
          foreach (var elem in Udi) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (SequenceElement != null) yield return new ElementValue("sequence", SequenceElement);
          if (Revenue != null) yield return new ElementValue("revenue", Revenue);
          if (Category != null) yield return new ElementValue("category", Category);
          if (ProductOrService != null) yield return new ElementValue("productOrService", ProductOrService);
          foreach (var elem in Modifier) { if (elem != null) yield return new ElementValue("modifier", elem); }
          foreach (var elem in ProgramCode) { if (elem != null) yield return new ElementValue("programCode", elem); }
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (Net != null) yield return new ElementValue("net", Net);
          foreach (var elem in Udi) { if (elem != null) yield return new ElementValue("udi", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "sequence":
            value = SequenceElement;
            return SequenceElement is not null;
          case "revenue":
            value = Revenue;
            return Revenue is not null;
          case "category":
            value = Category;
            return Category is not null;
          case "productOrService":
            value = ProductOrService;
            return ProductOrService is not null;
          case "modifier":
            value = Modifier;
            return Modifier?.Any() == true;
          case "programCode":
            value = ProgramCode;
            return ProgramCode?.Any() == true;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "net":
            value = Net;
            return Net is not null;
          case "udi":
            value = Udi;
            return Udi?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (SequenceElement is not null) yield return new KeyValuePair<string,object>("sequence",SequenceElement);
        if (Revenue is not null) yield return new KeyValuePair<string,object>("revenue",Revenue);
        if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
        if (ProductOrService is not null) yield return new KeyValuePair<string,object>("productOrService",ProductOrService);
        if (Modifier?.Any() == true) yield return new KeyValuePair<string,object>("modifier",Modifier);
        if (ProgramCode?.Any() == true) yield return new KeyValuePair<string,object>("programCode",ProgramCode);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
        if (Udi?.Any() == true) yield return new KeyValuePair<string,object>("udi",Udi);
      }

    }

    /// <summary>
    /// Business Identifier for claim
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("ClaimStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.FinancialResourceStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.FinancialResourceStatusCodes> _StatusElement;

    /// <summary>
    /// active | cancelled | draft | entered-in-error
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.FinancialResourceStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Category or discipline
    /// </summary>
    [FhirElement("type", InSummary=true, Order=110, FiveWs="FiveWs.class")]
    [Binding("ClaimType")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// More granular claim type
    /// </summary>
    [FhirElement("subType", Order=120, FiveWs="FiveWs.class")]
    [Binding("ClaimSubType")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept SubType
    {
      get { return _SubType; }
      set { _SubType = value; OnPropertyChanged("SubType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _SubType;

    /// <summary>
    /// claim | preauthorization | predetermination
    /// </summary>
    [FhirElement("use", InSummary=true, Order=130, FiveWs="FiveWs.class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("Use")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ClaimUseCode> UseElement
    {
      get { return _UseElement; }
      set { _UseElement = value; OnPropertyChanged("UseElement"); }
    }

    private Code<Hl7.Fhir.Model.ClaimUseCode> _UseElement;

    /// <summary>
    /// claim | preauthorization | predetermination
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ClaimUseCode? Use
    {
      get { return UseElement != null ? UseElement.Value : null; }
      set
      {
        if (value == null)
          UseElement = null;
        else
          UseElement = new Code<Hl7.Fhir.Model.ClaimUseCode>(value);
        OnPropertyChanged("Use");
      }
    }

    /// <summary>
    /// The recipient of the products and services
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=140, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// Relevant time frame for the claim
    /// </summary>
    [FhirElement("billablePeriod", InSummary=true, Order=150, FiveWs="FiveWs.done[x]")]
    [DataMember]
    public Hl7.Fhir.Model.Period BillablePeriod
    {
      get { return _BillablePeriod; }
      set { _BillablePeriod = value; OnPropertyChanged("BillablePeriod"); }
    }

    private Hl7.Fhir.Model.Period _BillablePeriod;

    /// <summary>
    /// Resource creation date
    /// </summary>
    [FhirElement("created", InSummary=true, Order=160, FiveWs="FiveWs.recorded")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime CreatedElement
    {
      get { return _CreatedElement; }
      set { _CreatedElement = value; OnPropertyChanged("CreatedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _CreatedElement;

    /// <summary>
    /// Resource creation date
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Created
    {
      get { return CreatedElement != null ? CreatedElement.Value : null; }
      set
      {
        if (value == null)
          CreatedElement = null;
        else
          CreatedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Created");
      }
    }

    /// <summary>
    /// Author of the claim
    /// </summary>
    [FhirElement("enterer", Order=170, FiveWs="FiveWs.author")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Enterer
    {
      get { return _Enterer; }
      set { _Enterer = value; OnPropertyChanged("Enterer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Enterer;

    /// <summary>
    /// Target
    /// </summary>
    [FhirElement("insurer", InSummary=true, Order=180)]
    [CLSCompliant(false)]
    [References("Organization")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Insurer
    {
      get { return _Insurer; }
      set { _Insurer = value; OnPropertyChanged("Insurer"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Insurer;

    /// <summary>
    /// Party responsible for the claim
    /// </summary>
    [FhirElement("provider", InSummary=true, Order=190, FiveWs="FiveWs.source")]
    [CLSCompliant(false)]
    [References("Practitioner","PractitionerRole","Organization")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Provider
    {
      get { return _Provider; }
      set { _Provider = value; OnPropertyChanged("Provider"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Provider;

    /// <summary>
    /// Desired processing ugency
    /// </summary>
    [FhirElement("priority", InSummary=true, Order=200)]
    [Binding("ProcessPriority")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Priority
    {
      get { return _Priority; }
      set { _Priority = value; OnPropertyChanged("Priority"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Priority;

    /// <summary>
    /// For whom to reserve funds
    /// </summary>
    [FhirElement("fundsReserve", Order=210)]
    [Binding("FundsReserve")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept FundsReserve
    {
      get { return _FundsReserve; }
      set { _FundsReserve = value; OnPropertyChanged("FundsReserve"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _FundsReserve;

    /// <summary>
    /// Prior or corollary claims
    /// </summary>
    [FhirElement("related", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Claim.RelatedClaimComponent> Related
    {
      get { if(_Related==null) _Related = new List<Hl7.Fhir.Model.Claim.RelatedClaimComponent>(); return _Related; }
      set { _Related = value; OnPropertyChanged("Related"); }
    }

    private List<Hl7.Fhir.Model.Claim.RelatedClaimComponent> _Related;

    /// <summary>
    /// Prescription authorizing services and products
    /// </summary>
    [FhirElement("prescription", Order=230)]
    [CLSCompliant(false)]
    [References("DeviceRequest","MedicationRequest","VisionPrescription")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Prescription
    {
      get { return _Prescription; }
      set { _Prescription = value; OnPropertyChanged("Prescription"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Prescription;

    /// <summary>
    /// Original prescription if superseded by fulfiller
    /// </summary>
    [FhirElement("originalPrescription", Order=240)]
    [CLSCompliant(false)]
    [References("DeviceRequest","MedicationRequest","VisionPrescription")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference OriginalPrescription
    {
      get { return _OriginalPrescription; }
      set { _OriginalPrescription = value; OnPropertyChanged("OriginalPrescription"); }
    }

    private Hl7.Fhir.Model.ResourceReference _OriginalPrescription;

    /// <summary>
    /// Recipient of benefits payable
    /// </summary>
    [FhirElement("payee", Order=250)]
    [DataMember]
    public Hl7.Fhir.Model.Claim.PayeeComponent Payee
    {
      get { return _Payee; }
      set { _Payee = value; OnPropertyChanged("Payee"); }
    }

    private Hl7.Fhir.Model.Claim.PayeeComponent _Payee;

    /// <summary>
    /// Treatment referral
    /// </summary>
    [FhirElement("referral", Order=260, FiveWs="FiveWs.cause")]
    [CLSCompliant(false)]
    [References("ServiceRequest")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Referral
    {
      get { return _Referral; }
      set { _Referral = value; OnPropertyChanged("Referral"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Referral;

    /// <summary>
    /// Servicing facility
    /// </summary>
    [FhirElement("facility", Order=270, FiveWs="FiveWs.where[x]")]
    [CLSCompliant(false)]
    [References("Location")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Facility
    {
      get { return _Facility; }
      set { _Facility = value; OnPropertyChanged("Facility"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Facility;

    /// <summary>
    /// Members of the care team
    /// </summary>
    [FhirElement("careTeam", Order=280)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Claim.CareTeamComponent> CareTeam
    {
      get { if(_CareTeam==null) _CareTeam = new List<Hl7.Fhir.Model.Claim.CareTeamComponent>(); return _CareTeam; }
      set { _CareTeam = value; OnPropertyChanged("CareTeam"); }
    }

    private List<Hl7.Fhir.Model.Claim.CareTeamComponent> _CareTeam;

    /// <summary>
    /// Supporting information
    /// </summary>
    [FhirElement("supportingInfo", Order=290)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Claim.SupportingInformationComponent> SupportingInfo
    {
      get { if(_SupportingInfo==null) _SupportingInfo = new List<Hl7.Fhir.Model.Claim.SupportingInformationComponent>(); return _SupportingInfo; }
      set { _SupportingInfo = value; OnPropertyChanged("SupportingInfo"); }
    }

    private List<Hl7.Fhir.Model.Claim.SupportingInformationComponent> _SupportingInfo;

    /// <summary>
    /// Pertinent diagnosis information
    /// </summary>
    [FhirElement("diagnosis", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Claim.DiagnosisComponent> Diagnosis
    {
      get { if(_Diagnosis==null) _Diagnosis = new List<Hl7.Fhir.Model.Claim.DiagnosisComponent>(); return _Diagnosis; }
      set { _Diagnosis = value; OnPropertyChanged("Diagnosis"); }
    }

    private List<Hl7.Fhir.Model.Claim.DiagnosisComponent> _Diagnosis;

    /// <summary>
    /// Clinical procedures performed
    /// </summary>
    [FhirElement("procedure", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Claim.ProcedureComponent> Procedure
    {
      get { if(_Procedure==null) _Procedure = new List<Hl7.Fhir.Model.Claim.ProcedureComponent>(); return _Procedure; }
      set { _Procedure = value; OnPropertyChanged("Procedure"); }
    }

    private List<Hl7.Fhir.Model.Claim.ProcedureComponent> _Procedure;

    /// <summary>
    /// Patient insurance information
    /// </summary>
    [FhirElement("insurance", InSummary=true, Order=320)]
    [Cardinality(Min=1,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Claim.InsuranceComponent> Insurance
    {
      get { if(_Insurance==null) _Insurance = new List<Hl7.Fhir.Model.Claim.InsuranceComponent>(); return _Insurance; }
      set { _Insurance = value; OnPropertyChanged("Insurance"); }
    }

    private List<Hl7.Fhir.Model.Claim.InsuranceComponent> _Insurance;

    /// <summary>
    /// Details of the event
    /// </summary>
    [FhirElement("accident", Order=330)]
    [DataMember]
    public Hl7.Fhir.Model.Claim.AccidentComponent Accident
    {
      get { return _Accident; }
      set { _Accident = value; OnPropertyChanged("Accident"); }
    }

    private Hl7.Fhir.Model.Claim.AccidentComponent _Accident;

    /// <summary>
    /// Product or service provided
    /// </summary>
    [FhirElement("item", Order=340)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Claim.ItemComponent> Item
    {
      get { if(_Item==null) _Item = new List<Hl7.Fhir.Model.Claim.ItemComponent>(); return _Item; }
      set { _Item = value; OnPropertyChanged("Item"); }
    }

    private List<Hl7.Fhir.Model.Claim.ItemComponent> _Item;

    /// <summary>
    /// Total claim cost
    /// </summary>
    [FhirElement("total", Order=350)]
    [DataMember]
    public Hl7.Fhir.Model.Money Total
    {
      get { return _Total; }
      set { _Total = value; OnPropertyChanged("Total"); }
    }

    private Hl7.Fhir.Model.Money _Total;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Claim;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.FinancialResourceStatusCodes>)StatusElement.DeepCopy();
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(SubType != null) dest.SubType = (Hl7.Fhir.Model.CodeableConcept)SubType.DeepCopy();
      if(UseElement != null) dest.UseElement = (Code<Hl7.Fhir.Model.ClaimUseCode>)UseElement.DeepCopy();
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(BillablePeriod != null) dest.BillablePeriod = (Hl7.Fhir.Model.Period)BillablePeriod.DeepCopy();
      if(CreatedElement != null) dest.CreatedElement = (Hl7.Fhir.Model.FhirDateTime)CreatedElement.DeepCopy();
      if(Enterer != null) dest.Enterer = (Hl7.Fhir.Model.ResourceReference)Enterer.DeepCopy();
      if(Insurer != null) dest.Insurer = (Hl7.Fhir.Model.ResourceReference)Insurer.DeepCopy();
      if(Provider != null) dest.Provider = (Hl7.Fhir.Model.ResourceReference)Provider.DeepCopy();
      if(Priority != null) dest.Priority = (Hl7.Fhir.Model.CodeableConcept)Priority.DeepCopy();
      if(FundsReserve != null) dest.FundsReserve = (Hl7.Fhir.Model.CodeableConcept)FundsReserve.DeepCopy();
      if(Related != null) dest.Related = new List<Hl7.Fhir.Model.Claim.RelatedClaimComponent>(Related.DeepCopy());
      if(Prescription != null) dest.Prescription = (Hl7.Fhir.Model.ResourceReference)Prescription.DeepCopy();
      if(OriginalPrescription != null) dest.OriginalPrescription = (Hl7.Fhir.Model.ResourceReference)OriginalPrescription.DeepCopy();
      if(Payee != null) dest.Payee = (Hl7.Fhir.Model.Claim.PayeeComponent)Payee.DeepCopy();
      if(Referral != null) dest.Referral = (Hl7.Fhir.Model.ResourceReference)Referral.DeepCopy();
      if(Facility != null) dest.Facility = (Hl7.Fhir.Model.ResourceReference)Facility.DeepCopy();
      if(CareTeam != null) dest.CareTeam = new List<Hl7.Fhir.Model.Claim.CareTeamComponent>(CareTeam.DeepCopy());
      if(SupportingInfo != null) dest.SupportingInfo = new List<Hl7.Fhir.Model.Claim.SupportingInformationComponent>(SupportingInfo.DeepCopy());
      if(Diagnosis != null) dest.Diagnosis = new List<Hl7.Fhir.Model.Claim.DiagnosisComponent>(Diagnosis.DeepCopy());
      if(Procedure != null) dest.Procedure = new List<Hl7.Fhir.Model.Claim.ProcedureComponent>(Procedure.DeepCopy());
      if(Insurance != null) dest.Insurance = new List<Hl7.Fhir.Model.Claim.InsuranceComponent>(Insurance.DeepCopy());
      if(Accident != null) dest.Accident = (Hl7.Fhir.Model.Claim.AccidentComponent)Accident.DeepCopy();
      if(Item != null) dest.Item = new List<Hl7.Fhir.Model.Claim.ItemComponent>(Item.DeepCopy());
      if(Total != null) dest.Total = (Hl7.Fhir.Model.Money)Total.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Claim());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Claim;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(SubType, otherT.SubType)) return false;
      if( !DeepComparable.Matches(UseElement, otherT.UseElement)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(BillablePeriod, otherT.BillablePeriod)) return false;
      if( !DeepComparable.Matches(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.Matches(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.Matches(Insurer, otherT.Insurer)) return false;
      if( !DeepComparable.Matches(Provider, otherT.Provider)) return false;
      if( !DeepComparable.Matches(Priority, otherT.Priority)) return false;
      if( !DeepComparable.Matches(FundsReserve, otherT.FundsReserve)) return false;
      if( !DeepComparable.Matches(Related, otherT.Related)) return false;
      if( !DeepComparable.Matches(Prescription, otherT.Prescription)) return false;
      if( !DeepComparable.Matches(OriginalPrescription, otherT.OriginalPrescription)) return false;
      if( !DeepComparable.Matches(Payee, otherT.Payee)) return false;
      if( !DeepComparable.Matches(Referral, otherT.Referral)) return false;
      if( !DeepComparable.Matches(Facility, otherT.Facility)) return false;
      if( !DeepComparable.Matches(CareTeam, otherT.CareTeam)) return false;
      if( !DeepComparable.Matches(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.Matches(Diagnosis, otherT.Diagnosis)) return false;
      if( !DeepComparable.Matches(Procedure, otherT.Procedure)) return false;
      if( !DeepComparable.Matches(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.Matches(Accident, otherT.Accident)) return false;
      if( !DeepComparable.Matches(Item, otherT.Item)) return false;
      if( !DeepComparable.Matches(Total, otherT.Total)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Claim;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(SubType, otherT.SubType)) return false;
      if( !DeepComparable.IsExactly(UseElement, otherT.UseElement)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(BillablePeriod, otherT.BillablePeriod)) return false;
      if( !DeepComparable.IsExactly(CreatedElement, otherT.CreatedElement)) return false;
      if( !DeepComparable.IsExactly(Enterer, otherT.Enterer)) return false;
      if( !DeepComparable.IsExactly(Insurer, otherT.Insurer)) return false;
      if( !DeepComparable.IsExactly(Provider, otherT.Provider)) return false;
      if( !DeepComparable.IsExactly(Priority, otherT.Priority)) return false;
      if( !DeepComparable.IsExactly(FundsReserve, otherT.FundsReserve)) return false;
      if( !DeepComparable.IsExactly(Related, otherT.Related)) return false;
      if( !DeepComparable.IsExactly(Prescription, otherT.Prescription)) return false;
      if( !DeepComparable.IsExactly(OriginalPrescription, otherT.OriginalPrescription)) return false;
      if( !DeepComparable.IsExactly(Payee, otherT.Payee)) return false;
      if( !DeepComparable.IsExactly(Referral, otherT.Referral)) return false;
      if( !DeepComparable.IsExactly(Facility, otherT.Facility)) return false;
      if( !DeepComparable.IsExactly(CareTeam, otherT.CareTeam)) return false;
      if( !DeepComparable.IsExactly(SupportingInfo, otherT.SupportingInfo)) return false;
      if( !DeepComparable.IsExactly(Diagnosis, otherT.Diagnosis)) return false;
      if( !DeepComparable.IsExactly(Procedure, otherT.Procedure)) return false;
      if( !DeepComparable.IsExactly(Insurance, otherT.Insurance)) return false;
      if( !DeepComparable.IsExactly(Accident, otherT.Accident)) return false;
      if( !DeepComparable.IsExactly(Item, otherT.Item)) return false;
      if( !DeepComparable.IsExactly(Total, otherT.Total)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (Type != null) yield return Type;
        if (SubType != null) yield return SubType;
        if (UseElement != null) yield return UseElement;
        if (Patient != null) yield return Patient;
        if (BillablePeriod != null) yield return BillablePeriod;
        if (CreatedElement != null) yield return CreatedElement;
        if (Enterer != null) yield return Enterer;
        if (Insurer != null) yield return Insurer;
        if (Provider != null) yield return Provider;
        if (Priority != null) yield return Priority;
        if (FundsReserve != null) yield return FundsReserve;
        foreach (var elem in Related) { if (elem != null) yield return elem; }
        if (Prescription != null) yield return Prescription;
        if (OriginalPrescription != null) yield return OriginalPrescription;
        if (Payee != null) yield return Payee;
        if (Referral != null) yield return Referral;
        if (Facility != null) yield return Facility;
        foreach (var elem in CareTeam) { if (elem != null) yield return elem; }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return elem; }
        foreach (var elem in Diagnosis) { if (elem != null) yield return elem; }
        foreach (var elem in Procedure) { if (elem != null) yield return elem; }
        foreach (var elem in Insurance) { if (elem != null) yield return elem; }
        if (Accident != null) yield return Accident;
        foreach (var elem in Item) { if (elem != null) yield return elem; }
        if (Total != null) yield return Total;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Type != null) yield return new ElementValue("type", Type);
        if (SubType != null) yield return new ElementValue("subType", SubType);
        if (UseElement != null) yield return new ElementValue("use", UseElement);
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (BillablePeriod != null) yield return new ElementValue("billablePeriod", BillablePeriod);
        if (CreatedElement != null) yield return new ElementValue("created", CreatedElement);
        if (Enterer != null) yield return new ElementValue("enterer", Enterer);
        if (Insurer != null) yield return new ElementValue("insurer", Insurer);
        if (Provider != null) yield return new ElementValue("provider", Provider);
        if (Priority != null) yield return new ElementValue("priority", Priority);
        if (FundsReserve != null) yield return new ElementValue("fundsReserve", FundsReserve);
        foreach (var elem in Related) { if (elem != null) yield return new ElementValue("related", elem); }
        if (Prescription != null) yield return new ElementValue("prescription", Prescription);
        if (OriginalPrescription != null) yield return new ElementValue("originalPrescription", OriginalPrescription);
        if (Payee != null) yield return new ElementValue("payee", Payee);
        if (Referral != null) yield return new ElementValue("referral", Referral);
        if (Facility != null) yield return new ElementValue("facility", Facility);
        foreach (var elem in CareTeam) { if (elem != null) yield return new ElementValue("careTeam", elem); }
        foreach (var elem in SupportingInfo) { if (elem != null) yield return new ElementValue("supportingInfo", elem); }
        foreach (var elem in Diagnosis) { if (elem != null) yield return new ElementValue("diagnosis", elem); }
        foreach (var elem in Procedure) { if (elem != null) yield return new ElementValue("procedure", elem); }
        foreach (var elem in Insurance) { if (elem != null) yield return new ElementValue("insurance", elem); }
        if (Accident != null) yield return new ElementValue("accident", Accident);
        foreach (var elem in Item) { if (elem != null) yield return new ElementValue("item", elem); }
        if (Total != null) yield return new ElementValue("total", Total);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "type":
          value = Type;
          return Type is not null;
        case "subType":
          value = SubType;
          return SubType is not null;
        case "use":
          value = UseElement;
          return UseElement is not null;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "billablePeriod":
          value = BillablePeriod;
          return BillablePeriod is not null;
        case "created":
          value = CreatedElement;
          return CreatedElement is not null;
        case "enterer":
          value = Enterer;
          return Enterer is not null;
        case "insurer":
          value = Insurer;
          return Insurer is not null;
        case "provider":
          value = Provider;
          return Provider is not null;
        case "priority":
          value = Priority;
          return Priority is not null;
        case "fundsReserve":
          value = FundsReserve;
          return FundsReserve is not null;
        case "related":
          value = Related;
          return Related?.Any() == true;
        case "prescription":
          value = Prescription;
          return Prescription is not null;
        case "originalPrescription":
          value = OriginalPrescription;
          return OriginalPrescription is not null;
        case "payee":
          value = Payee;
          return Payee is not null;
        case "referral":
          value = Referral;
          return Referral is not null;
        case "facility":
          value = Facility;
          return Facility is not null;
        case "careTeam":
          value = CareTeam;
          return CareTeam?.Any() == true;
        case "supportingInfo":
          value = SupportingInfo;
          return SupportingInfo?.Any() == true;
        case "diagnosis":
          value = Diagnosis;
          return Diagnosis?.Any() == true;
        case "procedure":
          value = Procedure;
          return Procedure?.Any() == true;
        case "insurance":
          value = Insurance;
          return Insurance?.Any() == true;
        case "accident":
          value = Accident;
          return Accident is not null;
        case "item":
          value = Item;
          return Item?.Any() == true;
        case "total":
          value = Total;
          return Total is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (SubType is not null) yield return new KeyValuePair<string,object>("subType",SubType);
      if (UseElement is not null) yield return new KeyValuePair<string,object>("use",UseElement);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (BillablePeriod is not null) yield return new KeyValuePair<string,object>("billablePeriod",BillablePeriod);
      if (CreatedElement is not null) yield return new KeyValuePair<string,object>("created",CreatedElement);
      if (Enterer is not null) yield return new KeyValuePair<string,object>("enterer",Enterer);
      if (Insurer is not null) yield return new KeyValuePair<string,object>("insurer",Insurer);
      if (Provider is not null) yield return new KeyValuePair<string,object>("provider",Provider);
      if (Priority is not null) yield return new KeyValuePair<string,object>("priority",Priority);
      if (FundsReserve is not null) yield return new KeyValuePair<string,object>("fundsReserve",FundsReserve);
      if (Related?.Any() == true) yield return new KeyValuePair<string,object>("related",Related);
      if (Prescription is not null) yield return new KeyValuePair<string,object>("prescription",Prescription);
      if (OriginalPrescription is not null) yield return new KeyValuePair<string,object>("originalPrescription",OriginalPrescription);
      if (Payee is not null) yield return new KeyValuePair<string,object>("payee",Payee);
      if (Referral is not null) yield return new KeyValuePair<string,object>("referral",Referral);
      if (Facility is not null) yield return new KeyValuePair<string,object>("facility",Facility);
      if (CareTeam?.Any() == true) yield return new KeyValuePair<string,object>("careTeam",CareTeam);
      if (SupportingInfo?.Any() == true) yield return new KeyValuePair<string,object>("supportingInfo",SupportingInfo);
      if (Diagnosis?.Any() == true) yield return new KeyValuePair<string,object>("diagnosis",Diagnosis);
      if (Procedure?.Any() == true) yield return new KeyValuePair<string,object>("procedure",Procedure);
      if (Insurance?.Any() == true) yield return new KeyValuePair<string,object>("insurance",Insurance);
      if (Accident is not null) yield return new KeyValuePair<string,object>("accident",Accident);
      if (Item?.Any() == true) yield return new KeyValuePair<string,object>("item",Item);
      if (Total is not null) yield return new KeyValuePair<string,object>("total",Total);
    }

  }

}

// end of file

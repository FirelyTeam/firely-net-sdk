// <auto-generated/>
// Contents of: hl7.fhir.r4b.core version: 4.3.0

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Information about patient's relatives, relevant for patient
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("FamilyMemberHistory","http://hl7.org/fhir/StructureDefinition/FamilyMemberHistory", IsResource=true)]
  public partial class FamilyMemberHistory : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "FamilyMemberHistory"; } }

    /// <summary>
    /// A code that identifies the status of the family history record.
    /// (url: http://hl7.org/fhir/ValueSet/history-status)
    /// (system: http://hl7.org/fhir/history-status)
    /// </summary>
    [FhirEnumeration("FamilyHistoryStatus", "http://hl7.org/fhir/ValueSet/history-status")]
    public enum FamilyHistoryStatus
    {
      /// <summary>
      /// Some health information is known and captured, but not complete - see notes for details.
      /// (system: http://hl7.org/fhir/history-status)
      /// </summary>
      [EnumLiteral("partial", "http://hl7.org/fhir/history-status"), Description("Partial")]
      Partial,
      /// <summary>
      /// All available related health information is captured as of the date (and possibly time) when the family member history was taken.
      /// (system: http://hl7.org/fhir/history-status)
      /// </summary>
      [EnumLiteral("completed", "http://hl7.org/fhir/history-status"), Description("Completed")]
      Completed,
      /// <summary>
      /// This instance should not have been part of this patient's medical record.
      /// (system: http://hl7.org/fhir/history-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/history-status"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// Health information for this family member is unavailable/unknown.
      /// (system: http://hl7.org/fhir/history-status)
      /// </summary>
      [EnumLiteral("health-unknown", "http://hl7.org/fhir/history-status"), Description("Health Unknown")]
      HealthUnknown,
    }

    /// <summary>
    /// Condition that the related person had
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("FamilyMemberHistory#Condition", IsNestedType=true)]
    [BackboneType("FamilyMemberHistory.condition")]
    public partial class ConditionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "FamilyMemberHistory#Condition"; } }

      /// <summary>
      /// Condition suffered by relation
      /// </summary>
      [FhirElement("code", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Code
      {
        get { return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Code;

      /// <summary>
      /// deceased | permanent disability | etc.
      /// </summary>
      [FhirElement("outcome", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Outcome
      {
        get { return _Outcome; }
        set { _Outcome = value; OnPropertyChanged("Outcome"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Outcome;

      /// <summary>
      /// Whether the condition contributed to the cause of death
      /// </summary>
      [FhirElement("contributedToDeath", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ContributedToDeathElement
      {
        get { return _ContributedToDeathElement; }
        set { _ContributedToDeathElement = value; OnPropertyChanged("ContributedToDeathElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ContributedToDeathElement;

      /// <summary>
      /// Whether the condition contributed to the cause of death
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? ContributedToDeath
      {
        get { return ContributedToDeathElement != null ? ContributedToDeathElement.Value : null; }
        set
        {
          if (value == null)
            ContributedToDeathElement = null;
          else
            ContributedToDeathElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("ContributedToDeath");
        }
      }

      /// <summary>
      /// When condition first manifested
      /// </summary>
      [FhirElement("onset", Order=70, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.FhirString))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Onset
      {
        get { return _Onset; }
        set { _Onset = value; OnPropertyChanged("Onset"); }
      }

      private Hl7.Fhir.Model.DataType _Onset;

      /// <summary>
      /// Extra information about condition
      /// </summary>
      [FhirElement("note", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Annotation> Note
      {
        get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
        set { _Note = value; OnPropertyChanged("Note"); }
      }

      private List<Hl7.Fhir.Model.Annotation> _Note;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConditionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Code != null) dest.Code = (Hl7.Fhir.Model.CodeableConcept)Code.DeepCopy();
        if(Outcome != null) dest.Outcome = (Hl7.Fhir.Model.CodeableConcept)Outcome.DeepCopy();
        if(ContributedToDeathElement != null) dest.ContributedToDeathElement = (Hl7.Fhir.Model.FhirBoolean)ContributedToDeathElement.DeepCopy();
        if(Onset != null) dest.Onset = (Hl7.Fhir.Model.DataType)Onset.DeepCopy();
        if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConditionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConditionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Outcome, otherT.Outcome)) return false;
        if( !DeepComparable.Matches(ContributedToDeathElement, otherT.ContributedToDeathElement)) return false;
        if( !DeepComparable.Matches(Onset, otherT.Onset)) return false;
        if( !DeepComparable.Matches(Note, otherT.Note)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConditionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Outcome, otherT.Outcome)) return false;
        if( !DeepComparable.IsExactly(ContributedToDeathElement, otherT.ContributedToDeathElement)) return false;
        if( !DeepComparable.IsExactly(Onset, otherT.Onset)) return false;
        if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Code != null) yield return Code;
          if (Outcome != null) yield return Outcome;
          if (ContributedToDeathElement != null) yield return ContributedToDeathElement;
          if (Onset != null) yield return Onset;
          foreach (var elem in Note) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Code != null) yield return new ElementValue("code", Code);
          if (Outcome != null) yield return new ElementValue("outcome", Outcome);
          if (ContributedToDeathElement != null) yield return new ElementValue("contributedToDeath", ContributedToDeathElement);
          if (Onset != null) yield return new ElementValue("onset", Onset);
          foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = Code;
            return Code is not null;
          case "outcome":
            value = Outcome;
            return Outcome is not null;
          case "contributedToDeath":
            value = ContributedToDeathElement;
            return ContributedToDeathElement is not null;
          case "onset":
            value = Onset;
            return Onset is not null;
          case "note":
            value = Note;
            return Note?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Code is not null) yield return new KeyValuePair<string,object>("code",Code);
        if (Outcome is not null) yield return new KeyValuePair<string,object>("outcome",Outcome);
        if (ContributedToDeathElement is not null) yield return new KeyValuePair<string,object>("contributedToDeath",ContributedToDeathElement);
        if (Onset is not null) yield return new KeyValuePair<string,object>("onset",Onset);
        if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      }

    }

    /// <summary>
    /// External Id(s) for this record
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="FiveWs.identifier")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    [FhirElement("instantiatesCanonical", InSummary=true, Order=100)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Canonical> InstantiatesCanonicalElement
    {
      get { if(_InstantiatesCanonicalElement==null) _InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(); return _InstantiatesCanonicalElement; }
      set { _InstantiatesCanonicalElement = value; OnPropertyChanged("InstantiatesCanonicalElement"); }
    }

    private List<Hl7.Fhir.Model.Canonical> _InstantiatesCanonicalElement;

    /// <summary>
    /// Instantiates FHIR protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesCanonical
    {
      get { return InstantiatesCanonicalElement != null ? InstantiatesCanonicalElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesCanonicalElement = null;
        else
          InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(value.Select(elem=>new Hl7.Fhir.Model.Canonical(elem)));
        OnPropertyChanged("InstantiatesCanonical");
      }
    }

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    [FhirElement("instantiatesUri", InSummary=true, Order=110)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FhirUri> InstantiatesUriElement
    {
      get { if(_InstantiatesUriElement==null) _InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(); return _InstantiatesUriElement; }
      set { _InstantiatesUriElement = value; OnPropertyChanged("InstantiatesUriElement"); }
    }

    private List<Hl7.Fhir.Model.FhirUri> _InstantiatesUriElement;

    /// <summary>
    /// Instantiates external protocol or definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public IEnumerable<string> InstantiatesUri
    {
      get { return InstantiatesUriElement != null ? InstantiatesUriElement.Select(elem => elem.Value) : null; }
      set
      {
        if (value == null)
          InstantiatesUriElement = null;
        else
          InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
        OnPropertyChanged("InstantiatesUri");
      }
    }

    /// <summary>
    /// partial | completed | entered-in-error | health-unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=120, FiveWs="FiveWs.status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("FamilyHistoryStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus> _StatusElement;

    /// <summary>
    /// partial | completed | entered-in-error | health-unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// subject-unknown | withheld | unable-to-obtain | deferred
    /// </summary>
    [FhirElement("dataAbsentReason", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept DataAbsentReason
    {
      get { return _DataAbsentReason; }
      set { _DataAbsentReason = value; OnPropertyChanged("DataAbsentReason"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _DataAbsentReason;

    /// <summary>
    /// Patient history is about
    /// </summary>
    [FhirElement("patient", InSummary=true, Order=140, FiveWs="FiveWs.subject")]
    [CLSCompliant(false)]
    [References("Patient")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Patient
    {
      get { return _Patient; }
      set { _Patient = value; OnPropertyChanged("Patient"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Patient;

    /// <summary>
    /// When history was recorded or last updated
    /// </summary>
    [FhirElement("date", InSummary=true, Order=150, FiveWs="FiveWs.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// When history was recorded or last updated
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// The family member described
    /// </summary>
    [FhirElement("name", InSummary=true, Order=160)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// The family member described
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Relationship to the subject
    /// </summary>
    [FhirElement("relationship", InSummary=true, Order=170)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Relationship
    {
      get { return _Relationship; }
      set { _Relationship = value; OnPropertyChanged("Relationship"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Relationship;

    /// <summary>
    /// male | female | other | unknown
    /// </summary>
    [FhirElement("sex", InSummary=true, Order=180)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Sex
    {
      get { return _Sex; }
      set { _Sex = value; OnPropertyChanged("Sex"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Sex;

    /// <summary>
    /// (approximate) date of birth
    /// </summary>
    [FhirElement("born", Order=190, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.FhirString))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Born
    {
      get { return _Born; }
      set { _Born = value; OnPropertyChanged("Born"); }
    }

    private Hl7.Fhir.Model.DataType _Born;

    /// <summary>
    /// (approximate) age
    /// </summary>
    [FhirElement("age", InSummary=true, Order=200, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.FhirString))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Age
    {
      get { return _Age; }
      set { _Age = value; OnPropertyChanged("Age"); }
    }

    private Hl7.Fhir.Model.DataType _Age;

    /// <summary>
    /// Age is estimated?
    /// </summary>
    [FhirElement("estimatedAge", InSummary=true, Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean EstimatedAgeElement
    {
      get { return _EstimatedAgeElement; }
      set { _EstimatedAgeElement = value; OnPropertyChanged("EstimatedAgeElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _EstimatedAgeElement;

    /// <summary>
    /// Age is estimated?
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? EstimatedAge
    {
      get { return EstimatedAgeElement != null ? EstimatedAgeElement.Value : null; }
      set
      {
        if (value == null)
          EstimatedAgeElement = null;
        else
          EstimatedAgeElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("EstimatedAge");
      }
    }

    /// <summary>
    /// Dead? How old/when?
    /// </summary>
    [FhirElement("deceased", InSummary=true, Order=220, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirBoolean),typeof(Hl7.Fhir.Model.Age),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Date),typeof(Hl7.Fhir.Model.FhirString))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Deceased
    {
      get { return _Deceased; }
      set { _Deceased = value; OnPropertyChanged("Deceased"); }
    }

    private Hl7.Fhir.Model.DataType _Deceased;

    /// <summary>
    /// Why was family member history performed?
    /// </summary>
    [FhirElement("reasonCode", InSummary=true, Order=230, FiveWs="FiveWs.why[x]")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ReasonCode
    {
      get { if(_ReasonCode==null) _ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ReasonCode; }
      set { _ReasonCode = value; OnPropertyChanged("ReasonCode"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ReasonCode;

    /// <summary>
    /// Why was family member history performed?
    /// </summary>
    [FhirElement("reasonReference", InSummary=true, Order=240, FiveWs="FiveWs.why[x]")]
    [CLSCompliant(false)]
    [References("Condition","Observation","AllergyIntolerance","QuestionnaireResponse","DiagnosticReport","DocumentReference")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ReasonReference
    {
      get { if(_ReasonReference==null) _ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _ReasonReference; }
      set { _ReasonReference = value; OnPropertyChanged("ReasonReference"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ReasonReference;

    /// <summary>
    /// General note about related person
    /// </summary>
    [FhirElement("note", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Condition that the related person had
    /// </summary>
    [FhirElement("condition", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.FamilyMemberHistory.ConditionComponent> Condition
    {
      get { if(_Condition==null) _Condition = new List<Hl7.Fhir.Model.FamilyMemberHistory.ConditionComponent>(); return _Condition; }
      set { _Condition = value; OnPropertyChanged("Condition"); }
    }

    private List<Hl7.Fhir.Model.FamilyMemberHistory.ConditionComponent> _Condition;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as FamilyMemberHistory;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(InstantiatesCanonicalElement != null) dest.InstantiatesCanonicalElement = new List<Hl7.Fhir.Model.Canonical>(InstantiatesCanonicalElement.DeepCopy());
      if(InstantiatesUriElement != null) dest.InstantiatesUriElement = new List<Hl7.Fhir.Model.FhirUri>(InstantiatesUriElement.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.FamilyMemberHistory.FamilyHistoryStatus>)StatusElement.DeepCopy();
      if(DataAbsentReason != null) dest.DataAbsentReason = (Hl7.Fhir.Model.CodeableConcept)DataAbsentReason.DeepCopy();
      if(Patient != null) dest.Patient = (Hl7.Fhir.Model.ResourceReference)Patient.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(Relationship != null) dest.Relationship = (Hl7.Fhir.Model.CodeableConcept)Relationship.DeepCopy();
      if(Sex != null) dest.Sex = (Hl7.Fhir.Model.CodeableConcept)Sex.DeepCopy();
      if(Born != null) dest.Born = (Hl7.Fhir.Model.DataType)Born.DeepCopy();
      if(Age != null) dest.Age = (Hl7.Fhir.Model.DataType)Age.DeepCopy();
      if(EstimatedAgeElement != null) dest.EstimatedAgeElement = (Hl7.Fhir.Model.FhirBoolean)EstimatedAgeElement.DeepCopy();
      if(Deceased != null) dest.Deceased = (Hl7.Fhir.Model.DataType)Deceased.DeepCopy();
      if(ReasonCode != null) dest.ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(ReasonCode.DeepCopy());
      if(ReasonReference != null) dest.ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(ReasonReference.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Condition != null) dest.Condition = new List<Hl7.Fhir.Model.FamilyMemberHistory.ConditionComponent>(Condition.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new FamilyMemberHistory());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as FamilyMemberHistory;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.Matches(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(DataAbsentReason, otherT.DataAbsentReason)) return false;
      if( !DeepComparable.Matches(Patient, otherT.Patient)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(Relationship, otherT.Relationship)) return false;
      if( !DeepComparable.Matches(Sex, otherT.Sex)) return false;
      if( !DeepComparable.Matches(Born, otherT.Born)) return false;
      if( !DeepComparable.Matches(Age, otherT.Age)) return false;
      if( !DeepComparable.Matches(EstimatedAgeElement, otherT.EstimatedAgeElement)) return false;
      if( !DeepComparable.Matches(Deceased, otherT.Deceased)) return false;
      if( !DeepComparable.Matches(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.Matches(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Condition, otherT.Condition)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as FamilyMemberHistory;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(InstantiatesCanonicalElement, otherT.InstantiatesCanonicalElement)) return false;
      if( !DeepComparable.IsExactly(InstantiatesUriElement, otherT.InstantiatesUriElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(DataAbsentReason, otherT.DataAbsentReason)) return false;
      if( !DeepComparable.IsExactly(Patient, otherT.Patient)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(Relationship, otherT.Relationship)) return false;
      if( !DeepComparable.IsExactly(Sex, otherT.Sex)) return false;
      if( !DeepComparable.IsExactly(Born, otherT.Born)) return false;
      if( !DeepComparable.IsExactly(Age, otherT.Age)) return false;
      if( !DeepComparable.IsExactly(EstimatedAgeElement, otherT.EstimatedAgeElement)) return false;
      if( !DeepComparable.IsExactly(Deceased, otherT.Deceased)) return false;
      if( !DeepComparable.IsExactly(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.IsExactly(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Condition, otherT.Condition)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return elem; }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (DataAbsentReason != null) yield return DataAbsentReason;
        if (Patient != null) yield return Patient;
        if (DateElement != null) yield return DateElement;
        if (NameElement != null) yield return NameElement;
        if (Relationship != null) yield return Relationship;
        if (Sex != null) yield return Sex;
        if (Born != null) yield return Born;
        if (Age != null) yield return Age;
        if (EstimatedAgeElement != null) yield return EstimatedAgeElement;
        if (Deceased != null) yield return Deceased;
        foreach (var elem in ReasonCode) { if (elem != null) yield return elem; }
        foreach (var elem in ReasonReference) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Condition) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in InstantiatesCanonicalElement) { if (elem != null) yield return new ElementValue("instantiatesCanonical", elem); }
        foreach (var elem in InstantiatesUriElement) { if (elem != null) yield return new ElementValue("instantiatesUri", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (DataAbsentReason != null) yield return new ElementValue("dataAbsentReason", DataAbsentReason);
        if (Patient != null) yield return new ElementValue("patient", Patient);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (Relationship != null) yield return new ElementValue("relationship", Relationship);
        if (Sex != null) yield return new ElementValue("sex", Sex);
        if (Born != null) yield return new ElementValue("born", Born);
        if (Age != null) yield return new ElementValue("age", Age);
        if (EstimatedAgeElement != null) yield return new ElementValue("estimatedAge", EstimatedAgeElement);
        if (Deceased != null) yield return new ElementValue("deceased", Deceased);
        foreach (var elem in ReasonCode) { if (elem != null) yield return new ElementValue("reasonCode", elem); }
        foreach (var elem in ReasonReference) { if (elem != null) yield return new ElementValue("reasonReference", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Condition) { if (elem != null) yield return new ElementValue("condition", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "instantiatesCanonical":
          value = InstantiatesCanonicalElement;
          return InstantiatesCanonicalElement?.Any() == true;
        case "instantiatesUri":
          value = InstantiatesUriElement;
          return InstantiatesUriElement?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "dataAbsentReason":
          value = DataAbsentReason;
          return DataAbsentReason is not null;
        case "patient":
          value = Patient;
          return Patient is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "relationship":
          value = Relationship;
          return Relationship is not null;
        case "sex":
          value = Sex;
          return Sex is not null;
        case "born":
          value = Born;
          return Born is not null;
        case "age":
          value = Age;
          return Age is not null;
        case "estimatedAge":
          value = EstimatedAgeElement;
          return EstimatedAgeElement is not null;
        case "deceased":
          value = Deceased;
          return Deceased is not null;
        case "reasonCode":
          value = ReasonCode;
          return ReasonCode?.Any() == true;
        case "reasonReference":
          value = ReasonReference;
          return ReasonReference?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "condition":
          value = Condition;
          return Condition?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (InstantiatesCanonicalElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesCanonical",InstantiatesCanonicalElement);
      if (InstantiatesUriElement?.Any() == true) yield return new KeyValuePair<string,object>("instantiatesUri",InstantiatesUriElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (DataAbsentReason is not null) yield return new KeyValuePair<string,object>("dataAbsentReason",DataAbsentReason);
      if (Patient is not null) yield return new KeyValuePair<string,object>("patient",Patient);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (Relationship is not null) yield return new KeyValuePair<string,object>("relationship",Relationship);
      if (Sex is not null) yield return new KeyValuePair<string,object>("sex",Sex);
      if (Born is not null) yield return new KeyValuePair<string,object>("born",Born);
      if (Age is not null) yield return new KeyValuePair<string,object>("age",Age);
      if (EstimatedAgeElement is not null) yield return new KeyValuePair<string,object>("estimatedAge",EstimatedAgeElement);
      if (Deceased is not null) yield return new KeyValuePair<string,object>("deceased",Deceased);
      if (ReasonCode?.Any() == true) yield return new KeyValuePair<string,object>("reasonCode",ReasonCode);
      if (ReasonReference?.Any() == true) yield return new KeyValuePair<string,object>("reasonReference",ReasonReference);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Condition?.Any() == true) yield return new KeyValuePair<string,object>("condition",Condition);
    }

  }

}

// end of file

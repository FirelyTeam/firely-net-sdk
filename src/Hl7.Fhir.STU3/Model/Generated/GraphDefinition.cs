// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Definition of an graph of resources
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("GraphDefinition","http://hl7.org/fhir/StructureDefinition/GraphDefinition", IsResource=true)]
  public partial class GraphDefinition : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "GraphDefinition"; } }

    /// <summary>
    /// How a compartment must be linked
    /// (url: http://hl7.org/fhir/ValueSet/graph-compartment-rule)
    /// (system: http://hl7.org/fhir/graph-compartment-rule)
    /// </summary>
    [FhirEnumeration("GraphCompartmentRule")]
    public enum GraphCompartmentRule
    {
      /// <summary>
      /// The compartment must be identical (the same literal reference)
      /// (system: http://hl7.org/fhir/graph-compartment-rule)
      /// </summary>
      [EnumLiteral("identical", "http://hl7.org/fhir/graph-compartment-rule"), Description("Identical")]
      Identical,
      /// <summary>
      /// The compartment must be the same - the record must be about the same patient, but the reference may be different
      /// (system: http://hl7.org/fhir/graph-compartment-rule)
      /// </summary>
      [EnumLiteral("matching", "http://hl7.org/fhir/graph-compartment-rule"), Description("Matching")]
      Matching,
      /// <summary>
      /// The compartment must be different
      /// (system: http://hl7.org/fhir/graph-compartment-rule)
      /// </summary>
      [EnumLiteral("different", "http://hl7.org/fhir/graph-compartment-rule"), Description("Different")]
      Different,
      /// <summary>
      /// The compartment rule is defined in the accompanying FHIRPath expression
      /// (system: http://hl7.org/fhir/graph-compartment-rule)
      /// </summary>
      [EnumLiteral("custom", "http://hl7.org/fhir/graph-compartment-rule"), Description("Custom")]
      Custom,
    }

    /// <summary>
    /// Links this graph makes rules about
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("GraphDefinition#Link", IsNestedType=true)]
    public partial class LinkComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "GraphDefinition#Link"; } }

      /// <summary>
      /// Path in the resource that contains the link
      /// </summary>
      [FhirElement("path", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PathElement
      {
        get { return _PathElement; }
        set { _PathElement = value; OnPropertyChanged("PathElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PathElement;

      /// <summary>
      /// Path in the resource that contains the link
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Path
      {
        get { return PathElement != null ? PathElement.Value : null; }
        set
        {
          if (value == null)
            PathElement = null;
          else
            PathElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Path");
        }
      }

      /// <summary>
      /// Which slice (if profiled)
      /// </summary>
      [FhirElement("sliceName", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString SliceNameElement
      {
        get { return _SliceNameElement; }
        set { _SliceNameElement = value; OnPropertyChanged("SliceNameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _SliceNameElement;

      /// <summary>
      /// Which slice (if profiled)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SliceName
      {
        get { return SliceNameElement != null ? SliceNameElement.Value : null; }
        set
        {
          if (value == null)
            SliceNameElement = null;
          else
            SliceNameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("SliceName");
        }
      }

      /// <summary>
      /// Minimum occurrences for this link
      /// </summary>
      [FhirElement("min", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Integer MinElement
      {
        get { return _MinElement; }
        set { _MinElement = value; OnPropertyChanged("MinElement"); }
      }

      private Hl7.Fhir.Model.Integer _MinElement;

      /// <summary>
      /// Minimum occurrences for this link
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Min
      {
        get { return MinElement != null ? MinElement.Value : null; }
        set
        {
          if (value == null)
            MinElement = null;
          else
            MinElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Min");
        }
      }

      /// <summary>
      /// Maximum occurrences for this link
      /// </summary>
      [FhirElement("max", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MaxElement
      {
        get { return _MaxElement; }
        set { _MaxElement = value; OnPropertyChanged("MaxElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MaxElement;

      /// <summary>
      /// Maximum occurrences for this link
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Max
      {
        get { return MaxElement != null ? MaxElement.Value : null; }
        set
        {
          if (value == null)
            MaxElement = null;
          else
            MaxElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Max");
        }
      }

      /// <summary>
      /// Why this link is specified
      /// </summary>
      [FhirElement("description", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Why this link is specified
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Potential target for the link
      /// </summary>
      [FhirElement("target", Order=90)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.GraphDefinition.TargetComponent> Target
      {
        get { if(_Target==null) _Target = new List<Hl7.Fhir.Model.GraphDefinition.TargetComponent>(); return _Target; }
        set { _Target = value; OnPropertyChanged("Target"); }
      }

      private List<Hl7.Fhir.Model.GraphDefinition.TargetComponent> _Target;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LinkComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(PathElement != null) dest.PathElement = (Hl7.Fhir.Model.FhirString)PathElement.DeepCopy();
        if(SliceNameElement != null) dest.SliceNameElement = (Hl7.Fhir.Model.FhirString)SliceNameElement.DeepCopy();
        if(MinElement != null) dest.MinElement = (Hl7.Fhir.Model.Integer)MinElement.DeepCopy();
        if(MaxElement != null) dest.MaxElement = (Hl7.Fhir.Model.FhirString)MaxElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Target != null) dest.Target = new List<Hl7.Fhir.Model.GraphDefinition.TargetComponent>(Target.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LinkComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.Matches(SliceNameElement, otherT.SliceNameElement)) return false;
        if( !DeepComparable.Matches(MinElement, otherT.MinElement)) return false;
        if( !DeepComparable.Matches(MaxElement, otherT.MaxElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Target, otherT.Target)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.IsExactly(SliceNameElement, otherT.SliceNameElement)) return false;
        if( !DeepComparable.IsExactly(MinElement, otherT.MinElement)) return false;
        if( !DeepComparable.IsExactly(MaxElement, otherT.MaxElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Target, otherT.Target)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (PathElement != null) yield return PathElement;
          if (SliceNameElement != null) yield return SliceNameElement;
          if (MinElement != null) yield return MinElement;
          if (MaxElement != null) yield return MaxElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Target) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (PathElement != null) yield return new ElementValue("path", PathElement);
          if (SliceNameElement != null) yield return new ElementValue("sliceName", SliceNameElement);
          if (MinElement != null) yield return new ElementValue("min", MinElement);
          if (MaxElement != null) yield return new ElementValue("max", MaxElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Target) { if (elem != null) yield return new ElementValue("target", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "path":
            value = PathElement;
            return PathElement is not null;
          case "sliceName":
            value = SliceNameElement;
            return SliceNameElement is not null;
          case "min":
            value = MinElement;
            return MinElement is not null;
          case "max":
            value = MaxElement;
            return MaxElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "target":
            value = Target;
            return Target?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (PathElement is not null) yield return new KeyValuePair<string,object>("path",PathElement);
        if (SliceNameElement is not null) yield return new KeyValuePair<string,object>("sliceName",SliceNameElement);
        if (MinElement is not null) yield return new KeyValuePair<string,object>("min",MinElement);
        if (MaxElement is not null) yield return new KeyValuePair<string,object>("max",MaxElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Target?.Any() == true) yield return new KeyValuePair<string,object>("target",Target);
      }

    }

    /// <summary>
    /// Potential target for the link
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("GraphDefinition#Target", IsNestedType=true)]
    public partial class TargetComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "GraphDefinition#Target"; } }

      /// <summary>
      /// Type of resource this link refers to
      /// </summary>
      [FhirElement("type", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ResourceType> TypeElement
      {
        get { return _TypeElement; }
        set { _TypeElement = value; OnPropertyChanged("TypeElement"); }
      }

      private Code<Hl7.Fhir.Model.ResourceType> _TypeElement;

      /// <summary>
      /// Type of resource this link refers to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ResourceType? Type
      {
        get { return TypeElement != null ? TypeElement.Value : null; }
        set
        {
          if (value == null)
            TypeElement = null;
          else
            TypeElement = new Code<Hl7.Fhir.Model.ResourceType>(value);
          OnPropertyChanged("Type");
        }
      }

      /// <summary>
      /// Profile for the target resource
      /// </summary>
      [FhirElement("profile", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri ProfileElement
      {
        get { return _ProfileElement; }
        set { _ProfileElement = value; OnPropertyChanged("ProfileElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _ProfileElement;

      /// <summary>
      /// Profile for the target resource
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Profile
      {
        get { return ProfileElement != null ? ProfileElement.Value : null; }
        set
        {
          if (value == null)
            ProfileElement = null;
          else
            ProfileElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Profile");
        }
      }

      /// <summary>
      /// Compartment Consistency Rules
      /// </summary>
      [FhirElement("compartment", Order=60)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.GraphDefinition.CompartmentComponent> Compartment
      {
        get { if(_Compartment==null) _Compartment = new List<Hl7.Fhir.Model.GraphDefinition.CompartmentComponent>(); return _Compartment; }
        set { _Compartment = value; OnPropertyChanged("Compartment"); }
      }

      private List<Hl7.Fhir.Model.GraphDefinition.CompartmentComponent> _Compartment;

      /// <summary>
      /// Additional links from target resource
      /// </summary>
      [FhirElement("link", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.GraphDefinition.LinkComponent> Link
      {
        get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.GraphDefinition.LinkComponent>(); return _Link; }
        set { _Link = value; OnPropertyChanged("Link"); }
      }

      private List<Hl7.Fhir.Model.GraphDefinition.LinkComponent> _Link;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TargetComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TypeElement != null) dest.TypeElement = (Code<Hl7.Fhir.Model.ResourceType>)TypeElement.DeepCopy();
        if(ProfileElement != null) dest.ProfileElement = (Hl7.Fhir.Model.FhirUri)ProfileElement.DeepCopy();
        if(Compartment != null) dest.Compartment = new List<Hl7.Fhir.Model.GraphDefinition.CompartmentComponent>(Compartment.DeepCopy());
        if(Link != null) dest.Link = new List<Hl7.Fhir.Model.GraphDefinition.LinkComponent>(Link.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TargetComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TargetComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.Matches(ProfileElement, otherT.ProfileElement)) return false;
        if( !DeepComparable.Matches(Compartment, otherT.Compartment)) return false;
        if( !DeepComparable.Matches(Link, otherT.Link)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TargetComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TypeElement, otherT.TypeElement)) return false;
        if( !DeepComparable.IsExactly(ProfileElement, otherT.ProfileElement)) return false;
        if( !DeepComparable.IsExactly(Compartment, otherT.Compartment)) return false;
        if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TypeElement != null) yield return TypeElement;
          if (ProfileElement != null) yield return ProfileElement;
          foreach (var elem in Compartment) { if (elem != null) yield return elem; }
          foreach (var elem in Link) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TypeElement != null) yield return new ElementValue("type", TypeElement);
          if (ProfileElement != null) yield return new ElementValue("profile", ProfileElement);
          foreach (var elem in Compartment) { if (elem != null) yield return new ElementValue("compartment", elem); }
          foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = TypeElement;
            return TypeElement is not null;
          case "profile":
            value = ProfileElement;
            return ProfileElement is not null;
          case "compartment":
            value = Compartment;
            return Compartment?.Any() == true;
          case "link":
            value = Link;
            return Link?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TypeElement is not null) yield return new KeyValuePair<string,object>("type",TypeElement);
        if (ProfileElement is not null) yield return new KeyValuePair<string,object>("profile",ProfileElement);
        if (Compartment?.Any() == true) yield return new KeyValuePair<string,object>("compartment",Compartment);
        if (Link?.Any() == true) yield return new KeyValuePair<string,object>("link",Link);
      }

    }

    /// <summary>
    /// Compartment Consistency Rules
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("GraphDefinition#Compartment", IsNestedType=true)]
    public partial class CompartmentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "GraphDefinition#Compartment"; } }

      /// <summary>
      /// Identifies the compartment
      /// </summary>
      [FhirElement("code", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.CompartmentType> CodeElement
      {
        get { return _CodeElement; }
        set { _CodeElement = value; OnPropertyChanged("CodeElement"); }
      }

      private Code<Hl7.Fhir.Model.CompartmentType> _CodeElement;

      /// <summary>
      /// Identifies the compartment
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.CompartmentType? Code
      {
        get { return CodeElement != null ? CodeElement.Value : null; }
        set
        {
          if (value == null)
            CodeElement = null;
          else
            CodeElement = new Code<Hl7.Fhir.Model.CompartmentType>(value);
          OnPropertyChanged("Code");
        }
      }

      /// <summary>
      /// identical | matching | different | custom
      /// </summary>
      [FhirElement("rule", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentRule> RuleElement
      {
        get { return _RuleElement; }
        set { _RuleElement = value; OnPropertyChanged("RuleElement"); }
      }

      private Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentRule> _RuleElement;

      /// <summary>
      /// identical | matching | different | custom
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.GraphDefinition.GraphCompartmentRule? Rule
      {
        get { return RuleElement != null ? RuleElement.Value : null; }
        set
        {
          if (value == null)
            RuleElement = null;
          else
            RuleElement = new Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentRule>(value);
          OnPropertyChanged("Rule");
        }
      }

      /// <summary>
      /// Custom rule, as a FHIRPath expression
      /// </summary>
      [FhirElement("expression", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ExpressionElement
      {
        get { return _ExpressionElement; }
        set { _ExpressionElement = value; OnPropertyChanged("ExpressionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ExpressionElement;

      /// <summary>
      /// Custom rule, as a FHIRPath expression
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Expression
      {
        get { return ExpressionElement != null ? ExpressionElement.Value : null; }
        set
        {
          if (value == null)
            ExpressionElement = null;
          else
            ExpressionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Expression");
        }
      }

      /// <summary>
      /// Documentation for FHIRPath expression
      /// </summary>
      [FhirElement("description", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Documentation for FHIRPath expression
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CompartmentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(CodeElement != null) dest.CodeElement = (Code<Hl7.Fhir.Model.CompartmentType>)CodeElement.DeepCopy();
        if(RuleElement != null) dest.RuleElement = (Code<Hl7.Fhir.Model.GraphDefinition.GraphCompartmentRule>)RuleElement.DeepCopy();
        if(ExpressionElement != null) dest.ExpressionElement = (Hl7.Fhir.Model.FhirString)ExpressionElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CompartmentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CompartmentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.Matches(RuleElement, otherT.RuleElement)) return false;
        if( !DeepComparable.Matches(ExpressionElement, otherT.ExpressionElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CompartmentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(CodeElement, otherT.CodeElement)) return false;
        if( !DeepComparable.IsExactly(RuleElement, otherT.RuleElement)) return false;
        if( !DeepComparable.IsExactly(ExpressionElement, otherT.ExpressionElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (CodeElement != null) yield return CodeElement;
          if (RuleElement != null) yield return RuleElement;
          if (ExpressionElement != null) yield return ExpressionElement;
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (CodeElement != null) yield return new ElementValue("code", CodeElement);
          if (RuleElement != null) yield return new ElementValue("rule", RuleElement);
          if (ExpressionElement != null) yield return new ElementValue("expression", ExpressionElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "code":
            value = CodeElement;
            return CodeElement is not null;
          case "rule":
            value = RuleElement;
            return RuleElement is not null;
          case "expression":
            value = ExpressionElement;
            return ExpressionElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (CodeElement is not null) yield return new KeyValuePair<string,object>("code",CodeElement);
        if (RuleElement is not null) yield return new KeyValuePair<string,object>("rule",RuleElement);
        if (ExpressionElement is not null) yield return new KeyValuePair<string,object>("expression",ExpressionElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// Logical URI to reference this graph definition (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="id")]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Logical URI to reference this graph definition (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Business version of the graph definition
    /// </summary>
    [FhirElement("version", InSummary=true, Order=100, FiveWs="id.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the graph definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this graph definition (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=110)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this graph definition (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=120, FiveWs="status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, IsModifier=true, Order=130, FiveWs="class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date this was last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=140, FiveWs="when.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date this was last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=150, FiveWs="who.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=160)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the graph definition
    /// </summary>
    [FhirElement("description", Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the graph definition
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Context the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for graph definition (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this graph definition is defined
    /// </summary>
    [FhirElement("purpose", Order=200, FiveWs="why")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this graph definition is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Type of resource at which the graph starts
    /// </summary>
    [FhirElement("start", Order=210)]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.ResourceType> StartElement
    {
      get { return _StartElement; }
      set { _StartElement = value; OnPropertyChanged("StartElement"); }
    }

    private Code<Hl7.Fhir.Model.ResourceType> _StartElement;

    /// <summary>
    /// Type of resource at which the graph starts
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.ResourceType? Start
    {
      get { return StartElement != null ? StartElement.Value : null; }
      set
      {
        if (value == null)
          StartElement = null;
        else
          StartElement = new Code<Hl7.Fhir.Model.ResourceType>(value);
        OnPropertyChanged("Start");
      }
    }

    /// <summary>
    /// Profile on base resource
    /// </summary>
    [FhirElement("profile", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri ProfileElement
    {
      get { return _ProfileElement; }
      set { _ProfileElement = value; OnPropertyChanged("ProfileElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _ProfileElement;

    /// <summary>
    /// Profile on base resource
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Profile
    {
      get { return ProfileElement != null ? ProfileElement.Value : null; }
      set
      {
        if (value == null)
          ProfileElement = null;
        else
          ProfileElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Profile");
      }
    }

    /// <summary>
    /// Links this graph makes rules about
    /// </summary>
    [FhirElement("link", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.GraphDefinition.LinkComponent> Link
    {
      get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.GraphDefinition.LinkComponent>(); return _Link; }
      set { _Link = value; OnPropertyChanged("Link"); }
    }

    private List<Hl7.Fhir.Model.GraphDefinition.LinkComponent> _Link;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as GraphDefinition;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(StartElement != null) dest.StartElement = (Code<Hl7.Fhir.Model.ResourceType>)StartElement.DeepCopy();
      if(ProfileElement != null) dest.ProfileElement = (Hl7.Fhir.Model.FhirUri)ProfileElement.DeepCopy();
      if(Link != null) dest.Link = new List<Hl7.Fhir.Model.GraphDefinition.LinkComponent>(Link.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new GraphDefinition());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as GraphDefinition;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(StartElement, otherT.StartElement)) return false;
      if( !DeepComparable.Matches(ProfileElement, otherT.ProfileElement)) return false;
      if( !DeepComparable.Matches(Link, otherT.Link)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as GraphDefinition;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(StartElement, otherT.StartElement)) return false;
      if( !DeepComparable.IsExactly(ProfileElement, otherT.ProfileElement)) return false;
      if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (StartElement != null) yield return StartElement;
        if (ProfileElement != null) yield return ProfileElement;
        foreach (var elem in Link) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (StartElement != null) yield return new ElementValue("start", StartElement);
        if (ProfileElement != null) yield return new ElementValue("profile", ProfileElement);
        foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "start":
          value = StartElement;
          return StartElement is not null;
        case "profile":
          value = ProfileElement;
          return ProfileElement is not null;
        case "link":
          value = Link;
          return Link?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (StartElement is not null) yield return new KeyValuePair<string,object>("start",StartElement);
      if (ProfileElement is not null) yield return new KeyValuePair<string,object>("profile",ProfileElement);
      if (Link?.Any() == true) yield return new KeyValuePair<string,object>("link",Link);
    }

  }

}

// end of file

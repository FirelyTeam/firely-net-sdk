// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Administration of medication to a patient
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("MedicationAdministration","http://hl7.org/fhir/StructureDefinition/MedicationAdministration", IsResource=true)]
  public partial class MedicationAdministration : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "MedicationAdministration"; } }

    /// <summary>
    /// A set of codes indicating the current status of a MedicationAdministration.
    /// (url: http://hl7.org/fhir/ValueSet/medication-admin-status)
    /// (system: http://hl7.org/fhir/medication-admin-status)
    /// </summary>
    [FhirEnumeration("MedicationAdministrationStatus", "http://hl7.org/fhir/ValueSet/medication-admin-status", "http://hl7.org/fhir/medication-admin-status")]
    public enum MedicationAdministrationStatus
    {
      /// <summary>
      /// The administration has started but has not yet completed.
      /// (system: http://hl7.org/fhir/medication-admin-status)
      /// </summary>
      [EnumLiteral("in-progress"), Description("In Progress")]
      InProgress,
      /// <summary>
      /// Actions implied by the administration have been temporarily halted, but are expected to continue later. May also be called "suspended".
      /// (system: http://hl7.org/fhir/medication-admin-status)
      /// </summary>
      [EnumLiteral("on-hold"), Description("On Hold")]
      OnHold,
      /// <summary>
      /// All actions that are implied by the administration have occurred.
      /// (system: http://hl7.org/fhir/medication-admin-status)
      /// </summary>
      [EnumLiteral("completed"), Description("Completed")]
      Completed,
      /// <summary>
      /// The administration was entered in error and therefore nullified.
      /// (system: http://hl7.org/fhir/medication-admin-status)
      /// </summary>
      [EnumLiteral("entered-in-error"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// Actions implied by the administration have been permanently halted, before all of them occurred.
      /// (system: http://hl7.org/fhir/medication-admin-status)
      /// </summary>
      [EnumLiteral("stopped"), Description("Stopped")]
      Stopped,
      /// <summary>
      /// The authoring system does not know which of the status values currently applies for this request. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
      /// (system: http://hl7.org/fhir/medication-admin-status)
      /// </summary>
      [EnumLiteral("unknown"), Description("Unknown")]
      Unknown,
    }

    /// <summary>
    /// Who administered substance
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationAdministration#Performer", IsNestedType=true)]
    [BackboneType("MedicationAdministration.performer")]
    public partial class PerformerComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationAdministration#Performer"; } }

      /// <summary>
      /// Individual who was performing
      /// </summary>
      [FhirElement("actor", InSummary=true, Order=40)]
      [CLSCompliant(false)]
      [References("Practitioner","Patient","RelatedPerson","Device")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      /// <summary>
      /// Organization organization was acting for
      /// </summary>
      [FhirElement("onBehalfOf", Order=50)]
      [CLSCompliant(false)]
      [References("Organization")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference OnBehalfOf
      {
        get { return _OnBehalfOf; }
        set { _OnBehalfOf = value; OnPropertyChanged("OnBehalfOf"); }
      }

      private Hl7.Fhir.Model.ResourceReference _OnBehalfOf;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as PerformerComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        if(OnBehalfOf != null) dest.OnBehalfOf = (Hl7.Fhir.Model.ResourceReference)OnBehalfOf.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new PerformerComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
        if( !DeepComparable.Matches(OnBehalfOf, otherT.OnBehalfOf)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as PerformerComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
        if( !DeepComparable.IsExactly(OnBehalfOf, otherT.OnBehalfOf)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Actor != null) yield return Actor;
          if (OnBehalfOf != null) yield return OnBehalfOf;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Actor != null) yield return new ElementValue("actor", Actor);
          if (OnBehalfOf != null) yield return new ElementValue("onBehalfOf", OnBehalfOf);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "actor":
            value = Actor;
            return Actor is not null;
          case "onBehalfOf":
            value = OnBehalfOf;
            return OnBehalfOf is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
        if (OnBehalfOf is not null) yield return new KeyValuePair<string,object>("onBehalfOf",OnBehalfOf);
      }

    }

    /// <summary>
    /// Details of how medication was taken
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("MedicationAdministration#Dosage", IsNestedType=true)]
    [BackboneType("MedicationAdministration.dosage")]
    public partial class DosageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "MedicationAdministration#Dosage"; } }

      /// <summary>
      /// Free text dosage instructions e.g. SIG
      /// </summary>
      [FhirElement("text", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextElement
      {
        get { return _TextElement; }
        set { _TextElement = value; OnPropertyChanged("TextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextElement;

      /// <summary>
      /// Free text dosage instructions e.g. SIG
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Text
      {
        get { return TextElement != null ? TextElement.Value : null; }
        set
        {
          if (value == null)
            TextElement = null;
          else
            TextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Text");
        }
      }

      /// <summary>
      /// Body site administered to
      /// </summary>
      [FhirElement("site", Order=50)]
      [Binding("MedicationAdministrationSite")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Site
      {
        get { return _Site; }
        set { _Site = value; OnPropertyChanged("Site"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Site;

      /// <summary>
      /// Path of substance into body
      /// </summary>
      [FhirElement("route", Order=60)]
      [Binding("RouteOfAdministration")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Route
      {
        get { return _Route; }
        set { _Route = value; OnPropertyChanged("Route"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Route;

      /// <summary>
      /// How drug was administered
      /// </summary>
      [FhirElement("method", Order=70)]
      [Binding("MedicationAdministrationMethod")]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Method
      {
        get { return _Method; }
        set { _Method = value; OnPropertyChanged("Method"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Method;

      /// <summary>
      /// Amount of medication per dose
      /// </summary>
      [FhirElement("dose", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Dose
      {
        get { return _Dose; }
        set { _Dose = value; OnPropertyChanged("Dose"); }
      }

      private Hl7.Fhir.Model.Quantity _Dose;

      /// <summary>
      /// Dose quantity per unit of time
      /// </summary>
      [FhirElement("rate", Order=90, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Ratio),typeof(Hl7.Fhir.Model.Quantity))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Rate
      {
        get { return _Rate; }
        set { _Rate = value; OnPropertyChanged("Rate"); }
      }

      private Hl7.Fhir.Model.DataType _Rate;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DosageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(TextElement != null) dest.TextElement = (Hl7.Fhir.Model.FhirString)TextElement.DeepCopy();
        if(Site != null) dest.Site = (Hl7.Fhir.Model.CodeableConcept)Site.DeepCopy();
        if(Route != null) dest.Route = (Hl7.Fhir.Model.CodeableConcept)Route.DeepCopy();
        if(Method != null) dest.Method = (Hl7.Fhir.Model.CodeableConcept)Method.DeepCopy();
        if(Dose != null) dest.Dose = (Hl7.Fhir.Model.Quantity)Dose.DeepCopy();
        if(Rate != null) dest.Rate = (Hl7.Fhir.Model.DataType)Rate.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DosageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DosageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.Matches(Site, otherT.Site)) return false;
        if( !DeepComparable.Matches(Route, otherT.Route)) return false;
        if( !DeepComparable.Matches(Method, otherT.Method)) return false;
        if( !DeepComparable.Matches(Dose, otherT.Dose)) return false;
        if( !DeepComparable.Matches(Rate, otherT.Rate)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DosageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.IsExactly(Site, otherT.Site)) return false;
        if( !DeepComparable.IsExactly(Route, otherT.Route)) return false;
        if( !DeepComparable.IsExactly(Method, otherT.Method)) return false;
        if( !DeepComparable.IsExactly(Dose, otherT.Dose)) return false;
        if( !DeepComparable.IsExactly(Rate, otherT.Rate)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (TextElement != null) yield return TextElement;
          if (Site != null) yield return Site;
          if (Route != null) yield return Route;
          if (Method != null) yield return Method;
          if (Dose != null) yield return Dose;
          if (Rate != null) yield return Rate;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (TextElement != null) yield return new ElementValue("text", TextElement);
          if (Site != null) yield return new ElementValue("site", Site);
          if (Route != null) yield return new ElementValue("route", Route);
          if (Method != null) yield return new ElementValue("method", Method);
          if (Dose != null) yield return new ElementValue("dose", Dose);
          if (Rate != null) yield return new ElementValue("rate", Rate);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "text":
            value = TextElement;
            return TextElement is not null;
          case "site":
            value = Site;
            return Site is not null;
          case "route":
            value = Route;
            return Route is not null;
          case "method":
            value = Method;
            return Method is not null;
          case "dose":
            value = Dose;
            return Dose is not null;
          case "rate":
            value = Rate;
            return Rate is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (TextElement is not null) yield return new KeyValuePair<string,object>("text",TextElement);
        if (Site is not null) yield return new KeyValuePair<string,object>("site",Site);
        if (Route is not null) yield return new KeyValuePair<string,object>("route",Route);
        if (Method is not null) yield return new KeyValuePair<string,object>("method",Method);
        if (Dose is not null) yield return new KeyValuePair<string,object>("dose",Dose);
        if (Rate is not null) yield return new KeyValuePair<string,object>("rate",Rate);
      }

    }

    /// <summary>
    /// External identifier
    /// </summary>
    [FhirElement("identifier", Order=90, FiveWs="id")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates protocol or definition
    /// </summary>
    [FhirElement("definition", InSummary=true, Order=100)]
    [CLSCompliant(false)]
    [References("PlanDefinition","ActivityDefinition")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Definition
    {
      get { if(_Definition==null) _Definition = new List<Hl7.Fhir.Model.ResourceReference>(); return _Definition; }
      set { _Definition = value; OnPropertyChanged("Definition"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Definition;

    /// <summary>
    /// Part of referenced event
    /// </summary>
    [FhirElement("partOf", InSummary=true, Order=110)]
    [CLSCompliant(false)]
    [References("MedicationAdministration","Procedure")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> PartOf
    {
      get { if(_PartOf==null) _PartOf = new List<Hl7.Fhir.Model.ResourceReference>(); return _PartOf; }
      set { _PartOf = value; OnPropertyChanged("PartOf"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _PartOf;

    /// <summary>
    /// in-progress | on-hold | completed | entered-in-error | stopped | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=120, FiveWs="status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("MedicationAdministrationStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatus> _StatusElement;

    /// <summary>
    /// in-progress | on-hold | completed | entered-in-error | stopped | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// Type of medication usage
    /// </summary>
    [FhirElement("category", Order=130)]
    [Binding("MedicationAdministrationCategory")]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Category
    {
      get { return _Category; }
      set { _Category = value; OnPropertyChanged("Category"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Category;

    /// <summary>
    /// What was administered
    /// </summary>
    [FhirElement("medication", InSummary=true, Order=140, Choice=ChoiceType.DatatypeChoice, FiveWs="what")]
    [Binding("MedicationCode")]
    [CLSCompliant(false)]
    [References("Medication")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.DataType Medication
    {
      get { return _Medication; }
      set { _Medication = value; OnPropertyChanged("Medication"); }
    }

    private Hl7.Fhir.Model.DataType _Medication;

    /// <summary>
    /// Who received medication
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=150, FiveWs="who.focus")]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Encounter or Episode of Care administered as part of
    /// </summary>
    [FhirElement("context", Order=160, FiveWs="context")]
    [CLSCompliant(false)]
    [References("Encounter","EpisodeOfCare")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Context
    {
      get { return _Context; }
      set { _Context = value; OnPropertyChanged("Context"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Context;

    /// <summary>
    /// Additional information to support administration
    /// </summary>
    [FhirElement("supportingInformation", Order=170, FiveWs="context")]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> SupportingInformation
    {
      get { if(_SupportingInformation==null) _SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(); return _SupportingInformation; }
      set { _SupportingInformation = value; OnPropertyChanged("SupportingInformation"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _SupportingInformation;

    /// <summary>
    /// Start and end time of administration
    /// </summary>
    [FhirElement("effective", InSummary=true, Order=180, Choice=ChoiceType.DatatypeChoice, FiveWs="when.done")]
    [CLSCompliant(false)]
    [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Period))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.DataType Effective
    {
      get { return _Effective; }
      set { _Effective = value; OnPropertyChanged("Effective"); }
    }

    private Hl7.Fhir.Model.DataType _Effective;

    /// <summary>
    /// Who administered substance
    /// </summary>
    [FhirElement("performer", InSummary=true, Order=190, FiveWs="who.actor")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.MedicationAdministration.PerformerComponent> Performer
    {
      get { if(_Performer==null) _Performer = new List<Hl7.Fhir.Model.MedicationAdministration.PerformerComponent>(); return _Performer; }
      set { _Performer = value; OnPropertyChanged("Performer"); }
    }

    private List<Hl7.Fhir.Model.MedicationAdministration.PerformerComponent> _Performer;

    /// <summary>
    /// True if medication not administered
    /// </summary>
    [FhirElement("notGiven", InSummary=true, IsModifier=true, Order=200)]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean NotGivenElement
    {
      get { return _NotGivenElement; }
      set { _NotGivenElement = value; OnPropertyChanged("NotGivenElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _NotGivenElement;

    /// <summary>
    /// True if medication not administered
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? NotGiven
    {
      get { return NotGivenElement != null ? NotGivenElement.Value : null; }
      set
      {
        if (value == null)
          NotGivenElement = null;
        else
          NotGivenElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("NotGiven");
      }
    }

    /// <summary>
    /// Reason administration not performed
    /// </summary>
    [FhirElement("reasonNotGiven", Order=210)]
    [Binding("MedicationAdministrationNegationReason")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ReasonNotGiven
    {
      get { if(_ReasonNotGiven==null) _ReasonNotGiven = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ReasonNotGiven; }
      set { _ReasonNotGiven = value; OnPropertyChanged("ReasonNotGiven"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ReasonNotGiven;

    /// <summary>
    /// Reason administration performed
    /// </summary>
    [FhirElement("reasonCode", Order=220)]
    [Binding("MedicationAdministrationReason")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ReasonCode
    {
      get { if(_ReasonCode==null) _ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ReasonCode; }
      set { _ReasonCode = value; OnPropertyChanged("ReasonCode"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ReasonCode;

    /// <summary>
    /// Condition or Observation that supports why the medication was administered
    /// </summary>
    [FhirElement("reasonReference", Order=230, FiveWs="why")]
    [CLSCompliant(false)]
    [References("Condition","Observation")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> ReasonReference
    {
      get { if(_ReasonReference==null) _ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(); return _ReasonReference; }
      set { _ReasonReference = value; OnPropertyChanged("ReasonReference"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _ReasonReference;

    /// <summary>
    /// Request administration performed against
    /// </summary>
    [FhirElement("prescription", Order=240)]
    [CLSCompliant(false)]
    [References("MedicationRequest")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Prescription
    {
      get { return _Prescription; }
      set { _Prescription = value; OnPropertyChanged("Prescription"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Prescription;

    /// <summary>
    /// Device used to administer
    /// </summary>
    [FhirElement("device", Order=250)]
    [CLSCompliant(false)]
    [References("Device")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Device
    {
      get { if(_Device==null) _Device = new List<Hl7.Fhir.Model.ResourceReference>(); return _Device; }
      set { _Device = value; OnPropertyChanged("Device"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Device;

    /// <summary>
    /// Information about the administration
    /// </summary>
    [FhirElement("note", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Details of how medication was taken
    /// </summary>
    [FhirElement("dosage", Order=270)]
    [DataMember]
    public Hl7.Fhir.Model.MedicationAdministration.DosageComponent Dosage
    {
      get { return _Dosage; }
      set { _Dosage = value; OnPropertyChanged("Dosage"); }
    }

    private Hl7.Fhir.Model.MedicationAdministration.DosageComponent _Dosage;

    /// <summary>
    /// A list of events of interest in the lifecycle
    /// </summary>
    [FhirElement("eventHistory", Order=280)]
    [CLSCompliant(false)]
    [References("Provenance")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> EventHistory
    {
      get { if(_EventHistory==null) _EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(); return _EventHistory; }
      set { _EventHistory = value; OnPropertyChanged("EventHistory"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _EventHistory;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as MedicationAdministration;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Definition != null) dest.Definition = new List<Hl7.Fhir.Model.ResourceReference>(Definition.DeepCopy());
      if(PartOf != null) dest.PartOf = new List<Hl7.Fhir.Model.ResourceReference>(PartOf.DeepCopy());
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.MedicationAdministration.MedicationAdministrationStatus>)StatusElement.DeepCopy();
      if(Category != null) dest.Category = (Hl7.Fhir.Model.CodeableConcept)Category.DeepCopy();
      if(Medication != null) dest.Medication = (Hl7.Fhir.Model.DataType)Medication.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Context != null) dest.Context = (Hl7.Fhir.Model.ResourceReference)Context.DeepCopy();
      if(SupportingInformation != null) dest.SupportingInformation = new List<Hl7.Fhir.Model.ResourceReference>(SupportingInformation.DeepCopy());
      if(Effective != null) dest.Effective = (Hl7.Fhir.Model.DataType)Effective.DeepCopy();
      if(Performer != null) dest.Performer = new List<Hl7.Fhir.Model.MedicationAdministration.PerformerComponent>(Performer.DeepCopy());
      if(NotGivenElement != null) dest.NotGivenElement = (Hl7.Fhir.Model.FhirBoolean)NotGivenElement.DeepCopy();
      if(ReasonNotGiven != null) dest.ReasonNotGiven = new List<Hl7.Fhir.Model.CodeableConcept>(ReasonNotGiven.DeepCopy());
      if(ReasonCode != null) dest.ReasonCode = new List<Hl7.Fhir.Model.CodeableConcept>(ReasonCode.DeepCopy());
      if(ReasonReference != null) dest.ReasonReference = new List<Hl7.Fhir.Model.ResourceReference>(ReasonReference.DeepCopy());
      if(Prescription != null) dest.Prescription = (Hl7.Fhir.Model.ResourceReference)Prescription.DeepCopy();
      if(Device != null) dest.Device = new List<Hl7.Fhir.Model.ResourceReference>(Device.DeepCopy());
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Dosage != null) dest.Dosage = (Hl7.Fhir.Model.MedicationAdministration.DosageComponent)Dosage.DeepCopy();
      if(EventHistory != null) dest.EventHistory = new List<Hl7.Fhir.Model.ResourceReference>(EventHistory.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new MedicationAdministration());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as MedicationAdministration;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Definition, otherT.Definition)) return false;
      if( !DeepComparable.Matches(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(Category, otherT.Category)) return false;
      if( !DeepComparable.Matches(Medication, otherT.Medication)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Context, otherT.Context)) return false;
      if( !DeepComparable.Matches(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.Matches(Effective, otherT.Effective)) return false;
      if( !DeepComparable.Matches(Performer, otherT.Performer)) return false;
      if( !DeepComparable.Matches(NotGivenElement, otherT.NotGivenElement)) return false;
      if( !DeepComparable.Matches(ReasonNotGiven, otherT.ReasonNotGiven)) return false;
      if( !DeepComparable.Matches(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.Matches(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.Matches(Prescription, otherT.Prescription)) return false;
      if( !DeepComparable.Matches(Device, otherT.Device)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Dosage, otherT.Dosage)) return false;
      if( !DeepComparable.Matches(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as MedicationAdministration;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Definition, otherT.Definition)) return false;
      if( !DeepComparable.IsExactly(PartOf, otherT.PartOf)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(Category, otherT.Category)) return false;
      if( !DeepComparable.IsExactly(Medication, otherT.Medication)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Context, otherT.Context)) return false;
      if( !DeepComparable.IsExactly(SupportingInformation, otherT.SupportingInformation)) return false;
      if( !DeepComparable.IsExactly(Effective, otherT.Effective)) return false;
      if( !DeepComparable.IsExactly(Performer, otherT.Performer)) return false;
      if( !DeepComparable.IsExactly(NotGivenElement, otherT.NotGivenElement)) return false;
      if( !DeepComparable.IsExactly(ReasonNotGiven, otherT.ReasonNotGiven)) return false;
      if( !DeepComparable.IsExactly(ReasonCode, otherT.ReasonCode)) return false;
      if( !DeepComparable.IsExactly(ReasonReference, otherT.ReasonReference)) return false;
      if( !DeepComparable.IsExactly(Prescription, otherT.Prescription)) return false;
      if( !DeepComparable.IsExactly(Device, otherT.Device)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Dosage, otherT.Dosage)) return false;
      if( !DeepComparable.IsExactly(EventHistory, otherT.EventHistory)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in Definition) { if (elem != null) yield return elem; }
        foreach (var elem in PartOf) { if (elem != null) yield return elem; }
        if (StatusElement != null) yield return StatusElement;
        if (Category != null) yield return Category;
        if (Medication != null) yield return Medication;
        if (Subject != null) yield return Subject;
        if (Context != null) yield return Context;
        foreach (var elem in SupportingInformation) { if (elem != null) yield return elem; }
        if (Effective != null) yield return Effective;
        foreach (var elem in Performer) { if (elem != null) yield return elem; }
        if (NotGivenElement != null) yield return NotGivenElement;
        foreach (var elem in ReasonNotGiven) { if (elem != null) yield return elem; }
        foreach (var elem in ReasonCode) { if (elem != null) yield return elem; }
        foreach (var elem in ReasonReference) { if (elem != null) yield return elem; }
        if (Prescription != null) yield return Prescription;
        foreach (var elem in Device) { if (elem != null) yield return elem; }
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        if (Dosage != null) yield return Dosage;
        foreach (var elem in EventHistory) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in Definition) { if (elem != null) yield return new ElementValue("definition", elem); }
        foreach (var elem in PartOf) { if (elem != null) yield return new ElementValue("partOf", elem); }
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (Category != null) yield return new ElementValue("category", Category);
        if (Medication != null) yield return new ElementValue("medication", Medication);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Context != null) yield return new ElementValue("context", Context);
        foreach (var elem in SupportingInformation) { if (elem != null) yield return new ElementValue("supportingInformation", elem); }
        if (Effective != null) yield return new ElementValue("effective", Effective);
        foreach (var elem in Performer) { if (elem != null) yield return new ElementValue("performer", elem); }
        if (NotGivenElement != null) yield return new ElementValue("notGiven", NotGivenElement);
        foreach (var elem in ReasonNotGiven) { if (elem != null) yield return new ElementValue("reasonNotGiven", elem); }
        foreach (var elem in ReasonCode) { if (elem != null) yield return new ElementValue("reasonCode", elem); }
        foreach (var elem in ReasonReference) { if (elem != null) yield return new ElementValue("reasonReference", elem); }
        if (Prescription != null) yield return new ElementValue("prescription", Prescription);
        foreach (var elem in Device) { if (elem != null) yield return new ElementValue("device", elem); }
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        if (Dosage != null) yield return new ElementValue("dosage", Dosage);
        foreach (var elem in EventHistory) { if (elem != null) yield return new ElementValue("eventHistory", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "definition":
          value = Definition;
          return Definition?.Any() == true;
        case "partOf":
          value = PartOf;
          return PartOf?.Any() == true;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "category":
          value = Category;
          return Category is not null;
        case "medication":
          value = Medication;
          return Medication is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "context":
          value = Context;
          return Context is not null;
        case "supportingInformation":
          value = SupportingInformation;
          return SupportingInformation?.Any() == true;
        case "effective":
          value = Effective;
          return Effective is not null;
        case "performer":
          value = Performer;
          return Performer?.Any() == true;
        case "notGiven":
          value = NotGivenElement;
          return NotGivenElement is not null;
        case "reasonNotGiven":
          value = ReasonNotGiven;
          return ReasonNotGiven?.Any() == true;
        case "reasonCode":
          value = ReasonCode;
          return ReasonCode?.Any() == true;
        case "reasonReference":
          value = ReasonReference;
          return ReasonReference?.Any() == true;
        case "prescription":
          value = Prescription;
          return Prescription is not null;
        case "device":
          value = Device;
          return Device?.Any() == true;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "dosage":
          value = Dosage;
          return Dosage is not null;
        case "eventHistory":
          value = EventHistory;
          return EventHistory?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Definition?.Any() == true) yield return new KeyValuePair<string,object>("definition",Definition);
      if (PartOf?.Any() == true) yield return new KeyValuePair<string,object>("partOf",PartOf);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (Category is not null) yield return new KeyValuePair<string,object>("category",Category);
      if (Medication is not null) yield return new KeyValuePair<string,object>("medication",Medication);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Context is not null) yield return new KeyValuePair<string,object>("context",Context);
      if (SupportingInformation?.Any() == true) yield return new KeyValuePair<string,object>("supportingInformation",SupportingInformation);
      if (Effective is not null) yield return new KeyValuePair<string,object>("effective",Effective);
      if (Performer?.Any() == true) yield return new KeyValuePair<string,object>("performer",Performer);
      if (NotGivenElement is not null) yield return new KeyValuePair<string,object>("notGiven",NotGivenElement);
      if (ReasonNotGiven?.Any() == true) yield return new KeyValuePair<string,object>("reasonNotGiven",ReasonNotGiven);
      if (ReasonCode?.Any() == true) yield return new KeyValuePair<string,object>("reasonCode",ReasonCode);
      if (ReasonReference?.Any() == true) yield return new KeyValuePair<string,object>("reasonReference",ReasonReference);
      if (Prescription is not null) yield return new KeyValuePair<string,object>("prescription",Prescription);
      if (Device?.Any() == true) yield return new KeyValuePair<string,object>("device",Device);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Dosage is not null) yield return new KeyValuePair<string,object>("dosage",Dosage);
      if (EventHistory?.Any() == true) yield return new KeyValuePair<string,object>("eventHistory",EventHistory);
    }

  }

}

// end of file

// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Legal Agreement
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("Contract","http://hl7.org/fhir/StructureDefinition/Contract", IsResource=true)]
  public partial class Contract : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "Contract"; } }

    /// <summary>
    /// This value set contract specific codes for status.
    /// (url: http://hl7.org/fhir/ValueSet/contract-status)
    /// (system: http://hl7.org/fhir/contract-status)
    /// </summary>
    [FhirEnumeration("ContractResourceStatusCodes")]
    public enum ContractResourceStatusCodes
    {
      /// <summary>
      /// Contract is augmented with additional information to correct errors in a predecessor or to updated values in a predecessor. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: revised; replaced.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("amended", "http://hl7.org/fhir/contract-status"), Description("Amended")]
      Amended,
      /// <summary>
      /// Contract is augmented with additional information that was missing from a predecessor Contract. Usage: Contract altered within effective time. Precedence Order = 9. Comparable FHIR and v.3 status codes: updated, replaced.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("appended", "http://hl7.org/fhir/contract-status"), Description("Appended")]
      Appended,
      /// <summary>
      /// Contract is terminated due to failure of the Grantor and/or the Grantee to fulfil one or more contract provisions. Usage: Abnormal contract termination. Precedence Order = 10. Comparable FHIR and v.3 status codes: stopped; failed; aborted.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("cancelled", "http://hl7.org/fhir/contract-status"), Description("Cancelled")]
      Cancelled,
      /// <summary>
      /// Contract is pended to rectify failure of the Grantor or the Grantee to fulfil contract provision(s). E.g., Grantee complaint about Grantor's failure to comply with contract provisions. Usage: Contract pended. Precedence Order = 7.Comparable FHIR and v.3 status codes: on hold; pended; suspended.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("disputed", "http://hl7.org/fhir/contract-status"), Description("Disputed")]
      Disputed,
      /// <summary>
      /// Contract was created in error. No Precedence Order.  Status may be applied to a Contract with any status.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("entered-in-error", "http://hl7.org/fhir/contract-status"), Description("Entered in Error")]
      EnteredInError,
      /// <summary>
      /// Contract execution pending; may be executed when either the Grantor or the Grantee accepts the contract provisions by signing. I.e., where either the Grantor or the Grantee has signed, but not both. E.g., when an insurance applicant signs the insurers application, which references the policy.Â Usage: Optional first step of contract execution activity.  May be skipped and contracting activity moves directly to executed state. Precedence Order = 3. Comparable FHIR and v.3 status codes: draft; preliminary; planned; intended; active.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("executable", "http://hl7.org/fhir/contract-status"), Description("Executable")]
      Executable,
      /// <summary>
      /// Contract is activated for period stipulated when both the Grantor and Grantee have signed it. Usage: Required state for normal completion of contracting activity.  Precedence Order = 6. Comparable FHIR and v.3 status codes: accepted; completed.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("executed", "http://hl7.org/fhir/contract-status"), Description("Executed")]
      Executed,
      /// <summary>
      /// Contract execution is suspended while either or both the Grantor and Grantee propose and consider new or revised contract provisions. I.e., where the party which has not signed proposes changes to the terms.  E .g., a life insurer declines to agree to the signed application because the life insurer has evidence that the applicant, who asserted to being younger or a non-smoker to get a lower premium rate - but offers instead to agree to a higher premium based on the applicants actual age or smoking status. Usage: Optional contract activity between executable and executed state. Precedence Order = 4. Comparable FHIR and v.3 status codes: in progress; review; held.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("negotiable", "http://hl7.org/fhir/contract-status"), Description("Negotiable")]
      Negotiable,
      /// <summary>
      /// Contract is a proposal by either the Grantor or the Grantee. Aka - A Contract hard copy or electronic 'template','form' or 'application'. E.g., health insurance application; consent directive form. Usage: Beginning of contract negotiation, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 2. Comparable FHIR and v.3 status codes: requested; new.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("offered", "http://hl7.org/fhir/contract-status"), Description("Offered")]
      Offered,
      /// <summary>
      /// Contract template is available as the basis for an application or offer by the Grantor or Grantee. E.g., health insurance policy; consent directive policy.  Usage: Required initial contract activity, which may have been completed as a precondition because used for 0..* contracts. Precedence Order = 1. Comparable FHIR and v.3 status codes: proposed; intended.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("policy", "http://hl7.org/fhir/contract-status"), Description("Policy")]
      Policy,
      /// <summary>
      ///  Execution of the Contract is not completed because either or both the Grantor and Grantee decline to accept some or all of the contract provisions. Usage: Optional contract activity between executable and abnormal termination. Precedence Order = 5. Comparable FHIR and v.3 status codes:  stopped; cancelled.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("rejected", "http://hl7.org/fhir/contract-status"), Description("Rejected")]
      Rejected,
      /// <summary>
      /// Beginning of a successor Contract at the termination of predecessor Contract lifecycle. Usage: Follows termination of a preceding Contract that has reached its expiry date. Precedence Order = 13. Comparable FHIR and v.3 status codes: superseded.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("renewed", "http://hl7.org/fhir/contract-status"), Description("Renewed")]
      Renewed,
      /// <summary>
      /// A Contract that is rescinded.  May be required prior to replacing with an updated Contract. Comparable FHIR and v.3 status codes: nullified.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("revoked", "http://hl7.org/fhir/contract-status"), Description("Revoked")]
      Revoked,
      /// <summary>
      /// Contract is reactivated after being pended because of faulty execution. *E.g., competency of the signer(s), or where the policy is substantially different from and did not accompany the application/form so that the applicant could not compare them. Aka - ''reactivated''. Usage: Optional stage where a pended contract is reactivated. Precedence Order = 8. Comparable FHIR and v.3 status codes: reactivated.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("resolved", "http://hl7.org/fhir/contract-status"), Description("Resolved")]
      Resolved,
      /// <summary>
      /// Contract reaches its expiry date.Â It may or may not be renewed or renegotiated. Usage: Normal end of contract period. Precedence Order = 12. Comparable FHIR and v.3 status codes: Obsoleted.
      /// (system: http://hl7.org/fhir/contract-status)
      /// </summary>
      [EnumLiteral("terminated", "http://hl7.org/fhir/contract-status"), Description("Terminated")]
      Terminated,
    }

    /// <summary>
    /// Entity being ascribed responsibility
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#Agent", IsNestedType=true)]
    public partial class AgentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#Agent"; } }

      /// <summary>
      /// Contract Agent Type
      /// </summary>
      [FhirElement("actor", Order=40)]
      [CLSCompliant(false)]
      [References("Contract","Device","Group","Location","Organization","Patient","Practitioner","RelatedPerson","Substance")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      /// <summary>
      /// Role type of the agent
      /// </summary>
      [FhirElement("role", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Role
      {
        get { if(_Role==null) _Role = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Role;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AgentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        if(Role != null) dest.Role = new List<Hl7.Fhir.Model.CodeableConcept>(Role.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AgentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AgentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AgentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Actor != null) yield return Actor;
          foreach (var elem in Role) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Actor != null) yield return new ElementValue("actor", Actor);
          foreach (var elem in Role) { if (elem != null) yield return new ElementValue("role", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "actor":
            value = Actor;
            return Actor is not null;
          case "role":
            value = Role;
            return Role?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
        if (Role?.Any() == true) yield return new KeyValuePair<string,object>("role",Role);
      }

    }

    /// <summary>
    /// Contract Signatory
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#Signatory", IsNestedType=true)]
    public partial class SignatoryComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#Signatory"; } }

      /// <summary>
      /// Contract Signatory Role
      /// </summary>
      [FhirElement("type", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.Coding _Type;

      /// <summary>
      /// Contract Signatory Party
      /// </summary>
      [FhirElement("party", Order=50)]
      [CLSCompliant(false)]
      [References("Organization","Patient","Practitioner","RelatedPerson")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Party
      {
        get { return _Party; }
        set { _Party = value; OnPropertyChanged("Party"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Party;

      /// <summary>
      /// Contract Documentation Signature
      /// </summary>
      [FhirElement("signature", Order=60)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Signature> Signature
      {
        get { if(_Signature==null) _Signature = new List<Hl7.Fhir.Model.Signature>(); return _Signature; }
        set { _Signature = value; OnPropertyChanged("Signature"); }
      }

      private List<Hl7.Fhir.Model.Signature> _Signature;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SignatoryComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.Coding)Type.DeepCopy();
        if(Party != null) dest.Party = (Hl7.Fhir.Model.ResourceReference)Party.DeepCopy();
        if(Signature != null) dest.Signature = new List<Hl7.Fhir.Model.Signature>(Signature.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SignatoryComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SignatoryComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(Party, otherT.Party)) return false;
        if( !DeepComparable.Matches(Signature, otherT.Signature)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SignatoryComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(Party, otherT.Party)) return false;
        if( !DeepComparable.IsExactly(Signature, otherT.Signature)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (Party != null) yield return Party;
          foreach (var elem in Signature) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (Party != null) yield return new ElementValue("party", Party);
          foreach (var elem in Signature) { if (elem != null) yield return new ElementValue("signature", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "party":
            value = Party;
            return Party is not null;
          case "signature":
            value = Signature;
            return Signature?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (Party is not null) yield return new KeyValuePair<string,object>("party",Party);
        if (Signature?.Any() == true) yield return new KeyValuePair<string,object>("signature",Signature);
      }

    }

    /// <summary>
    /// Contract Valued Item List
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#ValuedItem", IsNestedType=true)]
    public partial class ValuedItemComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#ValuedItem"; } }

      /// <summary>
      /// Contract Valued Item Type
      /// </summary>
      [FhirElement("entity", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Resource")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Entity
      {
        get { return _Entity; }
        set { _Entity = value; OnPropertyChanged("Entity"); }
      }

      private Hl7.Fhir.Model.DataType _Entity;

      /// <summary>
      /// Contract Valued Item Number
      /// </summary>
      [FhirElement("identifier", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// Contract Valued Item Effective Tiem
      /// </summary>
      [FhirElement("effectiveTime", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime EffectiveTimeElement
      {
        get { return _EffectiveTimeElement; }
        set { _EffectiveTimeElement = value; OnPropertyChanged("EffectiveTimeElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _EffectiveTimeElement;

      /// <summary>
      /// Contract Valued Item Effective Tiem
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string EffectiveTime
      {
        get { return EffectiveTimeElement != null ? EffectiveTimeElement.Value : null; }
        set
        {
          if (value == null)
            EffectiveTimeElement = null;
          else
            EffectiveTimeElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("EffectiveTime");
        }
      }

      /// <summary>
      /// Count of Contract Valued Items
      /// </summary>
      [FhirElement("quantity", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Contract Valued Item fee, charge, or cost
      /// </summary>
      [FhirElement("unitPrice", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Contract Valued Item Price Scaling Factor
      /// </summary>
      [FhirElement("factor", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Contract Valued Item Price Scaling Factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Contract Valued Item Difficulty Scaling Factor
      /// </summary>
      [FhirElement("points", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal PointsElement
      {
        get { return _PointsElement; }
        set { _PointsElement = value; OnPropertyChanged("PointsElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _PointsElement;

      /// <summary>
      /// Contract Valued Item Difficulty Scaling Factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Points
      {
        get { return PointsElement != null ? PointsElement.Value : null; }
        set
        {
          if (value == null)
            PointsElement = null;
          else
            PointsElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Points");
        }
      }

      /// <summary>
      /// Total Contract Valued Item Value
      /// </summary>
      [FhirElement("net", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ValuedItemComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Entity != null) dest.Entity = (Hl7.Fhir.Model.DataType)Entity.DeepCopy();
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(EffectiveTimeElement != null) dest.EffectiveTimeElement = (Hl7.Fhir.Model.FhirDateTime)EffectiveTimeElement.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(PointsElement != null) dest.PointsElement = (Hl7.Fhir.Model.FhirDecimal)PointsElement.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ValuedItemComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ValuedItemComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Entity, otherT.Entity)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(EffectiveTimeElement, otherT.EffectiveTimeElement)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(PointsElement, otherT.PointsElement)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ValuedItemComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Entity, otherT.Entity)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(EffectiveTimeElement, otherT.EffectiveTimeElement)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(PointsElement, otherT.PointsElement)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Entity != null) yield return Entity;
          if (Identifier != null) yield return Identifier;
          if (EffectiveTimeElement != null) yield return EffectiveTimeElement;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (PointsElement != null) yield return PointsElement;
          if (Net != null) yield return Net;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Entity != null) yield return new ElementValue("entity", Entity);
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (EffectiveTimeElement != null) yield return new ElementValue("effectiveTime", EffectiveTimeElement);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (PointsElement != null) yield return new ElementValue("points", PointsElement);
          if (Net != null) yield return new ElementValue("net", Net);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "entity":
            value = Entity;
            return Entity is not null;
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "effectiveTime":
            value = EffectiveTimeElement;
            return EffectiveTimeElement is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "points":
            value = PointsElement;
            return PointsElement is not null;
          case "net":
            value = Net;
            return Net is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Entity is not null) yield return new KeyValuePair<string,object>("entity",Entity);
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (EffectiveTimeElement is not null) yield return new KeyValuePair<string,object>("effectiveTime",EffectiveTimeElement);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (PointsElement is not null) yield return new KeyValuePair<string,object>("points",PointsElement);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
      }

    }

    /// <summary>
    /// Contract Term List
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#Term", IsNestedType=true)]
    public partial class TermComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#Term"; } }

      /// <summary>
      /// Contract Term Number
      /// </summary>
      [FhirElement("identifier", InSummary=true, Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// Contract Term Issue Date Time
      /// </summary>
      [FhirElement("issued", InSummary=true, Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime IssuedElement
      {
        get { return _IssuedElement; }
        set { _IssuedElement = value; OnPropertyChanged("IssuedElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _IssuedElement;

      /// <summary>
      /// Contract Term Issue Date Time
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Issued
      {
        get { return IssuedElement != null ? IssuedElement.Value : null; }
        set
        {
          if (value == null)
            IssuedElement = null;
          else
            IssuedElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("Issued");
        }
      }

      /// <summary>
      /// Contract Term Effective Time
      /// </summary>
      [FhirElement("applies", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.Period Applies
      {
        get { return _Applies; }
        set { _Applies = value; OnPropertyChanged("Applies"); }
      }

      private Hl7.Fhir.Model.Period _Applies;

      /// <summary>
      /// Contract Term Type or Form
      /// </summary>
      [FhirElement("type", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _Type;

      /// <summary>
      /// Contract Term Type specific classification
      /// </summary>
      [FhirElement("subType", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.CodeableConcept SubType
      {
        get { return _SubType; }
        set { _SubType = value; OnPropertyChanged("SubType"); }
      }

      private Hl7.Fhir.Model.CodeableConcept _SubType;

      /// <summary>
      /// Context of the Contract term
      /// </summary>
      [FhirElement("topic", InSummary=true, Order=90)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Topic
      {
        get { if(_Topic==null) _Topic = new List<Hl7.Fhir.Model.ResourceReference>(); return _Topic; }
        set { _Topic = value; OnPropertyChanged("Topic"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Topic;

      /// <summary>
      /// Contract Term Activity
      /// </summary>
      [FhirElement("action", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Action
      {
        get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Action;

      /// <summary>
      /// Purpose for the Contract Term Action
      /// </summary>
      [FhirElement("actionReason", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> ActionReason
      {
        get { if(_ActionReason==null) _ActionReason = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ActionReason; }
        set { _ActionReason = value; OnPropertyChanged("ActionReason"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _ActionReason;

      /// <summary>
      /// Security Labels that define affected terms
      /// </summary>
      [FhirElement("securityLabel", InSummary=true, Order=120)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Coding> SecurityLabel
      {
        get { if(_SecurityLabel==null) _SecurityLabel = new List<Hl7.Fhir.Model.Coding>(); return _SecurityLabel; }
        set { _SecurityLabel = value; OnPropertyChanged("SecurityLabel"); }
      }

      private List<Hl7.Fhir.Model.Coding> _SecurityLabel;

      /// <summary>
      /// Contract Term Agent List
      /// </summary>
      [FhirElement("agent", Order=130)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Contract.TermAgentComponent> Agent
      {
        get { if(_Agent==null) _Agent = new List<Hl7.Fhir.Model.Contract.TermAgentComponent>(); return _Agent; }
        set { _Agent = value; OnPropertyChanged("Agent"); }
      }

      private List<Hl7.Fhir.Model.Contract.TermAgentComponent> _Agent;

      /// <summary>
      /// Human readable Contract term text
      /// </summary>
      [FhirElement("text", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextElement
      {
        get { return _TextElement; }
        set { _TextElement = value; OnPropertyChanged("TextElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextElement;

      /// <summary>
      /// Human readable Contract term text
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Text
      {
        get { return TextElement != null ? TextElement.Value : null; }
        set
        {
          if (value == null)
            TextElement = null;
          else
            TextElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Text");
        }
      }

      /// <summary>
      /// Contract Term Valued Item List
      /// </summary>
      [FhirElement("valuedItem", Order=150)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Contract.TermValuedItemComponent> ValuedItem
      {
        get { if(_ValuedItem==null) _ValuedItem = new List<Hl7.Fhir.Model.Contract.TermValuedItemComponent>(); return _ValuedItem; }
        set { _ValuedItem = value; OnPropertyChanged("ValuedItem"); }
      }

      private List<Hl7.Fhir.Model.Contract.TermValuedItemComponent> _ValuedItem;

      /// <summary>
      /// Nested Contract Term Group
      /// </summary>
      [FhirElement("group", Order=160)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Contract.TermComponent> Group
      {
        get { if(_Group==null) _Group = new List<Hl7.Fhir.Model.Contract.TermComponent>(); return _Group; }
        set { _Group = value; OnPropertyChanged("Group"); }
      }

      private List<Hl7.Fhir.Model.Contract.TermComponent> _Group;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TermComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(IssuedElement != null) dest.IssuedElement = (Hl7.Fhir.Model.FhirDateTime)IssuedElement.DeepCopy();
        if(Applies != null) dest.Applies = (Hl7.Fhir.Model.Period)Applies.DeepCopy();
        if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
        if(SubType != null) dest.SubType = (Hl7.Fhir.Model.CodeableConcept)SubType.DeepCopy();
        if(Topic != null) dest.Topic = new List<Hl7.Fhir.Model.ResourceReference>(Topic.DeepCopy());
        if(Action != null) dest.Action = new List<Hl7.Fhir.Model.CodeableConcept>(Action.DeepCopy());
        if(ActionReason != null) dest.ActionReason = new List<Hl7.Fhir.Model.CodeableConcept>(ActionReason.DeepCopy());
        if(SecurityLabel != null) dest.SecurityLabel = new List<Hl7.Fhir.Model.Coding>(SecurityLabel.DeepCopy());
        if(Agent != null) dest.Agent = new List<Hl7.Fhir.Model.Contract.TermAgentComponent>(Agent.DeepCopy());
        if(TextElement != null) dest.TextElement = (Hl7.Fhir.Model.FhirString)TextElement.DeepCopy();
        if(ValuedItem != null) dest.ValuedItem = new List<Hl7.Fhir.Model.Contract.TermValuedItemComponent>(ValuedItem.DeepCopy());
        if(Group != null) dest.Group = new List<Hl7.Fhir.Model.Contract.TermComponent>(Group.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TermComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TermComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(IssuedElement, otherT.IssuedElement)) return false;
        if( !DeepComparable.Matches(Applies, otherT.Applies)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(SubType, otherT.SubType)) return false;
        if( !DeepComparable.Matches(Topic, otherT.Topic)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;
        if( !DeepComparable.Matches(ActionReason, otherT.ActionReason)) return false;
        if( !DeepComparable.Matches(SecurityLabel, otherT.SecurityLabel)) return false;
        if( !DeepComparable.Matches(Agent, otherT.Agent)) return false;
        if( !DeepComparable.Matches(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.Matches(ValuedItem, otherT.ValuedItem)) return false;
        if( !DeepComparable.Matches(Group, otherT.Group)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TermComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(IssuedElement, otherT.IssuedElement)) return false;
        if( !DeepComparable.IsExactly(Applies, otherT.Applies)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(SubType, otherT.SubType)) return false;
        if( !DeepComparable.IsExactly(Topic, otherT.Topic)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;
        if( !DeepComparable.IsExactly(ActionReason, otherT.ActionReason)) return false;
        if( !DeepComparable.IsExactly(SecurityLabel, otherT.SecurityLabel)) return false;
        if( !DeepComparable.IsExactly(Agent, otherT.Agent)) return false;
        if( !DeepComparable.IsExactly(TextElement, otherT.TextElement)) return false;
        if( !DeepComparable.IsExactly(ValuedItem, otherT.ValuedItem)) return false;
        if( !DeepComparable.IsExactly(Group, otherT.Group)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Identifier != null) yield return Identifier;
          if (IssuedElement != null) yield return IssuedElement;
          if (Applies != null) yield return Applies;
          if (Type != null) yield return Type;
          if (SubType != null) yield return SubType;
          foreach (var elem in Topic) { if (elem != null) yield return elem; }
          foreach (var elem in Action) { if (elem != null) yield return elem; }
          foreach (var elem in ActionReason) { if (elem != null) yield return elem; }
          foreach (var elem in SecurityLabel) { if (elem != null) yield return elem; }
          foreach (var elem in Agent) { if (elem != null) yield return elem; }
          if (TextElement != null) yield return TextElement;
          foreach (var elem in ValuedItem) { if (elem != null) yield return elem; }
          foreach (var elem in Group) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (IssuedElement != null) yield return new ElementValue("issued", IssuedElement);
          if (Applies != null) yield return new ElementValue("applies", Applies);
          if (Type != null) yield return new ElementValue("type", Type);
          if (SubType != null) yield return new ElementValue("subType", SubType);
          foreach (var elem in Topic) { if (elem != null) yield return new ElementValue("topic", elem); }
          foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
          foreach (var elem in ActionReason) { if (elem != null) yield return new ElementValue("actionReason", elem); }
          foreach (var elem in SecurityLabel) { if (elem != null) yield return new ElementValue("securityLabel", elem); }
          foreach (var elem in Agent) { if (elem != null) yield return new ElementValue("agent", elem); }
          if (TextElement != null) yield return new ElementValue("text", TextElement);
          foreach (var elem in ValuedItem) { if (elem != null) yield return new ElementValue("valuedItem", elem); }
          foreach (var elem in Group) { if (elem != null) yield return new ElementValue("group", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "issued":
            value = IssuedElement;
            return IssuedElement is not null;
          case "applies":
            value = Applies;
            return Applies is not null;
          case "type":
            value = Type;
            return Type is not null;
          case "subType":
            value = SubType;
            return SubType is not null;
          case "topic":
            value = Topic;
            return Topic?.Any() == true;
          case "action":
            value = Action;
            return Action?.Any() == true;
          case "actionReason":
            value = ActionReason;
            return ActionReason?.Any() == true;
          case "securityLabel":
            value = SecurityLabel;
            return SecurityLabel?.Any() == true;
          case "agent":
            value = Agent;
            return Agent?.Any() == true;
          case "text":
            value = TextElement;
            return TextElement is not null;
          case "valuedItem":
            value = ValuedItem;
            return ValuedItem?.Any() == true;
          case "group":
            value = Group;
            return Group?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (IssuedElement is not null) yield return new KeyValuePair<string,object>("issued",IssuedElement);
        if (Applies is not null) yield return new KeyValuePair<string,object>("applies",Applies);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (SubType is not null) yield return new KeyValuePair<string,object>("subType",SubType);
        if (Topic?.Any() == true) yield return new KeyValuePair<string,object>("topic",Topic);
        if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
        if (ActionReason?.Any() == true) yield return new KeyValuePair<string,object>("actionReason",ActionReason);
        if (SecurityLabel?.Any() == true) yield return new KeyValuePair<string,object>("securityLabel",SecurityLabel);
        if (Agent?.Any() == true) yield return new KeyValuePair<string,object>("agent",Agent);
        if (TextElement is not null) yield return new KeyValuePair<string,object>("text",TextElement);
        if (ValuedItem?.Any() == true) yield return new KeyValuePair<string,object>("valuedItem",ValuedItem);
        if (Group?.Any() == true) yield return new KeyValuePair<string,object>("group",Group);
      }

    }

    /// <summary>
    /// Contract Term Agent List
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#TermAgent", IsNestedType=true)]
    public partial class TermAgentComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#TermAgent"; } }

      /// <summary>
      /// Contract Term Agent Subject
      /// </summary>
      [FhirElement("actor", Order=40)]
      [CLSCompliant(false)]
      [References("Contract","Device","Group","Location","Organization","Patient","Practitioner","RelatedPerson","Substance")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Actor
      {
        get { return _Actor; }
        set { _Actor = value; OnPropertyChanged("Actor"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Actor;

      /// <summary>
      /// Type of the Contract Term Agent
      /// </summary>
      [FhirElement("role", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Role
      {
        get { if(_Role==null) _Role = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Role; }
        set { _Role = value; OnPropertyChanged("Role"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Role;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TermAgentComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Actor != null) dest.Actor = (Hl7.Fhir.Model.ResourceReference)Actor.DeepCopy();
        if(Role != null) dest.Role = new List<Hl7.Fhir.Model.CodeableConcept>(Role.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TermAgentComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TermAgentComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Actor, otherT.Actor)) return false;
        if( !DeepComparable.Matches(Role, otherT.Role)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TermAgentComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Actor, otherT.Actor)) return false;
        if( !DeepComparable.IsExactly(Role, otherT.Role)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Actor != null) yield return Actor;
          foreach (var elem in Role) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Actor != null) yield return new ElementValue("actor", Actor);
          foreach (var elem in Role) { if (elem != null) yield return new ElementValue("role", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "actor":
            value = Actor;
            return Actor is not null;
          case "role":
            value = Role;
            return Role?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Actor is not null) yield return new KeyValuePair<string,object>("actor",Actor);
        if (Role?.Any() == true) yield return new KeyValuePair<string,object>("role",Role);
      }

    }

    /// <summary>
    /// Contract Term Valued Item List
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#TermValuedItem", IsNestedType=true)]
    public partial class TermValuedItemComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#TermValuedItem"; } }

      /// <summary>
      /// Contract Term Valued Item Type
      /// </summary>
      [FhirElement("entity", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Resource")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Entity
      {
        get { return _Entity; }
        set { _Entity = value; OnPropertyChanged("Entity"); }
      }

      private Hl7.Fhir.Model.DataType _Entity;

      /// <summary>
      /// Contract Term Valued Item Number
      /// </summary>
      [FhirElement("identifier", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.Identifier Identifier
      {
        get { return _Identifier; }
        set { _Identifier = value; OnPropertyChanged("Identifier"); }
      }

      private Hl7.Fhir.Model.Identifier _Identifier;

      /// <summary>
      /// Contract Term Valued Item Effective Tiem
      /// </summary>
      [FhirElement("effectiveTime", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDateTime EffectiveTimeElement
      {
        get { return _EffectiveTimeElement; }
        set { _EffectiveTimeElement = value; OnPropertyChanged("EffectiveTimeElement"); }
      }

      private Hl7.Fhir.Model.FhirDateTime _EffectiveTimeElement;

      /// <summary>
      /// Contract Term Valued Item Effective Tiem
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string EffectiveTime
      {
        get { return EffectiveTimeElement != null ? EffectiveTimeElement.Value : null; }
        set
        {
          if (value == null)
            EffectiveTimeElement = null;
          else
            EffectiveTimeElement = new Hl7.Fhir.Model.FhirDateTime(value);
          OnPropertyChanged("EffectiveTime");
        }
      }

      /// <summary>
      /// Contract Term Valued Item Count
      /// </summary>
      [FhirElement("quantity", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.Quantity Quantity
      {
        get { return _Quantity; }
        set { _Quantity = value; OnPropertyChanged("Quantity"); }
      }

      private Hl7.Fhir.Model.Quantity _Quantity;

      /// <summary>
      /// Contract Term Valued Item fee, charge, or cost
      /// </summary>
      [FhirElement("unitPrice", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Money UnitPrice
      {
        get { return _UnitPrice; }
        set { _UnitPrice = value; OnPropertyChanged("UnitPrice"); }
      }

      private Hl7.Fhir.Model.Money _UnitPrice;

      /// <summary>
      /// Contract Term Valued Item Price Scaling Factor
      /// </summary>
      [FhirElement("factor", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal FactorElement
      {
        get { return _FactorElement; }
        set { _FactorElement = value; OnPropertyChanged("FactorElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _FactorElement;

      /// <summary>
      /// Contract Term Valued Item Price Scaling Factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Factor
      {
        get { return FactorElement != null ? FactorElement.Value : null; }
        set
        {
          if (value == null)
            FactorElement = null;
          else
            FactorElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Factor");
        }
      }

      /// <summary>
      /// Contract Term Valued Item Difficulty Scaling Factor
      /// </summary>
      [FhirElement("points", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirDecimal PointsElement
      {
        get { return _PointsElement; }
        set { _PointsElement = value; OnPropertyChanged("PointsElement"); }
      }

      private Hl7.Fhir.Model.FhirDecimal _PointsElement;

      /// <summary>
      /// Contract Term Valued Item Difficulty Scaling Factor
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public decimal? Points
      {
        get { return PointsElement != null ? PointsElement.Value : null; }
        set
        {
          if (value == null)
            PointsElement = null;
          else
            PointsElement = new Hl7.Fhir.Model.FhirDecimal(value);
          OnPropertyChanged("Points");
        }
      }

      /// <summary>
      /// Total Contract Term Valued Item Value
      /// </summary>
      [FhirElement("net", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Money Net
      {
        get { return _Net; }
        set { _Net = value; OnPropertyChanged("Net"); }
      }

      private Hl7.Fhir.Model.Money _Net;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TermValuedItemComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Entity != null) dest.Entity = (Hl7.Fhir.Model.DataType)Entity.DeepCopy();
        if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
        if(EffectiveTimeElement != null) dest.EffectiveTimeElement = (Hl7.Fhir.Model.FhirDateTime)EffectiveTimeElement.DeepCopy();
        if(Quantity != null) dest.Quantity = (Hl7.Fhir.Model.Quantity)Quantity.DeepCopy();
        if(UnitPrice != null) dest.UnitPrice = (Hl7.Fhir.Model.Money)UnitPrice.DeepCopy();
        if(FactorElement != null) dest.FactorElement = (Hl7.Fhir.Model.FhirDecimal)FactorElement.DeepCopy();
        if(PointsElement != null) dest.PointsElement = (Hl7.Fhir.Model.FhirDecimal)PointsElement.DeepCopy();
        if(Net != null) dest.Net = (Hl7.Fhir.Model.Money)Net.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TermValuedItemComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TermValuedItemComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Entity, otherT.Entity)) return false;
        if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.Matches(EffectiveTimeElement, otherT.EffectiveTimeElement)) return false;
        if( !DeepComparable.Matches(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.Matches(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.Matches(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.Matches(PointsElement, otherT.PointsElement)) return false;
        if( !DeepComparable.Matches(Net, otherT.Net)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TermValuedItemComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Entity, otherT.Entity)) return false;
        if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
        if( !DeepComparable.IsExactly(EffectiveTimeElement, otherT.EffectiveTimeElement)) return false;
        if( !DeepComparable.IsExactly(Quantity, otherT.Quantity)) return false;
        if( !DeepComparable.IsExactly(UnitPrice, otherT.UnitPrice)) return false;
        if( !DeepComparable.IsExactly(FactorElement, otherT.FactorElement)) return false;
        if( !DeepComparable.IsExactly(PointsElement, otherT.PointsElement)) return false;
        if( !DeepComparable.IsExactly(Net, otherT.Net)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Entity != null) yield return Entity;
          if (Identifier != null) yield return Identifier;
          if (EffectiveTimeElement != null) yield return EffectiveTimeElement;
          if (Quantity != null) yield return Quantity;
          if (UnitPrice != null) yield return UnitPrice;
          if (FactorElement != null) yield return FactorElement;
          if (PointsElement != null) yield return PointsElement;
          if (Net != null) yield return Net;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Entity != null) yield return new ElementValue("entity", Entity);
          if (Identifier != null) yield return new ElementValue("identifier", Identifier);
          if (EffectiveTimeElement != null) yield return new ElementValue("effectiveTime", EffectiveTimeElement);
          if (Quantity != null) yield return new ElementValue("quantity", Quantity);
          if (UnitPrice != null) yield return new ElementValue("unitPrice", UnitPrice);
          if (FactorElement != null) yield return new ElementValue("factor", FactorElement);
          if (PointsElement != null) yield return new ElementValue("points", PointsElement);
          if (Net != null) yield return new ElementValue("net", Net);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "entity":
            value = Entity;
            return Entity is not null;
          case "identifier":
            value = Identifier;
            return Identifier is not null;
          case "effectiveTime":
            value = EffectiveTimeElement;
            return EffectiveTimeElement is not null;
          case "quantity":
            value = Quantity;
            return Quantity is not null;
          case "unitPrice":
            value = UnitPrice;
            return UnitPrice is not null;
          case "factor":
            value = FactorElement;
            return FactorElement is not null;
          case "points":
            value = PointsElement;
            return PointsElement is not null;
          case "net":
            value = Net;
            return Net is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Entity is not null) yield return new KeyValuePair<string,object>("entity",Entity);
        if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
        if (EffectiveTimeElement is not null) yield return new KeyValuePair<string,object>("effectiveTime",EffectiveTimeElement);
        if (Quantity is not null) yield return new KeyValuePair<string,object>("quantity",Quantity);
        if (UnitPrice is not null) yield return new KeyValuePair<string,object>("unitPrice",UnitPrice);
        if (FactorElement is not null) yield return new KeyValuePair<string,object>("factor",FactorElement);
        if (PointsElement is not null) yield return new KeyValuePair<string,object>("points",PointsElement);
        if (Net is not null) yield return new KeyValuePair<string,object>("net",Net);
      }

    }

    /// <summary>
    /// Contract Friendly Language
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#FriendlyLanguage", IsNestedType=true)]
    public partial class FriendlyLanguageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#FriendlyLanguage"; } }

      /// <summary>
      /// Easily comprehended representation of this Contract
      /// </summary>
      [FhirElement("content", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Composition","DocumentReference","QuestionnaireResponse")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Content
      {
        get { return _Content; }
        set { _Content = value; OnPropertyChanged("Content"); }
      }

      private Hl7.Fhir.Model.DataType _Content;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as FriendlyLanguageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Content != null) dest.Content = (Hl7.Fhir.Model.DataType)Content.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new FriendlyLanguageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as FriendlyLanguageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Content, otherT.Content)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as FriendlyLanguageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Content != null) yield return Content;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Content != null) yield return new ElementValue("content", Content);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "content":
            value = Content;
            return Content is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Content is not null) yield return new KeyValuePair<string,object>("content",Content);
      }

    }

    /// <summary>
    /// Contract Legal Language
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#LegalLanguage", IsNestedType=true)]
    public partial class LegalLanguageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#LegalLanguage"; } }

      /// <summary>
      /// Contract Legal Text
      /// </summary>
      [FhirElement("content", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("Composition","DocumentReference","QuestionnaireResponse")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Content
      {
        get { return _Content; }
        set { _Content = value; OnPropertyChanged("Content"); }
      }

      private Hl7.Fhir.Model.DataType _Content;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LegalLanguageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Content != null) dest.Content = (Hl7.Fhir.Model.DataType)Content.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LegalLanguageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LegalLanguageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Content, otherT.Content)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LegalLanguageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Content != null) yield return Content;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Content != null) yield return new ElementValue("content", Content);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "content":
            value = Content;
            return Content is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Content is not null) yield return new KeyValuePair<string,object>("content",Content);
      }

    }

    /// <summary>
    /// Computable Contract Language
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("Contract#ComputableLanguage", IsNestedType=true)]
    public partial class ComputableLanguageComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "Contract#ComputableLanguage"; } }

      /// <summary>
      /// Computable Contract Rules
      /// </summary>
      [FhirElement("content", Order=40, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [References("DocumentReference")]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.ResourceReference))]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.DataType Content
      {
        get { return _Content; }
        set { _Content = value; OnPropertyChanged("Content"); }
      }

      private Hl7.Fhir.Model.DataType _Content;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ComputableLanguageComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Content != null) dest.Content = (Hl7.Fhir.Model.DataType)Content.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ComputableLanguageComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ComputableLanguageComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Content, otherT.Content)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ComputableLanguageComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Content, otherT.Content)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Content != null) yield return Content;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Content != null) yield return new ElementValue("content", Content);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "content":
            value = Content;
            return Content is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Content is not null) yield return new KeyValuePair<string,object>("content",Content);
      }

    }

    /// <summary>
    /// Contract number
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=100)]
    [DeclaredType(Type = typeof(Code))]
    [DataMember]
    public Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes> _StatusElement;

    /// <summary>
    /// amended | appended | cancelled | disputed | entered-in-error | executable | executed | negotiable | offered | policy | rejected | renewed | revoked | resolved | terminated
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.Contract.ContractResourceStatusCodes? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// When this Contract was issued
    /// </summary>
    [FhirElement("issued", InSummary=true, Order=110, FiveWs="when.done")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime IssuedElement
    {
      get { return _IssuedElement; }
      set { _IssuedElement = value; OnPropertyChanged("IssuedElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _IssuedElement;

    /// <summary>
    /// When this Contract was issued
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Issued
    {
      get { return IssuedElement != null ? IssuedElement.Value : null; }
      set
      {
        if (value == null)
          IssuedElement = null;
        else
          IssuedElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Issued");
      }
    }

    /// <summary>
    /// Effective time
    /// </summary>
    [FhirElement("applies", InSummary=true, Order=120)]
    [DataMember]
    public Hl7.Fhir.Model.Period Applies
    {
      get { return _Applies; }
      set { _Applies = value; OnPropertyChanged("Applies"); }
    }

    private Hl7.Fhir.Model.Period _Applies;

    /// <summary>
    /// Contract Target Entity
    /// </summary>
    [FhirElement("subject", InSummary=true, Order=130, FiveWs="who.actor")]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Subject
    {
      get { if(_Subject==null) _Subject = new List<Hl7.Fhir.Model.ResourceReference>(); return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Subject;

    /// <summary>
    /// Context of the Contract
    /// </summary>
    [FhirElement("topic", InSummary=true, Order=140)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Topic
    {
      get { if(_Topic==null) _Topic = new List<Hl7.Fhir.Model.ResourceReference>(); return _Topic; }
      set { _Topic = value; OnPropertyChanged("Topic"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Topic;

    /// <summary>
    /// Authority under which this Contract has standing
    /// </summary>
    [FhirElement("authority", Order=150)]
    [CLSCompliant(false)]
    [References("Organization")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Authority
    {
      get { if(_Authority==null) _Authority = new List<Hl7.Fhir.Model.ResourceReference>(); return _Authority; }
      set { _Authority = value; OnPropertyChanged("Authority"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Authority;

    /// <summary>
    /// Domain in which this Contract applies
    /// </summary>
    [FhirElement("domain", Order=160)]
    [CLSCompliant(false)]
    [References("Location")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Domain
    {
      get { if(_Domain==null) _Domain = new List<Hl7.Fhir.Model.ResourceReference>(); return _Domain; }
      set { _Domain = value; OnPropertyChanged("Domain"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Domain;

    /// <summary>
    /// Type or form
    /// </summary>
    [FhirElement("type", InSummary=true, Order=170)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept Type
    {
      get { return _Type; }
      set { _Type = value; OnPropertyChanged("Type"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _Type;

    /// <summary>
    /// Subtype within the context of type
    /// </summary>
    [FhirElement("subType", InSummary=true, Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> SubType
    {
      get { if(_SubType==null) _SubType = new List<Hl7.Fhir.Model.CodeableConcept>(); return _SubType; }
      set { _SubType = value; OnPropertyChanged("SubType"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _SubType;

    /// <summary>
    /// Action stipulated by this Contract
    /// </summary>
    [FhirElement("action", Order=190)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Action
    {
      get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Action; }
      set { _Action = value; OnPropertyChanged("Action"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Action;

    /// <summary>
    /// Rationale for the stiplulated action
    /// </summary>
    [FhirElement("actionReason", Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> ActionReason
    {
      get { if(_ActionReason==null) _ActionReason = new List<Hl7.Fhir.Model.CodeableConcept>(); return _ActionReason; }
      set { _ActionReason = value; OnPropertyChanged("ActionReason"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _ActionReason;

    /// <summary>
    /// Decision by Grantor
    /// </summary>
    [FhirElement("decisionType", Order=210)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept DecisionType
    {
      get { return _DecisionType; }
      set { _DecisionType = value; OnPropertyChanged("DecisionType"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _DecisionType;

    /// <summary>
    /// Content derived from the basal information
    /// </summary>
    [FhirElement("contentDerivative", Order=220)]
    [DataMember]
    public Hl7.Fhir.Model.CodeableConcept ContentDerivative
    {
      get { return _ContentDerivative; }
      set { _ContentDerivative = value; OnPropertyChanged("ContentDerivative"); }
    }

    private Hl7.Fhir.Model.CodeableConcept _ContentDerivative;

    /// <summary>
    /// Security Labels that define affected resources
    /// </summary>
    [FhirElement("securityLabel", InSummary=true, Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Coding> SecurityLabel
    {
      get { if(_SecurityLabel==null) _SecurityLabel = new List<Hl7.Fhir.Model.Coding>(); return _SecurityLabel; }
      set { _SecurityLabel = value; OnPropertyChanged("SecurityLabel"); }
    }

    private List<Hl7.Fhir.Model.Coding> _SecurityLabel;

    /// <summary>
    /// Entity being ascribed responsibility
    /// </summary>
    [FhirElement("agent", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Contract.AgentComponent> Agent
    {
      get { if(_Agent==null) _Agent = new List<Hl7.Fhir.Model.Contract.AgentComponent>(); return _Agent; }
      set { _Agent = value; OnPropertyChanged("Agent"); }
    }

    private List<Hl7.Fhir.Model.Contract.AgentComponent> _Agent;

    /// <summary>
    /// Contract Signatory
    /// </summary>
    [FhirElement("signer", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Contract.SignatoryComponent> Signer
    {
      get { if(_Signer==null) _Signer = new List<Hl7.Fhir.Model.Contract.SignatoryComponent>(); return _Signer; }
      set { _Signer = value; OnPropertyChanged("Signer"); }
    }

    private List<Hl7.Fhir.Model.Contract.SignatoryComponent> _Signer;

    /// <summary>
    /// Contract Valued Item List
    /// </summary>
    [FhirElement("valuedItem", Order=260)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Contract.ValuedItemComponent> ValuedItem
    {
      get { if(_ValuedItem==null) _ValuedItem = new List<Hl7.Fhir.Model.Contract.ValuedItemComponent>(); return _ValuedItem; }
      set { _ValuedItem = value; OnPropertyChanged("ValuedItem"); }
    }

    private List<Hl7.Fhir.Model.Contract.ValuedItemComponent> _ValuedItem;

    /// <summary>
    /// Contract Term List
    /// </summary>
    [FhirElement("term", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Contract.TermComponent> Term
    {
      get { if(_Term==null) _Term = new List<Hl7.Fhir.Model.Contract.TermComponent>(); return _Term; }
      set { _Term = value; OnPropertyChanged("Term"); }
    }

    private List<Hl7.Fhir.Model.Contract.TermComponent> _Term;

    /// <summary>
    /// Binding Contract
    /// </summary>
    [FhirElement("binding", Order=280, Choice=ChoiceType.DatatypeChoice)]
    [CLSCompliant(false)]
    [References("Composition","DocumentReference","QuestionnaireResponse")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.Attachment),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Binding
    {
      get { return _Binding; }
      set { _Binding = value; OnPropertyChanged("Binding"); }
    }

    private Hl7.Fhir.Model.DataType _Binding;

    /// <summary>
    /// Contract Friendly Language
    /// </summary>
    [FhirElement("friendly", Order=290)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Contract.FriendlyLanguageComponent> Friendly
    {
      get { if(_Friendly==null) _Friendly = new List<Hl7.Fhir.Model.Contract.FriendlyLanguageComponent>(); return _Friendly; }
      set { _Friendly = value; OnPropertyChanged("Friendly"); }
    }

    private List<Hl7.Fhir.Model.Contract.FriendlyLanguageComponent> _Friendly;

    /// <summary>
    /// Contract Legal Language
    /// </summary>
    [FhirElement("legal", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Contract.LegalLanguageComponent> Legal
    {
      get { if(_Legal==null) _Legal = new List<Hl7.Fhir.Model.Contract.LegalLanguageComponent>(); return _Legal; }
      set { _Legal = value; OnPropertyChanged("Legal"); }
    }

    private List<Hl7.Fhir.Model.Contract.LegalLanguageComponent> _Legal;

    /// <summary>
    /// Computable Contract Language
    /// </summary>
    [FhirElement("rule", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Contract.ComputableLanguageComponent> Rule
    {
      get { if(_Rule==null) _Rule = new List<Hl7.Fhir.Model.Contract.ComputableLanguageComponent>(); return _Rule; }
      set { _Rule = value; OnPropertyChanged("Rule"); }
    }

    private List<Hl7.Fhir.Model.Contract.ComputableLanguageComponent> _Rule;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as Contract;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.Contract.ContractResourceStatusCodes>)StatusElement.DeepCopy();
      if(IssuedElement != null) dest.IssuedElement = (Hl7.Fhir.Model.FhirDateTime)IssuedElement.DeepCopy();
      if(Applies != null) dest.Applies = (Hl7.Fhir.Model.Period)Applies.DeepCopy();
      if(Subject != null) dest.Subject = new List<Hl7.Fhir.Model.ResourceReference>(Subject.DeepCopy());
      if(Topic != null) dest.Topic = new List<Hl7.Fhir.Model.ResourceReference>(Topic.DeepCopy());
      if(Authority != null) dest.Authority = new List<Hl7.Fhir.Model.ResourceReference>(Authority.DeepCopy());
      if(Domain != null) dest.Domain = new List<Hl7.Fhir.Model.ResourceReference>(Domain.DeepCopy());
      if(Type != null) dest.Type = (Hl7.Fhir.Model.CodeableConcept)Type.DeepCopy();
      if(SubType != null) dest.SubType = new List<Hl7.Fhir.Model.CodeableConcept>(SubType.DeepCopy());
      if(Action != null) dest.Action = new List<Hl7.Fhir.Model.CodeableConcept>(Action.DeepCopy());
      if(ActionReason != null) dest.ActionReason = new List<Hl7.Fhir.Model.CodeableConcept>(ActionReason.DeepCopy());
      if(DecisionType != null) dest.DecisionType = (Hl7.Fhir.Model.CodeableConcept)DecisionType.DeepCopy();
      if(ContentDerivative != null) dest.ContentDerivative = (Hl7.Fhir.Model.CodeableConcept)ContentDerivative.DeepCopy();
      if(SecurityLabel != null) dest.SecurityLabel = new List<Hl7.Fhir.Model.Coding>(SecurityLabel.DeepCopy());
      if(Agent != null) dest.Agent = new List<Hl7.Fhir.Model.Contract.AgentComponent>(Agent.DeepCopy());
      if(Signer != null) dest.Signer = new List<Hl7.Fhir.Model.Contract.SignatoryComponent>(Signer.DeepCopy());
      if(ValuedItem != null) dest.ValuedItem = new List<Hl7.Fhir.Model.Contract.ValuedItemComponent>(ValuedItem.DeepCopy());
      if(Term != null) dest.Term = new List<Hl7.Fhir.Model.Contract.TermComponent>(Term.DeepCopy());
      if(Binding != null) dest.Binding = (Hl7.Fhir.Model.DataType)Binding.DeepCopy();
      if(Friendly != null) dest.Friendly = new List<Hl7.Fhir.Model.Contract.FriendlyLanguageComponent>(Friendly.DeepCopy());
      if(Legal != null) dest.Legal = new List<Hl7.Fhir.Model.Contract.LegalLanguageComponent>(Legal.DeepCopy());
      if(Rule != null) dest.Rule = new List<Hl7.Fhir.Model.Contract.ComputableLanguageComponent>(Rule.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new Contract());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as Contract;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(IssuedElement, otherT.IssuedElement)) return false;
      if( !DeepComparable.Matches(Applies, otherT.Applies)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Topic, otherT.Topic)) return false;
      if( !DeepComparable.Matches(Authority, otherT.Authority)) return false;
      if( !DeepComparable.Matches(Domain, otherT.Domain)) return false;
      if( !DeepComparable.Matches(Type, otherT.Type)) return false;
      if( !DeepComparable.Matches(SubType, otherT.SubType)) return false;
      if( !DeepComparable.Matches(Action, otherT.Action)) return false;
      if( !DeepComparable.Matches(ActionReason, otherT.ActionReason)) return false;
      if( !DeepComparable.Matches(DecisionType, otherT.DecisionType)) return false;
      if( !DeepComparable.Matches(ContentDerivative, otherT.ContentDerivative)) return false;
      if( !DeepComparable.Matches(SecurityLabel, otherT.SecurityLabel)) return false;
      if( !DeepComparable.Matches(Agent, otherT.Agent)) return false;
      if( !DeepComparable.Matches(Signer, otherT.Signer)) return false;
      if( !DeepComparable.Matches(ValuedItem, otherT.ValuedItem)) return false;
      if( !DeepComparable.Matches(Term, otherT.Term)) return false;
      if( !DeepComparable.Matches(Binding, otherT.Binding)) return false;
      if( !DeepComparable.Matches(Friendly, otherT.Friendly)) return false;
      if( !DeepComparable.Matches(Legal, otherT.Legal)) return false;
      if( !DeepComparable.Matches(Rule, otherT.Rule)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as Contract;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(IssuedElement, otherT.IssuedElement)) return false;
      if( !DeepComparable.IsExactly(Applies, otherT.Applies)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Topic, otherT.Topic)) return false;
      if( !DeepComparable.IsExactly(Authority, otherT.Authority)) return false;
      if( !DeepComparable.IsExactly(Domain, otherT.Domain)) return false;
      if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
      if( !DeepComparable.IsExactly(SubType, otherT.SubType)) return false;
      if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;
      if( !DeepComparable.IsExactly(ActionReason, otherT.ActionReason)) return false;
      if( !DeepComparable.IsExactly(DecisionType, otherT.DecisionType)) return false;
      if( !DeepComparable.IsExactly(ContentDerivative, otherT.ContentDerivative)) return false;
      if( !DeepComparable.IsExactly(SecurityLabel, otherT.SecurityLabel)) return false;
      if( !DeepComparable.IsExactly(Agent, otherT.Agent)) return false;
      if( !DeepComparable.IsExactly(Signer, otherT.Signer)) return false;
      if( !DeepComparable.IsExactly(ValuedItem, otherT.ValuedItem)) return false;
      if( !DeepComparable.IsExactly(Term, otherT.Term)) return false;
      if( !DeepComparable.IsExactly(Binding, otherT.Binding)) return false;
      if( !DeepComparable.IsExactly(Friendly, otherT.Friendly)) return false;
      if( !DeepComparable.IsExactly(Legal, otherT.Legal)) return false;
      if( !DeepComparable.IsExactly(Rule, otherT.Rule)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (Identifier != null) yield return Identifier;
        if (StatusElement != null) yield return StatusElement;
        if (IssuedElement != null) yield return IssuedElement;
        if (Applies != null) yield return Applies;
        foreach (var elem in Subject) { if (elem != null) yield return elem; }
        foreach (var elem in Topic) { if (elem != null) yield return elem; }
        foreach (var elem in Authority) { if (elem != null) yield return elem; }
        foreach (var elem in Domain) { if (elem != null) yield return elem; }
        if (Type != null) yield return Type;
        foreach (var elem in SubType) { if (elem != null) yield return elem; }
        foreach (var elem in Action) { if (elem != null) yield return elem; }
        foreach (var elem in ActionReason) { if (elem != null) yield return elem; }
        if (DecisionType != null) yield return DecisionType;
        if (ContentDerivative != null) yield return ContentDerivative;
        foreach (var elem in SecurityLabel) { if (elem != null) yield return elem; }
        foreach (var elem in Agent) { if (elem != null) yield return elem; }
        foreach (var elem in Signer) { if (elem != null) yield return elem; }
        foreach (var elem in ValuedItem) { if (elem != null) yield return elem; }
        foreach (var elem in Term) { if (elem != null) yield return elem; }
        if (Binding != null) yield return Binding;
        foreach (var elem in Friendly) { if (elem != null) yield return elem; }
        foreach (var elem in Legal) { if (elem != null) yield return elem; }
        foreach (var elem in Rule) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (IssuedElement != null) yield return new ElementValue("issued", IssuedElement);
        if (Applies != null) yield return new ElementValue("applies", Applies);
        foreach (var elem in Subject) { if (elem != null) yield return new ElementValue("subject", elem); }
        foreach (var elem in Topic) { if (elem != null) yield return new ElementValue("topic", elem); }
        foreach (var elem in Authority) { if (elem != null) yield return new ElementValue("authority", elem); }
        foreach (var elem in Domain) { if (elem != null) yield return new ElementValue("domain", elem); }
        if (Type != null) yield return new ElementValue("type", Type);
        foreach (var elem in SubType) { if (elem != null) yield return new ElementValue("subType", elem); }
        foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
        foreach (var elem in ActionReason) { if (elem != null) yield return new ElementValue("actionReason", elem); }
        if (DecisionType != null) yield return new ElementValue("decisionType", DecisionType);
        if (ContentDerivative != null) yield return new ElementValue("contentDerivative", ContentDerivative);
        foreach (var elem in SecurityLabel) { if (elem != null) yield return new ElementValue("securityLabel", elem); }
        foreach (var elem in Agent) { if (elem != null) yield return new ElementValue("agent", elem); }
        foreach (var elem in Signer) { if (elem != null) yield return new ElementValue("signer", elem); }
        foreach (var elem in ValuedItem) { if (elem != null) yield return new ElementValue("valuedItem", elem); }
        foreach (var elem in Term) { if (elem != null) yield return new ElementValue("term", elem); }
        if (Binding != null) yield return new ElementValue("binding", Binding);
        foreach (var elem in Friendly) { if (elem != null) yield return new ElementValue("friendly", elem); }
        foreach (var elem in Legal) { if (elem != null) yield return new ElementValue("legal", elem); }
        foreach (var elem in Rule) { if (elem != null) yield return new ElementValue("rule", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "issued":
          value = IssuedElement;
          return IssuedElement is not null;
        case "applies":
          value = Applies;
          return Applies is not null;
        case "subject":
          value = Subject;
          return Subject?.Any() == true;
        case "topic":
          value = Topic;
          return Topic?.Any() == true;
        case "authority":
          value = Authority;
          return Authority?.Any() == true;
        case "domain":
          value = Domain;
          return Domain?.Any() == true;
        case "type":
          value = Type;
          return Type is not null;
        case "subType":
          value = SubType;
          return SubType?.Any() == true;
        case "action":
          value = Action;
          return Action?.Any() == true;
        case "actionReason":
          value = ActionReason;
          return ActionReason?.Any() == true;
        case "decisionType":
          value = DecisionType;
          return DecisionType is not null;
        case "contentDerivative":
          value = ContentDerivative;
          return ContentDerivative is not null;
        case "securityLabel":
          value = SecurityLabel;
          return SecurityLabel?.Any() == true;
        case "agent":
          value = Agent;
          return Agent?.Any() == true;
        case "signer":
          value = Signer;
          return Signer?.Any() == true;
        case "valuedItem":
          value = ValuedItem;
          return ValuedItem?.Any() == true;
        case "term":
          value = Term;
          return Term?.Any() == true;
        case "binding":
          value = Binding;
          return Binding is not null;
        case "friendly":
          value = Friendly;
          return Friendly?.Any() == true;
        case "legal":
          value = Legal;
          return Legal?.Any() == true;
        case "rule":
          value = Rule;
          return Rule?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (IssuedElement is not null) yield return new KeyValuePair<string,object>("issued",IssuedElement);
      if (Applies is not null) yield return new KeyValuePair<string,object>("applies",Applies);
      if (Subject?.Any() == true) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Topic?.Any() == true) yield return new KeyValuePair<string,object>("topic",Topic);
      if (Authority?.Any() == true) yield return new KeyValuePair<string,object>("authority",Authority);
      if (Domain?.Any() == true) yield return new KeyValuePair<string,object>("domain",Domain);
      if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
      if (SubType?.Any() == true) yield return new KeyValuePair<string,object>("subType",SubType);
      if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
      if (ActionReason?.Any() == true) yield return new KeyValuePair<string,object>("actionReason",ActionReason);
      if (DecisionType is not null) yield return new KeyValuePair<string,object>("decisionType",DecisionType);
      if (ContentDerivative is not null) yield return new KeyValuePair<string,object>("contentDerivative",ContentDerivative);
      if (SecurityLabel?.Any() == true) yield return new KeyValuePair<string,object>("securityLabel",SecurityLabel);
      if (Agent?.Any() == true) yield return new KeyValuePair<string,object>("agent",Agent);
      if (Signer?.Any() == true) yield return new KeyValuePair<string,object>("signer",Signer);
      if (ValuedItem?.Any() == true) yield return new KeyValuePair<string,object>("valuedItem",ValuedItem);
      if (Term?.Any() == true) yield return new KeyValuePair<string,object>("term",Term);
      if (Binding is not null) yield return new KeyValuePair<string,object>("binding",Binding);
      if (Friendly?.Any() == true) yield return new KeyValuePair<string,object>("friendly",Friendly);
      if (Legal?.Any() == true) yield return new KeyValuePair<string,object>("legal",Legal);
      if (Rule?.Any() == true) yield return new KeyValuePair<string,object>("rule",Rule);
    }

  }

}

// end of file

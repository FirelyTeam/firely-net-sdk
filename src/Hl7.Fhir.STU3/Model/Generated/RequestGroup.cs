// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// A group of related requests
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("RequestGroup","http://hl7.org/fhir/StructureDefinition/RequestGroup", IsResource=true)]
  public partial class RequestGroup : Hl7.Fhir.Model.DomainResource, IIdentifiable<List<Identifier>>
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "RequestGroup"; } }

    /// <summary>
    /// Proposed actions, if any
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestGroup#Action", IsNestedType=true)]
    [BackboneType("RequestGroup.action")]
    public partial class ActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestGroup#Action"; } }

      /// <summary>
      /// User-visible label for the action (e.g. 1. or A.)
      /// </summary>
      [FhirElement("label", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LabelElement
      {
        get { return _LabelElement; }
        set { _LabelElement = value; OnPropertyChanged("LabelElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LabelElement;

      /// <summary>
      /// User-visible label for the action (e.g. 1. or A.)
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Label
      {
        get { return LabelElement != null ? LabelElement.Value : null; }
        set
        {
          if (value == null)
            LabelElement = null;
          else
            LabelElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Label");
        }
      }

      /// <summary>
      /// User-visible title
      /// </summary>
      [FhirElement("title", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TitleElement
      {
        get { return _TitleElement; }
        set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TitleElement;

      /// <summary>
      /// User-visible title
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Title
      {
        get { return TitleElement != null ? TitleElement.Value : null; }
        set
        {
          if (value == null)
            TitleElement = null;
          else
            TitleElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Title");
        }
      }

      /// <summary>
      /// Short description of the action
      /// </summary>
      [FhirElement("description", InSummary=true, Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Short description of the action
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
      /// </summary>
      [FhirElement("textEquivalent", InSummary=true, Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString TextEquivalentElement
      {
        get { return _TextEquivalentElement; }
        set { _TextEquivalentElement = value; OnPropertyChanged("TextEquivalentElement"); }
      }

      private Hl7.Fhir.Model.FhirString _TextEquivalentElement;

      /// <summary>
      /// Static text equivalent of the action, used if the dynamic aspects cannot be interpreted by the receiving system
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string TextEquivalent
      {
        get { return TextEquivalentElement != null ? TextEquivalentElement.Value : null; }
        set
        {
          if (value == null)
            TextEquivalentElement = null;
          else
            TextEquivalentElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("TextEquivalent");
        }
      }

      /// <summary>
      /// Code representing the meaning of the action or sub-actions
      /// </summary>
      [FhirElement("code", Order=80)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.CodeableConcept> Code
      {
        get { if(_Code==null) _Code = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Code; }
        set { _Code = value; OnPropertyChanged("Code"); }
      }

      private List<Hl7.Fhir.Model.CodeableConcept> _Code;

      /// <summary>
      /// Supporting documentation for the intended performer of the action
      /// </summary>
      [FhirElement("documentation", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RelatedArtifact> Documentation
      {
        get { if(_Documentation==null) _Documentation = new List<Hl7.Fhir.Model.RelatedArtifact>(); return _Documentation; }
        set { _Documentation = value; OnPropertyChanged("Documentation"); }
      }

      private List<Hl7.Fhir.Model.RelatedArtifact> _Documentation;

      /// <summary>
      /// Whether or not the action is applicable
      /// </summary>
      [FhirElement("condition", Order=100)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestGroup.ConditionComponent> Condition
      {
        get { if(_Condition==null) _Condition = new List<Hl7.Fhir.Model.RequestGroup.ConditionComponent>(); return _Condition; }
        set { _Condition = value; OnPropertyChanged("Condition"); }
      }

      private List<Hl7.Fhir.Model.RequestGroup.ConditionComponent> _Condition;

      /// <summary>
      /// Relationship to another action
      /// </summary>
      [FhirElement("relatedAction", Order=110)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestGroup.RelatedActionComponent> RelatedAction
      {
        get { if(_RelatedAction==null) _RelatedAction = new List<Hl7.Fhir.Model.RequestGroup.RelatedActionComponent>(); return _RelatedAction; }
        set { _RelatedAction = value; OnPropertyChanged("RelatedAction"); }
      }

      private List<Hl7.Fhir.Model.RequestGroup.RelatedActionComponent> _RelatedAction;

      /// <summary>
      /// When the action should take place
      /// </summary>
      [FhirElement("timing", Order=120, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.FhirDateTime),typeof(Hl7.Fhir.Model.Period),typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.Range),typeof(Hl7.Fhir.Model.Timing))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Timing
      {
        get { return _Timing; }
        set { _Timing = value; OnPropertyChanged("Timing"); }
      }

      private Hl7.Fhir.Model.DataType _Timing;

      /// <summary>
      /// Who should perform the action
      /// </summary>
      [FhirElement("participant", Order=130, FiveWs="who.actor")]
      [CLSCompliant(false)]
      [References("Patient","Person","Practitioner","RelatedPerson")]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.ResourceReference> Participant
      {
        get { if(_Participant==null) _Participant = new List<Hl7.Fhir.Model.ResourceReference>(); return _Participant; }
        set { _Participant = value; OnPropertyChanged("Participant"); }
      }

      private List<Hl7.Fhir.Model.ResourceReference> _Participant;

      /// <summary>
      /// create | update | remove | fire-event
      /// </summary>
      [FhirElement("type", Order=140)]
      [Binding("ActionType")]
      [DataMember]
      public Hl7.Fhir.Model.Coding Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.Coding _Type;

      /// <summary>
      /// visual-group | logical-group | sentence-group
      /// </summary>
      [FhirElement("groupingBehavior", Order=150)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionGroupingBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionGroupingBehavior> GroupingBehaviorElement
      {
        get { return _GroupingBehaviorElement; }
        set { _GroupingBehaviorElement = value; OnPropertyChanged("GroupingBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionGroupingBehavior> _GroupingBehaviorElement;

      /// <summary>
      /// visual-group | logical-group | sentence-group
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionGroupingBehavior? GroupingBehavior
      {
        get { return GroupingBehaviorElement != null ? GroupingBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            GroupingBehaviorElement = null;
          else
            GroupingBehaviorElement = new Code<Hl7.Fhir.Model.ActionGroupingBehavior>(value);
          OnPropertyChanged("GroupingBehavior");
        }
      }

      /// <summary>
      /// any | all | all-or-none | exactly-one | at-most-one | one-or-more
      /// </summary>
      [FhirElement("selectionBehavior", Order=160)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionSelectionBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionSelectionBehavior> SelectionBehaviorElement
      {
        get { return _SelectionBehaviorElement; }
        set { _SelectionBehaviorElement = value; OnPropertyChanged("SelectionBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionSelectionBehavior> _SelectionBehaviorElement;

      /// <summary>
      /// any | all | all-or-none | exactly-one | at-most-one | one-or-more
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionSelectionBehavior? SelectionBehavior
      {
        get { return SelectionBehaviorElement != null ? SelectionBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            SelectionBehaviorElement = null;
          else
            SelectionBehaviorElement = new Code<Hl7.Fhir.Model.ActionSelectionBehavior>(value);
          OnPropertyChanged("SelectionBehavior");
        }
      }

      /// <summary>
      /// must | could | must-unless-documented
      /// </summary>
      [FhirElement("requiredBehavior", Order=170)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionRequiredBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionRequiredBehavior> RequiredBehaviorElement
      {
        get { return _RequiredBehaviorElement; }
        set { _RequiredBehaviorElement = value; OnPropertyChanged("RequiredBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionRequiredBehavior> _RequiredBehaviorElement;

      /// <summary>
      /// must | could | must-unless-documented
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionRequiredBehavior? RequiredBehavior
      {
        get { return RequiredBehaviorElement != null ? RequiredBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            RequiredBehaviorElement = null;
          else
            RequiredBehaviorElement = new Code<Hl7.Fhir.Model.ActionRequiredBehavior>(value);
          OnPropertyChanged("RequiredBehavior");
        }
      }

      /// <summary>
      /// yes | no
      /// </summary>
      [FhirElement("precheckBehavior", Order=180)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionPrecheckBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionPrecheckBehavior> PrecheckBehaviorElement
      {
        get { return _PrecheckBehaviorElement; }
        set { _PrecheckBehaviorElement = value; OnPropertyChanged("PrecheckBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionPrecheckBehavior> _PrecheckBehaviorElement;

      /// <summary>
      /// yes | no
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionPrecheckBehavior? PrecheckBehavior
      {
        get { return PrecheckBehaviorElement != null ? PrecheckBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            PrecheckBehaviorElement = null;
          else
            PrecheckBehaviorElement = new Code<Hl7.Fhir.Model.ActionPrecheckBehavior>(value);
          OnPropertyChanged("PrecheckBehavior");
        }
      }

      /// <summary>
      /// single | multiple
      /// </summary>
      [FhirElement("cardinalityBehavior", Order=190)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionCardinalityBehavior")]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionCardinalityBehavior> CardinalityBehaviorElement
      {
        get { return _CardinalityBehaviorElement; }
        set { _CardinalityBehaviorElement = value; OnPropertyChanged("CardinalityBehaviorElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionCardinalityBehavior> _CardinalityBehaviorElement;

      /// <summary>
      /// single | multiple
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionCardinalityBehavior? CardinalityBehavior
      {
        get { return CardinalityBehaviorElement != null ? CardinalityBehaviorElement.Value : null; }
        set
        {
          if (value == null)
            CardinalityBehaviorElement = null;
          else
            CardinalityBehaviorElement = new Code<Hl7.Fhir.Model.ActionCardinalityBehavior>(value);
          OnPropertyChanged("CardinalityBehavior");
        }
      }

      /// <summary>
      /// The target of the action
      /// </summary>
      [FhirElement("resource", Order=200)]
      [CLSCompliant(false)]
      [References("Resource")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Resource
      {
        get { return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Resource;

      /// <summary>
      /// Sub action
      /// </summary>
      [FhirElement("action", Order=210)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.RequestGroup.ActionComponent> Action
      {
        get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.RequestGroup.ActionComponent>(); return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private List<Hl7.Fhir.Model.RequestGroup.ActionComponent> _Action;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LabelElement != null) dest.LabelElement = (Hl7.Fhir.Model.FhirString)LabelElement.DeepCopy();
        if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(TextEquivalentElement != null) dest.TextEquivalentElement = (Hl7.Fhir.Model.FhirString)TextEquivalentElement.DeepCopy();
        if(Code != null) dest.Code = new List<Hl7.Fhir.Model.CodeableConcept>(Code.DeepCopy());
        if(Documentation != null) dest.Documentation = new List<Hl7.Fhir.Model.RelatedArtifact>(Documentation.DeepCopy());
        if(Condition != null) dest.Condition = new List<Hl7.Fhir.Model.RequestGroup.ConditionComponent>(Condition.DeepCopy());
        if(RelatedAction != null) dest.RelatedAction = new List<Hl7.Fhir.Model.RequestGroup.RelatedActionComponent>(RelatedAction.DeepCopy());
        if(Timing != null) dest.Timing = (Hl7.Fhir.Model.DataType)Timing.DeepCopy();
        if(Participant != null) dest.Participant = new List<Hl7.Fhir.Model.ResourceReference>(Participant.DeepCopy());
        if(Type != null) dest.Type = (Hl7.Fhir.Model.Coding)Type.DeepCopy();
        if(GroupingBehaviorElement != null) dest.GroupingBehaviorElement = (Code<Hl7.Fhir.Model.ActionGroupingBehavior>)GroupingBehaviorElement.DeepCopy();
        if(SelectionBehaviorElement != null) dest.SelectionBehaviorElement = (Code<Hl7.Fhir.Model.ActionSelectionBehavior>)SelectionBehaviorElement.DeepCopy();
        if(RequiredBehaviorElement != null) dest.RequiredBehaviorElement = (Code<Hl7.Fhir.Model.ActionRequiredBehavior>)RequiredBehaviorElement.DeepCopy();
        if(PrecheckBehaviorElement != null) dest.PrecheckBehaviorElement = (Code<Hl7.Fhir.Model.ActionPrecheckBehavior>)PrecheckBehaviorElement.DeepCopy();
        if(CardinalityBehaviorElement != null) dest.CardinalityBehaviorElement = (Code<Hl7.Fhir.Model.ActionCardinalityBehavior>)CardinalityBehaviorElement.DeepCopy();
        if(Resource != null) dest.Resource = (Hl7.Fhir.Model.ResourceReference)Resource.DeepCopy();
        if(Action != null) dest.Action = new List<Hl7.Fhir.Model.RequestGroup.ActionComponent>(Action.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LabelElement, otherT.LabelElement)) return false;
        if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(TextEquivalentElement, otherT.TextEquivalentElement)) return false;
        if( !DeepComparable.Matches(Code, otherT.Code)) return false;
        if( !DeepComparable.Matches(Documentation, otherT.Documentation)) return false;
        if( !DeepComparable.Matches(Condition, otherT.Condition)) return false;
        if( !DeepComparable.Matches(RelatedAction, otherT.RelatedAction)) return false;
        if( !DeepComparable.Matches(Timing, otherT.Timing)) return false;
        if( !DeepComparable.Matches(Participant, otherT.Participant)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(GroupingBehaviorElement, otherT.GroupingBehaviorElement)) return false;
        if( !DeepComparable.Matches(SelectionBehaviorElement, otherT.SelectionBehaviorElement)) return false;
        if( !DeepComparable.Matches(RequiredBehaviorElement, otherT.RequiredBehaviorElement)) return false;
        if( !DeepComparable.Matches(PrecheckBehaviorElement, otherT.PrecheckBehaviorElement)) return false;
        if( !DeepComparable.Matches(CardinalityBehaviorElement, otherT.CardinalityBehaviorElement)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LabelElement, otherT.LabelElement)) return false;
        if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(TextEquivalentElement, otherT.TextEquivalentElement)) return false;
        if( !DeepComparable.IsExactly(Code, otherT.Code)) return false;
        if( !DeepComparable.IsExactly(Documentation, otherT.Documentation)) return false;
        if( !DeepComparable.IsExactly(Condition, otherT.Condition)) return false;
        if( !DeepComparable.IsExactly(RelatedAction, otherT.RelatedAction)) return false;
        if( !DeepComparable.IsExactly(Timing, otherT.Timing)) return false;
        if( !DeepComparable.IsExactly(Participant, otherT.Participant)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(GroupingBehaviorElement, otherT.GroupingBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(SelectionBehaviorElement, otherT.SelectionBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(RequiredBehaviorElement, otherT.RequiredBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(PrecheckBehaviorElement, otherT.PrecheckBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(CardinalityBehaviorElement, otherT.CardinalityBehaviorElement)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LabelElement != null) yield return LabelElement;
          if (TitleElement != null) yield return TitleElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (TextEquivalentElement != null) yield return TextEquivalentElement;
          foreach (var elem in Code) { if (elem != null) yield return elem; }
          foreach (var elem in Documentation) { if (elem != null) yield return elem; }
          foreach (var elem in Condition) { if (elem != null) yield return elem; }
          foreach (var elem in RelatedAction) { if (elem != null) yield return elem; }
          if (Timing != null) yield return Timing;
          foreach (var elem in Participant) { if (elem != null) yield return elem; }
          if (Type != null) yield return Type;
          if (GroupingBehaviorElement != null) yield return GroupingBehaviorElement;
          if (SelectionBehaviorElement != null) yield return SelectionBehaviorElement;
          if (RequiredBehaviorElement != null) yield return RequiredBehaviorElement;
          if (PrecheckBehaviorElement != null) yield return PrecheckBehaviorElement;
          if (CardinalityBehaviorElement != null) yield return CardinalityBehaviorElement;
          if (Resource != null) yield return Resource;
          foreach (var elem in Action) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LabelElement != null) yield return new ElementValue("label", LabelElement);
          if (TitleElement != null) yield return new ElementValue("title", TitleElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (TextEquivalentElement != null) yield return new ElementValue("textEquivalent", TextEquivalentElement);
          foreach (var elem in Code) { if (elem != null) yield return new ElementValue("code", elem); }
          foreach (var elem in Documentation) { if (elem != null) yield return new ElementValue("documentation", elem); }
          foreach (var elem in Condition) { if (elem != null) yield return new ElementValue("condition", elem); }
          foreach (var elem in RelatedAction) { if (elem != null) yield return new ElementValue("relatedAction", elem); }
          if (Timing != null) yield return new ElementValue("timing", Timing);
          foreach (var elem in Participant) { if (elem != null) yield return new ElementValue("participant", elem); }
          if (Type != null) yield return new ElementValue("type", Type);
          if (GroupingBehaviorElement != null) yield return new ElementValue("groupingBehavior", GroupingBehaviorElement);
          if (SelectionBehaviorElement != null) yield return new ElementValue("selectionBehavior", SelectionBehaviorElement);
          if (RequiredBehaviorElement != null) yield return new ElementValue("requiredBehavior", RequiredBehaviorElement);
          if (PrecheckBehaviorElement != null) yield return new ElementValue("precheckBehavior", PrecheckBehaviorElement);
          if (CardinalityBehaviorElement != null) yield return new ElementValue("cardinalityBehavior", CardinalityBehaviorElement);
          if (Resource != null) yield return new ElementValue("resource", Resource);
          foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "label":
            value = LabelElement;
            return LabelElement is not null;
          case "title":
            value = TitleElement;
            return TitleElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "textEquivalent":
            value = TextEquivalentElement;
            return TextEquivalentElement is not null;
          case "code":
            value = Code;
            return Code?.Any() == true;
          case "documentation":
            value = Documentation;
            return Documentation?.Any() == true;
          case "condition":
            value = Condition;
            return Condition?.Any() == true;
          case "relatedAction":
            value = RelatedAction;
            return RelatedAction?.Any() == true;
          case "timing":
            value = Timing;
            return Timing is not null;
          case "participant":
            value = Participant;
            return Participant?.Any() == true;
          case "type":
            value = Type;
            return Type is not null;
          case "groupingBehavior":
            value = GroupingBehaviorElement;
            return GroupingBehaviorElement is not null;
          case "selectionBehavior":
            value = SelectionBehaviorElement;
            return SelectionBehaviorElement is not null;
          case "requiredBehavior":
            value = RequiredBehaviorElement;
            return RequiredBehaviorElement is not null;
          case "precheckBehavior":
            value = PrecheckBehaviorElement;
            return PrecheckBehaviorElement is not null;
          case "cardinalityBehavior":
            value = CardinalityBehaviorElement;
            return CardinalityBehaviorElement is not null;
          case "resource":
            value = Resource;
            return Resource is not null;
          case "action":
            value = Action;
            return Action?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LabelElement is not null) yield return new KeyValuePair<string,object>("label",LabelElement);
        if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (TextEquivalentElement is not null) yield return new KeyValuePair<string,object>("textEquivalent",TextEquivalentElement);
        if (Code?.Any() == true) yield return new KeyValuePair<string,object>("code",Code);
        if (Documentation?.Any() == true) yield return new KeyValuePair<string,object>("documentation",Documentation);
        if (Condition?.Any() == true) yield return new KeyValuePair<string,object>("condition",Condition);
        if (RelatedAction?.Any() == true) yield return new KeyValuePair<string,object>("relatedAction",RelatedAction);
        if (Timing is not null) yield return new KeyValuePair<string,object>("timing",Timing);
        if (Participant?.Any() == true) yield return new KeyValuePair<string,object>("participant",Participant);
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (GroupingBehaviorElement is not null) yield return new KeyValuePair<string,object>("groupingBehavior",GroupingBehaviorElement);
        if (SelectionBehaviorElement is not null) yield return new KeyValuePair<string,object>("selectionBehavior",SelectionBehaviorElement);
        if (RequiredBehaviorElement is not null) yield return new KeyValuePair<string,object>("requiredBehavior",RequiredBehaviorElement);
        if (PrecheckBehaviorElement is not null) yield return new KeyValuePair<string,object>("precheckBehavior",PrecheckBehaviorElement);
        if (CardinalityBehaviorElement is not null) yield return new KeyValuePair<string,object>("cardinalityBehavior",CardinalityBehaviorElement);
        if (Resource is not null) yield return new KeyValuePair<string,object>("resource",Resource);
        if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
      }

    }

    /// <summary>
    /// Whether or not the action is applicable
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestGroup#Condition", IsNestedType=true)]
    [BackboneType("RequestGroup.action.condition")]
    public partial class ConditionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestGroup#Condition"; } }

      /// <summary>
      /// applicability | start | stop
      /// </summary>
      [FhirElement("kind", Order=40)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionConditionKind")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionConditionKind> KindElement
      {
        get { return _KindElement; }
        set { _KindElement = value; OnPropertyChanged("KindElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionConditionKind> _KindElement;

      /// <summary>
      /// applicability | start | stop
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionConditionKind? Kind
      {
        get { return KindElement != null ? KindElement.Value : null; }
        set
        {
          if (value == null)
            KindElement = null;
          else
            KindElement = new Code<Hl7.Fhir.Model.ActionConditionKind>(value);
          OnPropertyChanged("Kind");
        }
      }

      /// <summary>
      /// Natural language description of the condition
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Natural language description of the condition
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Language of the expression
      /// </summary>
      [FhirElement("language", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LanguageElement
      {
        get { return _LanguageElement; }
        set { _LanguageElement = value; OnPropertyChanged("LanguageElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LanguageElement;

      /// <summary>
      /// Language of the expression
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Language
      {
        get { return LanguageElement != null ? LanguageElement.Value : null; }
        set
        {
          if (value == null)
            LanguageElement = null;
          else
            LanguageElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Language");
        }
      }

      /// <summary>
      /// Boolean-valued expression
      /// </summary>
      [FhirElement("expression", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ExpressionElement
      {
        get { return _ExpressionElement; }
        set { _ExpressionElement = value; OnPropertyChanged("ExpressionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ExpressionElement;

      /// <summary>
      /// Boolean-valued expression
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Expression
      {
        get { return ExpressionElement != null ? ExpressionElement.Value : null; }
        set
        {
          if (value == null)
            ExpressionElement = null;
          else
            ExpressionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Expression");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ConditionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(KindElement != null) dest.KindElement = (Code<Hl7.Fhir.Model.ActionConditionKind>)KindElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(LanguageElement != null) dest.LanguageElement = (Hl7.Fhir.Model.FhirString)LanguageElement.DeepCopy();
        if(ExpressionElement != null) dest.ExpressionElement = (Hl7.Fhir.Model.FhirString)ExpressionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ConditionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ConditionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(KindElement, otherT.KindElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.Matches(ExpressionElement, otherT.ExpressionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ConditionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(KindElement, otherT.KindElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(LanguageElement, otherT.LanguageElement)) return false;
        if( !DeepComparable.IsExactly(ExpressionElement, otherT.ExpressionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (KindElement != null) yield return KindElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (LanguageElement != null) yield return LanguageElement;
          if (ExpressionElement != null) yield return ExpressionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (KindElement != null) yield return new ElementValue("kind", KindElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (LanguageElement != null) yield return new ElementValue("language", LanguageElement);
          if (ExpressionElement != null) yield return new ElementValue("expression", ExpressionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "kind":
            value = KindElement;
            return KindElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "language":
            value = LanguageElement;
            return LanguageElement is not null;
          case "expression":
            value = ExpressionElement;
            return ExpressionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (KindElement is not null) yield return new KeyValuePair<string,object>("kind",KindElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (LanguageElement is not null) yield return new KeyValuePair<string,object>("language",LanguageElement);
        if (ExpressionElement is not null) yield return new KeyValuePair<string,object>("expression",ExpressionElement);
      }

    }

    /// <summary>
    /// Relationship to another action
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("RequestGroup#RelatedAction", IsNestedType=true)]
    [BackboneType("RequestGroup.action.relatedAction")]
    public partial class RelatedActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "RequestGroup#RelatedAction"; } }

      /// <summary>
      /// What action this is related to
      /// </summary>
      [FhirElement("actionId", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id ActionIdElement
      {
        get { return _ActionIdElement; }
        set { _ActionIdElement = value; OnPropertyChanged("ActionIdElement"); }
      }

      private Hl7.Fhir.Model.Id _ActionIdElement;

      /// <summary>
      /// What action this is related to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ActionId
      {
        get { return ActionIdElement != null ? ActionIdElement.Value : null; }
        set
        {
          if (value == null)
            ActionIdElement = null;
          else
            ActionIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("ActionId");
        }
      }

      /// <summary>
      /// before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end
      /// </summary>
      [FhirElement("relationship", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [Binding("ActionRelationshipType")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Code<Hl7.Fhir.Model.ActionRelationshipType> RelationshipElement
      {
        get { return _RelationshipElement; }
        set { _RelationshipElement = value; OnPropertyChanged("RelationshipElement"); }
      }

      private Code<Hl7.Fhir.Model.ActionRelationshipType> _RelationshipElement;

      /// <summary>
      /// before-start | before | before-end | concurrent-with-start | concurrent | concurrent-with-end | after-start | after | after-end
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.ActionRelationshipType? Relationship
      {
        get { return RelationshipElement != null ? RelationshipElement.Value : null; }
        set
        {
          if (value == null)
            RelationshipElement = null;
          else
            RelationshipElement = new Code<Hl7.Fhir.Model.ActionRelationshipType>(value);
          OnPropertyChanged("Relationship");
        }
      }

      /// <summary>
      /// Time offset for the relationship
      /// </summary>
      [FhirElement("offset", Order=60, Choice=ChoiceType.DatatypeChoice)]
      [CLSCompliant(false)]
      [AllowedTypes(typeof(Hl7.Fhir.Model.Duration),typeof(Hl7.Fhir.Model.Range))]
      [DataMember]
      public Hl7.Fhir.Model.DataType Offset
      {
        get { return _Offset; }
        set { _Offset = value; OnPropertyChanged("Offset"); }
      }

      private Hl7.Fhir.Model.DataType _Offset;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RelatedActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(ActionIdElement != null) dest.ActionIdElement = (Hl7.Fhir.Model.Id)ActionIdElement.DeepCopy();
        if(RelationshipElement != null) dest.RelationshipElement = (Code<Hl7.Fhir.Model.ActionRelationshipType>)RelationshipElement.DeepCopy();
        if(Offset != null) dest.Offset = (Hl7.Fhir.Model.DataType)Offset.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RelatedActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RelatedActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(ActionIdElement, otherT.ActionIdElement)) return false;
        if( !DeepComparable.Matches(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.Matches(Offset, otherT.Offset)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RelatedActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(ActionIdElement, otherT.ActionIdElement)) return false;
        if( !DeepComparable.IsExactly(RelationshipElement, otherT.RelationshipElement)) return false;
        if( !DeepComparable.IsExactly(Offset, otherT.Offset)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (ActionIdElement != null) yield return ActionIdElement;
          if (RelationshipElement != null) yield return RelationshipElement;
          if (Offset != null) yield return Offset;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (ActionIdElement != null) yield return new ElementValue("actionId", ActionIdElement);
          if (RelationshipElement != null) yield return new ElementValue("relationship", RelationshipElement);
          if (Offset != null) yield return new ElementValue("offset", Offset);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "actionId":
            value = ActionIdElement;
            return ActionIdElement is not null;
          case "relationship":
            value = RelationshipElement;
            return RelationshipElement is not null;
          case "offset":
            value = Offset;
            return Offset is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (ActionIdElement is not null) yield return new KeyValuePair<string,object>("actionId",ActionIdElement);
        if (RelationshipElement is not null) yield return new KeyValuePair<string,object>("relationship",RelationshipElement);
        if (Offset is not null) yield return new KeyValuePair<string,object>("offset",Offset);
      }

    }

    /// <summary>
    /// Business identifier
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=90, FiveWs="id")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Identifier> Identifier
    {
      get { if(_Identifier==null) _Identifier = new List<Hl7.Fhir.Model.Identifier>(); return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private List<Hl7.Fhir.Model.Identifier> _Identifier;

    /// <summary>
    /// Instantiates protocol or definition
    /// </summary>
    [FhirElement("definition", Order=100)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Definition
    {
      get { if(_Definition==null) _Definition = new List<Hl7.Fhir.Model.ResourceReference>(); return _Definition; }
      set { _Definition = value; OnPropertyChanged("Definition"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Definition;

    /// <summary>
    /// Fulfills plan, proposal, or order
    /// </summary>
    [FhirElement("basedOn", Order=110)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> BasedOn
    {
      get { if(_BasedOn==null) _BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(); return _BasedOn; }
      set { _BasedOn = value; OnPropertyChanged("BasedOn"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _BasedOn;

    /// <summary>
    /// Request(s) replaced by this request
    /// </summary>
    [FhirElement("replaces", Order=120)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Replaces
    {
      get { if(_Replaces==null) _Replaces = new List<Hl7.Fhir.Model.ResourceReference>(); return _Replaces; }
      set { _Replaces = value; OnPropertyChanged("Replaces"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Replaces;

    /// <summary>
    /// Composite request this is part of
    /// </summary>
    [FhirElement("groupIdentifier", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.Identifier GroupIdentifier
    {
      get { return _GroupIdentifier; }
      set { _GroupIdentifier = value; OnPropertyChanged("GroupIdentifier"); }
    }

    private Hl7.Fhir.Model.Identifier _GroupIdentifier;

    /// <summary>
    /// draft | active | suspended | cancelled | completed | entered-in-error | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=140, FiveWs="status")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestStatus")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestStatus> _StatusElement;

    /// <summary>
    /// draft | active | suspended | cancelled | completed | entered-in-error | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.RequestStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// proposal | plan | order
    /// </summary>
    [FhirElement("intent", InSummary=true, IsModifier=true, Order=150, FiveWs="class")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestIntent")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestIntent> IntentElement
    {
      get { return _IntentElement; }
      set { _IntentElement = value; OnPropertyChanged("IntentElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestIntent> _IntentElement;

    /// <summary>
    /// proposal | plan | order
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestIntent? Intent
    {
      get { return IntentElement != null ? IntentElement.Value : null; }
      set
      {
        if (value == null)
          IntentElement = null;
        else
          IntentElement = new Code<Hl7.Fhir.Model.RequestIntent>(value);
        OnPropertyChanged("Intent");
      }
    }

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    [FhirElement("priority", InSummary=true, Order=160, FiveWs="grade")]
    [DeclaredType(Type = typeof(Code))]
    [Binding("RequestPriority")]
    [DataMember]
    public Code<Hl7.Fhir.Model.RequestPriority> PriorityElement
    {
      get { return _PriorityElement; }
      set { _PriorityElement = value; OnPropertyChanged("PriorityElement"); }
    }

    private Code<Hl7.Fhir.Model.RequestPriority> _PriorityElement;

    /// <summary>
    /// routine | urgent | asap | stat
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.RequestPriority? Priority
    {
      get { return PriorityElement != null ? PriorityElement.Value : null; }
      set
      {
        if (value == null)
          PriorityElement = null;
        else
          PriorityElement = new Code<Hl7.Fhir.Model.RequestPriority>(value);
        OnPropertyChanged("Priority");
      }
    }

    /// <summary>
    /// Who the request group is about
    /// </summary>
    [FhirElement("subject", Order=170, FiveWs="who.focus")]
    [CLSCompliant(false)]
    [References("Patient","Group")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Subject
    {
      get { return _Subject; }
      set { _Subject = value; OnPropertyChanged("Subject"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Subject;

    /// <summary>
    /// Encounter or Episode for the request group
    /// </summary>
    [FhirElement("context", Order=180, FiveWs="context")]
    [CLSCompliant(false)]
    [References("Encounter","EpisodeOfCare")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Context
    {
      get { return _Context; }
      set { _Context = value; OnPropertyChanged("Context"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Context;

    /// <summary>
    /// When the request group was authored
    /// </summary>
    [FhirElement("authoredOn", Order=190, FiveWs="when.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime AuthoredOnElement
    {
      get { return _AuthoredOnElement; }
      set { _AuthoredOnElement = value; OnPropertyChanged("AuthoredOnElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _AuthoredOnElement;

    /// <summary>
    /// When the request group was authored
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string AuthoredOn
    {
      get { return AuthoredOnElement != null ? AuthoredOnElement.Value : null; }
      set
      {
        if (value == null)
          AuthoredOnElement = null;
        else
          AuthoredOnElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("AuthoredOn");
      }
    }

    /// <summary>
    /// Device or practitioner that authored the request group
    /// </summary>
    [FhirElement("author", Order=200, FiveWs="who.author")]
    [CLSCompliant(false)]
    [References("Device","Practitioner")]
    [DataMember]
    public Hl7.Fhir.Model.ResourceReference Author
    {
      get { return _Author; }
      set { _Author = value; OnPropertyChanged("Author"); }
    }

    private Hl7.Fhir.Model.ResourceReference _Author;

    /// <summary>
    /// Reason for the request group
    /// </summary>
    [FhirElement("reason", Order=210, Choice=ChoiceType.DatatypeChoice, FiveWs="why")]
    [CLSCompliant(false)]
    [References("Resource")]
    [AllowedTypes(typeof(Hl7.Fhir.Model.CodeableConcept),typeof(Hl7.Fhir.Model.ResourceReference))]
    [DataMember]
    public Hl7.Fhir.Model.DataType Reason
    {
      get { return _Reason; }
      set { _Reason = value; OnPropertyChanged("Reason"); }
    }

    private Hl7.Fhir.Model.DataType _Reason;

    /// <summary>
    /// Additional notes about the response
    /// </summary>
    [FhirElement("note", Order=220)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.Annotation> Note
    {
      get { if(_Note==null) _Note = new List<Hl7.Fhir.Model.Annotation>(); return _Note; }
      set { _Note = value; OnPropertyChanged("Note"); }
    }

    private List<Hl7.Fhir.Model.Annotation> _Note;

    /// <summary>
    /// Proposed actions, if any
    /// </summary>
    [FhirElement("action", Order=230)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.RequestGroup.ActionComponent> Action
    {
      get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.RequestGroup.ActionComponent>(); return _Action; }
      set { _Action = value; OnPropertyChanged("Action"); }
    }

    private List<Hl7.Fhir.Model.RequestGroup.ActionComponent> _Action;

    List<Identifier> IIdentifiable<List<Identifier>>.Identifier { get => Identifier; set => Identifier = value; }

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as RequestGroup;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(Identifier != null) dest.Identifier = new List<Hl7.Fhir.Model.Identifier>(Identifier.DeepCopy());
      if(Definition != null) dest.Definition = new List<Hl7.Fhir.Model.ResourceReference>(Definition.DeepCopy());
      if(BasedOn != null) dest.BasedOn = new List<Hl7.Fhir.Model.ResourceReference>(BasedOn.DeepCopy());
      if(Replaces != null) dest.Replaces = new List<Hl7.Fhir.Model.ResourceReference>(Replaces.DeepCopy());
      if(GroupIdentifier != null) dest.GroupIdentifier = (Hl7.Fhir.Model.Identifier)GroupIdentifier.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.RequestStatus>)StatusElement.DeepCopy();
      if(IntentElement != null) dest.IntentElement = (Code<Hl7.Fhir.Model.RequestIntent>)IntentElement.DeepCopy();
      if(PriorityElement != null) dest.PriorityElement = (Code<Hl7.Fhir.Model.RequestPriority>)PriorityElement.DeepCopy();
      if(Subject != null) dest.Subject = (Hl7.Fhir.Model.ResourceReference)Subject.DeepCopy();
      if(Context != null) dest.Context = (Hl7.Fhir.Model.ResourceReference)Context.DeepCopy();
      if(AuthoredOnElement != null) dest.AuthoredOnElement = (Hl7.Fhir.Model.FhirDateTime)AuthoredOnElement.DeepCopy();
      if(Author != null) dest.Author = (Hl7.Fhir.Model.ResourceReference)Author.DeepCopy();
      if(Reason != null) dest.Reason = (Hl7.Fhir.Model.DataType)Reason.DeepCopy();
      if(Note != null) dest.Note = new List<Hl7.Fhir.Model.Annotation>(Note.DeepCopy());
      if(Action != null) dest.Action = new List<Hl7.Fhir.Model.RequestGroup.ActionComponent>(Action.DeepCopy());
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new RequestGroup());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as RequestGroup;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(Definition, otherT.Definition)) return false;
      if( !DeepComparable.Matches(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.Matches(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.Matches(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.Matches(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.Matches(Subject, otherT.Subject)) return false;
      if( !DeepComparable.Matches(Context, otherT.Context)) return false;
      if( !DeepComparable.Matches(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.Matches(Author, otherT.Author)) return false;
      if( !DeepComparable.Matches(Reason, otherT.Reason)) return false;
      if( !DeepComparable.Matches(Note, otherT.Note)) return false;
      if( !DeepComparable.Matches(Action, otherT.Action)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as RequestGroup;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(Definition, otherT.Definition)) return false;
      if( !DeepComparable.IsExactly(BasedOn, otherT.BasedOn)) return false;
      if( !DeepComparable.IsExactly(Replaces, otherT.Replaces)) return false;
      if( !DeepComparable.IsExactly(GroupIdentifier, otherT.GroupIdentifier)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(IntentElement, otherT.IntentElement)) return false;
      if( !DeepComparable.IsExactly(PriorityElement, otherT.PriorityElement)) return false;
      if( !DeepComparable.IsExactly(Subject, otherT.Subject)) return false;
      if( !DeepComparable.IsExactly(Context, otherT.Context)) return false;
      if( !DeepComparable.IsExactly(AuthoredOnElement, otherT.AuthoredOnElement)) return false;
      if( !DeepComparable.IsExactly(Author, otherT.Author)) return false;
      if( !DeepComparable.IsExactly(Reason, otherT.Reason)) return false;
      if( !DeepComparable.IsExactly(Note, otherT.Note)) return false;
      if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return elem; }
        foreach (var elem in Definition) { if (elem != null) yield return elem; }
        foreach (var elem in BasedOn) { if (elem != null) yield return elem; }
        foreach (var elem in Replaces) { if (elem != null) yield return elem; }
        if (GroupIdentifier != null) yield return GroupIdentifier;
        if (StatusElement != null) yield return StatusElement;
        if (IntentElement != null) yield return IntentElement;
        if (PriorityElement != null) yield return PriorityElement;
        if (Subject != null) yield return Subject;
        if (Context != null) yield return Context;
        if (AuthoredOnElement != null) yield return AuthoredOnElement;
        if (Author != null) yield return Author;
        if (Reason != null) yield return Reason;
        foreach (var elem in Note) { if (elem != null) yield return elem; }
        foreach (var elem in Action) { if (elem != null) yield return elem; }
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        foreach (var elem in Identifier) { if (elem != null) yield return new ElementValue("identifier", elem); }
        foreach (var elem in Definition) { if (elem != null) yield return new ElementValue("definition", elem); }
        foreach (var elem in BasedOn) { if (elem != null) yield return new ElementValue("basedOn", elem); }
        foreach (var elem in Replaces) { if (elem != null) yield return new ElementValue("replaces", elem); }
        if (GroupIdentifier != null) yield return new ElementValue("groupIdentifier", GroupIdentifier);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (IntentElement != null) yield return new ElementValue("intent", IntentElement);
        if (PriorityElement != null) yield return new ElementValue("priority", PriorityElement);
        if (Subject != null) yield return new ElementValue("subject", Subject);
        if (Context != null) yield return new ElementValue("context", Context);
        if (AuthoredOnElement != null) yield return new ElementValue("authoredOn", AuthoredOnElement);
        if (Author != null) yield return new ElementValue("author", Author);
        if (Reason != null) yield return new ElementValue("reason", Reason);
        foreach (var elem in Note) { if (elem != null) yield return new ElementValue("note", elem); }
        foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "identifier":
          value = Identifier;
          return Identifier?.Any() == true;
        case "definition":
          value = Definition;
          return Definition?.Any() == true;
        case "basedOn":
          value = BasedOn;
          return BasedOn?.Any() == true;
        case "replaces":
          value = Replaces;
          return Replaces?.Any() == true;
        case "groupIdentifier":
          value = GroupIdentifier;
          return GroupIdentifier is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "intent":
          value = IntentElement;
          return IntentElement is not null;
        case "priority":
          value = PriorityElement;
          return PriorityElement is not null;
        case "subject":
          value = Subject;
          return Subject is not null;
        case "context":
          value = Context;
          return Context is not null;
        case "authoredOn":
          value = AuthoredOnElement;
          return AuthoredOnElement is not null;
        case "author":
          value = Author;
          return Author is not null;
        case "reason":
          value = Reason;
          return Reason is not null;
        case "note":
          value = Note;
          return Note?.Any() == true;
        case "action":
          value = Action;
          return Action?.Any() == true;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (Identifier?.Any() == true) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (Definition?.Any() == true) yield return new KeyValuePair<string,object>("definition",Definition);
      if (BasedOn?.Any() == true) yield return new KeyValuePair<string,object>("basedOn",BasedOn);
      if (Replaces?.Any() == true) yield return new KeyValuePair<string,object>("replaces",Replaces);
      if (GroupIdentifier is not null) yield return new KeyValuePair<string,object>("groupIdentifier",GroupIdentifier);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (IntentElement is not null) yield return new KeyValuePair<string,object>("intent",IntentElement);
      if (PriorityElement is not null) yield return new KeyValuePair<string,object>("priority",PriorityElement);
      if (Subject is not null) yield return new KeyValuePair<string,object>("subject",Subject);
      if (Context is not null) yield return new KeyValuePair<string,object>("context",Context);
      if (AuthoredOnElement is not null) yield return new KeyValuePair<string,object>("authoredOn",AuthoredOnElement);
      if (Author is not null) yield return new KeyValuePair<string,object>("author",Author);
      if (Reason is not null) yield return new KeyValuePair<string,object>("reason",Reason);
      if (Note?.Any() == true) yield return new KeyValuePair<string,object>("note",Note);
      if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
    }

  }

}

// end of file

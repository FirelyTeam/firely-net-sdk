// <auto-generated/>
// Contents of: hl7.fhir.r3.core version: 3.0.2

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using Hl7.Fhir.Introspection;
using Hl7.Fhir.Serialization;
using Hl7.Fhir.Specification;
using Hl7.Fhir.Utility;
using Hl7.Fhir.Validation;

/*
  Copyright (c) 2011+, HL7, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without modification, 
  are permitted provided that the following conditions are met:
  
   * Redistributions of source code must retain the above copyright notice, this 
     list of conditions and the following disclaimer.
   * Redistributions in binary form must reproduce the above copyright notice, 
     this list of conditions and the following disclaimer in the documentation 
     and/or other materials provided with the distribution.
   * Neither the name of HL7 nor the names of its contributors may be used to 
     endorse or promote products derived from this software without specific 
     prior written permission.
  
  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
*/

namespace Hl7.Fhir.Model
{
  /// <summary>
  /// Describes a set of tests
  /// </summary>
  [Serializable]
  [DataContract]
  [FhirType("TestScript","http://hl7.org/fhir/StructureDefinition/TestScript", IsResource=true)]
  public partial class TestScript : Hl7.Fhir.Model.DomainResource
  {
    /// <summary>
    /// FHIR Type Name
    /// </summary>
    public override string TypeName { get { return "TestScript"; } }

    /// <summary>
    /// The content or mime type.
    /// (url: http://hl7.org/fhir/ValueSet/content-type)
    /// (system: http://hl7.org/fhir/content-type)
    /// </summary>
    [FhirEnumeration("ContentType")]
    public enum ContentTypeCode
    {
      /// <summary>
      /// XML content-type corresponding to the application/fhir+xml mime-type.
      /// (system: http://hl7.org/fhir/content-type)
      /// </summary>
      [EnumLiteral("xml", "http://hl7.org/fhir/content-type"), Description("xml")]
      Xml,
      /// <summary>
      /// JSON content-type corresponding to the application/fhir+json mime-type.
      /// (system: http://hl7.org/fhir/content-type)
      /// </summary>
      [EnumLiteral("json", "http://hl7.org/fhir/content-type"), Description("json")]
      Json,
      /// <summary>
      /// RDF content-type corresponding to the text/turtle mime-type.
      /// (system: http://hl7.org/fhir/content-type)
      /// </summary>
      [EnumLiteral("ttl", "http://hl7.org/fhir/content-type"), Description("ttl")]
      Ttl,
      /// <summary>
      /// Prevent the use of the corresponding http header.
      /// (system: http://hl7.org/fhir/content-type)
      /// </summary>
      [EnumLiteral("none", "http://hl7.org/fhir/content-type"), Description("none")]
      None,
    }

    /// <summary>
    /// The type of direction to use for assertion.
    /// (url: http://hl7.org/fhir/ValueSet/assert-direction-codes)
    /// (system: http://hl7.org/fhir/assert-direction-codes)
    /// </summary>
    [FhirEnumeration("AssertionDirectionType")]
    public enum AssertionDirectionType
    {
      /// <summary>
      /// The assertion is evaluated on the response. This is the default value.
      /// (system: http://hl7.org/fhir/assert-direction-codes)
      /// </summary>
      [EnumLiteral("response", "http://hl7.org/fhir/assert-direction-codes"), Description("response")]
      Response,
      /// <summary>
      /// The assertion is evaluated on the request.
      /// (system: http://hl7.org/fhir/assert-direction-codes)
      /// </summary>
      [EnumLiteral("request", "http://hl7.org/fhir/assert-direction-codes"), Description("request")]
      Request,
    }

    /// <summary>
    /// The type of operator to use for assertion.
    /// (url: http://hl7.org/fhir/ValueSet/assert-operator-codes)
    /// (system: http://hl7.org/fhir/assert-operator-codes)
    /// </summary>
    [FhirEnumeration("AssertionOperatorType")]
    public enum AssertionOperatorType
    {
      /// <summary>
      /// Default value. Equals comparison.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("equals", "http://hl7.org/fhir/assert-operator-codes"), Description("equals")]
      Equals,
      /// <summary>
      /// Not equals comparison.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("notEquals", "http://hl7.org/fhir/assert-operator-codes"), Description("notEquals")]
      NotEquals,
      /// <summary>
      /// Compare value within a known set of values.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("in", "http://hl7.org/fhir/assert-operator-codes"), Description("in")]
      In,
      /// <summary>
      /// Compare value not within a known set of values.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("notIn", "http://hl7.org/fhir/assert-operator-codes"), Description("notIn")]
      NotIn,
      /// <summary>
      /// Compare value to be greater than a known value.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("greaterThan", "http://hl7.org/fhir/assert-operator-codes"), Description("greaterThan")]
      GreaterThan,
      /// <summary>
      /// Compare value to be less than a known value.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("lessThan", "http://hl7.org/fhir/assert-operator-codes"), Description("lessThan")]
      LessThan,
      /// <summary>
      /// Compare value is empty.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("empty", "http://hl7.org/fhir/assert-operator-codes"), Description("empty")]
      Empty,
      /// <summary>
      /// Compare value is not empty.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("notEmpty", "http://hl7.org/fhir/assert-operator-codes"), Description("notEmpty")]
      NotEmpty,
      /// <summary>
      /// Compare value string contains a known value.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("contains", "http://hl7.org/fhir/assert-operator-codes"), Description("contains")]
      Contains,
      /// <summary>
      /// Compare value string does not contain a known value.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("notContains", "http://hl7.org/fhir/assert-operator-codes"), Description("notContains")]
      NotContains,
      /// <summary>
      /// Evaluate the fluentpath expression as a boolean condition.
      /// (system: http://hl7.org/fhir/assert-operator-codes)
      /// </summary>
      [EnumLiteral("eval", "http://hl7.org/fhir/assert-operator-codes"), Description("evaluate")]
      Eval,
    }

    /// <summary>
    /// The allowable request method or HTTP operation codes.
    /// (url: http://hl7.org/fhir/ValueSet/http-operations)
    /// (system: http://hl7.org/fhir/http-operations)
    /// </summary>
    [FhirEnumeration("TestScriptRequestMethodCode")]
    public enum TestScriptRequestMethodCode
    {
      /// <summary>
      /// HTTP DELETE operation
      /// (system: http://hl7.org/fhir/http-operations)
      /// </summary>
      [EnumLiteral("delete", "http://hl7.org/fhir/http-operations"), Description("DELETE")]
      Delete,
      /// <summary>
      /// HTTP GET operation
      /// (system: http://hl7.org/fhir/http-operations)
      /// </summary>
      [EnumLiteral("get", "http://hl7.org/fhir/http-operations"), Description("GET")]
      Get,
      /// <summary>
      /// HTTP OPTIONS operation
      /// (system: http://hl7.org/fhir/http-operations)
      /// </summary>
      [EnumLiteral("options", "http://hl7.org/fhir/http-operations"), Description("OPTIONS")]
      Options,
      /// <summary>
      /// HTTP PATCH operation
      /// (system: http://hl7.org/fhir/http-operations)
      /// </summary>
      [EnumLiteral("patch", "http://hl7.org/fhir/http-operations"), Description("PATCH")]
      Patch,
      /// <summary>
      /// HTTP POST operation
      /// (system: http://hl7.org/fhir/http-operations)
      /// </summary>
      [EnumLiteral("post", "http://hl7.org/fhir/http-operations"), Description("POST")]
      Post,
      /// <summary>
      /// HTTP PUT operation
      /// (system: http://hl7.org/fhir/http-operations)
      /// </summary>
      [EnumLiteral("put", "http://hl7.org/fhir/http-operations"), Description("PUT")]
      Put,
    }

    /// <summary>
    /// The type of response code to use for assertion.
    /// (url: http://hl7.org/fhir/ValueSet/assert-response-code-types)
    /// (system: http://hl7.org/fhir/assert-response-code-types)
    /// </summary>
    [FhirEnumeration("AssertionResponseTypes")]
    public enum AssertionResponseTypes
    {
      /// <summary>
      /// Response code is 200.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("okay", "http://hl7.org/fhir/assert-response-code-types"), Description("okay")]
      Okay,
      /// <summary>
      /// Response code is 201.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("created", "http://hl7.org/fhir/assert-response-code-types"), Description("created")]
      Created,
      /// <summary>
      /// Response code is 204.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("noContent", "http://hl7.org/fhir/assert-response-code-types"), Description("noContent")]
      NoContent,
      /// <summary>
      /// Response code is 304.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("notModified", "http://hl7.org/fhir/assert-response-code-types"), Description("notModified")]
      NotModified,
      /// <summary>
      /// Response code is 400.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("bad", "http://hl7.org/fhir/assert-response-code-types"), Description("bad")]
      Bad,
      /// <summary>
      /// Response code is 403.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("forbidden", "http://hl7.org/fhir/assert-response-code-types"), Description("forbidden")]
      Forbidden,
      /// <summary>
      /// Response code is 404.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("notFound", "http://hl7.org/fhir/assert-response-code-types"), Description("notFound")]
      NotFound,
      /// <summary>
      /// Response code is 405.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("methodNotAllowed", "http://hl7.org/fhir/assert-response-code-types"), Description("methodNotAllowed")]
      MethodNotAllowed,
      /// <summary>
      /// Response code is 409.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("conflict", "http://hl7.org/fhir/assert-response-code-types"), Description("conflict")]
      Conflict,
      /// <summary>
      /// Response code is 410.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("gone", "http://hl7.org/fhir/assert-response-code-types"), Description("gone")]
      Gone,
      /// <summary>
      /// Response code is 412.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("preconditionFailed", "http://hl7.org/fhir/assert-response-code-types"), Description("preconditionFailed")]
      PreconditionFailed,
      /// <summary>
      /// Response code is 422.
      /// (system: http://hl7.org/fhir/assert-response-code-types)
      /// </summary>
      [EnumLiteral("unprocessable", "http://hl7.org/fhir/assert-response-code-types"), Description("unprocessable")]
      Unprocessable,
    }

    /// <summary>
    /// An abstract server representing a client or sender in a message exchange
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Origin", IsNestedType=true)]
    public partial class OriginComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Origin"; } }

      /// <summary>
      /// The index of the abstract origin server starting at 1
      /// </summary>
      [FhirElement("index", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Integer IndexElement
      {
        get { return _IndexElement; }
        set { _IndexElement = value; OnPropertyChanged("IndexElement"); }
      }

      private Hl7.Fhir.Model.Integer _IndexElement;

      /// <summary>
      /// The index of the abstract origin server starting at 1
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Index
      {
        get { return IndexElement != null ? IndexElement.Value : null; }
        set
        {
          if (value == null)
            IndexElement = null;
          else
            IndexElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Index");
        }
      }

      /// <summary>
      /// FHIR-Client | FHIR-SDC-FormFiller
      /// </summary>
      [FhirElement("profile", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Profile
      {
        get { return _Profile; }
        set { _Profile = value; OnPropertyChanged("Profile"); }
      }

      private Hl7.Fhir.Model.Coding _Profile;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OriginComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(IndexElement != null) dest.IndexElement = (Hl7.Fhir.Model.Integer)IndexElement.DeepCopy();
        if(Profile != null) dest.Profile = (Hl7.Fhir.Model.Coding)Profile.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OriginComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OriginComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(IndexElement, otherT.IndexElement)) return false;
        if( !DeepComparable.Matches(Profile, otherT.Profile)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OriginComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(IndexElement, otherT.IndexElement)) return false;
        if( !DeepComparable.IsExactly(Profile, otherT.Profile)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (IndexElement != null) yield return IndexElement;
          if (Profile != null) yield return Profile;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (IndexElement != null) yield return new ElementValue("index", IndexElement);
          if (Profile != null) yield return new ElementValue("profile", Profile);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "index":
            value = IndexElement;
            return IndexElement is not null;
          case "profile":
            value = Profile;
            return Profile is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (IndexElement is not null) yield return new KeyValuePair<string,object>("index",IndexElement);
        if (Profile is not null) yield return new KeyValuePair<string,object>("profile",Profile);
      }

    }

    /// <summary>
    /// An abstract server representing a destination or receiver in a message exchange
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Destination", IsNestedType=true)]
    public partial class DestinationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Destination"; } }

      /// <summary>
      /// The index of the abstract destination server starting at 1
      /// </summary>
      [FhirElement("index", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Integer IndexElement
      {
        get { return _IndexElement; }
        set { _IndexElement = value; OnPropertyChanged("IndexElement"); }
      }

      private Hl7.Fhir.Model.Integer _IndexElement;

      /// <summary>
      /// The index of the abstract destination server starting at 1
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Index
      {
        get { return IndexElement != null ? IndexElement.Value : null; }
        set
        {
          if (value == null)
            IndexElement = null;
          else
            IndexElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Index");
        }
      }

      /// <summary>
      /// FHIR-Server | FHIR-SDC-FormManager | FHIR-SDC-FormReceiver | FHIR-SDC-FormProcessor
      /// </summary>
      [FhirElement("profile", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Profile
      {
        get { return _Profile; }
        set { _Profile = value; OnPropertyChanged("Profile"); }
      }

      private Hl7.Fhir.Model.Coding _Profile;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as DestinationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(IndexElement != null) dest.IndexElement = (Hl7.Fhir.Model.Integer)IndexElement.DeepCopy();
        if(Profile != null) dest.Profile = (Hl7.Fhir.Model.Coding)Profile.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new DestinationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as DestinationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(IndexElement, otherT.IndexElement)) return false;
        if( !DeepComparable.Matches(Profile, otherT.Profile)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as DestinationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(IndexElement, otherT.IndexElement)) return false;
        if( !DeepComparable.IsExactly(Profile, otherT.Profile)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (IndexElement != null) yield return IndexElement;
          if (Profile != null) yield return Profile;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (IndexElement != null) yield return new ElementValue("index", IndexElement);
          if (Profile != null) yield return new ElementValue("profile", Profile);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "index":
            value = IndexElement;
            return IndexElement is not null;
          case "profile":
            value = Profile;
            return Profile is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (IndexElement is not null) yield return new KeyValuePair<string,object>("index",IndexElement);
        if (Profile is not null) yield return new KeyValuePair<string,object>("profile",Profile);
      }

    }

    /// <summary>
    /// Required capability that is assumed to function correctly on the FHIR server being tested
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Metadata", IsNestedType=true)]
    public partial class MetadataComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Metadata"; } }

      /// <summary>
      /// Links to the FHIR specification
      /// </summary>
      [FhirElement("link", Order=40)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.LinkComponent> Link
      {
        get { if(_Link==null) _Link = new List<Hl7.Fhir.Model.TestScript.LinkComponent>(); return _Link; }
        set { _Link = value; OnPropertyChanged("Link"); }
      }

      private List<Hl7.Fhir.Model.TestScript.LinkComponent> _Link;

      /// <summary>
      /// Capabilities  that are assumed to function correctly on the FHIR server being tested
      /// </summary>
      [FhirElement("capability", Order=50)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.CapabilityComponent> Capability
      {
        get { if(_Capability==null) _Capability = new List<Hl7.Fhir.Model.TestScript.CapabilityComponent>(); return _Capability; }
        set { _Capability = value; OnPropertyChanged("Capability"); }
      }

      private List<Hl7.Fhir.Model.TestScript.CapabilityComponent> _Capability;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as MetadataComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Link != null) dest.Link = new List<Hl7.Fhir.Model.TestScript.LinkComponent>(Link.DeepCopy());
        if(Capability != null) dest.Capability = new List<Hl7.Fhir.Model.TestScript.CapabilityComponent>(Capability.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new MetadataComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as MetadataComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Link, otherT.Link)) return false;
        if( !DeepComparable.Matches(Capability, otherT.Capability)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as MetadataComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Link, otherT.Link)) return false;
        if( !DeepComparable.IsExactly(Capability, otherT.Capability)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Link) { if (elem != null) yield return elem; }
          foreach (var elem in Capability) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Link) { if (elem != null) yield return new ElementValue("link", elem); }
          foreach (var elem in Capability) { if (elem != null) yield return new ElementValue("capability", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "link":
            value = Link;
            return Link?.Any() == true;
          case "capability":
            value = Capability;
            return Capability?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Link?.Any() == true) yield return new KeyValuePair<string,object>("link",Link);
        if (Capability?.Any() == true) yield return new KeyValuePair<string,object>("capability",Capability);
      }

    }

    /// <summary>
    /// Links to the FHIR specification
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Link", IsNestedType=true)]
    public partial class LinkComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Link"; } }

      /// <summary>
      /// URL to the specification
      /// </summary>
      [FhirElement("url", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirUri UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirUri _UrlElement;

      /// <summary>
      /// URL to the specification
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirUri(value);
          OnPropertyChanged("Url");
        }
      }

      /// <summary>
      /// Short description
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Short description
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as LinkComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new LinkComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as LinkComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (UrlElement != null) yield return UrlElement;
          if (DescriptionElement != null) yield return DescriptionElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "url":
            value = UrlElement;
            return UrlElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      }

    }

    /// <summary>
    /// Capabilities  that are assumed to function correctly on the FHIR server being tested
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Capability", IsNestedType=true)]
    public partial class CapabilityComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Capability"; } }

      /// <summary>
      /// Are the capabilities required?
      /// </summary>
      [FhirElement("required", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean RequiredElement
      {
        get { return _RequiredElement; }
        set { _RequiredElement = value; OnPropertyChanged("RequiredElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _RequiredElement;

      /// <summary>
      /// Are the capabilities required?
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Required
      {
        get { return RequiredElement != null ? RequiredElement.Value : null; }
        set
        {
          if (value == null)
            RequiredElement = null;
          else
            RequiredElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Required");
        }
      }

      /// <summary>
      /// Are the capabilities validated?
      /// </summary>
      [FhirElement("validated", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean ValidatedElement
      {
        get { return _ValidatedElement; }
        set { _ValidatedElement = value; OnPropertyChanged("ValidatedElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _ValidatedElement;

      /// <summary>
      /// Are the capabilities validated?
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Validated
      {
        get { return ValidatedElement != null ? ValidatedElement.Value : null; }
        set
        {
          if (value == null)
            ValidatedElement = null;
          else
            ValidatedElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Validated");
        }
      }

      /// <summary>
      /// The expected capabilities of the server
      /// </summary>
      [FhirElement("description", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// The expected capabilities of the server
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// Which origin server these requirements apply to
      /// </summary>
      [FhirElement("origin", Order=70)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.Integer> OriginElement
      {
        get { if(_OriginElement==null) _OriginElement = new List<Hl7.Fhir.Model.Integer>(); return _OriginElement; }
        set { _OriginElement = value; OnPropertyChanged("OriginElement"); }
      }

      private List<Hl7.Fhir.Model.Integer> _OriginElement;

      /// <summary>
      /// Which origin server these requirements apply to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<int?> Origin
      {
        get { return OriginElement != null ? OriginElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            OriginElement = null;
          else
            OriginElement = new List<Hl7.Fhir.Model.Integer>(value.Select(elem=>new Hl7.Fhir.Model.Integer(elem)));
          OnPropertyChanged("Origin");
        }
      }

      /// <summary>
      /// Which server these requirements apply to
      /// </summary>
      [FhirElement("destination", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.Integer DestinationElement
      {
        get { return _DestinationElement; }
        set { _DestinationElement = value; OnPropertyChanged("DestinationElement"); }
      }

      private Hl7.Fhir.Model.Integer _DestinationElement;

      /// <summary>
      /// Which server these requirements apply to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Destination
      {
        get { return DestinationElement != null ? DestinationElement.Value : null; }
        set
        {
          if (value == null)
            DestinationElement = null;
          else
            DestinationElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Destination");
        }
      }

      /// <summary>
      /// Links to the FHIR specification
      /// </summary>
      [FhirElement("link", Order=90)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.FhirUri> LinkElement
      {
        get { if(_LinkElement==null) _LinkElement = new List<Hl7.Fhir.Model.FhirUri>(); return _LinkElement; }
        set { _LinkElement = value; OnPropertyChanged("LinkElement"); }
      }

      private List<Hl7.Fhir.Model.FhirUri> _LinkElement;

      /// <summary>
      /// Links to the FHIR specification
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public IEnumerable<string> Link
      {
        get { return LinkElement != null ? LinkElement.Select(elem => elem.Value) : null; }
        set
        {
          if (value == null)
            LinkElement = null;
          else
            LinkElement = new List<Hl7.Fhir.Model.FhirUri>(value.Select(elem=>new Hl7.Fhir.Model.FhirUri(elem)));
          OnPropertyChanged("Link");
        }
      }

      /// <summary>
      /// Required Capability Statement
      /// </summary>
      [FhirElement("capabilities", Order=100)]
      [CLSCompliant(false)]
      [References("CapabilityStatement")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Capabilities
      {
        get { return _Capabilities; }
        set { _Capabilities = value; OnPropertyChanged("Capabilities"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Capabilities;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as CapabilityComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RequiredElement != null) dest.RequiredElement = (Hl7.Fhir.Model.FhirBoolean)RequiredElement.DeepCopy();
        if(ValidatedElement != null) dest.ValidatedElement = (Hl7.Fhir.Model.FhirBoolean)ValidatedElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(OriginElement != null) dest.OriginElement = new List<Hl7.Fhir.Model.Integer>(OriginElement.DeepCopy());
        if(DestinationElement != null) dest.DestinationElement = (Hl7.Fhir.Model.Integer)DestinationElement.DeepCopy();
        if(LinkElement != null) dest.LinkElement = new List<Hl7.Fhir.Model.FhirUri>(LinkElement.DeepCopy());
        if(Capabilities != null) dest.Capabilities = (Hl7.Fhir.Model.ResourceReference)Capabilities.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new CapabilityComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as CapabilityComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RequiredElement, otherT.RequiredElement)) return false;
        if( !DeepComparable.Matches(ValidatedElement, otherT.ValidatedElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(OriginElement, otherT.OriginElement)) return false;
        if( !DeepComparable.Matches(DestinationElement, otherT.DestinationElement)) return false;
        if( !DeepComparable.Matches(LinkElement, otherT.LinkElement)) return false;
        if( !DeepComparable.Matches(Capabilities, otherT.Capabilities)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as CapabilityComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RequiredElement, otherT.RequiredElement)) return false;
        if( !DeepComparable.IsExactly(ValidatedElement, otherT.ValidatedElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(OriginElement, otherT.OriginElement)) return false;
        if( !DeepComparable.IsExactly(DestinationElement, otherT.DestinationElement)) return false;
        if( !DeepComparable.IsExactly(LinkElement, otherT.LinkElement)) return false;
        if( !DeepComparable.IsExactly(Capabilities, otherT.Capabilities)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RequiredElement != null) yield return RequiredElement;
          if (ValidatedElement != null) yield return ValidatedElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in OriginElement) { if (elem != null) yield return elem; }
          if (DestinationElement != null) yield return DestinationElement;
          foreach (var elem in LinkElement) { if (elem != null) yield return elem; }
          if (Capabilities != null) yield return Capabilities;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RequiredElement != null) yield return new ElementValue("required", RequiredElement);
          if (ValidatedElement != null) yield return new ElementValue("validated", ValidatedElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in OriginElement) { if (elem != null) yield return new ElementValue("origin", elem); }
          if (DestinationElement != null) yield return new ElementValue("destination", DestinationElement);
          foreach (var elem in LinkElement) { if (elem != null) yield return new ElementValue("link", elem); }
          if (Capabilities != null) yield return new ElementValue("capabilities", Capabilities);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "required":
            value = RequiredElement;
            return RequiredElement is not null;
          case "validated":
            value = ValidatedElement;
            return ValidatedElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "origin":
            value = OriginElement;
            return OriginElement?.Any() == true;
          case "destination":
            value = DestinationElement;
            return DestinationElement is not null;
          case "link":
            value = LinkElement;
            return LinkElement?.Any() == true;
          case "capabilities":
            value = Capabilities;
            return Capabilities is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RequiredElement is not null) yield return new KeyValuePair<string,object>("required",RequiredElement);
        if (ValidatedElement is not null) yield return new KeyValuePair<string,object>("validated",ValidatedElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (OriginElement?.Any() == true) yield return new KeyValuePair<string,object>("origin",OriginElement);
        if (DestinationElement is not null) yield return new KeyValuePair<string,object>("destination",DestinationElement);
        if (LinkElement?.Any() == true) yield return new KeyValuePair<string,object>("link",LinkElement);
        if (Capabilities is not null) yield return new KeyValuePair<string,object>("capabilities",Capabilities);
      }

    }

    /// <summary>
    /// Fixture in the test script - by reference (uri)
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Fixture", IsNestedType=true)]
    public partial class FixtureComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Fixture"; } }

      /// <summary>
      /// Whether or not to implicitly create the fixture during setup
      /// </summary>
      [FhirElement("autocreate", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AutocreateElement
      {
        get { return _AutocreateElement; }
        set { _AutocreateElement = value; OnPropertyChanged("AutocreateElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AutocreateElement;

      /// <summary>
      /// Whether or not to implicitly create the fixture during setup
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Autocreate
      {
        get { return AutocreateElement != null ? AutocreateElement.Value : null; }
        set
        {
          if (value == null)
            AutocreateElement = null;
          else
            AutocreateElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Autocreate");
        }
      }

      /// <summary>
      /// Whether or not to implicitly delete the fixture during teardown
      /// </summary>
      [FhirElement("autodelete", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean AutodeleteElement
      {
        get { return _AutodeleteElement; }
        set { _AutodeleteElement = value; OnPropertyChanged("AutodeleteElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _AutodeleteElement;

      /// <summary>
      /// Whether or not to implicitly delete the fixture during teardown
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? Autodelete
      {
        get { return AutodeleteElement != null ? AutodeleteElement.Value : null; }
        set
        {
          if (value == null)
            AutodeleteElement = null;
          else
            AutodeleteElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("Autodelete");
        }
      }

      /// <summary>
      /// Reference of the resource
      /// </summary>
      [FhirElement("resource", Order=60)]
      [CLSCompliant(false)]
      [References("Resource")]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Resource
      {
        get { return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Resource;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as FixtureComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(AutocreateElement != null) dest.AutocreateElement = (Hl7.Fhir.Model.FhirBoolean)AutocreateElement.DeepCopy();
        if(AutodeleteElement != null) dest.AutodeleteElement = (Hl7.Fhir.Model.FhirBoolean)AutodeleteElement.DeepCopy();
        if(Resource != null) dest.Resource = (Hl7.Fhir.Model.ResourceReference)Resource.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new FixtureComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as FixtureComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(AutocreateElement, otherT.AutocreateElement)) return false;
        if( !DeepComparable.Matches(AutodeleteElement, otherT.AutodeleteElement)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as FixtureComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(AutocreateElement, otherT.AutocreateElement)) return false;
        if( !DeepComparable.IsExactly(AutodeleteElement, otherT.AutodeleteElement)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (AutocreateElement != null) yield return AutocreateElement;
          if (AutodeleteElement != null) yield return AutodeleteElement;
          if (Resource != null) yield return Resource;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (AutocreateElement != null) yield return new ElementValue("autocreate", AutocreateElement);
          if (AutodeleteElement != null) yield return new ElementValue("autodelete", AutodeleteElement);
          if (Resource != null) yield return new ElementValue("resource", Resource);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "autocreate":
            value = AutocreateElement;
            return AutocreateElement is not null;
          case "autodelete":
            value = AutodeleteElement;
            return AutodeleteElement is not null;
          case "resource":
            value = Resource;
            return Resource is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (AutocreateElement is not null) yield return new KeyValuePair<string,object>("autocreate",AutocreateElement);
        if (AutodeleteElement is not null) yield return new KeyValuePair<string,object>("autodelete",AutodeleteElement);
        if (Resource is not null) yield return new KeyValuePair<string,object>("resource",Resource);
      }

    }

    /// <summary>
    /// Placeholder for evaluated elements
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Variable", IsNestedType=true)]
    public partial class VariableComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Variable"; } }

      /// <summary>
      /// Descriptive name for this variable
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Descriptive name for this variable
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Default, hard-coded, or user-defined value for this variable
      /// </summary>
      [FhirElement("defaultValue", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DefaultValueElement
      {
        get { return _DefaultValueElement; }
        set { _DefaultValueElement = value; OnPropertyChanged("DefaultValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DefaultValueElement;

      /// <summary>
      /// Default, hard-coded, or user-defined value for this variable
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string DefaultValue
      {
        get { return DefaultValueElement != null ? DefaultValueElement.Value : null; }
        set
        {
          if (value == null)
            DefaultValueElement = null;
          else
            DefaultValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("DefaultValue");
        }
      }

      /// <summary>
      /// Natural language description of the variable
      /// </summary>
      [FhirElement("description", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Natural language description of the variable
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// The fluentpath expression against the fixture body
      /// </summary>
      [FhirElement("expression", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ExpressionElement
      {
        get { return _ExpressionElement; }
        set { _ExpressionElement = value; OnPropertyChanged("ExpressionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ExpressionElement;

      /// <summary>
      /// The fluentpath expression against the fixture body
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Expression
      {
        get { return ExpressionElement != null ? ExpressionElement.Value : null; }
        set
        {
          if (value == null)
            ExpressionElement = null;
          else
            ExpressionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Expression");
        }
      }

      /// <summary>
      /// HTTP header field name for source
      /// </summary>
      [FhirElement("headerField", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString HeaderFieldElement
      {
        get { return _HeaderFieldElement; }
        set { _HeaderFieldElement = value; OnPropertyChanged("HeaderFieldElement"); }
      }

      private Hl7.Fhir.Model.FhirString _HeaderFieldElement;

      /// <summary>
      /// HTTP header field name for source
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string HeaderField
      {
        get { return HeaderFieldElement != null ? HeaderFieldElement.Value : null; }
        set
        {
          if (value == null)
            HeaderFieldElement = null;
          else
            HeaderFieldElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("HeaderField");
        }
      }

      /// <summary>
      /// Hint help text for default value to enter
      /// </summary>
      [FhirElement("hint", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString HintElement
      {
        get { return _HintElement; }
        set { _HintElement = value; OnPropertyChanged("HintElement"); }
      }

      private Hl7.Fhir.Model.FhirString _HintElement;

      /// <summary>
      /// Hint help text for default value to enter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Hint
      {
        get { return HintElement != null ? HintElement.Value : null; }
        set
        {
          if (value == null)
            HintElement = null;
          else
            HintElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Hint");
        }
      }

      /// <summary>
      /// XPath or JSONPath against the fixture body
      /// </summary>
      [FhirElement("path", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PathElement
      {
        get { return _PathElement; }
        set { _PathElement = value; OnPropertyChanged("PathElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PathElement;

      /// <summary>
      /// XPath or JSONPath against the fixture body
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Path
      {
        get { return PathElement != null ? PathElement.Value : null; }
        set
        {
          if (value == null)
            PathElement = null;
          else
            PathElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Path");
        }
      }

      /// <summary>
      /// Fixture Id of source expression or headerField within this variable
      /// </summary>
      [FhirElement("sourceId", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.Id SourceIdElement
      {
        get { return _SourceIdElement; }
        set { _SourceIdElement = value; OnPropertyChanged("SourceIdElement"); }
      }

      private Hl7.Fhir.Model.Id _SourceIdElement;

      /// <summary>
      /// Fixture Id of source expression or headerField within this variable
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SourceId
      {
        get { return SourceIdElement != null ? SourceIdElement.Value : null; }
        set
        {
          if (value == null)
            SourceIdElement = null;
          else
            SourceIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("SourceId");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as VariableComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(DefaultValueElement != null) dest.DefaultValueElement = (Hl7.Fhir.Model.FhirString)DefaultValueElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(ExpressionElement != null) dest.ExpressionElement = (Hl7.Fhir.Model.FhirString)ExpressionElement.DeepCopy();
        if(HeaderFieldElement != null) dest.HeaderFieldElement = (Hl7.Fhir.Model.FhirString)HeaderFieldElement.DeepCopy();
        if(HintElement != null) dest.HintElement = (Hl7.Fhir.Model.FhirString)HintElement.DeepCopy();
        if(PathElement != null) dest.PathElement = (Hl7.Fhir.Model.FhirString)PathElement.DeepCopy();
        if(SourceIdElement != null) dest.SourceIdElement = (Hl7.Fhir.Model.Id)SourceIdElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new VariableComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as VariableComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(DefaultValueElement, otherT.DefaultValueElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(ExpressionElement, otherT.ExpressionElement)) return false;
        if( !DeepComparable.Matches(HeaderFieldElement, otherT.HeaderFieldElement)) return false;
        if( !DeepComparable.Matches(HintElement, otherT.HintElement)) return false;
        if( !DeepComparable.Matches(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.Matches(SourceIdElement, otherT.SourceIdElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as VariableComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(DefaultValueElement, otherT.DefaultValueElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(ExpressionElement, otherT.ExpressionElement)) return false;
        if( !DeepComparable.IsExactly(HeaderFieldElement, otherT.HeaderFieldElement)) return false;
        if( !DeepComparable.IsExactly(HintElement, otherT.HintElement)) return false;
        if( !DeepComparable.IsExactly(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.IsExactly(SourceIdElement, otherT.SourceIdElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (DefaultValueElement != null) yield return DefaultValueElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (ExpressionElement != null) yield return ExpressionElement;
          if (HeaderFieldElement != null) yield return HeaderFieldElement;
          if (HintElement != null) yield return HintElement;
          if (PathElement != null) yield return PathElement;
          if (SourceIdElement != null) yield return SourceIdElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (DefaultValueElement != null) yield return new ElementValue("defaultValue", DefaultValueElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (ExpressionElement != null) yield return new ElementValue("expression", ExpressionElement);
          if (HeaderFieldElement != null) yield return new ElementValue("headerField", HeaderFieldElement);
          if (HintElement != null) yield return new ElementValue("hint", HintElement);
          if (PathElement != null) yield return new ElementValue("path", PathElement);
          if (SourceIdElement != null) yield return new ElementValue("sourceId", SourceIdElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "defaultValue":
            value = DefaultValueElement;
            return DefaultValueElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "expression":
            value = ExpressionElement;
            return ExpressionElement is not null;
          case "headerField":
            value = HeaderFieldElement;
            return HeaderFieldElement is not null;
          case "hint":
            value = HintElement;
            return HintElement is not null;
          case "path":
            value = PathElement;
            return PathElement is not null;
          case "sourceId":
            value = SourceIdElement;
            return SourceIdElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (DefaultValueElement is not null) yield return new KeyValuePair<string,object>("defaultValue",DefaultValueElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (ExpressionElement is not null) yield return new KeyValuePair<string,object>("expression",ExpressionElement);
        if (HeaderFieldElement is not null) yield return new KeyValuePair<string,object>("headerField",HeaderFieldElement);
        if (HintElement is not null) yield return new KeyValuePair<string,object>("hint",HintElement);
        if (PathElement is not null) yield return new KeyValuePair<string,object>("path",PathElement);
        if (SourceIdElement is not null) yield return new KeyValuePair<string,object>("sourceId",SourceIdElement);
      }

    }

    /// <summary>
    /// Assert rule used within the test script
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Rule", IsNestedType=true)]
    public partial class RuleComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Rule"; } }

      /// <summary>
      /// Assert rule resource reference
      /// </summary>
      [FhirElement("resource", Order=40)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Resource
      {
        get { return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Resource;

      /// <summary>
      /// Rule parameter template
      /// </summary>
      [FhirElement("param", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.RuleParamComponent> Param
      {
        get { if(_Param==null) _Param = new List<Hl7.Fhir.Model.TestScript.RuleParamComponent>(); return _Param; }
        set { _Param = value; OnPropertyChanged("Param"); }
      }

      private List<Hl7.Fhir.Model.TestScript.RuleParamComponent> _Param;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RuleComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Resource != null) dest.Resource = (Hl7.Fhir.Model.ResourceReference)Resource.DeepCopy();
        if(Param != null) dest.Param = new List<Hl7.Fhir.Model.TestScript.RuleParamComponent>(Param.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RuleComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RuleComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;
        if( !DeepComparable.Matches(Param, otherT.Param)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RuleComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;
        if( !DeepComparable.IsExactly(Param, otherT.Param)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Resource != null) yield return Resource;
          foreach (var elem in Param) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Resource != null) yield return new ElementValue("resource", Resource);
          foreach (var elem in Param) { if (elem != null) yield return new ElementValue("param", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "resource":
            value = Resource;
            return Resource is not null;
          case "param":
            value = Param;
            return Param?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Resource is not null) yield return new KeyValuePair<string,object>("resource",Resource);
        if (Param?.Any() == true) yield return new KeyValuePair<string,object>("param",Param);
      }

    }

    /// <summary>
    /// Rule parameter template
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#RuleParam", IsNestedType=true)]
    public partial class RuleParamComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#RuleParam"; } }

      /// <summary>
      /// Parameter name matching external assert rule parameter
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Parameter name matching external assert rule parameter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      [FhirElement("value", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RuleParamComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RuleParamComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RuleParamComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RuleParamComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// Assert ruleset used within the test script
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Ruleset", IsNestedType=true)]
    public partial class RulesetComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Ruleset"; } }

      /// <summary>
      /// Assert ruleset resource reference
      /// </summary>
      [FhirElement("resource", Order=40)]
      [CLSCompliant(false)]
      [References("Resource")]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.ResourceReference Resource
      {
        get { return _Resource; }
        set { _Resource = value; OnPropertyChanged("Resource"); }
      }

      private Hl7.Fhir.Model.ResourceReference _Resource;

      /// <summary>
      /// The referenced rule within the ruleset
      /// </summary>
      [FhirElement("rule", Order=50)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.RulesetRuleComponent> Rule
      {
        get { if(_Rule==null) _Rule = new List<Hl7.Fhir.Model.TestScript.RulesetRuleComponent>(); return _Rule; }
        set { _Rule = value; OnPropertyChanged("Rule"); }
      }

      private List<Hl7.Fhir.Model.TestScript.RulesetRuleComponent> _Rule;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RulesetComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Resource != null) dest.Resource = (Hl7.Fhir.Model.ResourceReference)Resource.DeepCopy();
        if(Rule != null) dest.Rule = new List<Hl7.Fhir.Model.TestScript.RulesetRuleComponent>(Rule.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RulesetComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RulesetComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Resource, otherT.Resource)) return false;
        if( !DeepComparable.Matches(Rule, otherT.Rule)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RulesetComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Resource, otherT.Resource)) return false;
        if( !DeepComparable.IsExactly(Rule, otherT.Rule)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Resource != null) yield return Resource;
          foreach (var elem in Rule) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Resource != null) yield return new ElementValue("resource", Resource);
          foreach (var elem in Rule) { if (elem != null) yield return new ElementValue("rule", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "resource":
            value = Resource;
            return Resource is not null;
          case "rule":
            value = Rule;
            return Rule?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Resource is not null) yield return new KeyValuePair<string,object>("resource",Resource);
        if (Rule?.Any() == true) yield return new KeyValuePair<string,object>("rule",Rule);
      }

    }

    /// <summary>
    /// The referenced rule within the ruleset
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#RulesetRule", IsNestedType=true)]
    public partial class RulesetRuleComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#RulesetRule"; } }

      /// <summary>
      /// Id of referenced rule within the ruleset
      /// </summary>
      [FhirElement("ruleId", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id RuleIdElement
      {
        get { return _RuleIdElement; }
        set { _RuleIdElement = value; OnPropertyChanged("RuleIdElement"); }
      }

      private Hl7.Fhir.Model.Id _RuleIdElement;

      /// <summary>
      /// Id of referenced rule within the ruleset
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RuleId
      {
        get { return RuleIdElement != null ? RuleIdElement.Value : null; }
        set
        {
          if (value == null)
            RuleIdElement = null;
          else
            RuleIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("RuleId");
        }
      }

      /// <summary>
      /// Ruleset rule parameter template
      /// </summary>
      [FhirElement("param", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.RulesetRuleParamComponent> Param
      {
        get { if(_Param==null) _Param = new List<Hl7.Fhir.Model.TestScript.RulesetRuleParamComponent>(); return _Param; }
        set { _Param = value; OnPropertyChanged("Param"); }
      }

      private List<Hl7.Fhir.Model.TestScript.RulesetRuleParamComponent> _Param;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RulesetRuleComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RuleIdElement != null) dest.RuleIdElement = (Hl7.Fhir.Model.Id)RuleIdElement.DeepCopy();
        if(Param != null) dest.Param = new List<Hl7.Fhir.Model.TestScript.RulesetRuleParamComponent>(Param.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RulesetRuleComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RulesetRuleComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RuleIdElement, otherT.RuleIdElement)) return false;
        if( !DeepComparable.Matches(Param, otherT.Param)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RulesetRuleComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RuleIdElement, otherT.RuleIdElement)) return false;
        if( !DeepComparable.IsExactly(Param, otherT.Param)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RuleIdElement != null) yield return RuleIdElement;
          foreach (var elem in Param) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RuleIdElement != null) yield return new ElementValue("ruleId", RuleIdElement);
          foreach (var elem in Param) { if (elem != null) yield return new ElementValue("param", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "ruleId":
            value = RuleIdElement;
            return RuleIdElement is not null;
          case "param":
            value = Param;
            return Param?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RuleIdElement is not null) yield return new KeyValuePair<string,object>("ruleId",RuleIdElement);
        if (Param?.Any() == true) yield return new KeyValuePair<string,object>("param",Param);
      }

    }

    /// <summary>
    /// Ruleset rule parameter template
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#RulesetRuleParam", IsNestedType=true)]
    public partial class RulesetRuleParamComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#RulesetRuleParam"; } }

      /// <summary>
      /// Parameter name matching external assert ruleset rule parameter
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Parameter name matching external assert ruleset rule parameter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      [FhirElement("value", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RulesetRuleParamComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RulesetRuleParamComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RulesetRuleParamComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RulesetRuleParamComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// A series of required setup operations before tests are executed
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Setup", IsNestedType=true)]
    public partial class SetupComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Setup"; } }

      /// <summary>
      /// A setup operation or assert to perform
      /// </summary>
      [FhirElement("action", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.SetupActionComponent> Action
      {
        get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.TestScript.SetupActionComponent>(); return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private List<Hl7.Fhir.Model.TestScript.SetupActionComponent> _Action;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SetupComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Action != null) dest.Action = new List<Hl7.Fhir.Model.TestScript.SetupActionComponent>(Action.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SetupComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SetupComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SetupComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Action) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "action":
            value = Action;
            return Action?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
      }

    }

    /// <summary>
    /// A setup operation or assert to perform
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#SetupAction", IsNestedType=true)]
    public partial class SetupActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#SetupAction"; } }

      /// <summary>
      /// The setup operation to perform
      /// </summary>
      [FhirElement("operation", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.TestScript.OperationComponent Operation
      {
        get { return _Operation; }
        set { _Operation = value; OnPropertyChanged("Operation"); }
      }

      private Hl7.Fhir.Model.TestScript.OperationComponent _Operation;

      /// <summary>
      /// The assertion to perform
      /// </summary>
      [FhirElement("assert", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.TestScript.AssertComponent Assert
      {
        get { return _Assert; }
        set { _Assert = value; OnPropertyChanged("Assert"); }
      }

      private Hl7.Fhir.Model.TestScript.AssertComponent _Assert;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as SetupActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Operation != null) dest.Operation = (Hl7.Fhir.Model.TestScript.OperationComponent)Operation.DeepCopy();
        if(Assert != null) dest.Assert = (Hl7.Fhir.Model.TestScript.AssertComponent)Assert.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new SetupActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as SetupActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Operation, otherT.Operation)) return false;
        if( !DeepComparable.Matches(Assert, otherT.Assert)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as SetupActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Operation, otherT.Operation)) return false;
        if( !DeepComparable.IsExactly(Assert, otherT.Assert)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Operation != null) yield return Operation;
          if (Assert != null) yield return Assert;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Operation != null) yield return new ElementValue("operation", Operation);
          if (Assert != null) yield return new ElementValue("assert", Assert);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "operation":
            value = Operation;
            return Operation is not null;
          case "assert":
            value = Assert;
            return Assert is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Operation is not null) yield return new KeyValuePair<string,object>("operation",Operation);
        if (Assert is not null) yield return new KeyValuePair<string,object>("assert",Assert);
      }

    }

    /// <summary>
    /// The setup operation to perform
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Operation", IsNestedType=true)]
    public partial class OperationComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Operation"; } }

      /// <summary>
      /// The operation code type that will be executed
      /// </summary>
      [FhirElement("type", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.Coding Type
      {
        get { return _Type; }
        set { _Type = value; OnPropertyChanged("Type"); }
      }

      private Hl7.Fhir.Model.Coding _Type;

      /// <summary>
      /// Resource type
      /// </summary>
      [FhirElement("resource", Order=50)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.FHIRDefinedType> ResourceElement
      {
        get { return _ResourceElement; }
        set { _ResourceElement = value; OnPropertyChanged("ResourceElement"); }
      }

      private Code<Hl7.Fhir.Model.FHIRDefinedType> _ResourceElement;

      /// <summary>
      /// Resource type
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.FHIRDefinedType? Resource
      {
        get { return ResourceElement != null ? ResourceElement.Value : null; }
        set
        {
          if (value == null)
            ResourceElement = null;
          else
            ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>(value);
          OnPropertyChanged("Resource");
        }
      }

      /// <summary>
      /// Tracking/logging operation label
      /// </summary>
      [FhirElement("label", Order=60)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LabelElement
      {
        get { return _LabelElement; }
        set { _LabelElement = value; OnPropertyChanged("LabelElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LabelElement;

      /// <summary>
      /// Tracking/logging operation label
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Label
      {
        get { return LabelElement != null ? LabelElement.Value : null; }
        set
        {
          if (value == null)
            LabelElement = null;
          else
            LabelElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Label");
        }
      }

      /// <summary>
      /// Tracking/reporting operation description
      /// </summary>
      [FhirElement("description", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Tracking/reporting operation description
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// xml | json | ttl | none
      /// </summary>
      [FhirElement("accept", Order=80)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.TestScript.ContentTypeCode> AcceptElement
      {
        get { return _AcceptElement; }
        set { _AcceptElement = value; OnPropertyChanged("AcceptElement"); }
      }

      private Code<Hl7.Fhir.Model.TestScript.ContentTypeCode> _AcceptElement;

      /// <summary>
      /// xml | json | ttl | none
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.TestScript.ContentTypeCode? Accept
      {
        get { return AcceptElement != null ? AcceptElement.Value : null; }
        set
        {
          if (value == null)
            AcceptElement = null;
          else
            AcceptElement = new Code<Hl7.Fhir.Model.TestScript.ContentTypeCode>(value);
          OnPropertyChanged("Accept");
        }
      }

      /// <summary>
      /// xml | json | ttl | none
      /// </summary>
      [FhirElement("contentType", Order=90)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.TestScript.ContentTypeCode> ContentTypeElement
      {
        get { return _ContentTypeElement; }
        set { _ContentTypeElement = value; OnPropertyChanged("ContentTypeElement"); }
      }

      private Code<Hl7.Fhir.Model.TestScript.ContentTypeCode> _ContentTypeElement;

      /// <summary>
      /// xml | json | ttl | none
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.TestScript.ContentTypeCode? ContentType
      {
        get { return ContentTypeElement != null ? ContentTypeElement.Value : null; }
        set
        {
          if (value == null)
            ContentTypeElement = null;
          else
            ContentTypeElement = new Code<Hl7.Fhir.Model.TestScript.ContentTypeCode>(value);
          OnPropertyChanged("ContentType");
        }
      }

      /// <summary>
      /// Server responding to the request
      /// </summary>
      [FhirElement("destination", Order=100)]
      [DataMember]
      public Hl7.Fhir.Model.Integer DestinationElement
      {
        get { return _DestinationElement; }
        set { _DestinationElement = value; OnPropertyChanged("DestinationElement"); }
      }

      private Hl7.Fhir.Model.Integer _DestinationElement;

      /// <summary>
      /// Server responding to the request
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Destination
      {
        get { return DestinationElement != null ? DestinationElement.Value : null; }
        set
        {
          if (value == null)
            DestinationElement = null;
          else
            DestinationElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Destination");
        }
      }

      /// <summary>
      /// Whether or not to send the request url in encoded format
      /// </summary>
      [FhirElement("encodeRequestUrl", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean EncodeRequestUrlElement
      {
        get { return _EncodeRequestUrlElement; }
        set { _EncodeRequestUrlElement = value; OnPropertyChanged("EncodeRequestUrlElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _EncodeRequestUrlElement;

      /// <summary>
      /// Whether or not to send the request url in encoded format
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? EncodeRequestUrl
      {
        get { return EncodeRequestUrlElement != null ? EncodeRequestUrlElement.Value : null; }
        set
        {
          if (value == null)
            EncodeRequestUrlElement = null;
          else
            EncodeRequestUrlElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("EncodeRequestUrl");
        }
      }

      /// <summary>
      /// Server initiating the request
      /// </summary>
      [FhirElement("origin", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.Integer OriginElement
      {
        get { return _OriginElement; }
        set { _OriginElement = value; OnPropertyChanged("OriginElement"); }
      }

      private Hl7.Fhir.Model.Integer _OriginElement;

      /// <summary>
      /// Server initiating the request
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public int? Origin
      {
        get { return OriginElement != null ? OriginElement.Value : null; }
        set
        {
          if (value == null)
            OriginElement = null;
          else
            OriginElement = new Hl7.Fhir.Model.Integer(value);
          OnPropertyChanged("Origin");
        }
      }

      /// <summary>
      /// Explicitly defined path parameters
      /// </summary>
      [FhirElement("params", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ParamsElement
      {
        get { return _ParamsElement; }
        set { _ParamsElement = value; OnPropertyChanged("ParamsElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ParamsElement;

      /// <summary>
      /// Explicitly defined path parameters
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Params
      {
        get { return ParamsElement != null ? ParamsElement.Value : null; }
        set
        {
          if (value == null)
            ParamsElement = null;
          else
            ParamsElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Params");
        }
      }

      /// <summary>
      /// Each operation can have one or more header elements
      /// </summary>
      [FhirElement("requestHeader", Order=140)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.RequestHeaderComponent> RequestHeader
      {
        get { if(_RequestHeader==null) _RequestHeader = new List<Hl7.Fhir.Model.TestScript.RequestHeaderComponent>(); return _RequestHeader; }
        set { _RequestHeader = value; OnPropertyChanged("RequestHeader"); }
      }

      private List<Hl7.Fhir.Model.TestScript.RequestHeaderComponent> _RequestHeader;

      /// <summary>
      /// Fixture Id of mapped request
      /// </summary>
      [FhirElement("requestId", Order=150)]
      [DataMember]
      public Hl7.Fhir.Model.Id RequestIdElement
      {
        get { return _RequestIdElement; }
        set { _RequestIdElement = value; OnPropertyChanged("RequestIdElement"); }
      }

      private Hl7.Fhir.Model.Id _RequestIdElement;

      /// <summary>
      /// Fixture Id of mapped request
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RequestId
      {
        get { return RequestIdElement != null ? RequestIdElement.Value : null; }
        set
        {
          if (value == null)
            RequestIdElement = null;
          else
            RequestIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("RequestId");
        }
      }

      /// <summary>
      /// Fixture Id of mapped response
      /// </summary>
      [FhirElement("responseId", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.Id ResponseIdElement
      {
        get { return _ResponseIdElement; }
        set { _ResponseIdElement = value; OnPropertyChanged("ResponseIdElement"); }
      }

      private Hl7.Fhir.Model.Id _ResponseIdElement;

      /// <summary>
      /// Fixture Id of mapped response
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ResponseId
      {
        get { return ResponseIdElement != null ? ResponseIdElement.Value : null; }
        set
        {
          if (value == null)
            ResponseIdElement = null;
          else
            ResponseIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("ResponseId");
        }
      }

      /// <summary>
      /// Fixture Id of body for PUT and POST requests
      /// </summary>
      [FhirElement("sourceId", Order=170)]
      [DataMember]
      public Hl7.Fhir.Model.Id SourceIdElement
      {
        get { return _SourceIdElement; }
        set { _SourceIdElement = value; OnPropertyChanged("SourceIdElement"); }
      }

      private Hl7.Fhir.Model.Id _SourceIdElement;

      /// <summary>
      /// Fixture Id of body for PUT and POST requests
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SourceId
      {
        get { return SourceIdElement != null ? SourceIdElement.Value : null; }
        set
        {
          if (value == null)
            SourceIdElement = null;
          else
            SourceIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("SourceId");
        }
      }

      /// <summary>
      /// Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
      /// </summary>
      [FhirElement("targetId", Order=180)]
      [DataMember]
      public Hl7.Fhir.Model.Id TargetIdElement
      {
        get { return _TargetIdElement; }
        set { _TargetIdElement = value; OnPropertyChanged("TargetIdElement"); }
      }

      private Hl7.Fhir.Model.Id _TargetIdElement;

      /// <summary>
      /// Id of fixture used for extracting the [id],  [type], and [vid] for GET requests
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string TargetId
      {
        get { return TargetIdElement != null ? TargetIdElement.Value : null; }
        set
        {
          if (value == null)
            TargetIdElement = null;
          else
            TargetIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("TargetId");
        }
      }

      /// <summary>
      /// Request URL
      /// </summary>
      [FhirElement("url", Order=190)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString UrlElement
      {
        get { return _UrlElement; }
        set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
      }

      private Hl7.Fhir.Model.FhirString _UrlElement;

      /// <summary>
      /// Request URL
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Url
      {
        get { return UrlElement != null ? UrlElement.Value : null; }
        set
        {
          if (value == null)
            UrlElement = null;
          else
            UrlElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Url");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as OperationComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Type != null) dest.Type = (Hl7.Fhir.Model.Coding)Type.DeepCopy();
        if(ResourceElement != null) dest.ResourceElement = (Code<Hl7.Fhir.Model.FHIRDefinedType>)ResourceElement.DeepCopy();
        if(LabelElement != null) dest.LabelElement = (Hl7.Fhir.Model.FhirString)LabelElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(AcceptElement != null) dest.AcceptElement = (Code<Hl7.Fhir.Model.TestScript.ContentTypeCode>)AcceptElement.DeepCopy();
        if(ContentTypeElement != null) dest.ContentTypeElement = (Code<Hl7.Fhir.Model.TestScript.ContentTypeCode>)ContentTypeElement.DeepCopy();
        if(DestinationElement != null) dest.DestinationElement = (Hl7.Fhir.Model.Integer)DestinationElement.DeepCopy();
        if(EncodeRequestUrlElement != null) dest.EncodeRequestUrlElement = (Hl7.Fhir.Model.FhirBoolean)EncodeRequestUrlElement.DeepCopy();
        if(OriginElement != null) dest.OriginElement = (Hl7.Fhir.Model.Integer)OriginElement.DeepCopy();
        if(ParamsElement != null) dest.ParamsElement = (Hl7.Fhir.Model.FhirString)ParamsElement.DeepCopy();
        if(RequestHeader != null) dest.RequestHeader = new List<Hl7.Fhir.Model.TestScript.RequestHeaderComponent>(RequestHeader.DeepCopy());
        if(RequestIdElement != null) dest.RequestIdElement = (Hl7.Fhir.Model.Id)RequestIdElement.DeepCopy();
        if(ResponseIdElement != null) dest.ResponseIdElement = (Hl7.Fhir.Model.Id)ResponseIdElement.DeepCopy();
        if(SourceIdElement != null) dest.SourceIdElement = (Hl7.Fhir.Model.Id)SourceIdElement.DeepCopy();
        if(TargetIdElement != null) dest.TargetIdElement = (Hl7.Fhir.Model.Id)TargetIdElement.DeepCopy();
        if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirString)UrlElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new OperationComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Type, otherT.Type)) return false;
        if( !DeepComparable.Matches(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.Matches(LabelElement, otherT.LabelElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(AcceptElement, otherT.AcceptElement)) return false;
        if( !DeepComparable.Matches(ContentTypeElement, otherT.ContentTypeElement)) return false;
        if( !DeepComparable.Matches(DestinationElement, otherT.DestinationElement)) return false;
        if( !DeepComparable.Matches(EncodeRequestUrlElement, otherT.EncodeRequestUrlElement)) return false;
        if( !DeepComparable.Matches(OriginElement, otherT.OriginElement)) return false;
        if( !DeepComparable.Matches(ParamsElement, otherT.ParamsElement)) return false;
        if( !DeepComparable.Matches(RequestHeader, otherT.RequestHeader)) return false;
        if( !DeepComparable.Matches(RequestIdElement, otherT.RequestIdElement)) return false;
        if( !DeepComparable.Matches(ResponseIdElement, otherT.ResponseIdElement)) return false;
        if( !DeepComparable.Matches(SourceIdElement, otherT.SourceIdElement)) return false;
        if( !DeepComparable.Matches(TargetIdElement, otherT.TargetIdElement)) return false;
        if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as OperationComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Type, otherT.Type)) return false;
        if( !DeepComparable.IsExactly(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.IsExactly(LabelElement, otherT.LabelElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(AcceptElement, otherT.AcceptElement)) return false;
        if( !DeepComparable.IsExactly(ContentTypeElement, otherT.ContentTypeElement)) return false;
        if( !DeepComparable.IsExactly(DestinationElement, otherT.DestinationElement)) return false;
        if( !DeepComparable.IsExactly(EncodeRequestUrlElement, otherT.EncodeRequestUrlElement)) return false;
        if( !DeepComparable.IsExactly(OriginElement, otherT.OriginElement)) return false;
        if( !DeepComparable.IsExactly(ParamsElement, otherT.ParamsElement)) return false;
        if( !DeepComparable.IsExactly(RequestHeader, otherT.RequestHeader)) return false;
        if( !DeepComparable.IsExactly(RequestIdElement, otherT.RequestIdElement)) return false;
        if( !DeepComparable.IsExactly(ResponseIdElement, otherT.ResponseIdElement)) return false;
        if( !DeepComparable.IsExactly(SourceIdElement, otherT.SourceIdElement)) return false;
        if( !DeepComparable.IsExactly(TargetIdElement, otherT.TargetIdElement)) return false;
        if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Type != null) yield return Type;
          if (ResourceElement != null) yield return ResourceElement;
          if (LabelElement != null) yield return LabelElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (AcceptElement != null) yield return AcceptElement;
          if (ContentTypeElement != null) yield return ContentTypeElement;
          if (DestinationElement != null) yield return DestinationElement;
          if (EncodeRequestUrlElement != null) yield return EncodeRequestUrlElement;
          if (OriginElement != null) yield return OriginElement;
          if (ParamsElement != null) yield return ParamsElement;
          foreach (var elem in RequestHeader) { if (elem != null) yield return elem; }
          if (RequestIdElement != null) yield return RequestIdElement;
          if (ResponseIdElement != null) yield return ResponseIdElement;
          if (SourceIdElement != null) yield return SourceIdElement;
          if (TargetIdElement != null) yield return TargetIdElement;
          if (UrlElement != null) yield return UrlElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Type != null) yield return new ElementValue("type", Type);
          if (ResourceElement != null) yield return new ElementValue("resource", ResourceElement);
          if (LabelElement != null) yield return new ElementValue("label", LabelElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (AcceptElement != null) yield return new ElementValue("accept", AcceptElement);
          if (ContentTypeElement != null) yield return new ElementValue("contentType", ContentTypeElement);
          if (DestinationElement != null) yield return new ElementValue("destination", DestinationElement);
          if (EncodeRequestUrlElement != null) yield return new ElementValue("encodeRequestUrl", EncodeRequestUrlElement);
          if (OriginElement != null) yield return new ElementValue("origin", OriginElement);
          if (ParamsElement != null) yield return new ElementValue("params", ParamsElement);
          foreach (var elem in RequestHeader) { if (elem != null) yield return new ElementValue("requestHeader", elem); }
          if (RequestIdElement != null) yield return new ElementValue("requestId", RequestIdElement);
          if (ResponseIdElement != null) yield return new ElementValue("responseId", ResponseIdElement);
          if (SourceIdElement != null) yield return new ElementValue("sourceId", SourceIdElement);
          if (TargetIdElement != null) yield return new ElementValue("targetId", TargetIdElement);
          if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "type":
            value = Type;
            return Type is not null;
          case "resource":
            value = ResourceElement;
            return ResourceElement is not null;
          case "label":
            value = LabelElement;
            return LabelElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "accept":
            value = AcceptElement;
            return AcceptElement is not null;
          case "contentType":
            value = ContentTypeElement;
            return ContentTypeElement is not null;
          case "destination":
            value = DestinationElement;
            return DestinationElement is not null;
          case "encodeRequestUrl":
            value = EncodeRequestUrlElement;
            return EncodeRequestUrlElement is not null;
          case "origin":
            value = OriginElement;
            return OriginElement is not null;
          case "params":
            value = ParamsElement;
            return ParamsElement is not null;
          case "requestHeader":
            value = RequestHeader;
            return RequestHeader?.Any() == true;
          case "requestId":
            value = RequestIdElement;
            return RequestIdElement is not null;
          case "responseId":
            value = ResponseIdElement;
            return ResponseIdElement is not null;
          case "sourceId":
            value = SourceIdElement;
            return SourceIdElement is not null;
          case "targetId":
            value = TargetIdElement;
            return TargetIdElement is not null;
          case "url":
            value = UrlElement;
            return UrlElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Type is not null) yield return new KeyValuePair<string,object>("type",Type);
        if (ResourceElement is not null) yield return new KeyValuePair<string,object>("resource",ResourceElement);
        if (LabelElement is not null) yield return new KeyValuePair<string,object>("label",LabelElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (AcceptElement is not null) yield return new KeyValuePair<string,object>("accept",AcceptElement);
        if (ContentTypeElement is not null) yield return new KeyValuePair<string,object>("contentType",ContentTypeElement);
        if (DestinationElement is not null) yield return new KeyValuePair<string,object>("destination",DestinationElement);
        if (EncodeRequestUrlElement is not null) yield return new KeyValuePair<string,object>("encodeRequestUrl",EncodeRequestUrlElement);
        if (OriginElement is not null) yield return new KeyValuePair<string,object>("origin",OriginElement);
        if (ParamsElement is not null) yield return new KeyValuePair<string,object>("params",ParamsElement);
        if (RequestHeader?.Any() == true) yield return new KeyValuePair<string,object>("requestHeader",RequestHeader);
        if (RequestIdElement is not null) yield return new KeyValuePair<string,object>("requestId",RequestIdElement);
        if (ResponseIdElement is not null) yield return new KeyValuePair<string,object>("responseId",ResponseIdElement);
        if (SourceIdElement is not null) yield return new KeyValuePair<string,object>("sourceId",SourceIdElement);
        if (TargetIdElement is not null) yield return new KeyValuePair<string,object>("targetId",TargetIdElement);
        if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      }

    }

    /// <summary>
    /// Each operation can have one or more header elements
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#RequestHeader", IsNestedType=true)]
    public partial class RequestHeaderComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#RequestHeader"; } }

      /// <summary>
      /// HTTP header field name
      /// </summary>
      [FhirElement("field", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString FieldElement
      {
        get { return _FieldElement; }
        set { _FieldElement = value; OnPropertyChanged("FieldElement"); }
      }

      private Hl7.Fhir.Model.FhirString _FieldElement;

      /// <summary>
      /// HTTP header field name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Field
      {
        get { return FieldElement != null ? FieldElement.Value : null; }
        set
        {
          if (value == null)
            FieldElement = null;
          else
            FieldElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Field");
        }
      }

      /// <summary>
      /// HTTP headerfield value
      /// </summary>
      [FhirElement("value", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// HTTP headerfield value
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as RequestHeaderComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(FieldElement != null) dest.FieldElement = (Hl7.Fhir.Model.FhirString)FieldElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new RequestHeaderComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as RequestHeaderComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(FieldElement, otherT.FieldElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as RequestHeaderComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(FieldElement, otherT.FieldElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (FieldElement != null) yield return FieldElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (FieldElement != null) yield return new ElementValue("field", FieldElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "field":
            value = FieldElement;
            return FieldElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (FieldElement is not null) yield return new KeyValuePair<string,object>("field",FieldElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// The assertion to perform
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Assert", IsNestedType=true)]
    public partial class AssertComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Assert"; } }

      /// <summary>
      /// Tracking/logging assertion label
      /// </summary>
      [FhirElement("label", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString LabelElement
      {
        get { return _LabelElement; }
        set { _LabelElement = value; OnPropertyChanged("LabelElement"); }
      }

      private Hl7.Fhir.Model.FhirString _LabelElement;

      /// <summary>
      /// Tracking/logging assertion label
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Label
      {
        get { return LabelElement != null ? LabelElement.Value : null; }
        set
        {
          if (value == null)
            LabelElement = null;
          else
            LabelElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Label");
        }
      }

      /// <summary>
      /// Tracking/reporting assertion description
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Tracking/reporting assertion description
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// response | request
      /// </summary>
      [FhirElement("direction", Order=60)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType> DirectionElement
      {
        get { return _DirectionElement; }
        set { _DirectionElement = value; OnPropertyChanged("DirectionElement"); }
      }

      private Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType> _DirectionElement;

      /// <summary>
      /// response | request
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.TestScript.AssertionDirectionType? Direction
      {
        get { return DirectionElement != null ? DirectionElement.Value : null; }
        set
        {
          if (value == null)
            DirectionElement = null;
          else
            DirectionElement = new Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>(value);
          OnPropertyChanged("Direction");
        }
      }

      /// <summary>
      /// Id of the source fixture to be evaluated
      /// </summary>
      [FhirElement("compareToSourceId", Order=70)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CompareToSourceIdElement
      {
        get { return _CompareToSourceIdElement; }
        set { _CompareToSourceIdElement = value; OnPropertyChanged("CompareToSourceIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CompareToSourceIdElement;

      /// <summary>
      /// Id of the source fixture to be evaluated
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string CompareToSourceId
      {
        get { return CompareToSourceIdElement != null ? CompareToSourceIdElement.Value : null; }
        set
        {
          if (value == null)
            CompareToSourceIdElement = null;
          else
            CompareToSourceIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("CompareToSourceId");
        }
      }

      /// <summary>
      /// The fluentpath expression to evaluate against the source fixture
      /// </summary>
      [FhirElement("compareToSourceExpression", Order=80)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CompareToSourceExpressionElement
      {
        get { return _CompareToSourceExpressionElement; }
        set { _CompareToSourceExpressionElement = value; OnPropertyChanged("CompareToSourceExpressionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CompareToSourceExpressionElement;

      /// <summary>
      /// The fluentpath expression to evaluate against the source fixture
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string CompareToSourceExpression
      {
        get { return CompareToSourceExpressionElement != null ? CompareToSourceExpressionElement.Value : null; }
        set
        {
          if (value == null)
            CompareToSourceExpressionElement = null;
          else
            CompareToSourceExpressionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("CompareToSourceExpression");
        }
      }

      /// <summary>
      /// XPath or JSONPath expression to evaluate against the source fixture
      /// </summary>
      [FhirElement("compareToSourcePath", Order=90)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString CompareToSourcePathElement
      {
        get { return _CompareToSourcePathElement; }
        set { _CompareToSourcePathElement = value; OnPropertyChanged("CompareToSourcePathElement"); }
      }

      private Hl7.Fhir.Model.FhirString _CompareToSourcePathElement;

      /// <summary>
      /// XPath or JSONPath expression to evaluate against the source fixture
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string CompareToSourcePath
      {
        get { return CompareToSourcePathElement != null ? CompareToSourcePathElement.Value : null; }
        set
        {
          if (value == null)
            CompareToSourcePathElement = null;
          else
            CompareToSourcePathElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("CompareToSourcePath");
        }
      }

      /// <summary>
      /// xml | json | ttl | none
      /// </summary>
      [FhirElement("contentType", Order=100)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.TestScript.ContentTypeCode> ContentTypeElement
      {
        get { return _ContentTypeElement; }
        set { _ContentTypeElement = value; OnPropertyChanged("ContentTypeElement"); }
      }

      private Code<Hl7.Fhir.Model.TestScript.ContentTypeCode> _ContentTypeElement;

      /// <summary>
      /// xml | json | ttl | none
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.TestScript.ContentTypeCode? ContentType
      {
        get { return ContentTypeElement != null ? ContentTypeElement.Value : null; }
        set
        {
          if (value == null)
            ContentTypeElement = null;
          else
            ContentTypeElement = new Code<Hl7.Fhir.Model.TestScript.ContentTypeCode>(value);
          OnPropertyChanged("ContentType");
        }
      }

      /// <summary>
      /// The fluentpath expression to be evaluated
      /// </summary>
      [FhirElement("expression", Order=110)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ExpressionElement
      {
        get { return _ExpressionElement; }
        set { _ExpressionElement = value; OnPropertyChanged("ExpressionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ExpressionElement;

      /// <summary>
      /// The fluentpath expression to be evaluated
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Expression
      {
        get { return ExpressionElement != null ? ExpressionElement.Value : null; }
        set
        {
          if (value == null)
            ExpressionElement = null;
          else
            ExpressionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Expression");
        }
      }

      /// <summary>
      /// HTTP header field name
      /// </summary>
      [FhirElement("headerField", Order=120)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString HeaderFieldElement
      {
        get { return _HeaderFieldElement; }
        set { _HeaderFieldElement = value; OnPropertyChanged("HeaderFieldElement"); }
      }

      private Hl7.Fhir.Model.FhirString _HeaderFieldElement;

      /// <summary>
      /// HTTP header field name
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string HeaderField
      {
        get { return HeaderFieldElement != null ? HeaderFieldElement.Value : null; }
        set
        {
          if (value == null)
            HeaderFieldElement = null;
          else
            HeaderFieldElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("HeaderField");
        }
      }

      /// <summary>
      /// Fixture Id of minimum content resource
      /// </summary>
      [FhirElement("minimumId", Order=130)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString MinimumIdElement
      {
        get { return _MinimumIdElement; }
        set { _MinimumIdElement = value; OnPropertyChanged("MinimumIdElement"); }
      }

      private Hl7.Fhir.Model.FhirString _MinimumIdElement;

      /// <summary>
      /// Fixture Id of minimum content resource
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string MinimumId
      {
        get { return MinimumIdElement != null ? MinimumIdElement.Value : null; }
        set
        {
          if (value == null)
            MinimumIdElement = null;
          else
            MinimumIdElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("MinimumId");
        }
      }

      /// <summary>
      /// Perform validation on navigation links?
      /// </summary>
      [FhirElement("navigationLinks", Order=140)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean NavigationLinksElement
      {
        get { return _NavigationLinksElement; }
        set { _NavigationLinksElement = value; OnPropertyChanged("NavigationLinksElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _NavigationLinksElement;

      /// <summary>
      /// Perform validation on navigation links?
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? NavigationLinks
      {
        get { return NavigationLinksElement != null ? NavigationLinksElement.Value : null; }
        set
        {
          if (value == null)
            NavigationLinksElement = null;
          else
            NavigationLinksElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("NavigationLinks");
        }
      }

      /// <summary>
      /// equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval
      /// </summary>
      [FhirElement("operator", Order=150)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType> OperatorElement
      {
        get { return _OperatorElement; }
        set { _OperatorElement = value; OnPropertyChanged("OperatorElement"); }
      }

      private Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType> _OperatorElement;

      /// <summary>
      /// equals | notEquals | in | notIn | greaterThan | lessThan | empty | notEmpty | contains | notContains | eval
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.TestScript.AssertionOperatorType? Operator
      {
        get { return OperatorElement != null ? OperatorElement.Value : null; }
        set
        {
          if (value == null)
            OperatorElement = null;
          else
            OperatorElement = new Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>(value);
          OnPropertyChanged("Operator");
        }
      }

      /// <summary>
      /// XPath or JSONPath expression
      /// </summary>
      [FhirElement("path", Order=160)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString PathElement
      {
        get { return _PathElement; }
        set { _PathElement = value; OnPropertyChanged("PathElement"); }
      }

      private Hl7.Fhir.Model.FhirString _PathElement;

      /// <summary>
      /// XPath or JSONPath expression
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Path
      {
        get { return PathElement != null ? PathElement.Value : null; }
        set
        {
          if (value == null)
            PathElement = null;
          else
            PathElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Path");
        }
      }

      /// <summary>
      /// delete | get | options | patch | post | put
      /// </summary>
      [FhirElement("requestMethod", Order=170)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode> RequestMethodElement
      {
        get { return _RequestMethodElement; }
        set { _RequestMethodElement = value; OnPropertyChanged("RequestMethodElement"); }
      }

      private Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode> _RequestMethodElement;

      /// <summary>
      /// delete | get | options | patch | post | put
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode? RequestMethod
      {
        get { return RequestMethodElement != null ? RequestMethodElement.Value : null; }
        set
        {
          if (value == null)
            RequestMethodElement = null;
          else
            RequestMethodElement = new Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>(value);
          OnPropertyChanged("RequestMethod");
        }
      }

      /// <summary>
      /// Request URL comparison value
      /// </summary>
      [FhirElement("requestURL", Order=180)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString RequestURLElement
      {
        get { return _RequestURLElement; }
        set { _RequestURLElement = value; OnPropertyChanged("RequestURLElement"); }
      }

      private Hl7.Fhir.Model.FhirString _RequestURLElement;

      /// <summary>
      /// Request URL comparison value
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RequestURL
      {
        get { return RequestURLElement != null ? RequestURLElement.Value : null; }
        set
        {
          if (value == null)
            RequestURLElement = null;
          else
            RequestURLElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("RequestURL");
        }
      }

      /// <summary>
      /// Resource type
      /// </summary>
      [FhirElement("resource", Order=190)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.FHIRDefinedType> ResourceElement
      {
        get { return _ResourceElement; }
        set { _ResourceElement = value; OnPropertyChanged("ResourceElement"); }
      }

      private Code<Hl7.Fhir.Model.FHIRDefinedType> _ResourceElement;

      /// <summary>
      /// Resource type
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.FHIRDefinedType? Resource
      {
        get { return ResourceElement != null ? ResourceElement.Value : null; }
        set
        {
          if (value == null)
            ResourceElement = null;
          else
            ResourceElement = new Code<Hl7.Fhir.Model.FHIRDefinedType>(value);
          OnPropertyChanged("Resource");
        }
      }

      /// <summary>
      /// okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
      /// </summary>
      [FhirElement("response", Order=200)]
      [DeclaredType(Type = typeof(Code))]
      [DataMember]
      public Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes> ResponseElement
      {
        get { return _ResponseElement; }
        set { _ResponseElement = value; OnPropertyChanged("ResponseElement"); }
      }

      private Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes> _ResponseElement;

      /// <summary>
      /// okay | created | noContent | notModified | bad | forbidden | notFound | methodNotAllowed | conflict | gone | preconditionFailed | unprocessable
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public Hl7.Fhir.Model.TestScript.AssertionResponseTypes? Response
      {
        get { return ResponseElement != null ? ResponseElement.Value : null; }
        set
        {
          if (value == null)
            ResponseElement = null;
          else
            ResponseElement = new Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>(value);
          OnPropertyChanged("Response");
        }
      }

      /// <summary>
      /// HTTP response code to test
      /// </summary>
      [FhirElement("responseCode", Order=210)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ResponseCodeElement
      {
        get { return _ResponseCodeElement; }
        set { _ResponseCodeElement = value; OnPropertyChanged("ResponseCodeElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ResponseCodeElement;

      /// <summary>
      /// HTTP response code to test
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ResponseCode
      {
        get { return ResponseCodeElement != null ? ResponseCodeElement.Value : null; }
        set
        {
          if (value == null)
            ResponseCodeElement = null;
          else
            ResponseCodeElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("ResponseCode");
        }
      }

      /// <summary>
      /// The reference to a TestScript.rule
      /// </summary>
      [FhirElement("rule", Order=220)]
      [DataMember]
      public Hl7.Fhir.Model.TestScript.ActionAssertRuleComponent Rule
      {
        get { return _Rule; }
        set { _Rule = value; OnPropertyChanged("Rule"); }
      }

      private Hl7.Fhir.Model.TestScript.ActionAssertRuleComponent _Rule;

      /// <summary>
      /// The reference to a TestScript.ruleset
      /// </summary>
      [FhirElement("ruleset", Order=230)]
      [DataMember]
      public Hl7.Fhir.Model.TestScript.ActionAssertRulesetComponent Ruleset
      {
        get { return _Ruleset; }
        set { _Ruleset = value; OnPropertyChanged("Ruleset"); }
      }

      private Hl7.Fhir.Model.TestScript.ActionAssertRulesetComponent _Ruleset;

      /// <summary>
      /// Fixture Id of source expression or headerField
      /// </summary>
      [FhirElement("sourceId", Order=240)]
      [DataMember]
      public Hl7.Fhir.Model.Id SourceIdElement
      {
        get { return _SourceIdElement; }
        set { _SourceIdElement = value; OnPropertyChanged("SourceIdElement"); }
      }

      private Hl7.Fhir.Model.Id _SourceIdElement;

      /// <summary>
      /// Fixture Id of source expression or headerField
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string SourceId
      {
        get { return SourceIdElement != null ? SourceIdElement.Value : null; }
        set
        {
          if (value == null)
            SourceIdElement = null;
          else
            SourceIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("SourceId");
        }
      }

      /// <summary>
      /// Profile Id of validation profile reference
      /// </summary>
      [FhirElement("validateProfileId", Order=250)]
      [DataMember]
      public Hl7.Fhir.Model.Id ValidateProfileIdElement
      {
        get { return _ValidateProfileIdElement; }
        set { _ValidateProfileIdElement = value; OnPropertyChanged("ValidateProfileIdElement"); }
      }

      private Hl7.Fhir.Model.Id _ValidateProfileIdElement;

      /// <summary>
      /// Profile Id of validation profile reference
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string ValidateProfileId
      {
        get { return ValidateProfileIdElement != null ? ValidateProfileIdElement.Value : null; }
        set
        {
          if (value == null)
            ValidateProfileIdElement = null;
          else
            ValidateProfileIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("ValidateProfileId");
        }
      }

      /// <summary>
      /// The value to compare to
      /// </summary>
      [FhirElement("value", Order=260)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// The value to compare to
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      /// <summary>
      /// Will this assert produce a warning only on error?
      /// </summary>
      [FhirElement("warningOnly", Order=270)]
      [DataMember]
      public Hl7.Fhir.Model.FhirBoolean WarningOnlyElement
      {
        get { return _WarningOnlyElement; }
        set { _WarningOnlyElement = value; OnPropertyChanged("WarningOnlyElement"); }
      }

      private Hl7.Fhir.Model.FhirBoolean _WarningOnlyElement;

      /// <summary>
      /// Will this assert produce a warning only on error?
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public bool? WarningOnly
      {
        get { return WarningOnlyElement != null ? WarningOnlyElement.Value : null; }
        set
        {
          if (value == null)
            WarningOnlyElement = null;
          else
            WarningOnlyElement = new Hl7.Fhir.Model.FhirBoolean(value);
          OnPropertyChanged("WarningOnly");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as AssertComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(LabelElement != null) dest.LabelElement = (Hl7.Fhir.Model.FhirString)LabelElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(DirectionElement != null) dest.DirectionElement = (Code<Hl7.Fhir.Model.TestScript.AssertionDirectionType>)DirectionElement.DeepCopy();
        if(CompareToSourceIdElement != null) dest.CompareToSourceIdElement = (Hl7.Fhir.Model.FhirString)CompareToSourceIdElement.DeepCopy();
        if(CompareToSourceExpressionElement != null) dest.CompareToSourceExpressionElement = (Hl7.Fhir.Model.FhirString)CompareToSourceExpressionElement.DeepCopy();
        if(CompareToSourcePathElement != null) dest.CompareToSourcePathElement = (Hl7.Fhir.Model.FhirString)CompareToSourcePathElement.DeepCopy();
        if(ContentTypeElement != null) dest.ContentTypeElement = (Code<Hl7.Fhir.Model.TestScript.ContentTypeCode>)ContentTypeElement.DeepCopy();
        if(ExpressionElement != null) dest.ExpressionElement = (Hl7.Fhir.Model.FhirString)ExpressionElement.DeepCopy();
        if(HeaderFieldElement != null) dest.HeaderFieldElement = (Hl7.Fhir.Model.FhirString)HeaderFieldElement.DeepCopy();
        if(MinimumIdElement != null) dest.MinimumIdElement = (Hl7.Fhir.Model.FhirString)MinimumIdElement.DeepCopy();
        if(NavigationLinksElement != null) dest.NavigationLinksElement = (Hl7.Fhir.Model.FhirBoolean)NavigationLinksElement.DeepCopy();
        if(OperatorElement != null) dest.OperatorElement = (Code<Hl7.Fhir.Model.TestScript.AssertionOperatorType>)OperatorElement.DeepCopy();
        if(PathElement != null) dest.PathElement = (Hl7.Fhir.Model.FhirString)PathElement.DeepCopy();
        if(RequestMethodElement != null) dest.RequestMethodElement = (Code<Hl7.Fhir.Model.TestScript.TestScriptRequestMethodCode>)RequestMethodElement.DeepCopy();
        if(RequestURLElement != null) dest.RequestURLElement = (Hl7.Fhir.Model.FhirString)RequestURLElement.DeepCopy();
        if(ResourceElement != null) dest.ResourceElement = (Code<Hl7.Fhir.Model.FHIRDefinedType>)ResourceElement.DeepCopy();
        if(ResponseElement != null) dest.ResponseElement = (Code<Hl7.Fhir.Model.TestScript.AssertionResponseTypes>)ResponseElement.DeepCopy();
        if(ResponseCodeElement != null) dest.ResponseCodeElement = (Hl7.Fhir.Model.FhirString)ResponseCodeElement.DeepCopy();
        if(Rule != null) dest.Rule = (Hl7.Fhir.Model.TestScript.ActionAssertRuleComponent)Rule.DeepCopy();
        if(Ruleset != null) dest.Ruleset = (Hl7.Fhir.Model.TestScript.ActionAssertRulesetComponent)Ruleset.DeepCopy();
        if(SourceIdElement != null) dest.SourceIdElement = (Hl7.Fhir.Model.Id)SourceIdElement.DeepCopy();
        if(ValidateProfileIdElement != null) dest.ValidateProfileIdElement = (Hl7.Fhir.Model.Id)ValidateProfileIdElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        if(WarningOnlyElement != null) dest.WarningOnlyElement = (Hl7.Fhir.Model.FhirBoolean)WarningOnlyElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new AssertComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as AssertComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(LabelElement, otherT.LabelElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(DirectionElement, otherT.DirectionElement)) return false;
        if( !DeepComparable.Matches(CompareToSourceIdElement, otherT.CompareToSourceIdElement)) return false;
        if( !DeepComparable.Matches(CompareToSourceExpressionElement, otherT.CompareToSourceExpressionElement)) return false;
        if( !DeepComparable.Matches(CompareToSourcePathElement, otherT.CompareToSourcePathElement)) return false;
        if( !DeepComparable.Matches(ContentTypeElement, otherT.ContentTypeElement)) return false;
        if( !DeepComparable.Matches(ExpressionElement, otherT.ExpressionElement)) return false;
        if( !DeepComparable.Matches(HeaderFieldElement, otherT.HeaderFieldElement)) return false;
        if( !DeepComparable.Matches(MinimumIdElement, otherT.MinimumIdElement)) return false;
        if( !DeepComparable.Matches(NavigationLinksElement, otherT.NavigationLinksElement)) return false;
        if( !DeepComparable.Matches(OperatorElement, otherT.OperatorElement)) return false;
        if( !DeepComparable.Matches(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.Matches(RequestMethodElement, otherT.RequestMethodElement)) return false;
        if( !DeepComparable.Matches(RequestURLElement, otherT.RequestURLElement)) return false;
        if( !DeepComparable.Matches(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.Matches(ResponseElement, otherT.ResponseElement)) return false;
        if( !DeepComparable.Matches(ResponseCodeElement, otherT.ResponseCodeElement)) return false;
        if( !DeepComparable.Matches(Rule, otherT.Rule)) return false;
        if( !DeepComparable.Matches(Ruleset, otherT.Ruleset)) return false;
        if( !DeepComparable.Matches(SourceIdElement, otherT.SourceIdElement)) return false;
        if( !DeepComparable.Matches(ValidateProfileIdElement, otherT.ValidateProfileIdElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.Matches(WarningOnlyElement, otherT.WarningOnlyElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as AssertComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(LabelElement, otherT.LabelElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(DirectionElement, otherT.DirectionElement)) return false;
        if( !DeepComparable.IsExactly(CompareToSourceIdElement, otherT.CompareToSourceIdElement)) return false;
        if( !DeepComparable.IsExactly(CompareToSourceExpressionElement, otherT.CompareToSourceExpressionElement)) return false;
        if( !DeepComparable.IsExactly(CompareToSourcePathElement, otherT.CompareToSourcePathElement)) return false;
        if( !DeepComparable.IsExactly(ContentTypeElement, otherT.ContentTypeElement)) return false;
        if( !DeepComparable.IsExactly(ExpressionElement, otherT.ExpressionElement)) return false;
        if( !DeepComparable.IsExactly(HeaderFieldElement, otherT.HeaderFieldElement)) return false;
        if( !DeepComparable.IsExactly(MinimumIdElement, otherT.MinimumIdElement)) return false;
        if( !DeepComparable.IsExactly(NavigationLinksElement, otherT.NavigationLinksElement)) return false;
        if( !DeepComparable.IsExactly(OperatorElement, otherT.OperatorElement)) return false;
        if( !DeepComparable.IsExactly(PathElement, otherT.PathElement)) return false;
        if( !DeepComparable.IsExactly(RequestMethodElement, otherT.RequestMethodElement)) return false;
        if( !DeepComparable.IsExactly(RequestURLElement, otherT.RequestURLElement)) return false;
        if( !DeepComparable.IsExactly(ResourceElement, otherT.ResourceElement)) return false;
        if( !DeepComparable.IsExactly(ResponseElement, otherT.ResponseElement)) return false;
        if( !DeepComparable.IsExactly(ResponseCodeElement, otherT.ResponseCodeElement)) return false;
        if( !DeepComparable.IsExactly(Rule, otherT.Rule)) return false;
        if( !DeepComparable.IsExactly(Ruleset, otherT.Ruleset)) return false;
        if( !DeepComparable.IsExactly(SourceIdElement, otherT.SourceIdElement)) return false;
        if( !DeepComparable.IsExactly(ValidateProfileIdElement, otherT.ValidateProfileIdElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;
        if( !DeepComparable.IsExactly(WarningOnlyElement, otherT.WarningOnlyElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (LabelElement != null) yield return LabelElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          if (DirectionElement != null) yield return DirectionElement;
          if (CompareToSourceIdElement != null) yield return CompareToSourceIdElement;
          if (CompareToSourceExpressionElement != null) yield return CompareToSourceExpressionElement;
          if (CompareToSourcePathElement != null) yield return CompareToSourcePathElement;
          if (ContentTypeElement != null) yield return ContentTypeElement;
          if (ExpressionElement != null) yield return ExpressionElement;
          if (HeaderFieldElement != null) yield return HeaderFieldElement;
          if (MinimumIdElement != null) yield return MinimumIdElement;
          if (NavigationLinksElement != null) yield return NavigationLinksElement;
          if (OperatorElement != null) yield return OperatorElement;
          if (PathElement != null) yield return PathElement;
          if (RequestMethodElement != null) yield return RequestMethodElement;
          if (RequestURLElement != null) yield return RequestURLElement;
          if (ResourceElement != null) yield return ResourceElement;
          if (ResponseElement != null) yield return ResponseElement;
          if (ResponseCodeElement != null) yield return ResponseCodeElement;
          if (Rule != null) yield return Rule;
          if (Ruleset != null) yield return Ruleset;
          if (SourceIdElement != null) yield return SourceIdElement;
          if (ValidateProfileIdElement != null) yield return ValidateProfileIdElement;
          if (ValueElement != null) yield return ValueElement;
          if (WarningOnlyElement != null) yield return WarningOnlyElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (LabelElement != null) yield return new ElementValue("label", LabelElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          if (DirectionElement != null) yield return new ElementValue("direction", DirectionElement);
          if (CompareToSourceIdElement != null) yield return new ElementValue("compareToSourceId", CompareToSourceIdElement);
          if (CompareToSourceExpressionElement != null) yield return new ElementValue("compareToSourceExpression", CompareToSourceExpressionElement);
          if (CompareToSourcePathElement != null) yield return new ElementValue("compareToSourcePath", CompareToSourcePathElement);
          if (ContentTypeElement != null) yield return new ElementValue("contentType", ContentTypeElement);
          if (ExpressionElement != null) yield return new ElementValue("expression", ExpressionElement);
          if (HeaderFieldElement != null) yield return new ElementValue("headerField", HeaderFieldElement);
          if (MinimumIdElement != null) yield return new ElementValue("minimumId", MinimumIdElement);
          if (NavigationLinksElement != null) yield return new ElementValue("navigationLinks", NavigationLinksElement);
          if (OperatorElement != null) yield return new ElementValue("operator", OperatorElement);
          if (PathElement != null) yield return new ElementValue("path", PathElement);
          if (RequestMethodElement != null) yield return new ElementValue("requestMethod", RequestMethodElement);
          if (RequestURLElement != null) yield return new ElementValue("requestURL", RequestURLElement);
          if (ResourceElement != null) yield return new ElementValue("resource", ResourceElement);
          if (ResponseElement != null) yield return new ElementValue("response", ResponseElement);
          if (ResponseCodeElement != null) yield return new ElementValue("responseCode", ResponseCodeElement);
          if (Rule != null) yield return new ElementValue("rule", Rule);
          if (Ruleset != null) yield return new ElementValue("ruleset", Ruleset);
          if (SourceIdElement != null) yield return new ElementValue("sourceId", SourceIdElement);
          if (ValidateProfileIdElement != null) yield return new ElementValue("validateProfileId", ValidateProfileIdElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
          if (WarningOnlyElement != null) yield return new ElementValue("warningOnly", WarningOnlyElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "label":
            value = LabelElement;
            return LabelElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "direction":
            value = DirectionElement;
            return DirectionElement is not null;
          case "compareToSourceId":
            value = CompareToSourceIdElement;
            return CompareToSourceIdElement is not null;
          case "compareToSourceExpression":
            value = CompareToSourceExpressionElement;
            return CompareToSourceExpressionElement is not null;
          case "compareToSourcePath":
            value = CompareToSourcePathElement;
            return CompareToSourcePathElement is not null;
          case "contentType":
            value = ContentTypeElement;
            return ContentTypeElement is not null;
          case "expression":
            value = ExpressionElement;
            return ExpressionElement is not null;
          case "headerField":
            value = HeaderFieldElement;
            return HeaderFieldElement is not null;
          case "minimumId":
            value = MinimumIdElement;
            return MinimumIdElement is not null;
          case "navigationLinks":
            value = NavigationLinksElement;
            return NavigationLinksElement is not null;
          case "operator":
            value = OperatorElement;
            return OperatorElement is not null;
          case "path":
            value = PathElement;
            return PathElement is not null;
          case "requestMethod":
            value = RequestMethodElement;
            return RequestMethodElement is not null;
          case "requestURL":
            value = RequestURLElement;
            return RequestURLElement is not null;
          case "resource":
            value = ResourceElement;
            return ResourceElement is not null;
          case "response":
            value = ResponseElement;
            return ResponseElement is not null;
          case "responseCode":
            value = ResponseCodeElement;
            return ResponseCodeElement is not null;
          case "rule":
            value = Rule;
            return Rule is not null;
          case "ruleset":
            value = Ruleset;
            return Ruleset is not null;
          case "sourceId":
            value = SourceIdElement;
            return SourceIdElement is not null;
          case "validateProfileId":
            value = ValidateProfileIdElement;
            return ValidateProfileIdElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          case "warningOnly":
            value = WarningOnlyElement;
            return WarningOnlyElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (LabelElement is not null) yield return new KeyValuePair<string,object>("label",LabelElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (DirectionElement is not null) yield return new KeyValuePair<string,object>("direction",DirectionElement);
        if (CompareToSourceIdElement is not null) yield return new KeyValuePair<string,object>("compareToSourceId",CompareToSourceIdElement);
        if (CompareToSourceExpressionElement is not null) yield return new KeyValuePair<string,object>("compareToSourceExpression",CompareToSourceExpressionElement);
        if (CompareToSourcePathElement is not null) yield return new KeyValuePair<string,object>("compareToSourcePath",CompareToSourcePathElement);
        if (ContentTypeElement is not null) yield return new KeyValuePair<string,object>("contentType",ContentTypeElement);
        if (ExpressionElement is not null) yield return new KeyValuePair<string,object>("expression",ExpressionElement);
        if (HeaderFieldElement is not null) yield return new KeyValuePair<string,object>("headerField",HeaderFieldElement);
        if (MinimumIdElement is not null) yield return new KeyValuePair<string,object>("minimumId",MinimumIdElement);
        if (NavigationLinksElement is not null) yield return new KeyValuePair<string,object>("navigationLinks",NavigationLinksElement);
        if (OperatorElement is not null) yield return new KeyValuePair<string,object>("operator",OperatorElement);
        if (PathElement is not null) yield return new KeyValuePair<string,object>("path",PathElement);
        if (RequestMethodElement is not null) yield return new KeyValuePair<string,object>("requestMethod",RequestMethodElement);
        if (RequestURLElement is not null) yield return new KeyValuePair<string,object>("requestURL",RequestURLElement);
        if (ResourceElement is not null) yield return new KeyValuePair<string,object>("resource",ResourceElement);
        if (ResponseElement is not null) yield return new KeyValuePair<string,object>("response",ResponseElement);
        if (ResponseCodeElement is not null) yield return new KeyValuePair<string,object>("responseCode",ResponseCodeElement);
        if (Rule is not null) yield return new KeyValuePair<string,object>("rule",Rule);
        if (Ruleset is not null) yield return new KeyValuePair<string,object>("ruleset",Ruleset);
        if (SourceIdElement is not null) yield return new KeyValuePair<string,object>("sourceId",SourceIdElement);
        if (ValidateProfileIdElement is not null) yield return new KeyValuePair<string,object>("validateProfileId",ValidateProfileIdElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
        if (WarningOnlyElement is not null) yield return new KeyValuePair<string,object>("warningOnly",WarningOnlyElement);
      }

    }

    /// <summary>
    /// The reference to a TestScript.rule
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#ActionAssertRule", IsNestedType=true)]
    public partial class ActionAssertRuleComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#ActionAssertRule"; } }

      /// <summary>
      /// Id of the TestScript.rule
      /// </summary>
      [FhirElement("ruleId", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id RuleIdElement
      {
        get { return _RuleIdElement; }
        set { _RuleIdElement = value; OnPropertyChanged("RuleIdElement"); }
      }

      private Hl7.Fhir.Model.Id _RuleIdElement;

      /// <summary>
      /// Id of the TestScript.rule
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RuleId
      {
        get { return RuleIdElement != null ? RuleIdElement.Value : null; }
        set
        {
          if (value == null)
            RuleIdElement = null;
          else
            RuleIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("RuleId");
        }
      }

      /// <summary>
      /// Rule parameter template
      /// </summary>
      [FhirElement("param", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.ActionAssertRuleParamComponent> Param
      {
        get { if(_Param==null) _Param = new List<Hl7.Fhir.Model.TestScript.ActionAssertRuleParamComponent>(); return _Param; }
        set { _Param = value; OnPropertyChanged("Param"); }
      }

      private List<Hl7.Fhir.Model.TestScript.ActionAssertRuleParamComponent> _Param;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActionAssertRuleComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RuleIdElement != null) dest.RuleIdElement = (Hl7.Fhir.Model.Id)RuleIdElement.DeepCopy();
        if(Param != null) dest.Param = new List<Hl7.Fhir.Model.TestScript.ActionAssertRuleParamComponent>(Param.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActionAssertRuleComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActionAssertRuleComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RuleIdElement, otherT.RuleIdElement)) return false;
        if( !DeepComparable.Matches(Param, otherT.Param)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActionAssertRuleComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RuleIdElement, otherT.RuleIdElement)) return false;
        if( !DeepComparable.IsExactly(Param, otherT.Param)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RuleIdElement != null) yield return RuleIdElement;
          foreach (var elem in Param) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RuleIdElement != null) yield return new ElementValue("ruleId", RuleIdElement);
          foreach (var elem in Param) { if (elem != null) yield return new ElementValue("param", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "ruleId":
            value = RuleIdElement;
            return RuleIdElement is not null;
          case "param":
            value = Param;
            return Param?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RuleIdElement is not null) yield return new KeyValuePair<string,object>("ruleId",RuleIdElement);
        if (Param?.Any() == true) yield return new KeyValuePair<string,object>("param",Param);
      }

    }

    /// <summary>
    /// Rule parameter template
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#ActionAssertRuleParam", IsNestedType=true)]
    public partial class ActionAssertRuleParamComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#ActionAssertRuleParam"; } }

      /// <summary>
      /// Parameter name matching external assert rule parameter
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Parameter name matching external assert rule parameter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      [FhirElement("value", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActionAssertRuleParamComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActionAssertRuleParamComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActionAssertRuleParamComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActionAssertRuleParamComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// The reference to a TestScript.ruleset
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#ActionAssertRuleset", IsNestedType=true)]
    public partial class ActionAssertRulesetComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#ActionAssertRuleset"; } }

      /// <summary>
      /// Id of the TestScript.ruleset
      /// </summary>
      [FhirElement("rulesetId", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id RulesetIdElement
      {
        get { return _RulesetIdElement; }
        set { _RulesetIdElement = value; OnPropertyChanged("RulesetIdElement"); }
      }

      private Hl7.Fhir.Model.Id _RulesetIdElement;

      /// <summary>
      /// Id of the TestScript.ruleset
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RulesetId
      {
        get { return RulesetIdElement != null ? RulesetIdElement.Value : null; }
        set
        {
          if (value == null)
            RulesetIdElement = null;
          else
            RulesetIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("RulesetId");
        }
      }

      /// <summary>
      /// The referenced rule within the ruleset
      /// </summary>
      [FhirElement("rule", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.ActionAssertRulesetRuleComponent> Rule
      {
        get { if(_Rule==null) _Rule = new List<Hl7.Fhir.Model.TestScript.ActionAssertRulesetRuleComponent>(); return _Rule; }
        set { _Rule = value; OnPropertyChanged("Rule"); }
      }

      private List<Hl7.Fhir.Model.TestScript.ActionAssertRulesetRuleComponent> _Rule;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActionAssertRulesetComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RulesetIdElement != null) dest.RulesetIdElement = (Hl7.Fhir.Model.Id)RulesetIdElement.DeepCopy();
        if(Rule != null) dest.Rule = new List<Hl7.Fhir.Model.TestScript.ActionAssertRulesetRuleComponent>(Rule.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActionAssertRulesetComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActionAssertRulesetComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RulesetIdElement, otherT.RulesetIdElement)) return false;
        if( !DeepComparable.Matches(Rule, otherT.Rule)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActionAssertRulesetComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RulesetIdElement, otherT.RulesetIdElement)) return false;
        if( !DeepComparable.IsExactly(Rule, otherT.Rule)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RulesetIdElement != null) yield return RulesetIdElement;
          foreach (var elem in Rule) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RulesetIdElement != null) yield return new ElementValue("rulesetId", RulesetIdElement);
          foreach (var elem in Rule) { if (elem != null) yield return new ElementValue("rule", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "rulesetId":
            value = RulesetIdElement;
            return RulesetIdElement is not null;
          case "rule":
            value = Rule;
            return Rule?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RulesetIdElement is not null) yield return new KeyValuePair<string,object>("rulesetId",RulesetIdElement);
        if (Rule?.Any() == true) yield return new KeyValuePair<string,object>("rule",Rule);
      }

    }

    /// <summary>
    /// The referenced rule within the ruleset
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#ActionAssertRulesetRule", IsNestedType=true)]
    public partial class ActionAssertRulesetRuleComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#ActionAssertRulesetRule"; } }

      /// <summary>
      /// Id of referenced rule within the ruleset
      /// </summary>
      [FhirElement("ruleId", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.Id RuleIdElement
      {
        get { return _RuleIdElement; }
        set { _RuleIdElement = value; OnPropertyChanged("RuleIdElement"); }
      }

      private Hl7.Fhir.Model.Id _RuleIdElement;

      /// <summary>
      /// Id of referenced rule within the ruleset
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string RuleId
      {
        get { return RuleIdElement != null ? RuleIdElement.Value : null; }
        set
        {
          if (value == null)
            RuleIdElement = null;
          else
            RuleIdElement = new Hl7.Fhir.Model.Id(value);
          OnPropertyChanged("RuleId");
        }
      }

      /// <summary>
      /// Rule parameter template
      /// </summary>
      [FhirElement("param", Order=50)]
      [Cardinality(Min=0,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.ParamComponent> Param
      {
        get { if(_Param==null) _Param = new List<Hl7.Fhir.Model.TestScript.ParamComponent>(); return _Param; }
        set { _Param = value; OnPropertyChanged("Param"); }
      }

      private List<Hl7.Fhir.Model.TestScript.ParamComponent> _Param;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ActionAssertRulesetRuleComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(RuleIdElement != null) dest.RuleIdElement = (Hl7.Fhir.Model.Id)RuleIdElement.DeepCopy();
        if(Param != null) dest.Param = new List<Hl7.Fhir.Model.TestScript.ParamComponent>(Param.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ActionAssertRulesetRuleComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ActionAssertRulesetRuleComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(RuleIdElement, otherT.RuleIdElement)) return false;
        if( !DeepComparable.Matches(Param, otherT.Param)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ActionAssertRulesetRuleComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(RuleIdElement, otherT.RuleIdElement)) return false;
        if( !DeepComparable.IsExactly(Param, otherT.Param)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (RuleIdElement != null) yield return RuleIdElement;
          foreach (var elem in Param) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (RuleIdElement != null) yield return new ElementValue("ruleId", RuleIdElement);
          foreach (var elem in Param) { if (elem != null) yield return new ElementValue("param", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "ruleId":
            value = RuleIdElement;
            return RuleIdElement is not null;
          case "param":
            value = Param;
            return Param?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (RuleIdElement is not null) yield return new KeyValuePair<string,object>("ruleId",RuleIdElement);
        if (Param?.Any() == true) yield return new KeyValuePair<string,object>("param",Param);
      }

    }

    /// <summary>
    /// Rule parameter template
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Param", IsNestedType=true)]
    public partial class ParamComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Param"; } }

      /// <summary>
      /// Parameter name matching external assert ruleset rule parameter
      /// </summary>
      [FhirElement("name", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Parameter name matching external assert ruleset rule parameter
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      [FhirElement("value", Order=50)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString ValueElement
      {
        get { return _ValueElement; }
        set { _ValueElement = value; OnPropertyChanged("ValueElement"); }
      }

      private Hl7.Fhir.Model.FhirString _ValueElement;

      /// <summary>
      /// Parameter value defined either explicitly or dynamically
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Value
      {
        get { return ValueElement != null ? ValueElement.Value : null; }
        set
        {
          if (value == null)
            ValueElement = null;
          else
            ValueElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Value");
        }
      }

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as ParamComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(ValueElement != null) dest.ValueElement = (Hl7.Fhir.Model.FhirString)ValueElement.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new ParamComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as ParamComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as ParamComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(ValueElement, otherT.ValueElement)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (ValueElement != null) yield return ValueElement;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (ValueElement != null) yield return new ElementValue("value", ValueElement);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "value":
            value = ValueElement;
            return ValueElement is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (ValueElement is not null) yield return new KeyValuePair<string,object>("value",ValueElement);
      }

    }

    /// <summary>
    /// A test in this script
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Test", IsNestedType=true)]
    public partial class TestComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Test"; } }

      /// <summary>
      /// Tracking/logging name of this test
      /// </summary>
      [FhirElement("name", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString NameElement
      {
        get { return _NameElement; }
        set { _NameElement = value; OnPropertyChanged("NameElement"); }
      }

      private Hl7.Fhir.Model.FhirString _NameElement;

      /// <summary>
      /// Tracking/logging name of this test
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Name
      {
        get { return NameElement != null ? NameElement.Value : null; }
        set
        {
          if (value == null)
            NameElement = null;
          else
            NameElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Name");
        }
      }

      /// <summary>
      /// Tracking/reporting short description of the test
      /// </summary>
      [FhirElement("description", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.FhirString DescriptionElement
      {
        get { return _DescriptionElement; }
        set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
      }

      private Hl7.Fhir.Model.FhirString _DescriptionElement;

      /// <summary>
      /// Tracking/reporting short description of the test
      /// </summary>
      /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
      [IgnoreDataMember]
      public string Description
      {
        get { return DescriptionElement != null ? DescriptionElement.Value : null; }
        set
        {
          if (value == null)
            DescriptionElement = null;
          else
            DescriptionElement = new Hl7.Fhir.Model.FhirString(value);
          OnPropertyChanged("Description");
        }
      }

      /// <summary>
      /// A test operation or assert to perform
      /// </summary>
      [FhirElement("action", Order=60)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.TestActionComponent> Action
      {
        get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.TestScript.TestActionComponent>(); return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private List<Hl7.Fhir.Model.TestScript.TestActionComponent> _Action;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TestComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
        if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.FhirString)DescriptionElement.DeepCopy();
        if(Action != null) dest.Action = new List<Hl7.Fhir.Model.TestScript.TestActionComponent>(Action.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TestComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TestComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TestComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
        if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (NameElement != null) yield return NameElement;
          if (DescriptionElement != null) yield return DescriptionElement;
          foreach (var elem in Action) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (NameElement != null) yield return new ElementValue("name", NameElement);
          if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
          foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "name":
            value = NameElement;
            return NameElement is not null;
          case "description":
            value = DescriptionElement;
            return DescriptionElement is not null;
          case "action":
            value = Action;
            return Action?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
        if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
        if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
      }

    }

    /// <summary>
    /// A test operation or assert to perform
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#TestAction", IsNestedType=true)]
    public partial class TestActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#TestAction"; } }

      /// <summary>
      /// The setup operation to perform
      /// </summary>
      [FhirElement("operation", Order=40)]
      [DataMember]
      public Hl7.Fhir.Model.TestScript.OperationComponent Operation
      {
        get { return _Operation; }
        set { _Operation = value; OnPropertyChanged("Operation"); }
      }

      private Hl7.Fhir.Model.TestScript.OperationComponent _Operation;

      /// <summary>
      /// The setup assertion to perform
      /// </summary>
      [FhirElement("assert", Order=50)]
      [DataMember]
      public Hl7.Fhir.Model.TestScript.AssertComponent Assert
      {
        get { return _Assert; }
        set { _Assert = value; OnPropertyChanged("Assert"); }
      }

      private Hl7.Fhir.Model.TestScript.AssertComponent _Assert;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TestActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Operation != null) dest.Operation = (Hl7.Fhir.Model.TestScript.OperationComponent)Operation.DeepCopy();
        if(Assert != null) dest.Assert = (Hl7.Fhir.Model.TestScript.AssertComponent)Assert.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TestActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TestActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Operation, otherT.Operation)) return false;
        if( !DeepComparable.Matches(Assert, otherT.Assert)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TestActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Operation, otherT.Operation)) return false;
        if( !DeepComparable.IsExactly(Assert, otherT.Assert)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Operation != null) yield return Operation;
          if (Assert != null) yield return Assert;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Operation != null) yield return new ElementValue("operation", Operation);
          if (Assert != null) yield return new ElementValue("assert", Assert);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "operation":
            value = Operation;
            return Operation is not null;
          case "assert":
            value = Assert;
            return Assert is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Operation is not null) yield return new KeyValuePair<string,object>("operation",Operation);
        if (Assert is not null) yield return new KeyValuePair<string,object>("assert",Assert);
      }

    }

    /// <summary>
    /// A series of required clean up steps
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#Teardown", IsNestedType=true)]
    public partial class TeardownComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#Teardown"; } }

      /// <summary>
      /// One or more teardown operations to perform
      /// </summary>
      [FhirElement("action", Order=40)]
      [Cardinality(Min=1,Max=-1)]
      [DataMember]
      public List<Hl7.Fhir.Model.TestScript.TeardownActionComponent> Action
      {
        get { if(_Action==null) _Action = new List<Hl7.Fhir.Model.TestScript.TeardownActionComponent>(); return _Action; }
        set { _Action = value; OnPropertyChanged("Action"); }
      }

      private List<Hl7.Fhir.Model.TestScript.TeardownActionComponent> _Action;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TeardownComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Action != null) dest.Action = new List<Hl7.Fhir.Model.TestScript.TeardownActionComponent>(Action.DeepCopy());
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TeardownComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TeardownComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Action, otherT.Action)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TeardownComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Action, otherT.Action)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          foreach (var elem in Action) { if (elem != null) yield return elem; }
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          foreach (var elem in Action) { if (elem != null) yield return new ElementValue("action", elem); }
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "action":
            value = Action;
            return Action?.Any() == true;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Action?.Any() == true) yield return new KeyValuePair<string,object>("action",Action);
      }

    }

    /// <summary>
    /// One or more teardown operations to perform
    /// </summary>
    [Serializable]
    [DataContract]
    [FhirType("TestScript#TeardownAction", IsNestedType=true)]
    public partial class TeardownActionComponent : Hl7.Fhir.Model.BackboneElement
    {
      /// <summary>
      /// FHIR Type Name
      /// </summary>
      public override string TypeName { get { return "TestScript#TeardownAction"; } }

      /// <summary>
      /// The teardown operation to perform
      /// </summary>
      [FhirElement("operation", Order=40)]
      [Cardinality(Min=1,Max=1)]
      [DataMember]
      public Hl7.Fhir.Model.TestScript.OperationComponent Operation
      {
        get { return _Operation; }
        set { _Operation = value; OnPropertyChanged("Operation"); }
      }

      private Hl7.Fhir.Model.TestScript.OperationComponent _Operation;

      public override IDeepCopyable CopyTo(IDeepCopyable other)
      {
        var dest = other as TeardownActionComponent;

        if (dest == null)
        {
          throw new ArgumentException("Can only copy to an object of the same type", "other");
        }

        base.CopyTo(dest);
        if(Operation != null) dest.Operation = (Hl7.Fhir.Model.TestScript.OperationComponent)Operation.DeepCopy();
        return dest;
      }

      public override IDeepCopyable DeepCopy()
      {
        return CopyTo(new TeardownActionComponent());
      }

      ///<inheritdoc />
      public override bool Matches(IDeepComparable other)
      {
        var otherT = other as TeardownActionComponent;
        if(otherT == null) return false;

        if(!base.Matches(otherT)) return false;
        if( !DeepComparable.Matches(Operation, otherT.Operation)) return false;

        return true;
      }

      public override bool IsExactly(IDeepComparable other)
      {
        var otherT = other as TeardownActionComponent;
        if(otherT == null) return false;

        if(!base.IsExactly(otherT)) return false;
        if( !DeepComparable.IsExactly(Operation, otherT.Operation)) return false;

        return true;
      }

      [IgnoreDataMember]
      public override IEnumerable<Base> Children
      {
        get
        {
          foreach (var item in base.Children) yield return item;
          if (Operation != null) yield return Operation;
        }
      }

      [IgnoreDataMember]
      public override IEnumerable<ElementValue> NamedChildren
      {
        get
        {
          foreach (var item in base.NamedChildren) yield return item;
          if (Operation != null) yield return new ElementValue("operation", Operation);
        }
      }

      protected override bool TryGetValue(string key, out object value)
      {
        switch (key)
        {
          case "operation":
            value = Operation;
            return Operation is not null;
          default:
            return base.TryGetValue(key, out value);
        }

      }

      protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
      {
        foreach (var kvp in base.GetElementPairs()) yield return kvp;
        if (Operation is not null) yield return new KeyValuePair<string,object>("operation",Operation);
      }

    }

    /// <summary>
    /// Logical URI to reference this test script (globally unique)
    /// </summary>
    [FhirElement("url", InSummary=true, Order=90, FiveWs="id")]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirUri UrlElement
    {
      get { return _UrlElement; }
      set { _UrlElement = value; OnPropertyChanged("UrlElement"); }
    }

    private Hl7.Fhir.Model.FhirUri _UrlElement;

    /// <summary>
    /// Logical URI to reference this test script (globally unique)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Url
    {
      get { return UrlElement != null ? UrlElement.Value : null; }
      set
      {
        if (value == null)
          UrlElement = null;
        else
          UrlElement = new Hl7.Fhir.Model.FhirUri(value);
        OnPropertyChanged("Url");
      }
    }

    /// <summary>
    /// Additional identifier for the test script
    /// </summary>
    [FhirElement("identifier", InSummary=true, Order=100, FiveWs="id")]
    [DataMember]
    public Hl7.Fhir.Model.Identifier Identifier
    {
      get { return _Identifier; }
      set { _Identifier = value; OnPropertyChanged("Identifier"); }
    }

    private Hl7.Fhir.Model.Identifier _Identifier;

    /// <summary>
    /// Business version of the test script
    /// </summary>
    [FhirElement("version", InSummary=true, Order=110, FiveWs="id.version")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString VersionElement
    {
      get { return _VersionElement; }
      set { _VersionElement = value; OnPropertyChanged("VersionElement"); }
    }

    private Hl7.Fhir.Model.FhirString _VersionElement;

    /// <summary>
    /// Business version of the test script
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Version
    {
      get { return VersionElement != null ? VersionElement.Value : null; }
      set
      {
        if (value == null)
          VersionElement = null;
        else
          VersionElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Version");
      }
    }

    /// <summary>
    /// Name for this test script (computer friendly)
    /// </summary>
    [FhirElement("name", InSummary=true, Order=120)]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString NameElement
    {
      get { return _NameElement; }
      set { _NameElement = value; OnPropertyChanged("NameElement"); }
    }

    private Hl7.Fhir.Model.FhirString _NameElement;

    /// <summary>
    /// Name for this test script (computer friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Name
    {
      get { return NameElement != null ? NameElement.Value : null; }
      set
      {
        if (value == null)
          NameElement = null;
        else
          NameElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Name");
      }
    }

    /// <summary>
    /// Name for this test script (human friendly)
    /// </summary>
    [FhirElement("title", InSummary=true, Order=130)]
    [DataMember]
    public Hl7.Fhir.Model.FhirString TitleElement
    {
      get { return _TitleElement; }
      set { _TitleElement = value; OnPropertyChanged("TitleElement"); }
    }

    private Hl7.Fhir.Model.FhirString _TitleElement;

    /// <summary>
    /// Name for this test script (human friendly)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Title
    {
      get { return TitleElement != null ? TitleElement.Value : null; }
      set
      {
        if (value == null)
          TitleElement = null;
        else
          TitleElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Title");
      }
    }

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    [FhirElement("status", InSummary=true, IsModifier=true, Order=140, FiveWs="status")]
    [DeclaredType(Type = typeof(Code))]
    [Cardinality(Min=1,Max=1)]
    [DataMember]
    public Code<Hl7.Fhir.Model.PublicationStatus> StatusElement
    {
      get { return _StatusElement; }
      set { _StatusElement = value; OnPropertyChanged("StatusElement"); }
    }

    private Code<Hl7.Fhir.Model.PublicationStatus> _StatusElement;

    /// <summary>
    /// draft | active | retired | unknown
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public Hl7.Fhir.Model.PublicationStatus? Status
    {
      get { return StatusElement != null ? StatusElement.Value : null; }
      set
      {
        if (value == null)
          StatusElement = null;
        else
          StatusElement = new Code<Hl7.Fhir.Model.PublicationStatus>(value);
        OnPropertyChanged("Status");
      }
    }

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    [FhirElement("experimental", InSummary=true, IsModifier=true, Order=150, FiveWs="class")]
    [DataMember]
    public Hl7.Fhir.Model.FhirBoolean ExperimentalElement
    {
      get { return _ExperimentalElement; }
      set { _ExperimentalElement = value; OnPropertyChanged("ExperimentalElement"); }
    }

    private Hl7.Fhir.Model.FhirBoolean _ExperimentalElement;

    /// <summary>
    /// For testing purposes, not real usage
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public bool? Experimental
    {
      get { return ExperimentalElement != null ? ExperimentalElement.Value : null; }
      set
      {
        if (value == null)
          ExperimentalElement = null;
        else
          ExperimentalElement = new Hl7.Fhir.Model.FhirBoolean(value);
        OnPropertyChanged("Experimental");
      }
    }

    /// <summary>
    /// Date this was last changed
    /// </summary>
    [FhirElement("date", InSummary=true, Order=160, FiveWs="when.recorded")]
    [DataMember]
    public Hl7.Fhir.Model.FhirDateTime DateElement
    {
      get { return _DateElement; }
      set { _DateElement = value; OnPropertyChanged("DateElement"); }
    }

    private Hl7.Fhir.Model.FhirDateTime _DateElement;

    /// <summary>
    /// Date this was last changed
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Date
    {
      get { return DateElement != null ? DateElement.Value : null; }
      set
      {
        if (value == null)
          DateElement = null;
        else
          DateElement = new Hl7.Fhir.Model.FhirDateTime(value);
        OnPropertyChanged("Date");
      }
    }

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    [FhirElement("publisher", InSummary=true, Order=170, FiveWs="who.witness")]
    [DataMember]
    public Hl7.Fhir.Model.FhirString PublisherElement
    {
      get { return _PublisherElement; }
      set { _PublisherElement = value; OnPropertyChanged("PublisherElement"); }
    }

    private Hl7.Fhir.Model.FhirString _PublisherElement;

    /// <summary>
    /// Name of the publisher (organization or individual)
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Publisher
    {
      get { return PublisherElement != null ? PublisherElement.Value : null; }
      set
      {
        if (value == null)
          PublisherElement = null;
        else
          PublisherElement = new Hl7.Fhir.Model.FhirString(value);
        OnPropertyChanged("Publisher");
      }
    }

    /// <summary>
    /// Contact details for the publisher
    /// </summary>
    [FhirElement("contact", InSummary=true, Order=180)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ContactDetail> Contact
    {
      get { if(_Contact==null) _Contact = new List<Hl7.Fhir.Model.ContactDetail>(); return _Contact; }
      set { _Contact = value; OnPropertyChanged("Contact"); }
    }

    private List<Hl7.Fhir.Model.ContactDetail> _Contact;

    /// <summary>
    /// Natural language description of the test script
    /// </summary>
    [FhirElement("description", Order=190)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown DescriptionElement
    {
      get { return _DescriptionElement; }
      set { _DescriptionElement = value; OnPropertyChanged("DescriptionElement"); }
    }

    private Hl7.Fhir.Model.Markdown _DescriptionElement;

    /// <summary>
    /// Natural language description of the test script
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Description
    {
      get { return DescriptionElement != null ? DescriptionElement.Value : null; }
      set
      {
        if (value == null)
          DescriptionElement = null;
        else
          DescriptionElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Description");
      }
    }

    /// <summary>
    /// Context the content is intended to support
    /// </summary>
    [FhirElement("useContext", InSummary=true, Order=200)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.UsageContext> UseContext
    {
      get { if(_UseContext==null) _UseContext = new List<Hl7.Fhir.Model.UsageContext>(); return _UseContext; }
      set { _UseContext = value; OnPropertyChanged("UseContext"); }
    }

    private List<Hl7.Fhir.Model.UsageContext> _UseContext;

    /// <summary>
    /// Intended jurisdiction for test script (if applicable)
    /// </summary>
    [FhirElement("jurisdiction", InSummary=true, Order=210)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.CodeableConcept> Jurisdiction
    {
      get { if(_Jurisdiction==null) _Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(); return _Jurisdiction; }
      set { _Jurisdiction = value; OnPropertyChanged("Jurisdiction"); }
    }

    private List<Hl7.Fhir.Model.CodeableConcept> _Jurisdiction;

    /// <summary>
    /// Why this test script is defined
    /// </summary>
    [FhirElement("purpose", Order=220, FiveWs="why")]
    [DataMember]
    public Hl7.Fhir.Model.Markdown PurposeElement
    {
      get { return _PurposeElement; }
      set { _PurposeElement = value; OnPropertyChanged("PurposeElement"); }
    }

    private Hl7.Fhir.Model.Markdown _PurposeElement;

    /// <summary>
    /// Why this test script is defined
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Purpose
    {
      get { return PurposeElement != null ? PurposeElement.Value : null; }
      set
      {
        if (value == null)
          PurposeElement = null;
        else
          PurposeElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Purpose");
      }
    }

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    [FhirElement("copyright", Order=230)]
    [DataMember]
    public Hl7.Fhir.Model.Markdown CopyrightElement
    {
      get { return _CopyrightElement; }
      set { _CopyrightElement = value; OnPropertyChanged("CopyrightElement"); }
    }

    private Hl7.Fhir.Model.Markdown _CopyrightElement;

    /// <summary>
    /// Use and/or publishing restrictions
    /// </summary>
    /// <remarks>This uses the native .NET datatype, rather than the FHIR equivalent</remarks>
    [IgnoreDataMember]
    public string Copyright
    {
      get { return CopyrightElement != null ? CopyrightElement.Value : null; }
      set
      {
        if (value == null)
          CopyrightElement = null;
        else
          CopyrightElement = new Hl7.Fhir.Model.Markdown(value);
        OnPropertyChanged("Copyright");
      }
    }

    /// <summary>
    /// An abstract server representing a client or sender in a message exchange
    /// </summary>
    [FhirElement("origin", Order=240)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestScript.OriginComponent> Origin
    {
      get { if(_Origin==null) _Origin = new List<Hl7.Fhir.Model.TestScript.OriginComponent>(); return _Origin; }
      set { _Origin = value; OnPropertyChanged("Origin"); }
    }

    private List<Hl7.Fhir.Model.TestScript.OriginComponent> _Origin;

    /// <summary>
    /// An abstract server representing a destination or receiver in a message exchange
    /// </summary>
    [FhirElement("destination", Order=250)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestScript.DestinationComponent> Destination
    {
      get { if(_Destination==null) _Destination = new List<Hl7.Fhir.Model.TestScript.DestinationComponent>(); return _Destination; }
      set { _Destination = value; OnPropertyChanged("Destination"); }
    }

    private List<Hl7.Fhir.Model.TestScript.DestinationComponent> _Destination;

    /// <summary>
    /// Required capability that is assumed to function correctly on the FHIR server being tested
    /// </summary>
    [FhirElement("metadata", Order=260)]
    [DataMember]
    public Hl7.Fhir.Model.TestScript.MetadataComponent Metadata
    {
      get { return _Metadata; }
      set { _Metadata = value; OnPropertyChanged("Metadata"); }
    }

    private Hl7.Fhir.Model.TestScript.MetadataComponent _Metadata;

    /// <summary>
    /// Fixture in the test script - by reference (uri)
    /// </summary>
    [FhirElement("fixture", Order=270)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestScript.FixtureComponent> Fixture
    {
      get { if(_Fixture==null) _Fixture = new List<Hl7.Fhir.Model.TestScript.FixtureComponent>(); return _Fixture; }
      set { _Fixture = value; OnPropertyChanged("Fixture"); }
    }

    private List<Hl7.Fhir.Model.TestScript.FixtureComponent> _Fixture;

    /// <summary>
    /// Reference of the validation profile
    /// </summary>
    [FhirElement("profile", Order=280)]
    [CLSCompliant(false)]
    [References("Resource")]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.ResourceReference> Profile
    {
      get { if(_Profile==null) _Profile = new List<Hl7.Fhir.Model.ResourceReference>(); return _Profile; }
      set { _Profile = value; OnPropertyChanged("Profile"); }
    }

    private List<Hl7.Fhir.Model.ResourceReference> _Profile;

    /// <summary>
    /// Placeholder for evaluated elements
    /// </summary>
    [FhirElement("variable", Order=290)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestScript.VariableComponent> Variable
    {
      get { if(_Variable==null) _Variable = new List<Hl7.Fhir.Model.TestScript.VariableComponent>(); return _Variable; }
      set { _Variable = value; OnPropertyChanged("Variable"); }
    }

    private List<Hl7.Fhir.Model.TestScript.VariableComponent> _Variable;

    /// <summary>
    /// Assert rule used within the test script
    /// </summary>
    [FhirElement("rule", Order=300)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestScript.RuleComponent> Rule
    {
      get { if(_Rule==null) _Rule = new List<Hl7.Fhir.Model.TestScript.RuleComponent>(); return _Rule; }
      set { _Rule = value; OnPropertyChanged("Rule"); }
    }

    private List<Hl7.Fhir.Model.TestScript.RuleComponent> _Rule;

    /// <summary>
    /// Assert ruleset used within the test script
    /// </summary>
    [FhirElement("ruleset", Order=310)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestScript.RulesetComponent> Ruleset
    {
      get { if(_Ruleset==null) _Ruleset = new List<Hl7.Fhir.Model.TestScript.RulesetComponent>(); return _Ruleset; }
      set { _Ruleset = value; OnPropertyChanged("Ruleset"); }
    }

    private List<Hl7.Fhir.Model.TestScript.RulesetComponent> _Ruleset;

    /// <summary>
    /// A series of required setup operations before tests are executed
    /// </summary>
    [FhirElement("setup", Order=320)]
    [DataMember]
    public Hl7.Fhir.Model.TestScript.SetupComponent Setup
    {
      get { return _Setup; }
      set { _Setup = value; OnPropertyChanged("Setup"); }
    }

    private Hl7.Fhir.Model.TestScript.SetupComponent _Setup;

    /// <summary>
    /// A test in this script
    /// </summary>
    [FhirElement("test", Order=330)]
    [Cardinality(Min=0,Max=-1)]
    [DataMember]
    public List<Hl7.Fhir.Model.TestScript.TestComponent> Test
    {
      get { if(_Test==null) _Test = new List<Hl7.Fhir.Model.TestScript.TestComponent>(); return _Test; }
      set { _Test = value; OnPropertyChanged("Test"); }
    }

    private List<Hl7.Fhir.Model.TestScript.TestComponent> _Test;

    /// <summary>
    /// A series of required clean up steps
    /// </summary>
    [FhirElement("teardown", Order=340)]
    [DataMember]
    public Hl7.Fhir.Model.TestScript.TeardownComponent Teardown
    {
      get { return _Teardown; }
      set { _Teardown = value; OnPropertyChanged("Teardown"); }
    }

    private Hl7.Fhir.Model.TestScript.TeardownComponent _Teardown;

    public override IDeepCopyable CopyTo(IDeepCopyable other)
    {
      var dest = other as TestScript;

      if (dest == null)
      {
        throw new ArgumentException("Can only copy to an object of the same type", "other");
      }

      base.CopyTo(dest);
      if(UrlElement != null) dest.UrlElement = (Hl7.Fhir.Model.FhirUri)UrlElement.DeepCopy();
      if(Identifier != null) dest.Identifier = (Hl7.Fhir.Model.Identifier)Identifier.DeepCopy();
      if(VersionElement != null) dest.VersionElement = (Hl7.Fhir.Model.FhirString)VersionElement.DeepCopy();
      if(NameElement != null) dest.NameElement = (Hl7.Fhir.Model.FhirString)NameElement.DeepCopy();
      if(TitleElement != null) dest.TitleElement = (Hl7.Fhir.Model.FhirString)TitleElement.DeepCopy();
      if(StatusElement != null) dest.StatusElement = (Code<Hl7.Fhir.Model.PublicationStatus>)StatusElement.DeepCopy();
      if(ExperimentalElement != null) dest.ExperimentalElement = (Hl7.Fhir.Model.FhirBoolean)ExperimentalElement.DeepCopy();
      if(DateElement != null) dest.DateElement = (Hl7.Fhir.Model.FhirDateTime)DateElement.DeepCopy();
      if(PublisherElement != null) dest.PublisherElement = (Hl7.Fhir.Model.FhirString)PublisherElement.DeepCopy();
      if(Contact != null) dest.Contact = new List<Hl7.Fhir.Model.ContactDetail>(Contact.DeepCopy());
      if(DescriptionElement != null) dest.DescriptionElement = (Hl7.Fhir.Model.Markdown)DescriptionElement.DeepCopy();
      if(UseContext != null) dest.UseContext = new List<Hl7.Fhir.Model.UsageContext>(UseContext.DeepCopy());
      if(Jurisdiction != null) dest.Jurisdiction = new List<Hl7.Fhir.Model.CodeableConcept>(Jurisdiction.DeepCopy());
      if(PurposeElement != null) dest.PurposeElement = (Hl7.Fhir.Model.Markdown)PurposeElement.DeepCopy();
      if(CopyrightElement != null) dest.CopyrightElement = (Hl7.Fhir.Model.Markdown)CopyrightElement.DeepCopy();
      if(Origin != null) dest.Origin = new List<Hl7.Fhir.Model.TestScript.OriginComponent>(Origin.DeepCopy());
      if(Destination != null) dest.Destination = new List<Hl7.Fhir.Model.TestScript.DestinationComponent>(Destination.DeepCopy());
      if(Metadata != null) dest.Metadata = (Hl7.Fhir.Model.TestScript.MetadataComponent)Metadata.DeepCopy();
      if(Fixture != null) dest.Fixture = new List<Hl7.Fhir.Model.TestScript.FixtureComponent>(Fixture.DeepCopy());
      if(Profile != null) dest.Profile = new List<Hl7.Fhir.Model.ResourceReference>(Profile.DeepCopy());
      if(Variable != null) dest.Variable = new List<Hl7.Fhir.Model.TestScript.VariableComponent>(Variable.DeepCopy());
      if(Rule != null) dest.Rule = new List<Hl7.Fhir.Model.TestScript.RuleComponent>(Rule.DeepCopy());
      if(Ruleset != null) dest.Ruleset = new List<Hl7.Fhir.Model.TestScript.RulesetComponent>(Ruleset.DeepCopy());
      if(Setup != null) dest.Setup = (Hl7.Fhir.Model.TestScript.SetupComponent)Setup.DeepCopy();
      if(Test != null) dest.Test = new List<Hl7.Fhir.Model.TestScript.TestComponent>(Test.DeepCopy());
      if(Teardown != null) dest.Teardown = (Hl7.Fhir.Model.TestScript.TeardownComponent)Teardown.DeepCopy();
      return dest;
    }

    public override IDeepCopyable DeepCopy()
    {
      return CopyTo(new TestScript());
    }

    ///<inheritdoc />
    public override bool Matches(IDeepComparable other)
    {
      var otherT = other as TestScript;
      if(otherT == null) return false;

      if(!base.Matches(otherT)) return false;
      if( !DeepComparable.Matches(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.Matches(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.Matches(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.Matches(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.Matches(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.Matches(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.Matches(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.Matches(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.Matches(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.Matches(Contact, otherT.Contact)) return false;
      if( !DeepComparable.Matches(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.Matches(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.Matches(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.Matches(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.Matches(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.Matches(Origin, otherT.Origin)) return false;
      if( !DeepComparable.Matches(Destination, otherT.Destination)) return false;
      if( !DeepComparable.Matches(Metadata, otherT.Metadata)) return false;
      if( !DeepComparable.Matches(Fixture, otherT.Fixture)) return false;
      if( !DeepComparable.Matches(Profile, otherT.Profile)) return false;
      if( !DeepComparable.Matches(Variable, otherT.Variable)) return false;
      if( !DeepComparable.Matches(Rule, otherT.Rule)) return false;
      if( !DeepComparable.Matches(Ruleset, otherT.Ruleset)) return false;
      if( !DeepComparable.Matches(Setup, otherT.Setup)) return false;
      if( !DeepComparable.Matches(Test, otherT.Test)) return false;
      if( !DeepComparable.Matches(Teardown, otherT.Teardown)) return false;

      return true;
    }

    public override bool IsExactly(IDeepComparable other)
    {
      var otherT = other as TestScript;
      if(otherT == null) return false;

      if(!base.IsExactly(otherT)) return false;
      if( !DeepComparable.IsExactly(UrlElement, otherT.UrlElement)) return false;
      if( !DeepComparable.IsExactly(Identifier, otherT.Identifier)) return false;
      if( !DeepComparable.IsExactly(VersionElement, otherT.VersionElement)) return false;
      if( !DeepComparable.IsExactly(NameElement, otherT.NameElement)) return false;
      if( !DeepComparable.IsExactly(TitleElement, otherT.TitleElement)) return false;
      if( !DeepComparable.IsExactly(StatusElement, otherT.StatusElement)) return false;
      if( !DeepComparable.IsExactly(ExperimentalElement, otherT.ExperimentalElement)) return false;
      if( !DeepComparable.IsExactly(DateElement, otherT.DateElement)) return false;
      if( !DeepComparable.IsExactly(PublisherElement, otherT.PublisherElement)) return false;
      if( !DeepComparable.IsExactly(Contact, otherT.Contact)) return false;
      if( !DeepComparable.IsExactly(DescriptionElement, otherT.DescriptionElement)) return false;
      if( !DeepComparable.IsExactly(UseContext, otherT.UseContext)) return false;
      if( !DeepComparable.IsExactly(Jurisdiction, otherT.Jurisdiction)) return false;
      if( !DeepComparable.IsExactly(PurposeElement, otherT.PurposeElement)) return false;
      if( !DeepComparable.IsExactly(CopyrightElement, otherT.CopyrightElement)) return false;
      if( !DeepComparable.IsExactly(Origin, otherT.Origin)) return false;
      if( !DeepComparable.IsExactly(Destination, otherT.Destination)) return false;
      if( !DeepComparable.IsExactly(Metadata, otherT.Metadata)) return false;
      if( !DeepComparable.IsExactly(Fixture, otherT.Fixture)) return false;
      if( !DeepComparable.IsExactly(Profile, otherT.Profile)) return false;
      if( !DeepComparable.IsExactly(Variable, otherT.Variable)) return false;
      if( !DeepComparable.IsExactly(Rule, otherT.Rule)) return false;
      if( !DeepComparable.IsExactly(Ruleset, otherT.Ruleset)) return false;
      if( !DeepComparable.IsExactly(Setup, otherT.Setup)) return false;
      if( !DeepComparable.IsExactly(Test, otherT.Test)) return false;
      if( !DeepComparable.IsExactly(Teardown, otherT.Teardown)) return false;

      return true;
    }

    [IgnoreDataMember]
    public override IEnumerable<Base> Children
    {
      get
      {
        foreach (var item in base.Children) yield return item;
        if (UrlElement != null) yield return UrlElement;
        if (Identifier != null) yield return Identifier;
        if (VersionElement != null) yield return VersionElement;
        if (NameElement != null) yield return NameElement;
        if (TitleElement != null) yield return TitleElement;
        if (StatusElement != null) yield return StatusElement;
        if (ExperimentalElement != null) yield return ExperimentalElement;
        if (DateElement != null) yield return DateElement;
        if (PublisherElement != null) yield return PublisherElement;
        foreach (var elem in Contact) { if (elem != null) yield return elem; }
        if (DescriptionElement != null) yield return DescriptionElement;
        foreach (var elem in UseContext) { if (elem != null) yield return elem; }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return elem; }
        if (PurposeElement != null) yield return PurposeElement;
        if (CopyrightElement != null) yield return CopyrightElement;
        foreach (var elem in Origin) { if (elem != null) yield return elem; }
        foreach (var elem in Destination) { if (elem != null) yield return elem; }
        if (Metadata != null) yield return Metadata;
        foreach (var elem in Fixture) { if (elem != null) yield return elem; }
        foreach (var elem in Profile) { if (elem != null) yield return elem; }
        foreach (var elem in Variable) { if (elem != null) yield return elem; }
        foreach (var elem in Rule) { if (elem != null) yield return elem; }
        foreach (var elem in Ruleset) { if (elem != null) yield return elem; }
        if (Setup != null) yield return Setup;
        foreach (var elem in Test) { if (elem != null) yield return elem; }
        if (Teardown != null) yield return Teardown;
      }
    }

    [IgnoreDataMember]
    public override IEnumerable<ElementValue> NamedChildren
    {
      get
      {
        foreach (var item in base.NamedChildren) yield return item;
        if (UrlElement != null) yield return new ElementValue("url", UrlElement);
        if (Identifier != null) yield return new ElementValue("identifier", Identifier);
        if (VersionElement != null) yield return new ElementValue("version", VersionElement);
        if (NameElement != null) yield return new ElementValue("name", NameElement);
        if (TitleElement != null) yield return new ElementValue("title", TitleElement);
        if (StatusElement != null) yield return new ElementValue("status", StatusElement);
        if (ExperimentalElement != null) yield return new ElementValue("experimental", ExperimentalElement);
        if (DateElement != null) yield return new ElementValue("date", DateElement);
        if (PublisherElement != null) yield return new ElementValue("publisher", PublisherElement);
        foreach (var elem in Contact) { if (elem != null) yield return new ElementValue("contact", elem); }
        if (DescriptionElement != null) yield return new ElementValue("description", DescriptionElement);
        foreach (var elem in UseContext) { if (elem != null) yield return new ElementValue("useContext", elem); }
        foreach (var elem in Jurisdiction) { if (elem != null) yield return new ElementValue("jurisdiction", elem); }
        if (PurposeElement != null) yield return new ElementValue("purpose", PurposeElement);
        if (CopyrightElement != null) yield return new ElementValue("copyright", CopyrightElement);
        foreach (var elem in Origin) { if (elem != null) yield return new ElementValue("origin", elem); }
        foreach (var elem in Destination) { if (elem != null) yield return new ElementValue("destination", elem); }
        if (Metadata != null) yield return new ElementValue("metadata", Metadata);
        foreach (var elem in Fixture) { if (elem != null) yield return new ElementValue("fixture", elem); }
        foreach (var elem in Profile) { if (elem != null) yield return new ElementValue("profile", elem); }
        foreach (var elem in Variable) { if (elem != null) yield return new ElementValue("variable", elem); }
        foreach (var elem in Rule) { if (elem != null) yield return new ElementValue("rule", elem); }
        foreach (var elem in Ruleset) { if (elem != null) yield return new ElementValue("ruleset", elem); }
        if (Setup != null) yield return new ElementValue("setup", Setup);
        foreach (var elem in Test) { if (elem != null) yield return new ElementValue("test", elem); }
        if (Teardown != null) yield return new ElementValue("teardown", Teardown);
      }
    }

    protected override bool TryGetValue(string key, out object value)
    {
      switch (key)
      {
        case "url":
          value = UrlElement;
          return UrlElement is not null;
        case "identifier":
          value = Identifier;
          return Identifier is not null;
        case "version":
          value = VersionElement;
          return VersionElement is not null;
        case "name":
          value = NameElement;
          return NameElement is not null;
        case "title":
          value = TitleElement;
          return TitleElement is not null;
        case "status":
          value = StatusElement;
          return StatusElement is not null;
        case "experimental":
          value = ExperimentalElement;
          return ExperimentalElement is not null;
        case "date":
          value = DateElement;
          return DateElement is not null;
        case "publisher":
          value = PublisherElement;
          return PublisherElement is not null;
        case "contact":
          value = Contact;
          return Contact?.Any() == true;
        case "description":
          value = DescriptionElement;
          return DescriptionElement is not null;
        case "useContext":
          value = UseContext;
          return UseContext?.Any() == true;
        case "jurisdiction":
          value = Jurisdiction;
          return Jurisdiction?.Any() == true;
        case "purpose":
          value = PurposeElement;
          return PurposeElement is not null;
        case "copyright":
          value = CopyrightElement;
          return CopyrightElement is not null;
        case "origin":
          value = Origin;
          return Origin?.Any() == true;
        case "destination":
          value = Destination;
          return Destination?.Any() == true;
        case "metadata":
          value = Metadata;
          return Metadata is not null;
        case "fixture":
          value = Fixture;
          return Fixture?.Any() == true;
        case "profile":
          value = Profile;
          return Profile?.Any() == true;
        case "variable":
          value = Variable;
          return Variable?.Any() == true;
        case "rule":
          value = Rule;
          return Rule?.Any() == true;
        case "ruleset":
          value = Ruleset;
          return Ruleset?.Any() == true;
        case "setup":
          value = Setup;
          return Setup is not null;
        case "test":
          value = Test;
          return Test?.Any() == true;
        case "teardown":
          value = Teardown;
          return Teardown is not null;
        default:
          return base.TryGetValue(key, out value);
      }

    }

    protected override IEnumerable<KeyValuePair<string, object>> GetElementPairs()
    {
      foreach (var kvp in base.GetElementPairs()) yield return kvp;
      if (UrlElement is not null) yield return new KeyValuePair<string,object>("url",UrlElement);
      if (Identifier is not null) yield return new KeyValuePair<string,object>("identifier",Identifier);
      if (VersionElement is not null) yield return new KeyValuePair<string,object>("version",VersionElement);
      if (NameElement is not null) yield return new KeyValuePair<string,object>("name",NameElement);
      if (TitleElement is not null) yield return new KeyValuePair<string,object>("title",TitleElement);
      if (StatusElement is not null) yield return new KeyValuePair<string,object>("status",StatusElement);
      if (ExperimentalElement is not null) yield return new KeyValuePair<string,object>("experimental",ExperimentalElement);
      if (DateElement is not null) yield return new KeyValuePair<string,object>("date",DateElement);
      if (PublisherElement is not null) yield return new KeyValuePair<string,object>("publisher",PublisherElement);
      if (Contact?.Any() == true) yield return new KeyValuePair<string,object>("contact",Contact);
      if (DescriptionElement is not null) yield return new KeyValuePair<string,object>("description",DescriptionElement);
      if (UseContext?.Any() == true) yield return new KeyValuePair<string,object>("useContext",UseContext);
      if (Jurisdiction?.Any() == true) yield return new KeyValuePair<string,object>("jurisdiction",Jurisdiction);
      if (PurposeElement is not null) yield return new KeyValuePair<string,object>("purpose",PurposeElement);
      if (CopyrightElement is not null) yield return new KeyValuePair<string,object>("copyright",CopyrightElement);
      if (Origin?.Any() == true) yield return new KeyValuePair<string,object>("origin",Origin);
      if (Destination?.Any() == true) yield return new KeyValuePair<string,object>("destination",Destination);
      if (Metadata is not null) yield return new KeyValuePair<string,object>("metadata",Metadata);
      if (Fixture?.Any() == true) yield return new KeyValuePair<string,object>("fixture",Fixture);
      if (Profile?.Any() == true) yield return new KeyValuePair<string,object>("profile",Profile);
      if (Variable?.Any() == true) yield return new KeyValuePair<string,object>("variable",Variable);
      if (Rule?.Any() == true) yield return new KeyValuePair<string,object>("rule",Rule);
      if (Ruleset?.Any() == true) yield return new KeyValuePair<string,object>("ruleset",Ruleset);
      if (Setup is not null) yield return new KeyValuePair<string,object>("setup",Setup);
      if (Test?.Any() == true) yield return new KeyValuePair<string,object>("test",Test);
      if (Teardown is not null) yield return new KeyValuePair<string,object>("teardown",Teardown);
    }

  }

}

// end of file

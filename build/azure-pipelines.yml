# Repo: FirelyTeam/firely-net-sdk
# File: build/azure-pipelines.yml

trigger:
  branches:
    include:
    - develop
    - develop-*
    - release/*
    - release-*
    - hotfix/*
    - hotfix-*
    - refs/tags/v*
  batch: True

name: $(date:yyyyMMdd)$(rev:.r)

variables:
- group: CodeSigning
- template: build-variables.yml
- template: pipeline-variables.yml
  
pool:
  vmImage: windows-latest

resources:
  repositories:
  - repository: self
    type: git
    ref: develop-stu3
  - repository: templates
    type: github
    name: FirelyTeam/azure-pipeline-templates
    endpoint: FirelyTeam 

stages:
- stage: build
  displayName: Build
  jobs:
  - job: restoreAndBuild
    displayName: 'Build Artifacts'
    steps:
    - checkout: self
      clean: true
      submodules: true
      fetchDepth: 1
    - template: templates/apply-versioning-steps-template.yml

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk $(NET_CORE_SDK)'
      inputs:
        version: $(NET_CORE_SDK)
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: ./Hl7.Fhir.sln
        verbosityRestore: Minimal
        arguments: --configuration $(buildConfiguration)
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: build
        projects: ./Hl7.Fhir.sln
        arguments: --configuration $(buildConfiguration) --no-restore /p:ContinuousIntegrationBuild=true 

    - task: DotNetCoreCLI@2
      displayName: Create Test artifacts
      inputs:
        command: publish
        projects: |
         **/Hl7.*Tests/*.csproj
         **/Hl7.FhirPath.R4.Tests/*.csproj
        publishWebProjects: false
        zipAfterPublish: false
        arguments: --configuration $(buildConfiguration) --no-build -f $(TEST_TARGETFRAMEWORK)

    - task: CopyFiles@2
      displayName: 'Copy Test artifacts to $(System.DefaultWorkingDirectory)/bin'
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)
        Contents: '**/bin/$(buildConfiguration)/*/publish/**'
        flattenFolders: false
        TargetFolder: '$(System.DefaultWorkingDirectory)/bin'   

    - task: PublishPipelineArtifact@1
      displayName: Publish Test artifacts
      inputs:
        targetPath: $(System.DefaultWorkingDirectory)/bin
        artifactName: TestBuild
    
    - template: templates/sign-dlls-template.yml
    
    - task: DotNetCoreCLI@2
      displayName: Pack
      inputs:
        command: pack
        searchPatternPack: '**/Hl7.*.csproj;!**/*Tests.csproj'
        configurationToPack: $(buildConfiguration)
        nobuild: true
        verbosityPack: Normal
    
    - ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
      - template: codesign-nuget-packages.yml@templates
        parameters:
          certificateValue: $(FirelyCodeSignerCertificate)
          certificatePasswordValue: $(CodeSigningPassword)
          packagePaths: $(Build.ArtifactStagingDirectory)\*.nupkg

    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      inputs:
        pathToPublish: $(Build.ArtifactStagingDirectory)
        ArtifactName: NuGetPackages
    - bash: |
        echo $(Build.SourceBranchName)

        IFS='-'
        read -a version <<<"$(Build.SourceBranchName)"

        release=${version[1]}
        echo $release

        currenttag=$(git tag --sort=v:refname | grep -E "^v.*-$release$" | tail -1)
        previoustag=$(git tag --sort=v:refname | grep -E "^v.*-$release$" | tail -2 | head -n 1)
        title_release="${version[0]:1} for ${version[1]^^} (release $(date '+%Y%m%d'))"

        echo $currenttag
        echo $previoustag
        echo $title_release

        echo "##vso[task.setvariable variable=current_tag;isOutput=true]$currenttag"
        echo "##vso[task.setvariable variable=previous_tag;isOutput=true]$previoustag"
        echo "##vso[task.setvariable variable=release_title;isOutput=true]$title_release"
      name: tagnames
      displayName: Determine tagnames

- stage: test
  displayName: Test
  dependsOn: build
  jobs:
  - job:
    displayName: Tests common test projects
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests common test projects
          projects: |
            **/common/**/publish/Hl7.Fhir.Support.Tests.dll
            **/common/**/publish/HL7.FhirPath.Tests.dll
            **/common/**/publish/Hl7.Fhir.Support.Poco.Tests.dll
  - job:
    displayName: Tests FhirPath Core test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests FhirPath Core test project
          projects: '**/publish/Hl7.FhirPath.R4.Tests.dll'
  - job:
    displayName: Tests Serialization STU3 test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Serialization STU3 test project
          projects: |
            **/publish/Hl7.Fhir.STU3.Serialization.Tests.dll
  - job:
    displayName: Tests Serialization R4 test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Serialization R4 test project
          projects: |
            **/publish/Hl7.Fhir.R4.Serialization.Tests.dll
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # not a PR
    
  - job:
    displayName: Tests Serialization R4B test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Serialization R4B test project
          projects: |
            **/publish/Hl7.Fhir.R4B.Serialization.Tests.dll
  - job:
    displayName: Tests Serialization R5 test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Serialization R5 test project
          projects: |
            **/publish/Hl7.Fhir.R5.Serialization.Tests.dll

  - job:
    displayName: Tests Specification STU3 test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Specification STU3 test project
          projects: '**/publish/Hl7.Fhir.STU3.Specification.Tests.dll' 

  - job:
    displayName: Tests Specification R4 test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Specification R4 test project
          projects: '**/publish/Hl7.Fhir.R4.Specification.Tests.dll' 

  - job:
    displayName: Tests Specification R4B test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Specification R4B test project
          projects: '**/publish/Hl7.Fhir.R4B.Specification.Tests.dll' 
  - job:
    displayName: Tests Specification R5 test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Specification R5 test project
          projects: '**/publish/Hl7.Fhir.R5.Specification.Tests.dll' 
  - job:
    displayName: Tests Core test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests Core test project
          projects: '**/publish/Hl7.Fhir.*.Core.Tests.dll'
  - job:
    displayName: Tests ElementModel test project
    steps:
      - checkout: none
      - template: templates/test-job-template.yml
        parameters:
          testRunTitle: Tests ElementModel test project
          projects: '**/publish/Hl7.Fhir.*.ElementModel.Tests.dll'

- stage: deploy_git
  displayName: Deploy to GitHub
  dependsOn: test
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) # not a PR
  jobs:
  - deployment: gitHub
    displayName: GitHub Packages
    environment: GitHub
    variables:
      GITHUB_PACKAGES_APIKEY: $(GitHubPushPackagesAPIKey)  # key is set in UI of Azure Devops
    strategy:
      runOnce:
        deploy:
            steps:
            - template: push-nuget-package.yml@templates  # Template reference
              parameters:
                artifact: NuGetPackages
                source: https://nuget.pkg.github.com/FirelyTeam/index.json
                apiKey: $(GITHUB_PACKAGES_APIKEY)    
                
- stage: deploy_nuget 
  displayName: Deploy to NuGet
  dependsOn:
    - deploy_git
    - build
  condition: and(succeeded(), eq(variables.isTagBranch, true)) 
  jobs:
  - deployment: nuget
    displayName: NuGet
    environment: NuGet
    strategy:
      runOnce:
        deploy:
            steps:
            - download: current
              artifact: NuGetPackages
              displayName: Download artifact NuGetPackages
            - task: NuGetCommand@2
              displayName: 'NuGet Push DSTU2 packages only'
              condition: and(succeeded(), endswith(variables['Build.SourceBranch'], '-dstu2')) 
              inputs:
                  command: push
                  packagesToPush: '$(Agent.BuildDirectory)/NuGetPackages/*DSTU2*.nupkg'
                  nuGetFeedType: external
                  publishFeedCredentials: NuGet
                  verbosityPush: normal    
                  includeSymbols: true
            
            - task: NuGetCommand@2
              displayName: 'NuGet Push STU3 packages only and common packages'
              condition: and(succeeded(), endswith(variables['Build.SourceBranch'], '-stu3')) 
              inputs:
                command: push
                packagesToPush: '$(Agent.BuildDirectory)/NuGetPackages/*.nupkg'
                nuGetFeedType: external
                publishFeedCredentials: NuGet
                verbosityPush: normal  
                includeSymbols: true  

            - task: NuGetCommand@2
              displayName: 'NuGet Push R4 packages only'
              condition: and(succeeded(), endswith(variables['Build.SourceBranch'], '-r4')) 
              inputs:
                command: push
                packagesToPush: '$(Agent.BuildDirectory)/NuGetPackages/*R4*.nupkg'
                nuGetFeedType: external
                publishFeedCredentials: NuGet
                verbosityPush: normal  
                includeSymbols: true  
            
            - task: NuGetCommand@2
              displayName: 'NuGet Push R4B packages only'
              condition: and(succeeded(), endswith(variables['Build.SourceBranch'], '-r4B')) 
              inputs:
                command: push
                packagesToPush: '$(Agent.BuildDirectory)/NuGetPackages/*R4B*.nupkg'
                nuGetFeedType: external
                publishFeedCredentials: NuGet
                verbosityPush: normal  
                includeSymbols: true  

            - task: NuGetCommand@2
              displayName: 'NuGet Push R5 packages only'
              condition: and(succeeded(), endswith(variables['Build.SourceBranch'], '-r5')) 
              inputs:
                command: push
                packagesToPush: '$(Agent.BuildDirectory)/NuGetPackages/*R5*.nupkg'
                nuGetFeedType: external
                publishFeedCredentials: NuGet
                verbosityPush: normal 
                includeSymbols: true  
            
  - deployment: relNotes
    displayName: Release Notes
    environment: NuGet
    variables:
      - name: curTag
        value: $[ stageDependencies.build.restoreAndBuild.outputs['tagnames.current_tag'] ]
      - name: prevTag
        value: $[ stageDependencies.build.restoreAndBuild.outputs['tagnames.previous_tag'] ]
      - name: releaseTitle
        value: $[ stageDependencies.build.restoreAndBuild.outputs['tagnames.release_title'] ]
    strategy:
      runOnce:
        deploy:
            steps:
            - download: none
            - task: GitHubRelease@1
              displayName: 'GitHub release notes (create)'  
              inputs:
                gitHubConnection: 'GitHub Fhir-net-api'
                repositoryName: '$(Build.Repository.Name)'
                action: 'create'
                target: '$(Build.SourceVersion)'
                tagSource: userSpecifiedTag
                tag: '$(curTag)'
                title: '$(releaseTitle)'
                isDraft: true
                changeLogCompareToRelease: lastNonDraftReleaseByTag
                changeLogCompareToReleaseTag: '$(prevTag)'
                changeLogType: issueBased
                changeLogLabels: '[{ "label" : "bug", "displayName" : "Bugfixes", "state" : "closed" },{ "label" : "enhancement", "displayName" : "New Functionality", "state" : "closed" }]'
    